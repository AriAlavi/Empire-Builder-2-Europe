//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Empire Builder 2 Doomed Europe
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "TriggerLibs/SwarmLib"
include "TriggerLibs/CampaignLib"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLbty_InitLib();
    libHots_InitLib();
    libCamp_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_sTARTING_YEAR = 2306;
const int gv_tIME_PER_YEAR = 120;
const int gv_dATA_TYPES = 11;
const int gv_nUMBER_STORED_DATA = 7;
const int gv_dATA_PER_GRAPH = 256;
const int gv_aLLOWED_CONCURRENT_ITEMS = 3;
const int gv_x_TICK_NUMBER = 8;
const int gv_y_TICK_NUMBER = 6;
const int gv_gRAPH_X_WIDTH = 5;
const int gv_gRAPH_Y_HEIGHT = 5;
const int gv_numberOfRegions = 191;
const int gv_numberOfCultureGroups = 22;
const int gv_russianForceLimit = 100;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
int gv_globalPopulation;
int gv_eUPopulation;
int gv_timeUI;
int gv_timeUIItem;
int gv_year;
int gv_month;
int gv_yearsOfData;
string[gv_dATA_PER_GRAPH + 1][3] gv_timeline;
int[8][13] gv_militaryPopulationMonthly;
int[gv_dATA_TYPES + 1][gv_dATA_PER_GRAPH + 1][9] gv_graphCollectedData;
int[8] gv_currentlySelectedData;
int[8] gv_currentSelectedDataType;
int[8][gv_aLLOWED_CONCURRENT_ITEMS + 1] gv_allSelectedData;
int[8][gv_aLLOWED_CONCURRENT_ITEMS + 1] gv_allSelectedDataTypes;
int[4] gv_graphGUI;
int[31] gv_graphSelection;
int[gv_x_TICK_NUMBER + 1] gv_graphXAxis;
int[gv_y_TICK_NUMBER + 1] gv_graphYAxis;
int[gv_dATA_PER_GRAPH + 1][gv_aLLOWED_CONCURRENT_ITEMS + 1] gv_graphItems;
int[8][2] gv_selectedView;
bool gv_graphInProgress;
int[gv_dATA_PER_GRAPH + 1][gv_aLLOWED_CONCURRENT_ITEMS + 1] gv_x_PASSED_IN_DATA_CreateGraphGivenData;
int[gv_dATA_PER_GRAPH + 1][gv_aLLOWED_CONCURRENT_ITEMS + 1] gv_y_PASSED_IN_DATA_CreateGraphGivenData;
string[gv_dATA_PER_GRAPH + 1][gv_aLLOWED_CONCURRENT_ITEMS + 1] gv_cOLOR_PASSED_IN_DATA;
text[gv_dATA_PER_GRAPH + 1][gv_aLLOWED_CONCURRENT_ITEMS + 1] gv_tOOLTIP_PASSED_IN_DATA;
int[gv_aLLOWED_CONCURRENT_ITEMS + 1] gv_lENGTH_CreateGraphGivenData;
int[gv_aLLOWED_CONCURRENT_ITEMS + 1] gv_sCALE_CreateGraphGivenData;
int[16][16][2] gv_peopleDead;
int[8] gv_openMenu;
bool[8] gv_showingMainUI;
int[2] gv_mainUI;
int[11] gv_mainDialogItemsUI;
int gv_previousMetal;
int gv_previousOil;
bool gv_nukesFiredAlready;
point[10][100] gv_nukeTargets;
bool[10][100] gv_nukeTargetOccupied;
bool[10] gv_deadmanshand;
int gv_globalDeadHand;
bool gv_recentNukeThreatToRussia;
int[10] gv_originalPlayerColor;
int[16] gv_govType;
int[16] gv_govPower;
string[16] gv_nations;
int[16] gv_natoinalTags;
region[gv_numberOfRegions + 1] gv_countRegions;
region[gv_numberOfCultureGroups + 1] gv_nationRegions;
int[gv_numberOfRegions + 1] gv_countyIDTag;
bool[gv_numberOfRegions + 1] gv_countyIDTagCreated;
int[gv_numberOfRegions + 1] gv_soverignty;
int[gv_numberOfRegions + 1] gv_provinceInNation;
int[16] gv_countyID;
int[16] gv_nationalID;
int[10] gv_colonies;
int gv_letscountwhenwestart;
unitgroup[10] gv_defensiveTransferOwnership;
bool[10] gv_conqueredPlayer;
int gv_conquerDialog;
int gv_reperations;
int[11] gv_reperationsDialogItem;
int gv_defeatedPlayer;
playergroup[11] gv_iamasubjectandthisismyui;
int gv_victoriousPlayer;
color[11] gv_colorIsImportant;
int[11] gv_subjugator;
bool[11] gv_subjugated;
playergroup[11] gv_subjugatedPG;
int[11] gv_conquerDialogItem;
int gv_pLAYALEAVESrandomelement;
unitgroup gv_rEDISTRIBUTETHEBUILDINGS;
playergroup gv_users;
int gv_whoSaskin;
int gv_noAlly;
int gv_yesAlly;
int gv_allianceBackGround;
int gv_callToArmsDialog;
int[3] gv_callToArms;
int gv_ceaseFireDialog;
int[4] gv_ceaseFire;
int[10] gv_embargoed;
int[10] gv_disarmed;
int[10][10] gv_reparations;
int gv_yesOrNoDialog;
int[4] gv_yesOrNoButtons;
bool[10] gv_sentPeaceOfferToConsider;
int gv_peaceConferenceUI;
int[13] gv_peaceConferenceButton;
int[13] gv_peaceConferenceCancelButton;
int gv_peaceConferenceSummary;
bool[10][201] gv_requestedAnnex;
int[10][10] gv_requestWarReps;
bool[10][10] gv_requestSubjugate;
bool[10][10] gv_requestChangeGovernment;
bool[10][10] gv_requestEmbargo;
bool[10][10] gv_requestDisarmament;
bool[10][10] gv_requestReleaseVassal;
bool[10][10] gv_requestFullAnnex;
int[10] gv_whomstGlobalDiplomcay;
int[10][11][6] gv_diplomacyQueue;
int gv_donator;
int gv_reciever;
int[3] gv_creditTransferItems;
int gv_creditTransfer;
bool gv_eUVoteCooldown;
playergroup gv_theEuroCrew;
int gv_eUDialog;
int[4] gv_eUDialogItems;
bool[10] gv_eUMember;
int[11] gv_theEUEvent;
int gv_mrPresident;
int gv_eUTarget;
int gv_yay;
int[10] gv_delegatedTo;
int[10] gv_iamVotingFor;
int gv_nextElectionUI;
int gv_yearsUntillVote;
int[10] gv_delegatedVotes;
int gv_presidentTime;
int gv_presidentalUI;
int[10] gv_eUMemberlist;
int[10] gv_presidentalVote;
int[10] gv_eUVoteslist;
int[6] gv_votingLawUI;
int[6] gv_electionLawUI;
int[6] gv_taxLawUI;
int[6] gv_redistributionLawUI;
int gv_eUScreen;
int[2] gv_openAdvancedEUUI;
int[2] gv_openAdvancedEUUIButton;
playergroup gv_rebelsEuroCrew;
playergroup gv_votingYes;
int[10] gv_votes;
int gv_yesVotes;
int gv_possibleVotes;
int gv_eUVoteInProgress;
int gv_votingSystem;
int gv_redistribution;
int gv_eUTax;
int gv_elections;
int[8] gv_yearPressed;
int[8] gv_independenceCost;
int[10] gv_ledgerNames;
int[10] gv_ledgerEU;
int[10] gv_ledgerGovernment;
int[10] gv_ledgerDiplopolicy;
int[10] gv_ledgerWarpolicy;
int[10] gv_ledgerGDP;
int[8] gv_ledgerPop;
int[15] gv_ledgerLosses;
int gv_hideShowLedger;
int[2] gv_hideShowLedgerDialog;
int[11] gv_governmentType;
int[11] gv_millitaryPolicy;
int[11] gv_diplomaticPolicy;
int gv_dialog;
int gv_diplomacyButton;
int[14] gv_ally;
int[14] gv_playerLabel;
int gv_diplomacyFullsize;
int[14] gv_war;
int[14] gv_neutral;
int gv_oK;
text gv_cID3;
playergroup gv_debugPlayers;
bool gv_reachedIncomeEnd;
int gv_brokenIncomeLine;
int gv_linesGotThrough;
bool gv_reachedCorporationEnd;
int gv_brokenLine;
int gv_sUCCsessivebreaks;
string gv_economicState;
int gv_economyHealth;
trigger[11] gv_events;
trigger[11] gv_megaevents;
int[10] gv_creditRatingValue;
int[11] gv_privateLoanUIDialogItems;
int gv_privateLoanUI;
int[11] gv_repayLoanDialogItems;
int gv_repayLoanUI;
int[10] gv_allowedSelfDebt;
int[10] gv_totalDebt;
fixed[10] gv_interestRate;
int[8][8] gv_nationalBankDebts;
int[8] gv_nationalBankCash;
fixed[8] gv_deinvestment;
fixed[8] gv_corporateTax;
fixed[8] gv_investment;
fixed[8] gv_loanRepayment;
fixed[8] gv_research;
fixed[8] gv_subsidies;
fixed[8] gv_resourceShare;
fixed[8] gv_metalImports;
int[16] gv_yearsSinceLastBankruptcy;
bool gv_ye;
int[4][129] gv_globalSupply;
int[4][129] gv_aggregatePrice;
int[8][4] gv_autoImports;
int[8][4] gv_autoImportMode;
int[8][4] gv_autoExports;
int[8][4] gv_autoExportsMode;
int[8] gv_buySellVariable;
int[8] gv_buySellPrice;
int[8] gv_buySellQuantity;
bool[8][8] gv_embargo;
int[8][8] gv_importTariff;
int[8][8] gv_exportTariff;
bool[8] gv_bannedForeignEquity;
bool[8] gv_automaticRetaliatoryTariffs;
bool[8] gv_seeDetailedInfo;
int gv_economyTabsMainDialog;
int[5] gv_economicTabsDialogItems;
int gv_tradeMainDialog;
int[47] gv_tradeDialogItems;
int gv_corporationMainDialog;
int gv_corporationMainsSideDialog;
int[35] gv_corporationDialogItems;
int[36] gv_corporationMainsSideDialogItems;
int gv_economicPolicyMainDialog;
int[16] gv_economicPolicyDialogItems;
int gv_economicInternalPolicyDialog;
int[17] gv_economicInternalPolicyDialogItems;
int gv_economicExternalPolicyDialog;
int[73] gv_economicExternalPolicyDialogItems;
int gv_economicDebtPolicy;
int[11] gv_economicDebtPolicyDialogItems;
int gv_manualTradeDialog;
int[4] gv_manualTradeDialogItems;
int[8] gv_foodStockpile;
int gv_foodPrice;
int[6] gv_metalMineCost;
int[6] gv_metalMineUpkeep;
int[6] gv_metalBoreholeCost;
int[6] gv_metalBoreholeUpkeep;
int[3] gv_oilWellCost;
int[3] gv_oilWellUpkeep;
int gv_corpTicksStage;
int gv_incomeTicksStage;
unitgroup gv_allResources;
unitgroup[8] gv_corpResources;
int[16] gv_fOOD_PURCHASED;
int[16] gv_lastYearBudget;
int[16][2] gv_cMilitary;
int[16][2] gv_cResearch;
int[16][2] gv_cInfrastructure;
int[16][2] gv_cExpansion;
int[16][4][2] gv_cImports;
int[16][2] gv_cSavings;
int[16][2] gv_cSelling;
int[16] gv_cInfrastructurePot;
int[16] gv_cExpansionPot;
int[16][4][2] gv_cImportsPot;
bool[8][8] gv_buyOut;
bool[8] gv_nationalizitions;
int[8] gv_selectedCorporation;
int[8][8] gv_stockOwned;
int[8][8] gv_stockTarget;
int[16][4] gv_cUnrealizedSupplyImports;
int[16][4] gv_aggregateResourcePrice;
string[16] gv_corpName;
string[16] gv_corpTicker;
int[16][4][13] gv_cExportIncome;
int[16][13] gv_cGrantsIncome;
int[16][13] gv_cTotalIncome;
int[16][13] gv_cUpkeepExpenses;
int[16][13] gv_cMilitaryUpkeepExpenses;
int[16][4][13] gv_cImportExpenses;
int[16][13] gv_cInterestExpenses;
int[16][13] gv_cTaxExpenses;
int[16][13] gv_cDividendExpenses;
int[16][13] gv_cTotalExpenses;
int[16][13] gv_cTotalRevenue;
int[16][4] gv_cSupply;
int[16][4] gv_cDemand;
int[16][4] gv_cLowestPrice;
int[16] gv_cCredits;
int[16] gv_cDebt;
int[16] gv_cAssetValue;
int[16][13] gv_cRDobsolete;
int[16][13] gv_cRevenue;
int[16] gv_cUpgradeLevels;
int[16] gv_stockPrice;
bool[16] gv_nationalized;
bool[16] gv_deadCorp;
int[16] gv_foodFromMarkert;
int[8] gv_yearsToBankruptcy;
int[16][13] gv_civilianIncome;
int[16][13] gv_lDIncome;
int[16][13] gv_mDIncome;
int[16][13] gv_hDIncome;
int[16][13] gv_vHDIncome;
int[16][13] gv_corporateIncome;
int[16][13] gv_exportIncome;
int[16][13] gv_investmentIncome;
int[16][13] gv_tariffIncome;
int[16][13] gv_deInvestmentIncome;
int[16][13] gv_subjectIncome;
int[16][13] gv_totalIncome;
int[16][13] gv_buildingExpenses;
int[16][13] gv_buildingFoodExpenses;
int[16][13] gv_buildingElectricityExpenses;
int[16][13] gv_buildingOtherExpenses;
int[16][13][4] gv_importExpenses;
int[16][13] gv_interestExpenses;
int[16][13] gv_repaymentExpenses;
int[16][13] gv_overlordExpenses;
int[16][13] gv_militaryExpenses;
int[16][13] gv_researchExpenses;
int[16][13] gv_subsidiesExpenses;
int[16][13] gv_investmentExpenses;
int[16][13] gv_totalExpenses;
int[16][13] gv_totalBalance;
int[16][13] gv_foodConsumption;
int[16][13] gv_foodIncome;
int[16][13] gv_electricityConsumption;
int[16][13] gv_electricityIncome;
int[16][13] gv_metalIncome;
int[16][13] gv_metalConsumption;
int[16][13] gv_oilConsumption;
int[16][13] gv_oilIncome;
int[11] gv_food;
int[11] gv_oil;
int[16] gv_foodDecayed;
int[8] gv_concurrentBankruptMonths;
int[8][4] gv_buildingTypesUrbanized;
int gv_fOOD_PRODUCTION_BASE;
int gv_fOOD_PRODUCTION_BAD_TERRAIN;
fixed[8] gv_urbanScore;
int[8][8] gv_cheapestFoodArrayPrice;
int[8][8] gv_cheapestFoodArrayPlayer;
string gv_sELL_RESOURCE_DEBUG_VARIABLE;
bool[16] gv_canAffordImports;
bool[16] gv_canSupplyExports;
int gv_eURedistributeFoodStockpile;
int gv_convoyRecursion;
unitgroup[16][5] gv_unsuppliedHomes;
unitgroup[16] gv_starvingHomes;
int[11] gv_population;
int[11] gv_supply;
int gv_playercount;
int[11] gv_techIncome;
int[11] gv_creditIncomeModifier;
int[11] gv_foodIncomeModifier;
int[11] gv_electricityIncomeModifier;
int[11] gv_oilIncomeModifier;
int[11] gv_taxUpgrade;
int[11] gv_metalUpgrade;
int[11] gv_techUpgrade;
int[11] gv_electricityUpgrade;
int[11] gv_metalIncomeModifier;
int[11] gv_techIncomeModifier;
int[11] gv_foodUpgrade;
int gv_dialolg;
int gv_endDialogue;
int[2] gv_endDialogueItems;
int[21] gv_dialolgItems;
fixed[11] gv_popGrowth;
int[16] gv_researchSpeed;
int[16] gv_centralization;
int[16] gv_centralizationUpgrade;
int gv_totalGDP;
int[16] gv_gDP;
fixed[16] gv_gDPPerCapita;
int[16] gv_gDPPercent;
unit[10] gv_capitals;
unitgroup[10] gv_regionalCapitals;
unitgroup[10] gv_highways;
bool[10] gv_showingCentralization;
int[10] gv_theTorturedDefaulted;
fixed[65] gv_storedCustomValues;
int[11] gv_coreLand;
int[11] gv_coreTerritoryCount;
int gv_researchesAvailable;
int[10][10] gv_distanceBetweenEmpires;
fixed[10][10] gv_statusBetweenEmpires;
int[10] gv_commitedResearchMonthly;
int[10] gv_netResearch;
int gv_completedResearch;
int gv_completedResearchQ;
int[10] gv_selectedIconResearch;
int[10] gv_grossResearchGlobal;
int[10][2] gv_researchQ;
int[10][2] gv_researchQRate;
string[81] gv_researchName;
int[81] gv_researchCost;
int[81] gv_researchTime;
int[81] gv_selectedResearch;
bool[10][81] gv_halfResearched;
int[10][81] gv_researchInvested;
bool[10][81] gv_additionalRequirementsMet;
int[10][81] gv_donatedTechRate;
bool[10][81] gv_isThisResearchCompleted;
int[10][81] gv_donatedTechTotal;
int gv_researchMenuSelected;
int[11] gv_researchMenuSelectedDialogItems;
int gv_researchMenuFrame;
int[5] gv_researchMenuFrameDialogItems;
int gv_governmentTechTree;
int[81][3] gv_techTreeDialogItems;
int gv_economyTechTree;
int gv_militaryTechTree;
int gv_specialTechTree;
int gv_closeButtonResearchMenu;
int gv_closeButtonResearchMenuDialogItem;
int gv_current;
int[31] gv_currentDialogItems;
int gv_researchFunding;
int[31] gv_researchFundingDialogItems;
int gv_russianTroopCount;
region gv_russianDomain;
region gv_russianFronter;
int gv_rProduction;
int gv_rProductionMultiplier;
int gv_rTechnology;
int gv_rTechnologyMultiplier;
unitgroup gv_possibleRussianSpawns;
int gv_russianProductionTargets;
int gv_accumulatedExpansionProduction;
int gv_russianDanger;
unitgroup gv_guerillaTargets;
int gv_guerillaProd;
string[8][3] gv_russianUnitTypes;
int[8] gv_spottedPlayerUnits;
int[8] gv_russianUnitProductionTargets;
int[8] gv_unitProductionDivison;
int gv_baseRussianSkyscraper;
unit[4] gv_russianCities;
bool[4] gv_russianCitiesAlive;
int[4] gv_baseRussianDefenses;
bool gv_russiansCapitulate;
int gv_initialGuardCount;
bool gv_newYorkAlive;
bool gv_americansCapitulate;
int gv_uSNukes;
unitgroup gv_uSNukeLocations;
unitgroup gv_carrierEscorts;
bool gv_kenedyAlive;
string[16] gv_resourceType;
point[11] gv_entrypoint;
int gv_percents;
int gv_capitalsAlive;
int gv_russianDifficulty;
int gv_rUNuclearProgress;
int gv_rUNukes;
unitgroup[2] gv_hOSTILES;
int[10][10] gv_bannerQueue;
int[10] gv_bannerFrame;
int[10][3] gv_bannerItems;
bool[10][41] gv_showItAgain;
bool gv_victoryHappened;
int[16] gv_buildingTechLevel;
int gv_victoryTicks;
int gv_victoryVote;
int[4] gv_victoryVoteItem;
int gv_arisAIDifficulty;
int gv_difficultyFromPopulation;
int gv_modifiedAIDifficulty;
int gv_victoryType;
playergroup gv_playerGroupNoob;
int[10] gv_individualVoting;
int[10] gv_victoryVoting;
int gv_voteDialogue;
int[8] gv_voteAI;
int gv_aIDifficulty;
int gv_aINo;
int gv_aIYes;

void InitGlobals () {
    int init_i;
    int init_j;

    gv_globalPopulation = 500;
    gv_eUPopulation = 500;
    gv_timeUI = c_invalidDialogId;
    gv_timeUIItem = c_invalidDialogControlId;
    gv_year = gv_sTARTING_YEAR;
    gv_month = 1;
    for (init_i = 0; init_i <= gv_dATA_PER_GRAPH; init_i += 1) {
        for (init_j = 0; init_j <= 2; init_j += 1) {
            gv_timeline[init_i][init_j] = "";
        }
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_graphGUI[init_i] = c_invalidDialogId;
    }
    for (init_i = 0; init_i <= 30; init_i += 1) {
        gv_graphSelection[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= gv_x_TICK_NUMBER; init_i += 1) {
        gv_graphXAxis[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= gv_y_TICK_NUMBER; init_i += 1) {
        gv_graphYAxis[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= gv_dATA_PER_GRAPH; init_i += 1) {
        for (init_j = 0; init_j <= gv_aLLOWED_CONCURRENT_ITEMS; init_j += 1) {
            gv_graphItems[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 7; init_i += 1) {
        for (init_j = 0; init_j <= 1; init_j += 1) {
            gv_selectedView[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= gv_dATA_PER_GRAPH; init_i += 1) {
        for (init_j = 0; init_j <= gv_aLLOWED_CONCURRENT_ITEMS; init_j += 1) {
            gv_cOLOR_PASSED_IN_DATA[init_i][init_j] = "yellow";
        }
    }
    for (init_i = 0; init_i <= 7; init_i += 1) {
        gv_showingMainUI[init_i] = true;
    }
    for (init_i = 0; init_i <= 1; init_i += 1) {
        gv_mainUI[init_i] = c_invalidDialogId;
    }
    for (init_i = 0; init_i <= 10; init_i += 1) {
        gv_mainDialogItemsUI[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 9; init_i += 1) {
        gv_originalPlayerColor[init_i] = 1;
    }
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_nations[init_i] = "";
    }
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_natoinalTags[init_i] = c_textTagNone;
    }
    for (init_i = 0; init_i <= gv_numberOfRegions; init_i += 1) {
        gv_countyIDTag[init_i] = c_textTagNone;
    }
    for (init_i = 0; init_i <= 9; init_i += 1) {
        gv_defensiveTransferOwnership[init_i] = UnitGroupEmpty();
    }
    gv_conquerDialog = c_invalidDialogId;
    gv_reperations = c_invalidDialogId;
    for (init_i = 0; init_i <= 10; init_i += 1) {
        gv_reperationsDialogItem[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 10; init_i += 1) {
        gv_iamasubjectandthisismyui[init_i] = PlayerGroupEmpty();
    }
    for (init_i = 0; init_i <= 10; init_i += 1) {
        gv_colorIsImportant[init_i] = Color(0,0,0);
    }
    for (init_i = 0; init_i <= 10; init_i += 1) {
        gv_subjugatedPG[init_i] = PlayerGroupEmpty();
    }
    for (init_i = 0; init_i <= 10; init_i += 1) {
        gv_conquerDialogItem[init_i] = c_invalidDialogControlId;
    }
    gv_pLAYALEAVESrandomelement = 40;
    gv_rEDISTRIBUTETHEBUILDINGS = UnitGroupEmpty();
    gv_users = PlayerGroupEmpty();
    gv_whoSaskin = c_invalidDialogControlId;
    gv_noAlly = c_invalidDialogControlId;
    gv_yesAlly = c_invalidDialogControlId;
    gv_allianceBackGround = c_invalidDialogId;
    gv_callToArmsDialog = c_invalidDialogId;
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_callToArms[init_i] = c_invalidDialogControlId;
    }
    gv_ceaseFireDialog = c_invalidDialogId;
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_ceaseFire[init_i] = c_invalidDialogControlId;
    }
    gv_yesOrNoDialog = c_invalidDialogId;
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_yesOrNoButtons[init_i] = c_invalidDialogControlId;
    }
    gv_peaceConferenceUI = c_invalidDialogId;
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_peaceConferenceButton[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_peaceConferenceCancelButton[init_i] = c_invalidDialogControlId;
    }
    gv_peaceConferenceSummary = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_creditTransferItems[init_i] = c_invalidDialogControlId;
    }
    gv_creditTransfer = c_invalidDialogId;
    gv_theEuroCrew = PlayerGroupEmpty();
    gv_eUDialog = c_invalidDialogId;
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_eUDialogItems[init_i] = c_invalidDialogControlId;
    }
    gv_nextElectionUI = c_invalidDialogControlId;
    gv_yearsUntillVote = 1;
    gv_presidentTime = c_invalidDialogControlId;
    gv_presidentalUI = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 9; init_i += 1) {
        gv_eUMemberlist[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 9; init_i += 1) {
        gv_presidentalVote[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 9; init_i += 1) {
        gv_eUVoteslist[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 5; init_i += 1) {
        gv_votingLawUI[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 5; init_i += 1) {
        gv_electionLawUI[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 5; init_i += 1) {
        gv_taxLawUI[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 5; init_i += 1) {
        gv_redistributionLawUI[init_i] = c_invalidDialogControlId;
    }
    gv_eUScreen = c_invalidDialogId;
    for (init_i = 0; init_i <= 1; init_i += 1) {
        gv_openAdvancedEUUI[init_i] = c_invalidDialogId;
    }
    for (init_i = 0; init_i <= 1; init_i += 1) {
        gv_openAdvancedEUUIButton[init_i] = c_invalidDialogControlId;
    }
    gv_rebelsEuroCrew = PlayerGroupEmpty();
    gv_votingYes = PlayerGroupEmpty();
    gv_votingSystem = 2;
    gv_elections = 2;
    for (init_i = 0; init_i <= 9; init_i += 1) {
        gv_ledgerNames[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 9; init_i += 1) {
        gv_ledgerEU[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 9; init_i += 1) {
        gv_ledgerGovernment[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 9; init_i += 1) {
        gv_ledgerDiplopolicy[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 9; init_i += 1) {
        gv_ledgerWarpolicy[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 9; init_i += 1) {
        gv_ledgerGDP[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 7; init_i += 1) {
        gv_ledgerPop[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 14; init_i += 1) {
        gv_ledgerLosses[init_i] = c_invalidDialogControlId;
    }
    gv_hideShowLedger = c_invalidDialogId;
    for (init_i = 0; init_i <= 1; init_i += 1) {
        gv_hideShowLedgerDialog[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 10; init_i += 1) {
        gv_governmentType[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 10; init_i += 1) {
        gv_millitaryPolicy[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 10; init_i += 1) {
        gv_diplomaticPolicy[init_i] = c_invalidDialogControlId;
    }
    gv_dialog = c_invalidDialogId;
    gv_diplomacyButton = c_invalidDialogId;
    for (init_i = 0; init_i <= 13; init_i += 1) {
        gv_ally[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 13; init_i += 1) {
        gv_playerLabel[init_i] = c_invalidDialogControlId;
    }
    gv_diplomacyFullsize = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 13; init_i += 1) {
        gv_war[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 13; init_i += 1) {
        gv_neutral[init_i] = c_invalidDialogControlId;
    }
    gv_oK = c_invalidDialogControlId;
    gv_debugPlayers = PlayerGroupEmpty();
    gv_economicState = "";
    gv_economyHealth = 600;
    for (init_i = 0; init_i <= 10; init_i += 1) {
        gv_privateLoanUIDialogItems[init_i] = c_invalidDialogControlId;
    }
    gv_privateLoanUI = c_invalidDialogId;
    for (init_i = 0; init_i <= 10; init_i += 1) {
        gv_repayLoanDialogItems[init_i] = c_invalidDialogControlId;
    }
    gv_repayLoanUI = c_invalidDialogId;
    for (init_i = 0; init_i <= 7; init_i += 1) {
        gv_nationalBankCash[init_i] = 100;
    }
    gv_economyTabsMainDialog = c_invalidDialogId;
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_economicTabsDialogItems[init_i] = c_invalidDialogControlId;
    }
    gv_tradeMainDialog = c_invalidDialogId;
    for (init_i = 0; init_i <= 46; init_i += 1) {
        gv_tradeDialogItems[init_i] = c_invalidDialogControlId;
    }
    gv_corporationMainDialog = c_invalidDialogId;
    gv_corporationMainsSideDialog = c_invalidDialogId;
    for (init_i = 0; init_i <= 34; init_i += 1) {
        gv_corporationDialogItems[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 35; init_i += 1) {
        gv_corporationMainsSideDialogItems[init_i] = c_invalidDialogControlId;
    }
    gv_economicPolicyMainDialog = c_invalidDialogId;
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_economicPolicyDialogItems[init_i] = c_invalidDialogControlId;
    }
    gv_economicInternalPolicyDialog = c_invalidDialogId;
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_economicInternalPolicyDialogItems[init_i] = c_invalidDialogControlId;
    }
    gv_economicExternalPolicyDialog = c_invalidDialogId;
    for (init_i = 0; init_i <= 72; init_i += 1) {
        gv_economicExternalPolicyDialogItems[init_i] = c_invalidDialogControlId;
    }
    gv_economicDebtPolicy = c_invalidDialogId;
    for (init_i = 0; init_i <= 10; init_i += 1) {
        gv_economicDebtPolicyDialogItems[init_i] = c_invalidDialogControlId;
    }
    gv_manualTradeDialog = c_invalidDialogId;
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_manualTradeDialogItems[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 7; init_i += 1) {
        gv_foodStockpile[init_i] = 10;
    }
    gv_foodPrice = 1;
    gv_allResources = UnitGroupEmpty();
    for (init_i = 0; init_i <= 7; init_i += 1) {
        gv_corpResources[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= 7; init_i += 1) {
        gv_selectedCorporation[init_i] = 1;
    }
    for (init_i = 0; init_i <= 15; init_i += 1) {
        for (init_j = 0; init_j <= 3; init_j += 1) {
            gv_aggregateResourcePrice[init_i][init_j] = 1;
        }
    }
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_corpName[init_i] = "N";
    }
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_corpTicker[init_i] = "N";
    }
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_cCredits[init_i] = 40000;
    }
    for (init_i = 0; init_i <= 10; init_i += 1) {
        gv_food[init_i] = 25;
    }
    for (init_i = 0; init_i <= 10; init_i += 1) {
        gv_oil[init_i] = 25;
    }
    gv_fOOD_PRODUCTION_BASE = 60;
    gv_fOOD_PRODUCTION_BAD_TERRAIN = 45;
    gv_sELL_RESOURCE_DEBUG_VARIABLE = "";
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_canAffordImports[init_i] = true;
    }
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_canSupplyExports[init_i] = true;
    }
    for (init_i = 0; init_i <= 15; init_i += 1) {
        for (init_j = 0; init_j <= 4; init_j += 1) {
            gv_unsuppliedHomes[init_i][init_j] = UnitGroupEmpty();
        }
    }
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_starvingHomes[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= 10; init_i += 1) {
        gv_creditIncomeModifier[init_i] = 300;
    }
    for (init_i = 0; init_i <= 10; init_i += 1) {
        gv_foodIncomeModifier[init_i] = 100;
    }
    for (init_i = 0; init_i <= 10; init_i += 1) {
        gv_electricityIncomeModifier[init_i] = 100;
    }
    for (init_i = 0; init_i <= 10; init_i += 1) {
        gv_oilIncomeModifier[init_i] = 100;
    }
    for (init_i = 0; init_i <= 10; init_i += 1) {
        gv_metalIncomeModifier[init_i] = 100;
    }
    for (init_i = 0; init_i <= 10; init_i += 1) {
        gv_techIncomeModifier[init_i] = 100;
    }
    gv_dialolg = c_invalidDialogId;
    gv_endDialogue = c_invalidDialogId;
    for (init_i = 0; init_i <= 1; init_i += 1) {
        gv_endDialogueItems[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 20; init_i += 1) {
        gv_dialolgItems[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 10; init_i += 1) {
        gv_popGrowth[init_i] = 1.03;
    }
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_centralization[init_i] = 100;
    }
    for (init_i = 0; init_i <= 9; init_i += 1) {
        gv_regionalCapitals[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= 9; init_i += 1) {
        gv_highways[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= 80; init_i += 1) {
        gv_researchName[init_i] = "";
    }
    gv_researchMenuSelected = c_invalidDialogId;
    for (init_i = 0; init_i <= 10; init_i += 1) {
        gv_researchMenuSelectedDialogItems[init_i] = c_invalidDialogControlId;
    }
    gv_researchMenuFrame = c_invalidDialogId;
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_researchMenuFrameDialogItems[init_i] = c_invalidDialogControlId;
    }
    gv_governmentTechTree = c_invalidDialogId;
    for (init_i = 0; init_i <= 80; init_i += 1) {
        for (init_j = 0; init_j <= 2; init_j += 1) {
            gv_techTreeDialogItems[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    gv_economyTechTree = c_invalidDialogId;
    gv_militaryTechTree = c_invalidDialogId;
    gv_specialTechTree = c_invalidDialogId;
    gv_closeButtonResearchMenu = c_invalidDialogId;
    gv_closeButtonResearchMenuDialogItem = c_invalidDialogControlId;
    gv_current = c_invalidDialogId;
    for (init_i = 0; init_i <= 30; init_i += 1) {
        gv_currentDialogItems[init_i] = c_invalidDialogControlId;
    }
    gv_researchFunding = c_invalidDialogId;
    for (init_i = 0; init_i <= 30; init_i += 1) {
        gv_researchFundingDialogItems[init_i] = c_invalidDialogControlId;
    }
    gv_russianDomain = RegionFromId(196);
    gv_possibleRussianSpawns = UnitGroupEmpty();
    gv_guerillaTargets = UnitGroupEmpty();
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_russianCitiesAlive[init_i] = true;
    }
    gv_newYorkAlive = true;
    gv_uSNukeLocations = UnitGroupEmpty();
    gv_carrierEscorts = UnitGroupEmpty();
    gv_kenedyAlive = true;
    gv_percents = RandomInt(0, 100);
    gv_rUNuclearProgress = -1;
    for (init_i = 0; init_i <= 1; init_i += 1) {
        gv_hOSTILES[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= 9; init_i += 1) {
        gv_bannerFrame[init_i] = c_invalidDialogId;
    }
    for (init_i = 0; init_i <= 9; init_i += 1) {
        for (init_j = 0; init_j <= 2; init_j += 1) {
            gv_bannerItems[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 9; init_i += 1) {
        for (init_j = 0; init_j <= 40; init_j += 1) {
            gv_showItAgain[init_i][init_j] = true;
        }
    }
    gv_victoryVote = c_invalidDialogId;
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_victoryVoteItem[init_i] = c_invalidDialogControlId;
    }
    gv_playerGroupNoob = PlayerGroupEmpty();
    gv_voteDialogue = c_invalidDialogId;
    for (init_i = 0; init_i <= 7; init_i += 1) {
        gv_voteAI[init_i] = c_invalidDialogControlId;
    }
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
string gf_GetMonth (int lp_month);
void gf_DataLinePushBack ();
void gf_CollectPopulationYearly (int lp_dataLine);
void gf_CollectTotalCasualtiesYearly (int lp_dataLine);
void gf_CollectGDPYearly (int lp_dataLine);
void gf_CollectGDPCapitYearly (int lp_dataLine);
void gf_CollectCreditsYearly (int lp_dataLine);
void gf_CollectDebtYearly (int lp_dataLine);
void gf_CollectCorporationValueYearly (int lp_dataLine);
void gf_CollectTechnologyYearly (int lp_dataLine);
void gf_CollectFoodYearly (int lp_dataLine);
void gf_CollectMetalYearly (int lp_dataLine);
void gf_CollectOilYearly (int lp_dataLine);
void gf_SetTimeline (int lp_index, string lp_text);
text gf_GetGraphDataFromVariable (int lp_givenData);
text gf_GetGraphDataTypeFromVariable (int lp_givenDataType, int lp_givenData);
text gf_GetGraphKeyStringFromVariables (int lp_givenDataType, int lp_givenData);
void gf_SetCurrentSelectedData (int lp_player);
void gf_SetCurrentSelectedDataType (int lp_player);
void gf_AddDataMovment (int lp_player);
void gf_RefreshKey (int lp_player);
void gf_Grapher (int lp_player);
string gf_GetColor (int lp_incrementor);
void gf_CreateGraphGivenData (int lp_player);
void gf_GraphGivenDatapoint (int lp_forPlayer, int lp_dialogItem, int lp_givenXValue, int lp_absoluteMinXValue, int lp_xMaxMinDifference, int lp_givenYValue, int lp_absoluteMinYValue, int lp_yMaxMinDifference, string lp_color, text lp_specialTooltip);
void gf_SetGraphAxis (int lp_xMin, int lp_xMinMaxRange, int lp_yMin, int lp_yMinMaxRange, int lp_forPlayer);
int gf_MakeDivisibleBy (int lp_initial, int lp_divisibleBy);
int gf_MakeDivisibleByGoNegative (int lp_initial, int lp_divisibleBy);
int gf_GetTotalPeopleDead (int lp_player, int lp_type);
int gf_GetTotalPeopleKilled (int lp_player);
text gf_GetTotalPeopleDeadToolTip (int lp_player, int lp_type);
void gf_OpenCloseGraphs (int lp_player, bool lp_open);
void gf_OpenCloseEconomy (int lp_player, bool lp_open);
void gf_OpenCloseEU (int lp_player, bool lp_open);
void gf_OpenCloseResearchMenu (int lp_player, bool lp_open);
void gf_GivePlauge ();
point gf_AINewBuilding (unitgroup lp_groundUnits);
void gf_NukeFiredAlready ();
void gf_CreateAsh (point lp_detonatePoint, int lp_howManySeconds);
void gf_ThreathenRussia (point lp_impactPoint);
void gf_ChanceBeginNuclearProgram ();
void gf_ResetModifiers (int lp_player);
text gf_NationOfPlayer (int lp_player);
string gf_NationOfPlayerString (int lp_player);
string gf_GetCountyName (int lp_countyID);
int gf_GetCountyPopulation (int lp_county);
int gf_GetCountyPopulationProportion (int lp_county);
int gf_GetCountySoverignty (int lp_countyID);
int gf_GetCountySoverigntyPointCount (int lp_countyID, int lp_player);
int gf_GetCountyID (unit lp_capitalCityBuilding);
int gf_GetCountyIDByPoint (point lp_point);
int gf_GetCultureGroup (int lp_province);
string gf_GetCultureGroupNames (int lp_player);
string gf_GetCultureGroupNamesFromPoint (point lp_region);
string gf_GetPersonNameFromCultureGroup (int lp_player);
string gf_GetNation (int lp_cultureGroupID, int lp_player);
int gf_GetGovernmentType (int lp_player);
bool gf_CheckForNationByID (int lp_iD, int lp_player);
string gf_GetNationalFlag (string lp_nation, int lp_player);
void gf_Autobuild (string lp_unitType, unit lp_pickedSubstation);
void gf_ParlimentConquered (unit lp_parliment, int lp_attacker);
void gf_BuildingConquerCalculate (unit lp_attackingUnit, unit lp_building);
void gf_BuildingConquer (unit lp_attackingUnit, unit lp_building);
void gf_ReturnTerritory (int lp_attackingPlayer, unit lp_unit);
void gf_OccupyTerritory (unit lp_unit);
void gf_SubjugatePlayer (int lp_subjugatingTheEnemy, int lp_beingSubjugated);
void gf_DeSubjugatePlayer (int lp_freePlayer);
void gf_FullSurrender (int lp_surrenderingPlayer, int lp_enforcingPlayer);
void gf_RemoveAllCores (int lp_player);
void gf_SuccessionDecide (unit lp_unit, int lp_leftPlayer);
void gf_AnnexProvincesFromPlayer (int lp_takingPlayer, int lp_givingPlayer);
void gf_EnforcePeaceTreaty (int lp_takingPlayer, int lp_givingPlayer, bool lp_readOut);
unit gf_FindNeutralCapitol (int lp_player1, int lp_player2);
text gf_GetTotalPeaceDealSend (int lp_player);
string gf_GetAnnexText (int lp_player);
string gf_GetSubjectText (int lp_player);
string gf_GetReparationsText (int lp_player);
string gf_GetEmbargoText (int lp_player);
string gf_GetDisarmamentText (int lp_player);
string gf_GetReleaseVassalText (int lp_player);
string gf_GetFullAnnexText (int lp_player);
void gf_ReturnOccupiedTerritory (int lp_player);
void gf_ClearPeaceDeal (int lp_player);
bool gf_AnnexInTreaty (int lp_player);
bool gf_FullAnnexInTreaty (int lp_player);
void gf_SwitchPeaceTreatyRoles (int lp_givingPeaceDealCurrently, int lp_recivingPeaceDealCurrently);
void gf_RemoveDiplomacyBetweenPlayers (int lp_player1, int lp_player2);
void gf_RemoveDiplomacyBetweenPlayer (int lp_player1, int lp_player2);
void gf_RemoveAllianceOffers (int lp_player1, int lp_player2);
void gf_RemoveCeasefireRequests (int lp_player1, int lp_player2);
void gf_RemovePeaceDrafts (int lp_player1, int lp_player2);
void gf_RemovePeaceConferences (int lp_player1, int lp_player2);
bool gf_CanNeutral (int lp_offensivePlayer, int lp_defensivePlayer);
bool gf_CanAlly (int lp_offensivePlayer, int lp_defensivePlayer);
bool gf_CanCeaseFire (int lp_offensivePlayer, int lp_defensivePlayer);
void gf_GetWarType (int lp_offensivePlayer, int lp_defensivePlayer);
void gf_EUDeclareWar (int lp_callingWar, int lp_warAgainst);
void gf_WarExecute (int lp_warType, int lp_offensivePlayer, int lp_defensivePlayer);
void gf_WarDeclare (int lp_offensivePlayer, int lp_defensivePlayer);
void gf_CeaseFireDeclared (int lp_player1, int lp_player2);
void gf_CallToArmsAddToQueueStep1 (int lp_guyWhomstAlliesWeCall, int lp_calledAgainst);
void gf_AddToDiplomacyQueue (int lp_doingTargetting, int lp_playerFor, int lp_typeOfCall);
void gf_BreakdownCeaseFireBetweenPlayers (int lp_player1, int lp_player2);
void gf_ResetPeaceDealUI (int lp_player);
void gf_ReadDiplomaticOffers ();
void gf_IfNoResponseOr0ThenDeclined ();
void gf_HideDiplomaticUIs ();
void gf_ShiftDiplomaticQueueDown ();
void gf_ReadClear ();
void gf_SubjectRelations (int lp_subject);
void gf_ResetWarPolicy (int lp_player);
string gf_GetEmperorTitle (int lp_player);
unit gf_FindCheapestResource (int lp_demandingPlayer, int lp_resourceType, point lp_demandingLocation, int lp_quantity);
int gf_FindMetalBuyingPriceAverage (int lp_demandingPlayer, point lp_demandingLocation);
unit gf_FindMostExpensiveResourceBuyingPrice (int lp_demandingPlayer, int lp_resourceType, point lp_demandingLocation);
bool gf_TakeLoan (int lp_player, int lp_ammountRequested);
bool gf_TakeLoanRecursion (int lp_player, int lp_ammountRequested, int lp_stage);
void gf_RepayLoans (int lp_player, int lp_amount);
int gf_GetTotalDebt (int lp_player);
int gf_GetAllowedDebt (int lp_player);
int gf_TakeLoanSingleBank (int lp_ammount, int lp_playerTaking, int lp_playerBank);
int gf_AllowedDebtSingleBank (int lp_playerTaking, int lp_playerBank);
int gf_GetTotalBankValue (int lp_bank);
void gf_ResetBuySell (int lp_player);
void gf_PushGlobalTrackingDown ();
void gf_FindGlobalTrackers ();
void gf_UpdateMainTradeScreen ();
void gf_UpdateExternalTradePolicies ();
void gf_UpdateTradePolicyUI ();
void gf_UpdateInternalPolicy ();
void gf_RotMarketFoodStockpile ();
void gf_UpdateCheapestFoodArray ();
int gf_getFoodPricePerThousand (int lp_purchasingPlayer, int lp_sellingPlayer);
int gf_GetUnitCustomValue (unit lp_unit, int lp_customValue);
void gf_SetUnitCustomValue (unit lp_unit, int lp_customValue, int lp_setValue);
void gf_ModifyUnitCustomValue (unit lp_unit, int lp_customValue, int lp_modifyValue);
void gf_UpdateResourceUnitGroup ();
void gf_SetPricesGetSuppliesGetMeanGDPRotFood (int lp_resourceType);
void gf_RotFood (unit lp_headquarter);
void gf_RefreshCorpUI (int lp_player);
void gf_ResourceCollection ();
void gf_MeetPlayerDemandandCorpExports ();
int gf_GetPlayerFoodDemand (int lp_player);
void gf_MeetCivilianMetalOilDemand ();
void gf_FinalizeVariablesSetDividendsPayDividendsGetBalanceTransfercostsIfNationalizedInterestMilitaryExpense ();
void gf_CCalculateAssetValue ();
void gf_CSetStockPricesPlayerStockTargets ();
void gf_PushDownCVariables (bool lp_start);
void gf_GetMeanGDPofDemanders (unit lp_unit);
void gf_AggregatePrice ();
void gf_CreateCorporation (int lp_player);
void gf_HeadquartersFortheHeadquarterless ();
void gf_IntraCorporationTrading (int lp_corp);
void gf_IntraCorporationTradingpt2 (unitgroup lp_resources);
void gf_InterCorporationTrading (int lp_corp);
void gf_CorporationAIBudgetAllocation ();
void gf_CorporationYearlyReport (int lp_corp, unitgroup lp_coolAndGoodResources);
void gf_SearchForUpgradeInfrastructure (int lp_corp);
void gf_PayOffDebts (int lp_corp);
void gf_RealizeImports ();
void gf_NoResourceTooMuchSupply ();
void gf_SellOffCrisis (int lp_corp);
void gf_SellOffGoodDeal (int lp_corp);
fixed gf_ValueMineInThousands (unit lp_mine, int lp_corp);
bool gf_CorpSpendMoney (int lp_corp, int lp_spending);
void gf_CCreateArmyYearly (int lp_corp, int lp_budget);
void gf_CCommandArmyYearly (int lp_corp);
void gf_CResearchYearly (int lp_corp, int lp_budget);
int gf_GetResourceUpgradeCost (unit lp_resource);
int gf_GetResourceUpgradeValue (unit lp_resource);
void gf_CorpUpgradeResource (unit lp_resource);
void gf_ExpansionBleed (int lp_corp);
void gf_SendExpedition (int lp_corp);
unit gf_GetBestExpansion (int lp_corp);
int gf_GetExpansionCost (int lp_corp, unit lp_resource);
void gf_FreeFoodToFixBug ();
void gf_CheckForBuyOutsorNationalizings ();
point gf_FindNewHeadquarters (int lp_player);
string gf_CorporationNoun (int lp_player);
string gf_ResourceNoun (int lp_player);
bool gf_CTakeLoan (int lp_corp, int lp_ammount);
void gf_CBankrupt (int lp_corp);
void gf_KillCorp (int lp_corp);
int gf_CollectTariffs (int lp_exporter, int lp_importer, int lp_price, int lp_quantity);
void gf_CollectTariffSell (int lp_exporter, int lp_importer, int lp_price, int lp_quantity);
int gf_CalculateCostWithTariffs (int lp_exporter, int lp_importer, int lp_price);
int gf_CalculateCostWithTariffsCountingAsLoss (int lp_exporter, int lp_importer, int lp_price);
int gf_CalculateTariffsSellResources (int lp_exporter, int lp_importer, int lp_price);
void gf_RefreshResourceActualDemand (unit lp_resource, bool lp_phaseOutCivilianDemand);
void gf_WipeResourceAdditionalDemand (unit lp_resource);
int gf_GetAggregateCivilianDemand (unit lp_resource);
void gf_WipeUnitCustomValues (unit lp_unit, int lp_startRange, int lp_endRange);
void gf_NoNegativeCustomValues (unit lp_unit, int lp_startRange, int lp_endRange);
int gf_GetResourceType (unit lp_resource);
void gf_SetLocalResourcePrice (unit lp_resource);
fixed gf_GetEquilibriumPrice (int lp_demand, int lp_quantitySupplied, fixed lp_gDPCapita, int lp_como);
int gf_GetEquilibriumQuantity (int lp_demand, int lp_quantitySupplied, fixed lp_gDPCapita, int lp_como);
void gf_PushDownVariables (int lp_player, bool lp_start);
void gf_EUTaxSubjectTax ();
void gf_SubjectIncomeGibReparations ();
void gf_GetIncomeComputeCivilianIncomeDeInvestment ();
void gf_GetCivilianIncomeUpgradeCivilianExpense ();
void gf_UpgradeHome (unit lp_upgradeUnit);
void gf_ApplyCreditModifier ();
void gf_GetMilitaryCompleteUpkeep ();
void gf_GetElectricityBalanceComputePunish ();
void gf_FoodStuff ();
bool gf_HasBadFarmingTerrain (unit lp_givenUnit);
void gf_GetCivilianDemand ();
void gf_GetResearchSpeedUpkeep ();
void gf_RedistributeEUFood ();
void gf_GetMostExpensesGibReparations ();
void gf_GetSliderExpenses ();
int gf_InvestmentSpending (int lp_player, int lp_budget);
int gf_DeInvestmentSpending (int lp_player, int lp_budget);
void gf_GetBuildingExpenses ();
void gf_GetBalanceAndBankrupt ();
void gf_PlayerBankrupt (int lp_player);
void gf_FinalizeResourceValuesEUFoodRedistribution ();
void gf_FoodConsumptionStarvationPopulationCountNoOilMaxSupplyFoodDecay ();
void gf_CalculateGDPPerCapitaEconomyHealthEffectCapitolHealthAutofundCorpNationalBank ();
void gf_SetAllowedDebtCreditRating ();
void gf_UpdateUIGetMonthlyAveragesLedgerFigures ();
void gf_Erase0ArrayValues ();
text gf_MakeUIPresentable (int lp_integer);
string gf_MakeUIPresentableString (int lp_integer);
void gf_BuyResources (int lp_player, int lp_quantity, int lp_maxPerUnit, int lp_como, bool lp_automaticOrder);
void gf_SellResources (int lp_player, int lp_quantity, int lp_minPerUnit, int lp_como, bool lp_automaticOrder, bool lp_displayItems);
int gf_GetFuelCostsMonetary (int lp_player, point lp_start, point lp_end, bool lp_execute);
int gf_GetFuelCostsOil (int lp_player, point lp_start, point lp_end);
void gf_CreateConvoy (point lp_location, int lp_owner, int lp_como, int lp_inventory, int lp_sender, int lp_destination);
void gf_IntraCorpConvoy (point lp_startingMine, point lp_endingMine, int lp_owner, int lp_como, int lp_inventory);
unit gf_GetCivilianDemandingFood (int lp_owner);
unit gf_GetCivilianDemandingResources (int lp_owner);
unit gf_GetCivilianDemandingRecursion (int lp_player, int lp_resource, bool lp_first);
point gf_GetCapitolLocation (int lp_player);
point gf_GetCorporateHeadquartersLocationMineOil (int lp_player, int lp_como, point lp_origin);
unit gf_GetCorporateHeadquartersLocationMineOilUnit (int lp_player, int lp_como, point lp_origin);
point gf_GetEULocation ();
void gf_UpdateCapitals ();
void gf_UpdateRegionalCapitals ();
void gf_UpdateHighways ();
void gf_GetUnitCentralization (unit lp_unit, unit lp_capitolGroup, unitgroup lp_colonyGroup, unitgroup lp_highwayGroup);
fixed gf_GetDistanceOfClosestUnit (unit lp_unit, unitgroup lp_unitGroup);
bool gf_CloseToOtherCapitol (unit lp_givenCapitol);
bool gf_NotEnoughSpace (unit lp_givenCapitol);
void gf_UndoCapitol (unit lp_capitolUnit);
void gf_HighwayAdminstration (int lp_player);
void gf_TransferCustomValuesTake (unit lp_transferingUnit);
void gf_TransferCustomValuesGive (unit lp_transferingUnit);
void gf_TransferCores (unit lp_unit, int lp_coreCount0, int lp_coreCount1, int lp_coreCount2, int lp_coreCount3, int lp_coreCount4, int lp_coreCount5, int lp_coreCount6, int lp_coreCount7, int lp_coreCount8, int lp_coreCount9, int lp_coreCount10);
int gf_GetCoreCount (unit lp_unit, int lp_player);
void gf_TransferCoresFromGlobal (unit lp_unit);
void gf_SetGlobalCoreCount (unit lp_unit);
unit gf_GetRussianNukeLauncher ();
void gf_DoTheNuke ();
void gf_RUNuke ();
void gf_RUNuclearDevelopment ();
void gf_RussianRazeRebel (unit lp_city);
void gf_UpdateRussianDomainFrontier ();
void gf_RussianMultiplierUpdate ();
void gf_RussianResourceCalculate ();
void gf_RussiaProductionDesignation ();
void gf_RUForceLimit ();
int gf_CreateUnits (int lp_production);
void gf_UpdatePossibleRussianSpawns ();
int gf_RussianExpansionsExpansionDefenseRussianNukes (int lp_production);
bool gf_CreateExpansion ();
string gf_GetNewExpansionType ();
point gf_GetNewBaseLocation ();
void gf_RussiaUnbunker ();
void gf_RussianSpotPlayerUnitsGetDanger ();
void gf_RussianUnitDivisonTarget ();
void gf_DecayRussianSpotandDanger ();
void gf_UnitTypeUpdate ();
int gf_GetRussianDefensesAroundBase (unit lp_base);
void gf_RussianCapiutlate ();
int gf_RussianSkyscraperShortage ();
int gf_RussianDefenseShortage ();
void gf_AmericansCapitulate ();
int gf_CapitolSafety ();
int gf_GetNumberOfInvasions ();
void gf_SendInvasion ();
void gf_RespawnAmericans ();
point gf_GetInvasionExpansionLocation ();
void gf_SafeCapitolScript ();
void gf_UnsafeCapitolScript ();
void gf_LostCapitolScript ();
void gf_RemoveAmericanGuerilla ();
void gf_RaiseGuerilla ();
bool gf_AmericanSurrender ();
void gf_DevelopNukes ();
void gf_USDoTheNuke ();
void gf_USNuke ();
void gf_CreateEscorts ();
void gf_A110Waves ();
void gf_AttackNearHostile (unit lp_unit);
void gf_UpgradeUnits ();
void gf_CreateBanner (int lp_player, int lp_bannerID);
void gf_RemoveBanner (int lp_player, int lp_bannerID);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_MeleeInitialization;
trigger gt_MoveChat;
trigger gt_FixHealthBug;
trigger gt_UnitSelected;
trigger gt_SettlerWarnings;
trigger gt_MonthlyTick;
trigger gt_ShowTimeUI;
trigger gt_TimeUI;
trigger gt_ManageUnitLimit;
trigger gt_ManageUnitLimit2;
trigger gt_CollectDataYearly;
trigger gt_CollectDataMonthly;
trigger gt_DeselectData;
trigger gt_SelectData;
trigger gt_SelectDataType;
trigger gt_SubmitSelection;
trigger gt_GraphBaseInitUI;
trigger gt_UnitDies;
trigger gt_MainUI;
trigger gt_ResearchButton;
trigger gt_EconomicButton;
trigger gt_EUButton;
trigger gt_GraphButton;
trigger gt_PlaugeGiver;
trigger gt_AIandRebellion;
trigger gt_Player9AIRebellionAI;
trigger gt_ZombieConvertandPlauge;
trigger gt_RandomPlaugeFromArmies;
trigger gt_AutonomousZombies;
trigger gt_MissileDefenseChangeOwnerNeutral;
trigger gt_MissileInShield;
trigger gt_SetTarget;
trigger gt_ClearTargets;
trigger gt_PingTargets;
trigger gt_EnableDeadManHand;
trigger gt_DisableDeadManHand;
trigger gt_DeadHandCoolDown;
trigger gt_AnyNukeLaunch;
trigger gt_NukeDetonate;
trigger gt_HydrogenBombDetonate;
trigger gt_HalcyonBombDetonate;
trigger gt_KillUnitsOnCreep;
trigger gt_WorldeaterNotification;
trigger gt_ReformGovernment;
trigger gt_AssignNationalName;
trigger gt_First3MinutesNameofCounties;
trigger gt_AssignCountryIDGroup;
trigger gt_IdTextTagSoverignty;
trigger gt_AssignCountVariables;
trigger gt_CultureGroupNations;
trigger gt_AutobuildLD;
trigger gt_AutobuildHD;
trigger gt_AutobuildMD;
trigger gt_AutobuildFarms;
trigger gt_AutobuildHydrofarms;
trigger gt_AutobuildWindmills;
trigger gt_AutobuildFission;
trigger gt_AutobuildFusion;
trigger gt_AutobuildCPG;
trigger gt_ParlimentConquered;
trigger gt_UnitAttacked;
trigger gt_BuildingAttacked;
trigger gt_DOMTRAIN;
trigger gt_Surrender;
trigger gt_ResetAlliances;
trigger gt_PLAYALEAVES;
trigger gt_PLAYALEAVESSUBJECT;
trigger gt_PLAYALEAVESDESTRUCTION;
trigger gt_Scout;
trigger gt_Scout2;
trigger gt_ImTakingAwayyourScoutbots;
trigger gt_ATEMPTINGALLIANCEOFFERFORALLY;
trigger gt_IDO;
trigger gt_None;
trigger gt_CallToArmsUI;
trigger gt_YES;
trigger gt_Non;
trigger gt_CeasefireUI;
trigger gt_FINNNEEEEee;
trigger gt_No;
trigger gt_EmbargoPeople;
trigger gt_DisarmPeople;
trigger gt_YesOrNoUI;
trigger gt_AcceptPeaceDeal;
trigger gt_CounterPeaceDeal;
trigger gt_PeaceConferenceUI;
trigger gt_SendDeal;
trigger gt_WhitePeace;
trigger gt_ClearPeaceDeals;
trigger gt_IfBuildingSelectedHighlightProvince;
trigger gt_RequestSubjugate;
trigger gt_RequestReparations;
trigger gt_RequestChangeGovernment;
trigger gt_RequestEmbargo;
trigger gt_RequestDisarm;
trigger gt_RequestReleaseVassal;
trigger gt_RequestFullAnnex;
trigger gt_RequestAnnex;
trigger gt_RequestAnnexRemove;
trigger gt_RequestCancel;
trigger gt_UpdateTotalPeaceDeal;
trigger gt_DeclareWarButtonPressed;
trigger gt_CutRelationsButtonPressed;
trigger gt_SendAllyRequestButtonPressed;
trigger gt_SendCeasefireButtonPRessed;
trigger gt_GoThroughDiplomaticQueue;
trigger gt_CreditTransferanceShowUI;
trigger gt_GibCredits;
trigger gt_CreditTransferUI;
trigger gt_Donate;
trigger gt_LocalMilitia;
trigger gt_PeacekeeperSquad;
trigger gt_PeacekeeperHeli;
trigger gt_PeacekeeperTruck;
trigger gt_PresidentalVote;
trigger gt_BeginTheElection;
trigger gt_EUScreen;
trigger gt_LetsRefreshVotes;
trigger gt_TriggerVote;
trigger gt_CountVotes;
trigger gt_TrackVotes;
trigger gt_TrackVotesFederation;
trigger gt_EUInOrder;
trigger gt_EUCooldown;
trigger gt_EUUI;
trigger gt_YesNo;
trigger gt_LeaveEU;
trigger gt_TheBirthofanEmpire;
trigger gt_ParlimentDed;
trigger gt_KickPlayerFromEU;
trigger gt_InvitetoEU;
trigger gt_DeclareIndependence;
trigger gt_CustomLedgerForGame;
trigger gt_Ledger;
trigger gt_ShowLedgerandEUDialogRefreseh;
trigger gt_HideShowLedgerUI;
trigger gt_ShowDialog;
trigger gt_CloseDialog;
trigger gt_ApplyBehaviors;
trigger gt_ChangeWarPolicy;
trigger gt_Policies;
trigger gt_EmperorDies;
trigger gt_SpawnEmperor;
trigger gt_ResetReachedCorporationEnd;
trigger gt_ADDDEBUGPLAYERGROUPTEST;
trigger gt_CHECKFOODREQURIED;
trigger gt_GreatDepression;
trigger gt_Recession;
trigger gt_Booming;
trigger gt_UpgradeColonies;
trigger gt_EconomyHealth;
trigger gt_CreditRatingSystem;
trigger gt_OpenupPrivateLoan;
trigger gt_OpenupRepayLoan;
trigger gt_TakePrivateLoan;
trigger gt_RepayLoan;
trigger gt_RepayLoanUI;
trigger gt_PrivateLoanUI;
trigger gt_MasterTradeScript;
trigger gt_BuySell;
trigger gt_SendBuySellToVariables;
trigger gt_ExecuteBuySell;
trigger gt_RealTimeSliders;
trigger gt_TradeModes;
trigger gt_Tabs;
trigger gt_EmbargoButton;
trigger gt_TradeUI;
trigger gt_BuySellUI;
trigger gt_SetResourceHarvestorPrices;
trigger gt_SelectCorporation;
trigger gt_UpdateCorporationLedger;
trigger gt_CorpTicksv10;
trigger gt_GuardDies;
trigger gt_ExpeditionGuardIdle;
trigger gt_NationalizeBuyoutFunctionality;
trigger gt_SetMiddleEastOilPrice;
trigger gt_Desert;
trigger gt_Snow;
trigger gt_HarshSnow;
trigger gt_Mountains;
trigger gt_RDesert;
trigger gt_RSnow;
trigger gt_RHarshSnow;
trigger gt_RMountains;
trigger gt_DeclareBankruptcy;
trigger gt_Incomev20;
trigger gt_NationalizeResource;
trigger gt_SELL_RESROUCES_DEBUG;
trigger gt_HercDespawn;
trigger gt_Dialolg;
trigger gt_NoWanderingTags;
trigger gt_RunHighwayCentralization;
trigger gt_CentralizationofALLUNITS;
trigger gt_UnitBuilt;
trigger gt_ShowMeTheCentralization;
trigger gt_Research;
trigger gt_DisbandDemolish;
trigger gt_PlaceCapital;
trigger gt_UpgradetoMD;
trigger gt_CreateCores;
trigger gt_EndDialogue;
trigger gt_EndDialogueButtinz;
trigger gt_SelectLowDensity;
trigger gt_SelectMediumDensity;
trigger gt_SelectHighDensity;
trigger gt_SelectVeryHighDensity;
trigger gt_SelectAllHomes;
trigger gt_SelectFarm;
trigger gt_SelectHydrofarm;
trigger gt_SelectAllFarms;
trigger gt_SelectCoal;
trigger gt_SelectMetal;
trigger gt_SelectMine;
trigger gt_SelectBore;
trigger gt_SelectAllMetal;
trigger gt_SelectOil;
trigger gt_SelectGeo;
trigger gt_HowFarAwayAreEmpiresFromEachOther;
trigger gt_ResearchDiffusion;
trigger gt_ResearchCompleted;
trigger gt_DoTheResearch;
trigger gt_ResearchCalculation;
trigger gt_ResearchMenuFrame;
trigger gt_TabFunctionality;
trigger gt_SelectedIcon;
trigger gt_RefresehSelectedIcon;
trigger gt_CommittoResearch;
trigger gt_SetResearchCostsResearchList;
trigger gt_UpdateCurrentResearchinMenu;
trigger gt_CancelORGivePriorityToResearch;
trigger gt_RussiaRazeResist;
trigger gt_StartRussia;
trigger gt_Rusinfo;
trigger gt_RussianEconomy;
trigger gt_UpdateGuerillaTargets;
trigger gt_HuntTargets;
trigger gt_VolgogradBuff;
trigger gt_MoscowBuff;
trigger gt_NizhnevartovskBuff;
trigger gt_SetRussianBaseStats;
trigger gt_RussianCityCapture;
trigger gt_CheckExsistnceOfRussianCitiesCheckExsistenceOfAmericanCities;
trigger gt_RussianCreateGarrison;
trigger gt_HostileRunAround;
trigger gt_MiddleEastConfederationLeave;
trigger gt_KillMiddleEastTroops;
trigger gt_AmericanWar;
trigger gt_InitAmerica;
trigger gt_CaptureNewYork;
trigger gt_AmericanScript;
trigger gt_KenedysLife;
trigger gt_KenedyShot;
trigger gt_CarrierEscorts;
trigger gt_StartAI;
trigger gt_Players;
trigger gt_UnitCreated;
trigger gt_SetHostiles;
trigger gt_Donotstandstillrussiaoramerica;
trigger gt_AttacktheEuropeRussia;
trigger gt_AttacktheEuropeAmerica;
trigger gt_SendShit;
trigger gt_Send;
trigger gt_SendEvil;
trigger gt_Stopthelaggyearlygametutorialbanners;
trigger gt_DontSettleOnSnowDesertMountains;
trigger gt_BuildHomes;
trigger gt_BuildFarmsifcapitalnotinsnowdesertmountains;
trigger gt_YouHaveFarmsinBadTerrain;
trigger gt_EmptyResearchQueue;
trigger gt_LaboratoryUpgradesNotHighEnough;
trigger gt_ResearchingDangerousTech;
trigger gt_YouShouldMechanizeyourCountry;
trigger gt_Youhavetakenoutloans;
trigger gt_LowCentralization;
trigger gt_YouareatwarFoundEUIncreaseWarStatusDecreaseWarStatus;
trigger gt_BannerApplication;
trigger gt_BannerCreation;
trigger gt_HideBanner;
trigger gt_BannerUse;
trigger gt_PvPVictory;
trigger gt_ReCVictory;
trigger gt_ClassicalVictory;
trigger gt_Capitaldie;
trigger gt_Settlerdie;
trigger gt_CreateVoteDialogue;
trigger gt_CreateVictoryVoteDialogue;
trigger gt_VoteAI;
trigger gt_VoteVictory;
trigger gt_EndVote;
trigger gt_EndEndVote;
trigger gt_InitialAIDifficulty;
trigger gt_ModifyAIDifficultyOverTime;

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
string gf_GetMonth (int lp_month) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_month == 1)) {
        return "Jan";
    }

    if ((lp_month == 2)) {
        return "Feb";
    }

    if ((lp_month == 3)) {
        return "Mar";
    }

    if ((lp_month == 4)) {
        return "Apr";
    }

    if ((lp_month == 5)) {
        return "May";
    }

    if ((lp_month == 6)) {
        return "Jun";
    }

    if ((lp_month == 7)) {
        return "Jul";
    }

    if ((lp_month == 8)) {
        return "Aug";
    }

    if ((lp_month == 9)) {
        return "Sept";
    }

    if ((lp_month == 10)) {
        return "Oct";
    }

    if ((lp_month == 11)) {
        return "Nov";
    }

    if ((lp_month == 12)) {
        return "Dec";
    }

    return "GetMonth.error";
}

void gf_DataLinePushBack () {
    // Variable Declarations
    int lv_dataType;
    int lv_dataLocation;
    int lv_player;

    // Automatic Variable Declarations
    const int auto479C4502_ae = gv_dATA_TYPES;
    const int auto479C4502_ai = 1;
    const int auto88B370EF_ae = 8;
    const int auto88B370EF_ai = 1;
    const int auto713F20C6_ae = 1;
    const int auto713F20C6_ai = -1;
    const int autoC88A847C_ae = 1;
    const int autoC88A847C_ai = -1;

    // Variable Initialization

    // Implementation
    if ((gv_yearsOfData == 0)) {
    }
    else {
        lv_dataType = 1;
        for ( ; ( (auto479C4502_ai >= 0 && lv_dataType <= auto479C4502_ae) || (auto479C4502_ai < 0 && lv_dataType >= auto479C4502_ae) ) ; lv_dataType += auto479C4502_ai ) {
            lv_player = 1;
            for ( ; ( (auto88B370EF_ai >= 0 && lv_player <= auto88B370EF_ae) || (auto88B370EF_ai < 0 && lv_player >= auto88B370EF_ae) ) ; lv_player += auto88B370EF_ai ) {
                lv_dataLocation = libNtve_gf_ArithmeticIntClamp(gv_dATA_PER_GRAPH, 0, gv_yearsOfData);
                for ( ; ( (auto713F20C6_ai >= 0 && lv_dataLocation <= auto713F20C6_ae) || (auto713F20C6_ai < 0 && lv_dataLocation >= auto713F20C6_ae) ) ; lv_dataLocation += auto713F20C6_ai ) {
                    gv_graphCollectedData[lv_dataType][lv_dataLocation][lv_player] = gv_graphCollectedData[lv_dataType][(lv_dataLocation - 1)][lv_player];
                }
            }
        }
    }
    lv_dataLocation = libNtve_gf_ArithmeticIntClamp(gv_dATA_PER_GRAPH, 0, gv_yearsOfData);
    for ( ; ( (autoC88A847C_ai >= 0 && lv_dataLocation <= autoC88A847C_ae) || (autoC88A847C_ai < 0 && lv_dataLocation >= autoC88A847C_ae) ) ; lv_dataLocation += autoC88A847C_ai ) {
        gv_timeline[lv_dataLocation][0] = gv_timeline[(lv_dataLocation - 1)][0];
        gv_timeline[lv_dataLocation][1] = gv_timeline[(lv_dataLocation - 1)][1];
        gv_timeline[lv_dataLocation][2] = gv_timeline[(lv_dataLocation - 1)][2];
    }
}

void gf_CollectPopulationYearly (int lp_dataLine) {
    // Automatic Variable Declarations
    playergroup auto1BE05193_g;
    int auto1BE05193_var;

    // Implementation
    gv_graphCollectedData[lp_dataLine][0][8] = 0;
    auto1BE05193_g = gv_users;
    auto1BE05193_var = -1;
    while (true) {
        auto1BE05193_var = PlayerGroupNextPlayer(auto1BE05193_g, auto1BE05193_var);
        if (auto1BE05193_var < 0) { break; }
        gv_graphCollectedData[lp_dataLine][0][auto1BE05193_var] = gv_population[auto1BE05193_var];
        gv_graphCollectedData[lp_dataLine][0][8] += gv_population[auto1BE05193_var];
    }
}

void gf_CollectTotalCasualtiesYearly (int lp_dataLine) {
    // Automatic Variable Declarations
    playergroup autoB38FC72B_g;
    int autoB38FC72B_var;

    // Implementation
    gv_graphCollectedData[lp_dataLine][0][8] = 0;
    autoB38FC72B_g = gv_users;
    autoB38FC72B_var = -1;
    while (true) {
        autoB38FC72B_var = PlayerGroupNextPlayer(autoB38FC72B_g, autoB38FC72B_var);
        if (autoB38FC72B_var < 0) { break; }
        gv_graphCollectedData[lp_dataLine][0][autoB38FC72B_var] = (gf_GetTotalPeopleDead(autoB38FC72B_var, 0) + gf_GetTotalPeopleDead(autoB38FC72B_var, 1));
        gv_graphCollectedData[lp_dataLine][0][8] += gv_graphCollectedData[lp_dataLine][0][autoB38FC72B_var];
    }
}

void gf_CollectGDPYearly (int lp_dataLine) {
    // Automatic Variable Declarations
    playergroup auto09F15A41_g;
    int auto09F15A41_var;

    // Implementation
    gv_graphCollectedData[lp_dataLine][0][8] = 0;
    auto09F15A41_g = gv_users;
    auto09F15A41_var = -1;
    while (true) {
        auto09F15A41_var = PlayerGroupNextPlayer(auto09F15A41_g, auto09F15A41_var);
        if (auto09F15A41_var < 0) { break; }
        gv_graphCollectedData[lp_dataLine][0][auto09F15A41_var] = gv_gDP[auto09F15A41_var];
        gv_graphCollectedData[lp_dataLine][0][8] += gv_gDP[auto09F15A41_var];
    }
}

void gf_CollectGDPCapitYearly (int lp_dataLine) {
    // Variable Declarations
    int lv_playerCount;

    // Automatic Variable Declarations
    playergroup autoA2AC8599_g;
    int autoA2AC8599_var;

    // Variable Initialization

    // Implementation
    gv_graphCollectedData[lp_dataLine][0][8] = 0;
    autoA2AC8599_g = gv_users;
    autoA2AC8599_var = -1;
    while (true) {
        autoA2AC8599_var = PlayerGroupNextPlayer(autoA2AC8599_g, autoA2AC8599_var);
        if (autoA2AC8599_var < 0) { break; }
        if ((gv_population[autoA2AC8599_var] > 100)) {
            gv_graphCollectedData[lp_dataLine][0][autoA2AC8599_var] = FixedToInt((gv_gDPPerCapita[autoA2AC8599_var] * 100.0));
            gv_graphCollectedData[lp_dataLine][0][8] += gv_graphCollectedData[lp_dataLine][0][autoA2AC8599_var];
            lv_playerCount += 1;
        }

    }
    if ((lv_playerCount > 0)) {
        gv_graphCollectedData[lp_dataLine][0][8] /= lv_playerCount;
    }

}

void gf_CollectCreditsYearly (int lp_dataLine) {
    // Automatic Variable Declarations
    playergroup autoADA31FCD_g;
    int autoADA31FCD_var;

    // Implementation
    gv_graphCollectedData[lp_dataLine][0][8] = 0;
    autoADA31FCD_g = gv_users;
    autoADA31FCD_var = -1;
    while (true) {
        autoADA31FCD_var = PlayerGroupNextPlayer(autoADA31FCD_g, autoADA31FCD_var);
        if (autoADA31FCD_var < 0) { break; }
        gv_graphCollectedData[lp_dataLine][0][autoADA31FCD_var] = PlayerGetPropertyInt(autoADA31FCD_var, c_playerPropMinerals);
        gv_graphCollectedData[lp_dataLine][0][8] += gv_graphCollectedData[lp_dataLine][0][autoADA31FCD_var];
    }
}

void gf_CollectDebtYearly (int lp_dataLine) {
    // Automatic Variable Declarations
    playergroup autoDBC1AE86_g;
    int autoDBC1AE86_var;

    // Implementation
    gv_graphCollectedData[lp_dataLine][0][8] = 0;
    autoDBC1AE86_g = gv_users;
    autoDBC1AE86_var = -1;
    while (true) {
        autoDBC1AE86_var = PlayerGroupNextPlayer(autoDBC1AE86_g, autoDBC1AE86_var);
        if (autoDBC1AE86_var < 0) { break; }
        gv_graphCollectedData[lp_dataLine][0][autoDBC1AE86_var] = gv_totalDebt[autoDBC1AE86_var];
        gv_graphCollectedData[lp_dataLine][0][8] += gv_graphCollectedData[lp_dataLine][0][autoDBC1AE86_var];
    }
}

void gf_CollectCorporationValueYearly (int lp_dataLine) {
    // Automatic Variable Declarations
    playergroup autoD8D2AE94_g;
    int autoD8D2AE94_var;

    // Implementation
    gv_graphCollectedData[lp_dataLine][0][8] = 0;
    autoD8D2AE94_g = gv_users;
    autoD8D2AE94_var = -1;
    while (true) {
        autoD8D2AE94_var = PlayerGroupNextPlayer(autoD8D2AE94_g, autoD8D2AE94_var);
        if (autoD8D2AE94_var < 0) { break; }
        gv_graphCollectedData[lp_dataLine][0][autoD8D2AE94_var] = (gv_stockPrice[autoD8D2AE94_var] * 10);
        gv_graphCollectedData[lp_dataLine][0][8] += gv_graphCollectedData[lp_dataLine][0][autoD8D2AE94_var];
    }
}

void gf_CollectTechnologyYearly (int lp_dataLine) {
    // Variable Declarations
    int lv_gotTech;
    int lv_incrementor;

    // Automatic Variable Declarations
    playergroup auto4ECC922D_g;
    int auto4ECC922D_var;
    const int autoA7A37EBD_ae = 80;
    const int autoA7A37EBD_ai = 1;

    // Variable Initialization

    // Implementation
    gv_graphCollectedData[lp_dataLine][0][8] = 0;
    auto4ECC922D_g = gv_users;
    auto4ECC922D_var = -1;
    while (true) {
        auto4ECC922D_var = PlayerGroupNextPlayer(auto4ECC922D_g, auto4ECC922D_var);
        if (auto4ECC922D_var < 0) { break; }
        lv_incrementor = 1;
        for ( ; ( (autoA7A37EBD_ai >= 0 && lv_incrementor <= autoA7A37EBD_ae) || (autoA7A37EBD_ai < 0 && lv_incrementor >= autoA7A37EBD_ae) ) ; lv_incrementor += autoA7A37EBD_ai ) {
            lv_gotTech += gv_researchInvested[auto4ECC922D_var][lv_incrementor];
        }
        gv_graphCollectedData[lp_dataLine][0][auto4ECC922D_var] = lv_gotTech;
        gv_graphCollectedData[lp_dataLine][0][8] += gv_graphCollectedData[lp_dataLine][0][auto4ECC922D_var];
    }
}

void gf_CollectFoodYearly (int lp_dataLine) {
    // Variable Declarations
    int lv_incrementor;
    int lv_supply;
    int lv_demand;
    int lv_price;
    const int lv_rESOURCE_TYPE = 1;

    // Automatic Variable Declarations
    playergroup autoF57647B1_g;
    int autoF57647B1_var;
    const int autoC9401CB4_ae = 7;
    const int autoC9401CB4_ai = 1;

    // Variable Initialization

    // Implementation
    autoF57647B1_g = gv_users;
    autoF57647B1_var = -1;
    while (true) {
        autoF57647B1_var = PlayerGroupNextPlayer(autoF57647B1_g, autoF57647B1_var);
        if (autoF57647B1_var < 0) { break; }
        lv_demand += gv_cDemand[autoF57647B1_var][lv_rESOURCE_TYPE];
    }
    lv_incrementor = 1;
    for ( ; ( (autoC9401CB4_ai >= 0 && lv_incrementor <= autoC9401CB4_ae) || (autoC9401CB4_ai < 0 && lv_incrementor >= autoC9401CB4_ae) ) ; lv_incrementor += autoC9401CB4_ai ) {
        lv_supply += gv_foodStockpile[lv_incrementor];
        lv_price += gv_foodPrice;
    }
    lv_supply /= 7;
    lv_price /= 7;
    gv_graphCollectedData[lp_dataLine][0][1] = lv_supply;
    gv_graphCollectedData[lp_dataLine][0][2] = lv_demand;
    gv_graphCollectedData[lp_dataLine][0][2] = lv_price;
}

void gf_CollectMetalYearly (int lp_dataLine) {
    // Variable Declarations
    int lv_incrementor;
    int lv_supply;
    int lv_demand;
    int lv_price;
    const int lv_rESOURCE_TYPE = 2;

    // Automatic Variable Declarations
    playergroup auto54AE4CCA_g;
    int auto54AE4CCA_var;
    const int auto64954A2E_ae = 14;
    const int auto64954A2E_ai = 1;

    // Variable Initialization

    // Implementation
    auto54AE4CCA_g = gv_users;
    auto54AE4CCA_var = -1;
    while (true) {
        auto54AE4CCA_var = PlayerGroupNextPlayer(auto54AE4CCA_g, auto54AE4CCA_var);
        if (auto54AE4CCA_var < 0) { break; }
        lv_demand += gv_cDemand[auto54AE4CCA_var][lv_rESOURCE_TYPE];
    }
    lv_incrementor = 2;
    for ( ; ( (auto64954A2E_ai >= 0 && lv_incrementor <= auto64954A2E_ae) || (auto64954A2E_ai < 0 && lv_incrementor >= auto64954A2E_ae) ) ; lv_incrementor += auto64954A2E_ai ) {
        lv_supply += gv_globalSupply[lv_rESOURCE_TYPE][lv_incrementor];
        lv_price += gv_aggregatePrice[lv_rESOURCE_TYPE][lv_incrementor];
    }
    lv_supply /= 12;
    lv_price /= 12;
    gv_graphCollectedData[lp_dataLine][0][1] = lv_supply;
    gv_graphCollectedData[lp_dataLine][0][2] = lv_demand;
    gv_graphCollectedData[lp_dataLine][0][2] = lv_price;
}

void gf_CollectOilYearly (int lp_dataLine) {
    // Variable Declarations
    int lv_incrementor;
    int lv_supply;
    int lv_demand;
    int lv_price;
    const int lv_rESOURCE_TYPE = 3;

    // Automatic Variable Declarations
    playergroup auto2970E100_g;
    int auto2970E100_var;
    const int auto6505B087_ae = 14;
    const int auto6505B087_ai = 1;

    // Variable Initialization

    // Implementation
    auto2970E100_g = gv_users;
    auto2970E100_var = -1;
    while (true) {
        auto2970E100_var = PlayerGroupNextPlayer(auto2970E100_g, auto2970E100_var);
        if (auto2970E100_var < 0) { break; }
        lv_demand += gv_cDemand[auto2970E100_var][lv_rESOURCE_TYPE];
    }
    lv_incrementor = 2;
    for ( ; ( (auto6505B087_ai >= 0 && lv_incrementor <= auto6505B087_ae) || (auto6505B087_ai < 0 && lv_incrementor >= auto6505B087_ae) ) ; lv_incrementor += auto6505B087_ai ) {
        lv_supply += gv_globalSupply[lv_rESOURCE_TYPE][lv_incrementor];
        lv_price += gv_aggregatePrice[lv_rESOURCE_TYPE][lv_incrementor];
    }
    lv_supply /= 12;
    lv_price /= 12;
    gv_graphCollectedData[lp_dataLine][0][1] = lv_supply;
    gv_graphCollectedData[lp_dataLine][0][2] = lv_demand;
    gv_graphCollectedData[lp_dataLine][0][2] = lv_price;
}

void gf_SetTimeline (int lp_index, string lp_text) {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_timeline[0][lp_index] == "")) {
        gv_timeline[0][lp_index] = lp_text;
    }
    else {
        gv_timeline[0][lp_index] = ((gv_timeline[0][lp_index] + " + ") + lp_text);
    }
}

text gf_GetGraphDataFromVariable (int lp_givenData) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_givenData == 0)) {
        return StringToText("");
    }

    if ((lp_givenData == 1)) {
        return StringExternal("Param/Value/869E142A");
    }

    if ((lp_givenData == 2)) {
        return StringExternal("Param/Value/5BC171F4");
    }

    if ((lp_givenData == 3)) {
        return StringExternal("Param/Value/58555880");
    }

    if ((lp_givenData == 4)) {
        return StringExternal("Param/Value/DD6DE120");
    }

    if ((lp_givenData == 5)) {
        return StringExternal("Param/Value/763ABD98");
    }

    if ((lp_givenData == 6)) {
        return StringExternal("Param/Value/39B23F2F");
    }

    if ((lp_givenData == 7)) {
        return StringExternal("Param/Value/54AD6EFB");
    }

    if ((lp_givenData == 8)) {
        return StringExternal("Param/Value/0BF70E9B");
    }

    if ((lp_givenData == 9)) {
        return StringExternal("Param/Value/E707DD5E");
    }

    if ((lp_givenData == 10)) {
        return StringExternal("Param/Value/58FA60FC");
    }

    if ((lp_givenData == 11)) {
        return StringExternal("Param/Value/73A850BA");
    }

    return IntToText(lp_givenData);
}

text gf_GetGraphDataTypeFromVariable (int lp_givenDataType, int lp_givenData) {
    // Variable Declarations
    int lv_incrementor;

    // Automatic Variable Declarations
    int auto26FAE8EA_ae;
    const int auto26FAE8EA_ai = 1;

    // Variable Initialization

    // Implementation
    if (((lp_givenData == 0) || (lp_givenDataType == 0))) {
        return StringToText("");
    }

    if ((lp_givenData < 9)) {
        if ((lp_givenDataType == 8)) {
            return StringExternal("Param/Value/1F72CAF1");
        }

        auto26FAE8EA_ae = (gv_playercount + 0);
        lv_incrementor = 1;
        for ( ; ( (auto26FAE8EA_ai >= 0 && lv_incrementor <= auto26FAE8EA_ae) || (auto26FAE8EA_ai < 0 && lv_incrementor >= auto26FAE8EA_ae) ) ; lv_incrementor += auto26FAE8EA_ai ) {
            if ((lp_givenDataType == lv_incrementor)) {
                return (gf_NationOfPlayer((lv_incrementor - 0)) + StringExternal("Param/Value/684818A0"));
            }

        }
    }
    else {
        if ((lp_givenDataType == 1)) {
            return StringExternal("Param/Value/3DF0954B");
        }
        else {
            if ((lp_givenDataType == 2)) {
                return StringExternal("Param/Value/D7A151B8");
            }
            else {
                if ((lp_givenDataType == 3)) {
                    return StringExternal("Param/Value/18C477AB");
                }

            }
        }
    }
    return IntToText(lp_givenDataType);
}

text gf_GetGraphKeyStringFromVariables (int lp_givenDataType, int lp_givenData) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_givenData == 0) || (lp_givenDataType == 0))) {
        return StringToText("");
    }
    else {
        return (gf_GetGraphDataTypeFromVariable(lp_givenDataType, lp_givenData) + gf_GetGraphDataFromVariable(lp_givenData));
    }
}

void gf_SetCurrentSelectedData (int lp_player) {
    // Variable Declarations
    int lv_got;
    int lv_incrementor;

    // Automatic Variable Declarations
    const int auto8466F7A6_ae = 11;
    const int auto8466F7A6_ai = 1;
    int auto35E759DA_ae;
    const int auto35E759DA_ai = 1;
    int auto406BF4C6_ae;
    const int auto406BF4C6_ai = 1;
    int auto0FB17C27_ae;
    const int auto0FB17C27_ai = 1;

    // Variable Initialization

    // Implementation
    lv_incrementor = 1;
    for ( ; ( (auto8466F7A6_ai >= 0 && lv_incrementor <= auto8466F7A6_ae) || (auto8466F7A6_ai < 0 && lv_incrementor >= auto8466F7A6_ae) ) ; lv_incrementor += auto8466F7A6_ai ) {
        if ((gv_currentlySelectedData[lp_player] == lv_incrementor)) {
            lv_got = lv_incrementor;
            DialogControlSetEnabled(gv_graphSelection[lv_incrementor], PlayerGroupSingle(EventPlayer()), false);
            libNtve_gf_SetDialogItemText(gv_graphSelection[12], gf_GetGraphDataFromVariable(lv_incrementor), PlayerGroupSingle(lp_player));
        }
        else {
            DialogControlSetEnabled(gv_graphSelection[lv_incrementor], PlayerGroupSingle(EventPlayer()), true);
        }
    }
    if ((gv_currentlySelectedData[lp_player] < 9)) {
        if ((gv_currentlySelectedData[lp_player] == 0)) {
            DialogControlSetVisible(gv_graphSelection[22], PlayerGroupSingle(lp_player), false);
            DialogControlSetVisible(gv_graphSelection[23], PlayerGroupSingle(lp_player), false);
            DialogControlSetVisible(gv_graphSelection[24], PlayerGroupSingle(lp_player), false);
            auto35E759DA_ae = (gv_playercount + 14);
            lv_incrementor = 14;
            for ( ; ( (auto35E759DA_ai >= 0 && lv_incrementor <= auto35E759DA_ae) || (auto35E759DA_ai < 0 && lv_incrementor >= auto35E759DA_ae) ) ; lv_incrementor += auto35E759DA_ai ) {
                DialogControlSetVisible(gv_graphSelection[lv_incrementor], PlayerGroupSingle(lp_player), false);
            }
        }
        else {
            auto406BF4C6_ae = (gv_playercount + 14);
            lv_incrementor = 14;
            for ( ; ( (auto406BF4C6_ai >= 0 && lv_incrementor <= auto406BF4C6_ae) || (auto406BF4C6_ai < 0 && lv_incrementor >= auto406BF4C6_ae) ) ; lv_incrementor += auto406BF4C6_ai ) {
                DialogControlSetVisible(gv_graphSelection[lv_incrementor], PlayerGroupSingle(lp_player), true);
            }
            DialogControlSetVisible(gv_graphSelection[22], PlayerGroupSingle(lp_player), false);
            DialogControlSetVisible(gv_graphSelection[23], PlayerGroupSingle(lp_player), false);
            DialogControlSetVisible(gv_graphSelection[24], PlayerGroupSingle(lp_player), false);
        }
    }
    else {
        auto0FB17C27_ae = (gv_playercount + 14);
        lv_incrementor = 14;
        for ( ; ( (auto0FB17C27_ai >= 0 && lv_incrementor <= auto0FB17C27_ae) || (auto0FB17C27_ai < 0 && lv_incrementor >= auto0FB17C27_ae) ) ; lv_incrementor += auto0FB17C27_ai ) {
            DialogControlSetVisible(gv_graphSelection[lv_incrementor], PlayerGroupSingle(lp_player), false);
        }
        DialogControlSetVisible(gv_graphSelection[22], PlayerGroupSingle(lp_player), true);
        DialogControlSetVisible(gv_graphSelection[23], PlayerGroupSingle(lp_player), true);
        DialogControlSetVisible(gv_graphSelection[24], PlayerGroupSingle(lp_player), true);
    }
    if ((lv_got == 0)) {
        libNtve_gf_SetDialogItemText(gv_graphSelection[12], StringToText(""), PlayerGroupSingle(lp_player));
    }

}

void gf_SetCurrentSelectedDataType (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_currentSelectedDataType[lp_player] == 0)) {
        DialogControlSetEnabled(gv_graphSelection[13], PlayerGroupSingle(lp_player), false);
        libNtve_gf_SetDialogItemText(gv_graphSelection[12], gf_GetGraphDataFromVariable(gv_currentlySelectedData[lp_player]), PlayerGroupSingle(lp_player));
    }
    else {
        DialogControlSetEnabled(gv_graphSelection[13], PlayerGroupSingle(lp_player), true);
        libNtve_gf_SetDialogItemText(gv_graphSelection[12], (gf_GetGraphDataTypeFromVariable(gv_currentSelectedDataType[lp_player], gv_currentlySelectedData[lp_player]) + gf_GetGraphDataFromVariable(gv_currentlySelectedData[lp_player])), PlayerGroupSingle(lp_player));
    }
}

void gf_AddDataMovment (int lp_player) {
    // Variable Declarations
    int lv_incrementor;

    // Automatic Variable Declarations
    const int auto9F03EB69_ae = 2;
    const int auto9F03EB69_ai = -1;

    // Variable Initialization

    // Implementation
    lv_incrementor = gv_aLLOWED_CONCURRENT_ITEMS;
    for ( ; ( (auto9F03EB69_ai >= 0 && lv_incrementor <= auto9F03EB69_ae) || (auto9F03EB69_ai < 0 && lv_incrementor >= auto9F03EB69_ae) ) ; lv_incrementor += auto9F03EB69_ai ) {
        gv_allSelectedData[lp_player][(lv_incrementor + 0)] = gv_allSelectedData[lp_player][(lv_incrementor - 1)];
        gv_allSelectedDataTypes[lp_player][(lv_incrementor + 0)] = gv_allSelectedDataTypes[lp_player][(lv_incrementor - 1)];
    }
}

void gf_RefreshKey (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(gv_graphSelection[25], gf_GetGraphKeyStringFromVariables(gv_allSelectedDataTypes[lp_player][1], gv_allSelectedData[lp_player][1]), PlayerGroupSingle(lp_player));
    libNtve_gf_SetDialogItemText(gv_graphSelection[27], gf_GetGraphKeyStringFromVariables(gv_allSelectedDataTypes[lp_player][2], gv_allSelectedData[lp_player][2]), PlayerGroupSingle(lp_player));
    libNtve_gf_SetDialogItemText(gv_graphSelection[29], gf_GetGraphKeyStringFromVariables(gv_allSelectedDataTypes[lp_player][3], gv_allSelectedData[lp_player][3]), PlayerGroupSingle(lp_player));
}

void gf_Grapher (int lp_player) {
    // Variable Declarations
    int lv_concurrentIncrementor;
    int lv_dataIncrementor;
    int lv_thisSelectedData;
    int lv_thisSelectedDataType;

    // Automatic Variable Declarations
    const int autoDBF4A898_ae = gv_aLLOWED_CONCURRENT_ITEMS;
    const int autoDBF4A898_ai = 1;
    int auto91F0EDB8_ae;
    const int auto91F0EDB8_ai = 1;
    int autoA2D40DC7_ae;
    const int autoA2D40DC7_ai = 1;

    // Variable Initialization

    // Implementation
    while ((gv_graphInProgress == true)) {
        Wait(((IntToFixed(lp_player) / 1000.0) + 0.001), c_timeGame);
    }
    gv_graphInProgress = true;
    lv_concurrentIncrementor = 1;
    for ( ; ( (autoDBF4A898_ai >= 0 && lv_concurrentIncrementor <= autoDBF4A898_ae) || (autoDBF4A898_ai < 0 && lv_concurrentIncrementor >= autoDBF4A898_ae) ) ; lv_concurrentIncrementor += autoDBF4A898_ai ) {
        lv_thisSelectedDataType = gv_allSelectedDataTypes[lp_player][lv_concurrentIncrementor];
        lv_thisSelectedData = gv_allSelectedData[lp_player][lv_concurrentIncrementor];
        if ((lv_thisSelectedData > 0) && (lv_thisSelectedDataType > 0)) {
            gv_lENGTH_CreateGraphGivenData[lv_concurrentIncrementor] = (gv_yearsOfData - 1);
            gv_sCALE_CreateGraphGivenData[lv_concurrentIncrementor] = 1;
            autoA2D40DC7_ae = gv_yearsOfData;
            lv_dataIncrementor = 0;
            for ( ; ( (autoA2D40DC7_ai >= 0 && lv_dataIncrementor <= autoA2D40DC7_ae) || (autoA2D40DC7_ai < 0 && lv_dataIncrementor >= autoA2D40DC7_ae) ) ; lv_dataIncrementor += autoA2D40DC7_ai ) {
                gv_cOLOR_PASSED_IN_DATA[lv_dataIncrementor][lv_concurrentIncrementor] = gf_GetColor(lv_concurrentIncrementor);
                if ((gv_timeline[lv_dataIncrementor][1] != "")) {
                    gv_tOOLTIP_PASSED_IN_DATA[lv_dataIncrementor][lv_concurrentIncrementor] = StringToText(gv_timeline[lv_dataIncrementor][1]);
                }
                else {
                    gv_tOOLTIP_PASSED_IN_DATA[lv_dataIncrementor][lv_concurrentIncrementor] = StringToText(gv_timeline[lv_dataIncrementor][0]);
                }
                gv_y_PASSED_IN_DATA_CreateGraphGivenData[lv_dataIncrementor][lv_concurrentIncrementor] = gv_graphCollectedData[lv_thisSelectedData][lv_dataIncrementor][lv_thisSelectedDataType];
                gv_x_PASSED_IN_DATA_CreateGraphGivenData[lv_dataIncrementor][lv_concurrentIncrementor] = ((gv_year - 0) - lv_dataIncrementor);
            }
        }
        else {
            auto91F0EDB8_ae = gv_yearsOfData;
            lv_dataIncrementor = 0;
            for ( ; ( (auto91F0EDB8_ai >= 0 && lv_dataIncrementor <= auto91F0EDB8_ae) || (auto91F0EDB8_ai < 0 && lv_dataIncrementor >= auto91F0EDB8_ae) ) ; lv_dataIncrementor += auto91F0EDB8_ai ) {
                gv_x_PASSED_IN_DATA_CreateGraphGivenData[lv_dataIncrementor][lv_concurrentIncrementor] = gv_year;
            }
        }
    }
    gf_CreateGraphGivenData(lp_player);
    gv_graphInProgress = false;
}

string gf_GetColor (int lp_incrementor) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_incrementor == 1)) {
        return "blue";
    }
    else {
        if ((lp_incrementor == 2)) {
            return "orange";
        }
        else {
            if ((lp_incrementor == 3)) {
                return "yellow";
            }

        }
    }
    return "GetColor GOT AN INCREMENTOR OUT OF RANGE";
}

void gf_CreateGraphGivenData (int lp_player) {
    // Variable Declarations
    int lv_maxXValue;
    int lv_minXValue;
    int lv_maxYValue;
    int lv_minYValue;
    int lv_x_range;
    int lv_y_range;
    int lv_x_Increments;
    int lv_y_Increments;
    int lv_incrementor;
    int lv_concurrentIncrementor;
    int lv_storedIncrement;

    // Automatic Variable Declarations
    const int auto7E89F774_ae = gv_aLLOWED_CONCURRENT_ITEMS;
    const int auto7E89F774_ai = 1;
    int auto15682446_ae;
    const int auto15682446_ai = 1;
    const int autoE183430B_ae = gv_aLLOWED_CONCURRENT_ITEMS;
    const int autoE183430B_ai = 1;
    const int auto2FAD5971_ae = gv_dATA_PER_GRAPH;
    const int auto2FAD5971_ai = 1;
    const int auto7CD5052E_ae = gv_aLLOWED_CONCURRENT_ITEMS;
    const int auto7CD5052E_ai = 1;
    const int auto99DCC050_ae = gv_dATA_PER_GRAPH;
    const int auto99DCC050_ai = 1;

    // Variable Initialization
    lv_maxXValue = -1000000000;
    lv_minXValue = 1000000000;
    lv_maxYValue = -1000000000;
    lv_minYValue = 1000000000;

    // Implementation
    lv_concurrentIncrementor = 1;
    for ( ; ( (auto7E89F774_ai >= 0 && lv_concurrentIncrementor <= auto7E89F774_ae) || (auto7E89F774_ai < 0 && lv_concurrentIncrementor >= auto7E89F774_ae) ) ; lv_concurrentIncrementor += auto7E89F774_ai ) {
        auto15682446_ae = (gv_lENGTH_CreateGraphGivenData[lv_concurrentIncrementor] - 1);
        lv_incrementor = 0;
        for ( ; ( (auto15682446_ai >= 0 && lv_incrementor <= auto15682446_ae) || (auto15682446_ai < 0 && lv_incrementor >= auto15682446_ae) ) ; lv_incrementor += auto15682446_ai ) {
            if ((gv_allSelectedDataTypes[lp_player][lv_concurrentIncrementor] > 0) && (gv_allSelectedData[lp_player][lv_concurrentIncrementor] > 0) && (lv_incrementor < gv_lENGTH_CreateGraphGivenData[lv_concurrentIncrementor])) {
                if ((gv_y_PASSED_IN_DATA_CreateGraphGivenData[lv_incrementor][lv_concurrentIncrementor] > lv_maxYValue)) {
                    lv_maxYValue = gv_y_PASSED_IN_DATA_CreateGraphGivenData[lv_incrementor][lv_concurrentIncrementor];
                }

                if ((gv_y_PASSED_IN_DATA_CreateGraphGivenData[lv_incrementor][lv_concurrentIncrementor] < lv_minYValue)) {
                    lv_minYValue = gv_y_PASSED_IN_DATA_CreateGraphGivenData[lv_incrementor][lv_concurrentIncrementor];
                }

                if ((gv_x_PASSED_IN_DATA_CreateGraphGivenData[lv_incrementor][lv_concurrentIncrementor] > lv_maxXValue)) {
                    lv_maxXValue = gv_x_PASSED_IN_DATA_CreateGraphGivenData[lv_incrementor][lv_concurrentIncrementor];
                }

                if ((gv_x_PASSED_IN_DATA_CreateGraphGivenData[lv_incrementor][lv_concurrentIncrementor] < lv_minXValue)) {
                    lv_minXValue = gv_x_PASSED_IN_DATA_CreateGraphGivenData[lv_incrementor][lv_concurrentIncrementor];
                }

            }

        }
    }
    lv_minXValue = gf_MakeDivisibleByGoNegative(lv_minXValue, gv_x_TICK_NUMBER);
    lv_maxXValue = gf_MakeDivisibleBy(lv_maxXValue, gv_x_TICK_NUMBER);
    lv_minYValue = gf_MakeDivisibleByGoNegative(lv_minYValue, gv_y_TICK_NUMBER);
    lv_maxYValue = gf_MakeDivisibleBy(lv_maxYValue, gv_y_TICK_NUMBER);
    lv_x_range = AbsI((lv_maxXValue - lv_minXValue));
    lv_y_range = AbsI((lv_maxYValue - lv_minYValue));
    if ((lv_y_range < 1000000000) && (lv_x_range < 1000000000) && (lv_y_range > 0) && (lv_x_range > 0)) {
        gf_SetGraphAxis(lv_minXValue, lv_x_range, lv_minYValue, lv_y_range, lp_player);
        lv_concurrentIncrementor = 1;
        for ( ; ( (auto7CD5052E_ai >= 0 && lv_concurrentIncrementor <= auto7CD5052E_ae) || (auto7CD5052E_ai < 0 && lv_concurrentIncrementor >= auto7CD5052E_ae) ) ; lv_concurrentIncrementor += auto7CD5052E_ai ) {
            lv_incrementor = 0;
            for ( ; ( (auto99DCC050_ai >= 0 && lv_incrementor <= auto99DCC050_ae) || (auto99DCC050_ai < 0 && lv_incrementor >= auto99DCC050_ae) ) ; lv_incrementor += auto99DCC050_ai ) {
                if ((gv_allSelectedDataTypes[lp_player][lv_concurrentIncrementor] > 0) && (gv_allSelectedData[lp_player][lv_concurrentIncrementor] > 0) && (lv_incrementor < gv_lENGTH_CreateGraphGivenData[lv_concurrentIncrementor])) {
                    gf_GraphGivenDatapoint(lp_player, gv_graphItems[lv_incrementor][lv_concurrentIncrementor], gv_x_PASSED_IN_DATA_CreateGraphGivenData[lv_incrementor][lv_concurrentIncrementor], lv_minXValue, lv_x_range, gv_y_PASSED_IN_DATA_CreateGraphGivenData[lv_incrementor][lv_concurrentIncrementor], lv_minYValue, lv_y_range, gv_cOLOR_PASSED_IN_DATA[lv_incrementor][lv_concurrentIncrementor], gv_tOOLTIP_PASSED_IN_DATA[lv_incrementor][lv_concurrentIncrementor]);
                }
                else {
                    DialogControlSetVisible(gv_graphItems[lv_incrementor][lv_concurrentIncrementor], PlayerGroupSingle(lp_player), false);
                }
            }
        }
    }
    else {
        lv_concurrentIncrementor = 1;
        for ( ; ( (autoE183430B_ai >= 0 && lv_concurrentIncrementor <= autoE183430B_ae) || (autoE183430B_ai < 0 && lv_concurrentIncrementor >= autoE183430B_ae) ) ; lv_concurrentIncrementor += autoE183430B_ai ) {
            lv_incrementor = 0;
            for ( ; ( (auto2FAD5971_ai >= 0 && lv_incrementor <= auto2FAD5971_ae) || (auto2FAD5971_ai < 0 && lv_incrementor >= auto2FAD5971_ae) ) ; lv_incrementor += auto2FAD5971_ai ) {
                DialogControlSetVisible(gv_graphItems[lv_incrementor][lv_concurrentIncrementor], PlayerGroupSingle(lp_player), false);
            }
        }
    }
}

void gf_GraphGivenDatapoint (int lp_forPlayer, int lp_dialogItem, int lp_givenXValue, int lp_absoluteMinXValue, int lp_xMaxMinDifference, int lp_givenYValue, int lp_absoluteMinYValue, int lp_yMaxMinDifference, string lp_color, text lp_specialTooltip) {
    // Variable Declarations
    const int lv_x_START_POSITION = 126;
    const int lv_x_END_POSITION = 935;
    int lv_x_SIZE_OFFSET;
    int lv_y_SIZE_OFFSET;
    int lv_x_RANGE;
    const int lv_y_START_POSITION = 398;
    const int lv_y_END_POSITION = 38;
    int lv_y_RANGE;
    fixed lv_x_RATIO;
    int lv_xPosition;
    fixed lv_y_RATIO;
    int lv_yPosition;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_x_SIZE_OFFSET = (gv_gRAPH_X_WIDTH / 2);
    lv_y_SIZE_OFFSET = (gv_gRAPH_Y_HEIGHT / 2);
    lv_x_RANGE = AbsI((lv_x_START_POSITION - lv_x_END_POSITION));
    lv_y_RANGE = AbsI((lv_y_START_POSITION - lv_y_END_POSITION));

    // Implementation
    lv_x_RATIO = ((IntToFixed(lp_givenXValue) - IntToFixed(lp_absoluteMinXValue)) / IntToFixed(lp_xMaxMinDifference));
    lv_y_RATIO = ((IntToFixed(lp_givenYValue) - IntToFixed(lp_absoluteMinYValue)) / IntToFixed(lp_yMaxMinDifference));
    lv_xPosition = (FixedToInt((lv_x_RANGE * lv_x_RATIO)) + (lv_x_START_POSITION + lv_x_SIZE_OFFSET));
    lv_yPosition = ((lv_y_START_POSITION - lv_y_SIZE_OFFSET) - FixedToInt((lv_y_RANGE * lv_y_RATIO)));
    DialogControlSetPosition(lp_dialogItem, PlayerGroupSingle(lp_forPlayer), c_anchorTopLeft, lv_xPosition, lv_yPosition);
    libNtve_gf_SetDialogItemTooltip(lp_dialogItem, lp_specialTooltip, PlayerGroupSingle(lp_forPlayer));
    if ((lp_color == "yellow")) {
        libNtve_gf_SetDialogItemImage(lp_dialogItem, "Assets\\Textures\\Progress Bar\\YellowBox.tga", PlayerGroupSingle(lp_forPlayer));
    }
    else {
        if ((lp_color == "red")) {
            libNtve_gf_SetDialogItemImage(lp_dialogItem, "Assets\\Declare War, Neutral, Peace\\Red Box.tga", PlayerGroupSingle(lp_forPlayer));
        }
        else {
            if ((lp_color == "green")) {
                libNtve_gf_SetDialogItemImage(lp_dialogItem, "Assets\\Declare War, Neutral, Peace\\GreenBox.tga", PlayerGroupSingle(lp_forPlayer));
            }
            else {
                if ((lp_color == "blue")) {
                    libNtve_gf_SetDialogItemImage(lp_dialogItem, "Military\\MainUI\\bigtealbox.tga", PlayerGroupSingle(lp_forPlayer));
                }
                else {
                    if ((lp_color == "orange")) {
                        libNtve_gf_SetDialogItemImage(lp_dialogItem, "Military\\Music\\GameScreens\\v2\\MainUI\\MainUI\\bigOrangebox.tga", PlayerGroupSingle(lp_forPlayer));
                    }
                    else {
                        UIDisplayMessage(gv_debugPlayers, c_messageAreaSubtitle, (StringExternal("Param/Value/3EE4CA5E") + (StringToText(lp_color) + StringExternal("Param/Value/A1E0D2E1"))));
                    }
                }
            }
        }
    }
    DialogControlSetVisible(lp_dialogItem, PlayerGroupSingle(lp_forPlayer), true);
}

void gf_SetGraphAxis (int lp_xMin, int lp_xMinMaxRange, int lp_yMin, int lp_yMinMaxRange, int lp_forPlayer) {
    // Variable Declarations
    const int lv_x_TICK_NUMBER = 8;
    const int lv_y_TICK_NUMBER = 6;
    fixed lv_x_Increment;
    fixed lv_y_Increment;
    fixed lv_x_Culm;
    fixed lv_y_Culm;
    int lv_incrementor;

    // Automatic Variable Declarations
    const int autoD86A9574_ae = lv_x_TICK_NUMBER;
    const int autoD86A9574_ai = 1;
    const int auto00E655E0_ae = 0;
    const int auto00E655E0_ai = -1;

    // Variable Initialization
    lv_x_Culm = IntToFixed(lp_xMin);
    lv_y_Culm = IntToFixed(lp_yMin);

    // Implementation
    lv_x_Increment = (IntToFixed(lp_xMinMaxRange) / IntToFixed(lv_x_TICK_NUMBER));
    lv_y_Increment = (IntToFixed(lp_yMinMaxRange) / IntToFixed(lv_y_TICK_NUMBER));
    lv_incrementor = 0;
    for ( ; ( (autoD86A9574_ai >= 0 && lv_incrementor <= autoD86A9574_ae) || (autoD86A9574_ai < 0 && lv_incrementor >= autoD86A9574_ae) ) ; lv_incrementor += autoD86A9574_ai ) {
        libNtve_gf_SetDialogItemText(gv_graphXAxis[lv_incrementor], gf_MakeUIPresentable(FixedToInt(lv_x_Culm)), PlayerGroupSingle(lp_forPlayer));
        lv_x_Culm += lv_x_Increment;
    }
    lv_incrementor = lv_y_TICK_NUMBER;
    for ( ; ( (auto00E655E0_ai >= 0 && lv_incrementor <= auto00E655E0_ae) || (auto00E655E0_ai < 0 && lv_incrementor >= auto00E655E0_ae) ) ; lv_incrementor += auto00E655E0_ai ) {
        libNtve_gf_SetDialogItemText(gv_graphYAxis[lv_incrementor], gf_MakeUIPresentable(FixedToInt(lv_y_Culm)), PlayerGroupSingle(lp_forPlayer));
        lv_y_Culm += lv_y_Increment;
    }
}

int gf_MakeDivisibleBy (int lp_initial, int lp_divisibleBy) {
    // Automatic Variable Declarations
    // Implementation
    if ((ModI(lp_initial, lp_divisibleBy) != 0)) {
        return ((lp_divisibleBy - ModI(lp_initial, lp_divisibleBy)) + lp_initial);
    }
    else {
        return lp_initial;
    }
}

int gf_MakeDivisibleByGoNegative (int lp_initial, int lp_divisibleBy) {
    // Automatic Variable Declarations
    // Implementation
    if ((ModI(lp_initial, lp_divisibleBy) != 0)) {
        return (lp_initial - ModI(lp_initial, lp_divisibleBy));
    }
    else {
        return lp_initial;
    }
}

int gf_GetTotalPeopleDead (int lp_player, int lp_type) {
    // Variable Declarations
    int lv_int;
    int lv_total;

    // Automatic Variable Declarations
    const int autoA1F66C3A_ae = 15;
    const int autoA1F66C3A_ai = 1;

    // Variable Initialization

    // Implementation
    lv_int = 0;
    for ( ; ( (autoA1F66C3A_ai >= 0 && lv_int <= autoA1F66C3A_ae) || (autoA1F66C3A_ai < 0 && lv_int >= autoA1F66C3A_ae) ) ; lv_int += autoA1F66C3A_ai ) {
        lv_total += gv_peopleDead[lp_player][lv_int][lp_type];
    }
    return lv_total;
}

int gf_GetTotalPeopleKilled (int lp_player) {
    // Variable Declarations
    int lv_int;
    int lv_total;

    // Automatic Variable Declarations
    const int auto87D17406_ae = 15;
    const int auto87D17406_ai = 1;

    // Variable Initialization

    // Implementation
    lv_int = 0;
    for ( ; ( (auto87D17406_ai >= 0 && lv_int <= auto87D17406_ae) || (auto87D17406_ai < 0 && lv_int >= auto87D17406_ae) ) ; lv_int += auto87D17406_ai ) {
        lv_total += gv_peopleDead[lv_int][lp_player][0];
        lv_total += gv_peopleDead[lv_int][lp_player][1];
    }
    return lv_total;
}

text gf_GetTotalPeopleDeadToolTip (int lp_player, int lp_type) {
    // Variable Declarations
    bool lv_got;
    int lv_int;
    text lv_text;

    // Automatic Variable Declarations
    const int autoDE1F124F_ae = 15;
    const int autoDE1F124F_ai = 1;

    // Variable Initialization

    // Implementation
    lv_int = 0;
    for ( ; ( (autoDE1F124F_ai >= 0 && lv_int <= autoDE1F124F_ae) || (autoDE1F124F_ai < 0 && lv_int >= autoDE1F124F_ae) ) ; lv_int += autoDE1F124F_ai ) {
        if (((PlayerGroupHasPlayer(PlayerGroupAll(), lv_int) == true) || (lv_int == 9) || (lv_int == 10) || (lv_int == 11) || (lv_int == 12) || (lv_int == 15)) && (gv_peopleDead[lp_player][lv_int][lp_type] > 0)) {
            if ((lv_got == true)) {
                lv_text = (lv_text + StringExternal("Param/Value/BA6D5440"));
            }

            lv_text = (lv_text + ((StringToText("") + StringToText("")) + (TextWithColor((StringExternal("Param/Value/23E466C1") + (gf_NationOfPlayer(lv_int) + StringExternal("Param/Value/8605EBD9"))), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_int, false))) + (StringToText("") + gf_MakeUIPresentable((gv_peopleDead[lp_player][lv_int][lp_type] * 100))))));
            lv_got = true;
        }

    }
    return lv_text;
}

void gf_OpenCloseGraphs (int lp_player, bool lp_open) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_open == true)) {
        gf_OpenCloseResearchMenu(lp_player, false);
        gf_OpenCloseEU(lp_player, false);
        gf_OpenCloseEconomy(lp_player, false);
        gf_Grapher(lp_player);
        DialogSetVisible(gv_graphGUI[0], PlayerGroupSingle(lp_player), true);
        DialogSetVisible(gv_graphGUI[1], PlayerGroupSingle(lp_player), true);
        DialogSetVisible(gv_graphGUI[2], PlayerGroupSingle(lp_player), true);
        DialogSetVisible(gv_graphGUI[3], PlayerGroupSingle(lp_player), true);
    }
    else {
        DialogSetVisible(gv_graphGUI[0], PlayerGroupSingle(lp_player), false);
        DialogSetVisible(gv_graphGUI[1], PlayerGroupSingle(lp_player), false);
        DialogSetVisible(gv_graphGUI[2], PlayerGroupSingle(lp_player), false);
        DialogSetVisible(gv_graphGUI[3], PlayerGroupSingle(lp_player), false);
    }
}

void gf_OpenCloseEconomy (int lp_player, bool lp_open) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_open == true)) {
        gf_OpenCloseGraphs(lp_player, false);
        gf_OpenCloseResearchMenu(lp_player, false);
        gf_OpenCloseEU(lp_player, false);
        DialogSetVisible(gv_tradeMainDialog, PlayerGroupSingle(lp_player), true);
        DialogSetVisible(gv_economyTabsMainDialog, PlayerGroupSingle(lp_player), true);
        DialogSetVisible(gv_corporationMainDialog, PlayerGroupSingle(lp_player), false);
        DialogSetVisible(gv_corporationMainsSideDialog, PlayerGroupSingle(lp_player), false);
        DialogSetVisible(gv_economicPolicyMainDialog, PlayerGroupSingle(lp_player), false);
        DialogSetVisible(gv_economicInternalPolicyDialog, PlayerGroupSingle(lp_player), false);
        DialogSetVisible(gv_economicExternalPolicyDialog, PlayerGroupSingle(lp_player), false);
        DialogSetVisible(gv_manualTradeDialog, PlayerGroupSingle(lp_player), false);
        DialogControlSetEnabled(gv_economicTabsDialogItems[2], PlayerGroupSingle(lp_player), false);
        DialogControlSetEnabled(gv_economicTabsDialogItems[3], PlayerGroupSingle(lp_player), true);
        DialogControlSetEnabled(gv_economicTabsDialogItems[4], PlayerGroupSingle(lp_player), true);
    }
    else {
        DialogSetVisible(gv_economyTabsMainDialog, PlayerGroupSingle(lp_player), false);
        DialogSetVisible(gv_tradeMainDialog, PlayerGroupSingle(lp_player), false);
        DialogSetVisible(gv_corporationMainDialog, PlayerGroupSingle(lp_player), false);
        DialogSetVisible(gv_corporationMainsSideDialog, PlayerGroupSingle(lp_player), false);
        DialogSetVisible(gv_economicPolicyMainDialog, PlayerGroupSingle(lp_player), false);
        DialogSetVisible(gv_economicInternalPolicyDialog, PlayerGroupSingle(lp_player), false);
        DialogSetVisible(gv_economicExternalPolicyDialog, PlayerGroupSingle(lp_player), false);
        DialogSetVisible(gv_economicDebtPolicy, PlayerGroupSingle(lp_player), false);
        DialogSetVisible(gv_privateLoanUI, PlayerGroupSingle(lp_player), false);
        DialogSetVisible(gv_repayLoanUI, PlayerGroupSingle(lp_player), false);
        DialogSetVisible(gv_manualTradeDialog, PlayerGroupSingle(lp_player), false);
        DialogControlSetEnabled(gv_economicTabsDialogItems[2], PlayerGroupSingle(lp_player), false);
        DialogControlSetEnabled(gv_economicTabsDialogItems[3], PlayerGroupSingle(lp_player), true);
        DialogControlSetEnabled(gv_economicTabsDialogItems[4], PlayerGroupSingle(lp_player), true);
    }
}

void gf_OpenCloseEU (int lp_player, bool lp_open) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_open == true)) {
        gf_OpenCloseGraphs(lp_player, false);
        gf_OpenCloseEconomy(lp_player, false);
        gf_OpenCloseResearchMenu(lp_player, false);
        DialogSetVisible(gv_eUScreen, PlayerGroupSingle(lp_player), true);
        DialogControlSetVisible(gv_openAdvancedEUUIButton[0], PlayerGroupSingle(lp_player), false);
        DialogControlSetVisible(gv_openAdvancedEUUIButton[1], PlayerGroupSingle(lp_player), true);
    }
    else {
        DialogSetVisible(gv_eUScreen, PlayerGroupSingle(lp_player), false);
        DialogControlSetVisible(gv_openAdvancedEUUIButton[0], PlayerGroupSingle(lp_player), true);
        DialogControlSetVisible(gv_openAdvancedEUUIButton[1], PlayerGroupSingle(lp_player), false);
    }
}

void gf_OpenCloseResearchMenu (int lp_player, bool lp_open) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_open == true)) {
        gf_OpenCloseGraphs(lp_player, false);
        gf_OpenCloseEU(lp_player, false);
        gf_OpenCloseEconomy(lp_player, false);
        DialogSetVisible(gv_current, PlayerGroupSingle(lp_player), false);
        DialogSetVisible(gv_researchMenuSelected, PlayerGroupSingle(lp_player), false);
        DialogSetVisible(gv_researchMenuFrame, PlayerGroupSingle(lp_player), false);
        DialogSetVisible(gv_governmentTechTree, PlayerGroupSingle(lp_player), false);
        DialogSetVisible(gv_economyTechTree, PlayerGroupSingle(lp_player), false);
        DialogSetVisible(gv_specialTechTree, PlayerGroupSingle(lp_player), false);
        DialogSetVisible(gv_militaryTechTree, PlayerGroupSingle(lp_player), false);
        DialogSetVisible(gv_researchFunding, PlayerGroupSingle(lp_player), false);
        DialogSetVisible(gv_closeButtonResearchMenu, PlayerGroupSingle(lp_player), false);
        DialogSetVisible(gv_current, PlayerGroupSingle(lp_player), true);
        DialogSetVisible(gv_researchMenuSelected, PlayerGroupSingle(lp_player), true);
        DialogSetVisible(gv_researchMenuFrame, PlayerGroupSingle(lp_player), true);
        DialogSetVisible(gv_governmentTechTree, PlayerGroupSingle(lp_player), true);
        DialogSetVisible(gv_researchFunding, PlayerGroupSingle(lp_player), true);
        DialogSetVisible(gv_closeButtonResearchMenu, PlayerGroupSingle(lp_player), true);
        DialogControlSetEnabled(gv_researchMenuFrameDialogItems[0], PlayerGroupSingle(lp_player), true);
        DialogControlSetEnabled(gv_researchMenuFrameDialogItems[1], PlayerGroupSingle(lp_player), true);
        DialogControlSetEnabled(gv_researchMenuFrameDialogItems[2], PlayerGroupSingle(lp_player), true);
        DialogControlSetEnabled(gv_researchMenuFrameDialogItems[3], PlayerGroupSingle(lp_player), true);
        DialogControlSetEnabled(gv_researchMenuFrameDialogItems[4], PlayerGroupSingle(lp_player), true);
        DialogControlSetEnabled(gv_researchMenuFrameDialogItems[0], PlayerGroupSingle(lp_player), false);
    }
    else {
        DialogSetVisible(gv_current, PlayerGroupSingle(lp_player), false);
        DialogSetVisible(gv_researchMenuSelected, PlayerGroupSingle(lp_player), false);
        DialogSetVisible(gv_researchMenuFrame, PlayerGroupSingle(lp_player), false);
        DialogSetVisible(gv_governmentTechTree, PlayerGroupSingle(lp_player), false);
        DialogSetVisible(gv_economyTechTree, PlayerGroupSingle(lp_player), false);
        DialogSetVisible(gv_specialTechTree, PlayerGroupSingle(lp_player), false);
        DialogSetVisible(gv_militaryTechTree, PlayerGroupSingle(lp_player), false);
        DialogSetVisible(gv_researchFunding, PlayerGroupSingle(lp_player), false);
        DialogSetVisible(gv_closeButtonResearchMenu, PlayerGroupSingle(lp_player), false);
    }
}

void gf_GivePlauge () {
    // Variable Declarations
    int lv_virus;
    unit lv_infect;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_virus = RandomInt(1, RandomInt(1, 2));
    lv_infect = UnitGroupRandomUnit(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterPsionic) | (1 << c_targetFilterUser1), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);

    // Implementation
    if ((RandomInt(0, 100) < (90 - (10 * lv_virus)))) {
    }
    else {
        if (((((UnitGetOwner(lv_infect) > 7) || (TechTreeUpgradeCount(UnitGetOwner(lv_infect), "MassVaccine", c_techCountCompleteOnly) == 1)) && (RandomInt(0, 100) < (40 - (10 * lv_virus)))) || ((RandomInt(0, 100) < (30 - (10 * lv_virus)))))) {
            if ((UnitHasBehavior2(lv_infect, "populationThinnerImmunity") == false) && (RandomInt(0, 100) < (150 - (50 * lv_virus)))) {
                if ((UnitHasBehavior2(lv_infect, "PopulationThinner2") == false) && (RandomInt(0, 100) < (0 + (50 * lv_virus)))) {
                    if ((lv_virus == 1)) {
                        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextWithColor((StringExternal("Param/Value/06676625") + StringToText(gf_GetCountyName(gf_GetCountyID(lv_infect)))), Color(100.00, 0.00, 0.00)));
                        UnitBehaviorAdd(lv_infect, "PopulationThinner2", lv_infect, 1);
                        MinimapPing(PlayerGroupAll(), UnitGetPosition(lv_infect), 4.0, Color(100.00, 0.00, 0.00));
                    }
                    else {
                        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextWithColor((StringExternal("Param/Value/C082BF7F") + StringToText(gf_GetCountyName(gf_GetCountyID(lv_infect)))), Color(100.00, 0.00, 0.00)));
                        UnitBehaviorAdd(lv_infect, "PopulationThinner2", lv_infect, 1);
                        MinimapPing(PlayerGroupAll(), UnitGetPosition(lv_infect), 4.0, Color(100.00, 0.00, 0.00));
                    }
                }

            }

        }

    }
}

point gf_AINewBuilding (unitgroup lp_groundUnits) {
    // Variable Declarations
    point lv_gotPoint;
    unit lv_selectedUnit;
    region lv_possibleSpawn;

    // Automatic Variable Declarations
    const int auto33F1218C_n = 100;
    int auto33F1218C_i;

    // Variable Initialization

    // Implementation
    lv_selectedUnit = UnitGroupRandomUnit(lp_groundUnits, c_unitCountAlive);
    for (auto33F1218C_i = 1; auto33F1218C_i <= auto33F1218C_n; auto33F1218C_i += 1) {
        lv_gotPoint = RegionRandomPoint(RegionCircle(UnitGetPosition(lv_selectedUnit), 7.0));
        if ((RegionContainsPoint(RegionCircle(UnitGetPosition(UnitGroupClosestToPoint(lp_groundUnits, lv_gotPoint)), 2.2), lv_gotPoint) == false)) {
            break;
        }

    }
    return lv_gotPoint;
}

void gf_NukeFiredAlready () {
    // Automatic Variable Declarations
    // Implementation
    gv_nukesFiredAlready = true;
    SoundPlayForPlayer(SoundLink("EarthDestruction", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
}

void gf_CreateAsh (point lp_detonatePoint, int lp_howManySeconds) {
    // Variable Declarations
    actor lv_ash;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libNtve_gf_CreateModelAtPoint("Elsecaro_Ash_Wind", lp_detonatePoint);
    lv_ash = libNtve_gf_ActorLastCreated();
    Wait(lp_howManySeconds, c_timeGame);
    libNtve_gf_KillModel(lv_ash);
}

void gf_ThreathenRussia (point lp_impactPoint) {
    // Automatic Variable Declarations
    // Implementation
    if ((DistanceBetweenPoints(lp_impactPoint, UnitGetPosition(UnitGroupClosestToPoint(UnitGroup(null, 11, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), lp_impactPoint))) < 16.0) && (gv_recentNukeThreatToRussia == false)) {
        gf_ChanceBeginNuclearProgram();
    }

}

void gf_ChanceBeginNuclearProgram () {
    // Automatic Variable Declarations
    // Implementation
    gv_recentNukeThreatToRussia = true;
    if (((IntToFixed(gv_arisAIDifficulty) * RandomFixed(0.0, 3.0)) > 100.0)) {
        if ((gv_rUNuclearProgress < 3)) {
            gf_RUNuclearDevelopment();
        }
        else {
            if (((IntToFixed(gv_arisAIDifficulty) * RandomFixed(0.0, 2.0)) > 100.0)) {
                gf_RUNuke();
            }

        }
    }

    Wait(25.0, c_timeGame);
    gv_recentNukeThreatToRussia = false;
}

void gf_ResetModifiers (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((TechTreeUpgradeCount(lp_player, "Communism", c_techCountCompleteOnly) == 1)) {
        gv_creditIncomeModifier[lp_player] += 60;
        gv_foodIncomeModifier[lp_player] -= 30;
        gv_electricityIncomeModifier[lp_player] -= 35;
        gv_metalIncomeModifier[lp_player] -= 20;
        gv_oilIncomeModifier[lp_player] -= 20;
    }

    if ((TechTreeUpgradeCount(lp_player, "GrandEmpire", c_techCountCompleteOnly) == 1)) {
        gv_creditIncomeModifier[lp_player] -= 30;
        gv_foodIncomeModifier[lp_player] -= 20;
        gv_popGrowth[lp_player] -= 0.005;
        gv_techIncomeModifier[lp_player] += 15;
    }

    if ((TechTreeUpgradeCount(lp_player, "SocialistRepublic", c_techCountCompleteOnly) == 1)) {
        gv_creditIncomeModifier[lp_player] += 30;
        gv_foodIncomeModifier[lp_player] -= 40;
        gv_electricityIncomeModifier[lp_player] -= 35;
        gv_metalIncomeModifier[lp_player] -= 10;
        gv_oilIncomeModifier[lp_player] -= 10;
        gv_popGrowth[lp_player] -= 0.005;
    }

    if ((TechTreeUpgradeCount(lp_player, "Corporatocracy", c_techCountCompleteOnly) == 1)) {
        gv_creditIncomeModifier[lp_player] -= 180;
        gv_foodIncomeModifier[lp_player] += 60;
        gv_electricityIncomeModifier[lp_player] += 10;
        gv_popGrowth[lp_player] += 0.01;
        gv_techIncomeModifier[lp_player] += 10;
    }

    if ((TechTreeUpgradeCount(lp_player, "FauxDemocracy", c_techCountCompleteOnly) == 1)) {
        gv_creditIncomeModifier[lp_player] -= 60;
        gv_electricityIncomeModifier[lp_player] += 25;
        gv_popGrowth[lp_player] -= 0.025;
        gv_techIncomeModifier[lp_player] += 10;
    }

    if ((TechTreeUpgradeCount(lp_player, "Neofascism", c_techCountCompleteOnly) == 1)) {
        gv_creditIncomeModifier[lp_player] += 30;
        gv_foodIncomeModifier[lp_player] += 20;
        gv_metalIncomeModifier[lp_player] -= 25;
        gv_oilIncomeModifier[lp_player] -= 25;
        gv_popGrowth[lp_player] += 0.02;
        gv_techIncomeModifier[lp_player] -= 15;
    }

    if ((TechTreeUpgradeCount(lp_player, "NeoFederation", c_techCountCompleteOnly) == 1)) {
        gv_creditIncomeModifier[lp_player] += 15;
        gv_foodIncomeModifier[lp_player] -= 10;
        gv_popGrowth[lp_player] -= 0.04;
        gv_techIncomeModifier[lp_player] -= 12;
    }

    if ((TechTreeUpgradeCount(lp_player, "DirectDemocracy", c_techCountCompleteOnly) == 1)) {
        gv_creditIncomeModifier[lp_player] -= 75;
        gv_foodIncomeModifier[lp_player] += 15;
        gv_electricityIncomeModifier[lp_player] += 10;
        gv_popGrowth[lp_player] -= 0.0055;
        gv_techIncomeModifier[lp_player] -= 20;
    }

    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "Bonus", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "DeBonus", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "DiplomaticPolicyChange", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "Communism", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "SocialistRepublic", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "NeoFederation", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "DirectDemocracy", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "FauxDemocracy", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "GrandEmpire", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "Corporatocracy", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "Neofascism", 0);
    gf_ResetWarPolicy(lp_player);
}

text gf_NationOfPlayer (int lp_player) {
    // Variable Declarations
    string lv_nation;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_nation = gv_nations[lp_player];

    // Implementation
    lv_nation = gv_nations[lp_player];
    if (((lv_nation == "provinceError") || (lv_nation == ""))) {
        return PlayerName(lp_player);
    }
    else {
        return StringToText(lv_nation);
    }
}

string gf_NationOfPlayerString (int lp_player) {
    // Variable Declarations
    string lv_nation;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_nation = gv_nations[lp_player];

    // Implementation
    lv_nation = gv_nations[lp_player];
    if (((lv_nation == "provinceError") || (lv_nation == ""))) {
        return "Player not found, consider using the Text version of this function.";
    }
    else {
        return lv_nation;
    }
}

string gf_GetCountyName (int lp_countyID) {
    // Variable Declarations
    int lv_ticking;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Newfoundland";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "New New England";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Quebec";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "New York";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "New Jersey";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Delaware";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Dublin";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        if ((gv_nationalID[gv_soverignty[lv_ticking]] == 2)) {
            return "Munster";
        }
        else {
            return "Ireland";
        }
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Inverness";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Lothian";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Wales";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "London";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Wessex";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Kent";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Northumbria";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Portugal";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Galicia";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Navarra";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Aragon";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Catalonia";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Castille";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Madrid";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Valencia";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Andalucia";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Balearia";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Tangiers";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Rabat";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Meknes";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Oran";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Algiers";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Constantine";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Tunis";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Brittany";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Normandy";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Calais";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Lorraine";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Paris";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Bourgogne";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Loire";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Aquataine";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Auvergne";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Provonce";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Languedoc";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Corsica";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Sardinia";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Piedmont";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Lombardy";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Tuscany";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Marche";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Rome";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Campania";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Calabria";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Sicily";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Switzerland";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Tyrol";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Salzberg";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Vienna";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Antwerp";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Luxembourg";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Brussels";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Amsterdam";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Friesland";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Jutland";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Fyn";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Copenhagen";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Smalland";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Gotland";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Gothenburg";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Vastergotland";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Rogaland";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Agder";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Varmland";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Stockholm";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Rhineland";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Westfalen";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Hesse";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Nurnberg";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Bremen";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Holstein";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Mecklenberg";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Berlin";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Brandenburg";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Munich";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Wuttenberg";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Bohemia";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Moravia";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Slovenia";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Croatia";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Bosnia";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Montenegro";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Belegrade";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Serbia";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Kosovo";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Macedonia";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Albania";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Ionia";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Thrace";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Thessalia";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Athens";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Peloponnesia";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        if (((gf_GetCountySoverignty(101) >= 1) && (gf_GetCountySoverignty(101) <= 7))) {
            if (((gf_GetCultureGroup(gf_GetCountyID(UnitGroupClosestToPoint(UnitGroup("Capital", gf_GetCountySoverignty(101), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), PointFromId(2)))) == 6) || (gf_GetCultureGroup(gf_GetCountyID(UnitGroupClosestToPoint(UnitGroup("Capital", gf_GetCountySoverignty(101), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), PointFromId(2)))) == 15))) {
                return "Istanbul";
            }
            else {
                return "Constantinople";
            }
        }
        else {
            return "Istanbul";
        }
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Gallipoli";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Bursa";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Izmir";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Bartin";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Ankara";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Afyon";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Antalya";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Sinop";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Trabzon";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Sivas";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Elzaig";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Mardin";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Erzurum";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Kars";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Van";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Tabriz";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Armenia";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Tbilisi";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Ajaria";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Abkhazia";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Stettin";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Danzig";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Olsztyn";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Poznan";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Lodz";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Warsaw";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Moravia";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Krakow";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Hiiu";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Tallinn";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Saare";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Talsi";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Kalingrad";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Vilnius";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Riga";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Rezekne";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Narva";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Pecs";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Sopron";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Timisoara";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Napoca";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Maramures";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Moldavia";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Transilvania";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Bucharest";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Sofia";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Varna";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Craiova";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Grodno";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Minsk";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Pinsk";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Viciebsk";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Gomel";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Konotop";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Kiev";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Lviv";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Uman";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Kharkiv";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Donetsk";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Luhansk";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Mariupol";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Kerch";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Crimea";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Mykolaiv";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        if ((gf_GetGovernmentType(gv_soverignty[lv_ticking]) == 1)) {
            return "Leningrad";
        }
        else {
            return "St. Petersburg";
        }
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Pskov";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Novgorod";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Smolensk";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Bryansk";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Kursk";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Tver";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Kaluga";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Oryol";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Volgodonsk";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Rostov";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Krasnodar";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Stavropol";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Grozny";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        if (((TechTreeUpgradeCount(gv_soverignty[lv_ticking], "Communism", c_techCountCompleteOnly) == 1))) {
            return "Stalingrad";
        }
        else {
            return "Volgograd";
        }
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Moscow";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Yaroslavl";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Kazan";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Perm";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Sorum";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Tyumen";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Nizhnevartovsk";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Carinthia";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Budapest";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Azerbaijan";
    }

    lv_ticking += 1;
    if ((lp_countyID == lv_ticking)) {
        return "Gilan";
    }

    return "provinceError";
}

int gf_GetCountyPopulation (int lp_county) {
    // Variable Declarations
    int lv_regionalPopulation;

    // Automatic Variable Declarations
    unitgroup auto099927DB_g;
    int auto099927DB_u;
    unit auto099927DB_var;
    unitgroup autoBF86E4AB_g;
    int autoBF86E4AB_u;
    unit autoBF86E4AB_var;

    // Variable Initialization

    // Implementation
    auto099927DB_g = UnitGroup(null, c_playerAny, gv_countRegions[lp_county], UnitFilter((1 << c_targetFilterPsionic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterUser1), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto099927DB_u = UnitGroupCount(auto099927DB_g, c_unitCountAll);
    for (;; auto099927DB_u -= 1) {
        auto099927DB_var = UnitGroupUnitFromEnd(auto099927DB_g, auto099927DB_u);
        if (auto099927DB_var == null) { break; }
        lv_regionalPopulation += FixedToInt(UnitGetPropertyFixed(auto099927DB_var, c_unitPropEnergy, c_unitPropCurrent));
    }
    autoBF86E4AB_g = UnitGroup(null, c_playerAny, gv_countRegions[lp_county], UnitFilter((1 << c_targetFilterPsionic) | (1 << c_targetFilterStructure), 0, (1 << c_targetFilterUser1) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoBF86E4AB_u = UnitGroupCount(autoBF86E4AB_g, c_unitCountAll);
    for (;; autoBF86E4AB_u -= 1) {
        autoBF86E4AB_var = UnitGroupUnitFromEnd(autoBF86E4AB_g, autoBF86E4AB_u);
        if (autoBF86E4AB_var == null) { break; }
        lv_regionalPopulation += (FixedToInt(UnitGetPropertyFixed(autoBF86E4AB_var, c_unitPropEnergy, c_unitPropCurrent)) / 2);
    }
    if ((lp_county == 181)) {
        return 50000000;
    }
    else {
        return lv_regionalPopulation;
    }
}

int gf_GetCountyPopulationProportion (int lp_county) {
    // Variable Declarations
    int lv_regionalPopulation;

    // Automatic Variable Declarations
    unitgroup auto0CC84111_g;
    int auto0CC84111_u;
    unit auto0CC84111_var;
    unitgroup autoFF9ADAF5_g;
    int autoFF9ADAF5_u;
    unit autoFF9ADAF5_var;

    // Variable Initialization

    // Implementation
    auto0CC84111_g = UnitGroup(null, c_playerAny, gv_countRegions[lp_county], UnitFilter((1 << c_targetFilterPsionic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterUser1), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto0CC84111_u = UnitGroupCount(auto0CC84111_g, c_unitCountAll);
    for (;; auto0CC84111_u -= 1) {
        auto0CC84111_var = UnitGroupUnitFromEnd(auto0CC84111_g, auto0CC84111_u);
        if (auto0CC84111_var == null) { break; }
        lv_regionalPopulation += FixedToInt(UnitGetPropertyFixed(auto0CC84111_var, c_unitPropEnergy, c_unitPropCurrent));
    }
    autoFF9ADAF5_g = UnitGroup(null, c_playerAny, gv_countRegions[lp_county], UnitFilter((1 << c_targetFilterPsionic) | (1 << c_targetFilterStructure), 0, (1 << c_targetFilterUser1) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoFF9ADAF5_u = UnitGroupCount(autoFF9ADAF5_g, c_unitCountAll);
    for (;; autoFF9ADAF5_u -= 1) {
        autoFF9ADAF5_var = UnitGroupUnitFromEnd(autoFF9ADAF5_g, autoFF9ADAF5_u);
        if (autoFF9ADAF5_var == null) { break; }
        lv_regionalPopulation += (FixedToInt(UnitGetPropertyFixed(autoFF9ADAF5_var, c_unitPropEnergy, c_unitPropCurrent)) / 2);
    }
    if ((!((lv_regionalPopulation == 0) || (gv_globalPopulation == 0)))) {
        if (((lp_county == 181) || (lp_county == 180) || (lp_county == 187))) {
            return (((lv_regionalPopulation * PlayerGroupCount(gv_users)) * 18000) / gv_globalPopulation);
        }
        else {
            return (((lv_regionalPopulation * PlayerGroupCount(gv_users)) * 8000) / gv_globalPopulation);
        }
    }
    else {
        if (((lp_county == 181) || (lp_county == 180) || (lp_county == 187))) {
            return 50;
        }
        else {
            return 0;
        }
    }
}

int gf_GetCountySoverignty (int lp_countyID) {
    // Variable Declarations
    bool lv_noUnits;
    int[16] lv_soverignPoints;
    int[2] lv_bestPoints;

    // Automatic Variable Declarations
    unitgroup auto341E7DE9_g;
    int auto341E7DE9_u;
    unit auto341E7DE9_var;
    playergroup autoDD928C71_g;
    int autoDD928C71_var;
    playergroup auto6CF802B9_g;
    int auto6CF802B9_var;

    // Variable Initialization
    lv_noUnits = true;

    // Implementation
    lv_bestPoints[1] = 0;
    auto341E7DE9_g = UnitGroup(null, c_playerAny, gv_countRegions[lp_countyID], UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto341E7DE9_u = UnitGroupCount(auto341E7DE9_g, c_unitCountAll);
    for (;; auto341E7DE9_u -= 1) {
        auto341E7DE9_var = UnitGroupUnitFromEnd(auto341E7DE9_g, auto341E7DE9_u);
        if (auto341E7DE9_var == null) { break; }
        if ((gf_GetCountyID(auto341E7DE9_var) == lp_countyID)) {
            lv_noUnits = false;
            if (((UnitGetType(auto341E7DE9_var) == "Capital") || (UnitGetType(auto341E7DE9_var) == "Volgograd") || (UnitGetType(auto341E7DE9_var) == "Moscow") || (UnitGetType(auto341E7DE9_var) == "Nizhnevartovsk"))) {
                lv_soverignPoints[UnitGetOwner(auto341E7DE9_var)] += 10000;
            }

            if ((UnitGetType(auto341E7DE9_var) == "DataCore")) {
                lv_soverignPoints[UnitGetOwner(auto341E7DE9_var)] += 5000;
            }

            if ((UnitGetType(auto341E7DE9_var) == "SubstationmkII")) {
                lv_soverignPoints[UnitGetOwner(auto341E7DE9_var)] += 2500;
            }

            if ((UnitTypeTestAttribute(UnitGetType(auto341E7DE9_var), c_unitAttributeUser1) == true)) {
                lv_soverignPoints[UnitGetOwner(auto341E7DE9_var)] += FixedToInt(UnitGetPropertyFixed(auto341E7DE9_var, c_unitPropEnergy, c_unitPropCurrent));
            }

            if ((UnitTypeTestAttribute(UnitGetType(auto341E7DE9_var), c_unitAttributePsionic) == true)) {
                lv_soverignPoints[UnitGetOwner(auto341E7DE9_var)] += FixedToInt(UnitGetPropertyFixed(auto341E7DE9_var, c_unitPropEnergy, c_unitPropCurrent));
            }

            lv_soverignPoints[UnitGetOwner(auto341E7DE9_var)] += 1;
        }

    }
    autoDD928C71_g = gv_users;
    autoDD928C71_var = -1;
    while (true) {
        autoDD928C71_var = PlayerGroupNextPlayer(autoDD928C71_g, autoDD928C71_var);
        if (autoDD928C71_var < 0) { break; }
        if ((gv_subjugated[autoDD928C71_var] == true)) {
            lv_soverignPoints[gv_subjugator[autoDD928C71_var]] += autoDD928C71_var;
            lv_soverignPoints[autoDD928C71_var] = 0;
        }

    }
    auto6CF802B9_g = gv_users;
    auto6CF802B9_var = -1;
    while (true) {
        auto6CF802B9_var = PlayerGroupNextPlayer(auto6CF802B9_g, auto6CF802B9_var);
        if (auto6CF802B9_var < 0) { break; }
        if ((lv_soverignPoints[auto6CF802B9_var] > lv_bestPoints[0])) {
            lv_bestPoints[0] = lv_soverignPoints[auto6CF802B9_var];
            lv_bestPoints[1] = auto6CF802B9_var;
        }

    }
    if (((lv_bestPoints[0] < lv_soverignPoints[11]) || (lv_bestPoints[0] < lv_soverignPoints[10]))) {
        if ((lv_soverignPoints[10] < lv_soverignPoints[11])) {
            lv_bestPoints[0] = lv_soverignPoints[11];
            lv_bestPoints[1] = 11;
        }
        else {
            lv_bestPoints[1] = 10;
        }
    }

    return lv_bestPoints[1];
}

int gf_GetCountySoverigntyPointCount (int lp_countyID, int lp_player) {
    // Variable Declarations
    bool lv_noUnits;
    int lv_soverignPoints;

    // Automatic Variable Declarations
    unitgroup autoF3166BF6_g;
    int autoF3166BF6_u;
    unit autoF3166BF6_var;

    // Variable Initialization
    lv_noUnits = true;

    // Implementation
    autoF3166BF6_g = UnitGroup(null, lp_player, gv_countRegions[lp_countyID], UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF3166BF6_u = UnitGroupCount(autoF3166BF6_g, c_unitCountAll);
    for (;; autoF3166BF6_u -= 1) {
        autoF3166BF6_var = UnitGroupUnitFromEnd(autoF3166BF6_g, autoF3166BF6_u);
        if (autoF3166BF6_var == null) { break; }
        if ((gf_GetCountyID(autoF3166BF6_var) == lp_countyID)) {
            lv_noUnits = false;
            lv_soverignPoints += 1;
            if ((UnitGetType(autoF3166BF6_var) == "Capital")) {
                lv_soverignPoints += 10000;
            }

            if ((UnitGetType(autoF3166BF6_var) == "DataCore")) {
                lv_soverignPoints += 1000;
            }

            if ((UnitGetType(autoF3166BF6_var) == "SubstationmkII")) {
                lv_soverignPoints += 200;
            }

            if ((UnitTypeTestAttribute(UnitGetType(autoF3166BF6_var), c_unitAttributeUser1) == true)) {
                lv_soverignPoints += FixedToInt(UnitGetPropertyFixed(autoF3166BF6_var, c_unitPropEnergy, c_unitPropCurrent));
            }

            if ((UnitTypeTestAttribute(UnitGetType(autoF3166BF6_var), c_unitAttributePsionic) == true)) {
                lv_soverignPoints += FixedToInt(UnitGetPropertyFixed(autoF3166BF6_var, c_unitPropEnergy, c_unitPropCurrent));
            }

        }

    }
    return lv_soverignPoints;
}

int gf_GetCountyID (unit lp_capitalCityBuilding) {
    // Variable Declarations
    int lv_tickingID;

    // Automatic Variable Declarations
    const int autoCF5ACBB0_ae = gv_numberOfRegions;
    const int autoCF5ACBB0_ai = 1;

    // Variable Initialization

    // Implementation
    lv_tickingID = 1;
    for ( ; ( (autoCF5ACBB0_ai >= 0 && lv_tickingID <= autoCF5ACBB0_ae) || (autoCF5ACBB0_ai < 0 && lv_tickingID >= autoCF5ACBB0_ae) ) ; lv_tickingID += autoCF5ACBB0_ai ) {
        if ((libNtve_gf_UnitInRegion(lp_capitalCityBuilding, gv_countRegions[lv_tickingID]) == true)) {
            return lv_tickingID;
        }

    }
    return 0;
}

int gf_GetCountyIDByPoint (point lp_point) {
    // Variable Declarations
    int lv_tickingID;

    // Automatic Variable Declarations
    const int auto2007CB2F_ae = gv_numberOfRegions;
    const int auto2007CB2F_ai = 1;

    // Variable Initialization

    // Implementation
    lv_tickingID = 1;
    for ( ; ( (auto2007CB2F_ai >= 0 && lv_tickingID <= auto2007CB2F_ae) || (auto2007CB2F_ai < 0 && lv_tickingID >= auto2007CB2F_ae) ) ; lv_tickingID += auto2007CB2F_ai ) {
        if ((RegionContainsPoint(gv_countRegions[lv_tickingID], lp_point) == true)) {
            return lv_tickingID;
        }

    }
    return 0;
}

int gf_GetCultureGroup (int lp_province) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_province >= 1) && (lp_province <= 6))) {
        return 1;
    }

    if (((lp_province >= 7) && (lp_province <= 8))) {
        return 2;
    }

    if (((lp_province >= 9) && (lp_province <= 10))) {
        return 3;
    }

    if (((lp_province >= 11) && (lp_province <= 15))) {
        return 4;
    }

    if (((lp_province >= 16) && (lp_province <= 25))) {
        return 5;
    }

    if (((lp_province >= 26) && (lp_province <= 32))) {
        return 6;
    }

    if (((lp_province >= 33) && (lp_province <= 44))) {
        return 7;
    }

    if ((((lp_province >= 45) && (lp_province <= 53)) || ((lp_province >= 188) && (lp_province <= 188)))) {
        return 8;
    }

    if (((lp_province >= 54) && (lp_province <= 57))) {
        return 9;
    }

    if (((lp_province >= 58) && (lp_province <= 62))) {
        return 10;
    }

    if (((lp_province >= 63) && (lp_province <= 73))) {
        return 11;
    }

    if (((lp_province >= 74) && (lp_province <= 86))) {
        return 12;
    }

    if (((lp_province >= 87) && (lp_province <= 95))) {
        return 13;
    }

    if (((lp_province >= 96) && (lp_province <= 100))) {
        return 14;
    }

    if (((lp_province >= 101) && (lp_province <= 116))) {
        return 15;
    }

    if (((lp_province >= 108) && (lp_province <= 121))) {
        return 16;
    }

    if (((lp_province >= 122) && (lp_province <= 129))) {
        return 17;
    }

    if (((lp_province >= 130) && (lp_province <= 138))) {
        return 18;
    }

    if ((((lp_province >= 139) && (lp_province <= 149)) || ((lp_province >= 189) && (lp_province <= 189)))) {
        return 19;
    }

    if (((lp_province >= 150) && (lp_province <= 165))) {
        return 20;
    }

    if (((lp_province >= 166) && (lp_province <= 187))) {
        return 21;
    }

    if ((((lp_province >= 190) && (lp_province <= 191)) || ((lp_province >= 117) && (lp_province <= 117)))) {
        return 22;
    }

    return 0;
}

string gf_GetCultureGroupNames (int lp_player) {
    // Variable Declarations
    int lv_cultureGroup;

    // Automatic Variable Declarations
    unitgroup auto66F9C3B2_g;
    int auto66F9C3B2_u;
    unit auto66F9C3B2_var;

    // Variable Initialization

    // Implementation
    auto66F9C3B2_g = UnitGroup("Capital", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto66F9C3B2_u = UnitGroupCount(auto66F9C3B2_g, c_unitCountAll);
    for (;; auto66F9C3B2_u -= 1) {
        auto66F9C3B2_var = UnitGroupUnitFromEnd(auto66F9C3B2_g, auto66F9C3B2_u);
        if (auto66F9C3B2_var == null) { break; }
        lv_cultureGroup = gf_GetCultureGroup(gf_GetCountyID(auto66F9C3B2_var));
    }
    if ((lv_cultureGroup == 1)) {
        return "American";
    }

    if ((lv_cultureGroup == 2)) {
        return "Irish";
    }

    if ((lv_cultureGroup == 3)) {
        return "Scottish";
    }

    if ((lv_cultureGroup == 4)) {
        return "English";
    }

    if ((lv_cultureGroup == 5)) {
        return "Iberian";
    }

    if ((lv_cultureGroup == 6)) {
        return "African";
    }

    if ((lv_cultureGroup == 7)) {
        return "French";
    }

    if ((lv_cultureGroup == 8)) {
        return "Italian";
    }

    if ((lv_cultureGroup == 9)) {
        return "Austrian";
    }

    if ((lv_cultureGroup == 10)) {
        return "Dutch";
    }

    if ((lv_cultureGroup == 11)) {
        return "Scandavanian";
    }

    if ((lv_cultureGroup == 12)) {
        return "German";
    }

    if ((lv_cultureGroup == 13)) {
        return "Yugoslavian";
    }

    if ((lv_cultureGroup == 14)) {
        return "Greek";
    }

    if ((lv_cultureGroup == 15)) {
        return "Turkish";
    }

    if ((lv_cultureGroup == 16)) {
        return "Georgian";
    }

    if ((lv_cultureGroup == 17)) {
        return "Polish";
    }

    if ((lv_cultureGroup == 18)) {
        return "Latvian";
    }

    if ((lv_cultureGroup == 19)) {
        return "Hungarian";
    }

    if ((lv_cultureGroup == 20)) {
        return "Ukrainian";
    }

    if ((lv_cultureGroup == 21)) {
        return "Russian";
    }

    if ((lv_cultureGroup == 22)) {
        return "Persian";
    }

    return "European";
}

string gf_GetCultureGroupNamesFromPoint (point lp_region) {
    // Variable Declarations
    int lv_cultureGroup;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_cultureGroup = gf_GetCultureGroup(gf_GetCountyIDByPoint(lp_region));
    if ((lv_cultureGroup == 1)) {
        return "American";
    }

    if ((lv_cultureGroup == 2)) {
        return "Irish";
    }

    if ((lv_cultureGroup == 3)) {
        return "Scottish";
    }

    if ((lv_cultureGroup == 4)) {
        return "English";
    }

    if ((lv_cultureGroup == 5)) {
        return "Iberian";
    }

    if ((lv_cultureGroup == 6)) {
        return "African";
    }

    if ((lv_cultureGroup == 7)) {
        return "French";
    }

    if ((lv_cultureGroup == 8)) {
        return "Italian";
    }

    if ((lv_cultureGroup == 9)) {
        return "Austrian";
    }

    if ((lv_cultureGroup == 10)) {
        return "Dutch";
    }

    if ((lv_cultureGroup == 11)) {
        return "Scandavanian";
    }

    if ((lv_cultureGroup == 12)) {
        return "German";
    }

    if ((lv_cultureGroup == 13)) {
        return "Yugoslavian";
    }

    if ((lv_cultureGroup == 14)) {
        return "Greek";
    }

    if ((lv_cultureGroup == 15)) {
        return "Turkish";
    }

    if ((lv_cultureGroup == 16)) {
        return "Georgian";
    }

    if ((lv_cultureGroup == 17)) {
        return "Polish";
    }

    if ((lv_cultureGroup == 18)) {
        return "Latvian";
    }

    if ((lv_cultureGroup == 19)) {
        return "Hungarian";
    }

    if ((lv_cultureGroup == 20)) {
        return "Ukrainian";
    }

    if ((lv_cultureGroup == 21)) {
        return "Russian";
    }

    if ((lv_cultureGroup == 22)) {
        return "Persian";
    }

    return "European";
}

string gf_GetPersonNameFromCultureGroup (int lp_player) {
    // Variable Declarations
    int lv_cultureGroup;
    int lv_random;

    // Automatic Variable Declarations
    unitgroup auto37665669_g;
    int auto37665669_u;
    unit auto37665669_var;

    // Variable Initialization

    // Implementation
    auto37665669_g = UnitGroup("Capital", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto37665669_u = UnitGroupCount(auto37665669_g, c_unitCountAll);
    for (;; auto37665669_u -= 1) {
        auto37665669_var = UnitGroupUnitFromEnd(auto37665669_g, auto37665669_u);
        if (auto37665669_var == null) { break; }
        lv_cultureGroup = gf_GetCultureGroup(gf_GetCountyID(auto37665669_var));
    }
    if ((lv_cultureGroup == 0)) {
        return "CultureGroupError";
    }

    if ((lv_cultureGroup == 1)) {
        lv_random = RandomInt(1, 4);
        if ((lv_random == 1)) {
            return "Jacob";
        }

        if ((lv_random == 2)) {
            return "Ethan";
        }

        if ((lv_random == 3)) {
            return "Chole";
        }

        if ((lv_random == 4)) {
            return "Zoe";
        }

    }

    if ((lv_cultureGroup == 2)) {
        lv_random = RandomInt(1, 4);
        if ((lv_random == 1)) {
            return "Jack";
        }

        if ((lv_random == 2)) {
            return "Sean";
        }

        if ((lv_random == 3)) {
            return "Sadie";
        }

        if ((lv_random == 4)) {
            return "Holly";
        }

    }

    if ((lv_cultureGroup == 3)) {
        lv_random = RandomInt(1, 4);
        if ((lv_random == 1)) {
            return "Oliver";
        }

        if ((lv_random == 2)) {
            return "Lewis";
        }

        if ((lv_random == 3)) {
            return "Freya";
        }

        if ((lv_random == 4)) {
            return "Erin";
        }

    }

    if ((lv_cultureGroup == 4)) {
        lv_random = RandomInt(1, 10);
        if ((lv_random == 1)) {
            return "Noah";
        }

        if ((lv_random == 2)) {
            return "Joe";
        }

        if ((lv_random == 3)) {
            return "Oliver";
        }

        if ((lv_random == 4)) {
            return "Harry";
        }

        if ((lv_random == 5)) {
            return "Jack";
        }

        if ((lv_random == 6)) {
            return "Olivia";
        }

        if ((lv_random == 7)) {
            return "Sophia";
        }

        if ((lv_random == 8)) {
            return "Ava";
        }

        if ((lv_random == 9)) {
            return "Aria";
        }

        if ((lv_random == 10)) {
            return "Ivy";
        }

    }

    if ((lv_cultureGroup == 5)) {
        lv_random = RandomInt(1, 10);
        if ((lv_random == 1)) {
            return "Daniel";
        }

        if ((lv_random == 2)) {
            return "Alejandro";
        }

        if ((lv_random == 3)) {
            return "Pablo";
        }

        if ((lv_random == 4)) {
            return "Hugo";
        }

        if ((lv_random == 5)) {
            return "Diego";
        }

        if ((lv_random == 6)) {
            return "Lucia";
        }

        if ((lv_random == 7)) {
            return "Sara";
        }

        if ((lv_random == 8)) {
            return "Alba";
        }

        if ((lv_random == 9)) {
            return "Julia";
        }

        if ((lv_random == 10)) {
            return "Irene";
        }

    }

    if ((lv_cultureGroup == 6)) {
        lv_random = RandomInt(1, 6);
        if ((lv_random == 1)) {
            return "Mohamed";
        }

        if ((lv_random == 2)) {
            return "Youssef";
        }

        if ((lv_random == 3)) {
            return "Mehdi";
        }

        if ((lv_random == 4)) {
            return "Salma";
        }

        if ((lv_random == 5)) {
            return "Zineb";
        }

        if ((lv_random == 6)) {
            return "Rania";
        }

    }

    if ((lv_cultureGroup == 7)) {
        lv_random = RandomInt(1, 10);
        if ((lv_random == 1)) {
            return "Lucas";
        }

        if ((lv_random == 2)) {
            return "Enzo";
        }

        if ((lv_random == 3)) {
            return "Louis";
        }

        if ((lv_random == 4)) {
            return "Hugo";
        }

        if ((lv_random == 5)) {
            return "Ethan";
        }

        if ((lv_random == 6)) {
            return "Emma";
        }

        if ((lv_random == 7)) {
            return "Louise";
        }

        if ((lv_random == 8)) {
            return "Manon";
        }

        if ((lv_random == 9)) {
            return "Charlotte";
        }

        if ((lv_random == 10)) {
            return "Lou";
        }

    }

    if ((lv_cultureGroup == 8)) {
        lv_random = RandomInt(1, 10);
        if ((lv_random == 1)) {
            return "Francesco";
        }

        if ((lv_random == 2)) {
            return "Alessandro";
        }

        if ((lv_random == 3)) {
            return "Mattia";
        }

        if ((lv_random == 4)) {
            return "Lorenzo";
        }

        if ((lv_random == 5)) {
            return "Andrea";
        }

        if ((lv_random == 6)) {
            return "Aurora";
        }

        if ((lv_random == 7)) {
            return "Giulia";
        }

        if ((lv_random == 8)) {
            return "Martina";
        }

        if ((lv_random == 9)) {
            return "Gaia";
        }

        if ((lv_random == 10)) {
            return "Elena";
        }

    }

    if ((lv_cultureGroup == 9)) {
        lv_random = RandomInt(1, 4);
        if ((lv_random == 1)) {
            return "Max";
        }

        if ((lv_random == 2)) {
            return "Fabian";
        }

        if ((lv_random == 3)) {
            return "Johanna";
        }

        if ((lv_random == 4)) {
            return "Anja";
        }

    }

    if ((lv_cultureGroup == 10)) {
        lv_random = RandomInt(1, 10);
        if ((lv_random == 1)) {
            return "Arthur";
        }

        if ((lv_random == 2)) {
            return "Lucas";
        }

        if ((lv_random == 3)) {
            return "Theo";
        }

        if ((lv_random == 4)) {
            return "Stan";
        }

        if ((lv_random == 5)) {
            return "Yanis";
        }

        if ((lv_random == 6)) {
            return "Olivia";
        }

        if ((lv_random == 7)) {
            return "Amelie";
        }

        if ((lv_random == 8)) {
            return "Lotte";
        }

        if ((lv_random == 9)) {
            return "Lotte";
        }

        if ((lv_random == 10)) {
            return "Lou";
        }

    }

    if ((lv_cultureGroup == 11)) {
        lv_random = RandomInt(1, 10);
        if ((lv_random == 1)) {
            return "Liam";
        }

        if ((lv_random == 2)) {
            return "Elliot";
        }

        if ((lv_random == 3)) {
            return "Vincent";
        }

        if ((lv_random == 4)) {
            return "Edvin";
        }

        if ((lv_random == 5)) {
            return "Erik";
        }

        if ((lv_random == 6)) {
            return "Lilly";
        }

        if ((lv_random == 7)) {
            return "Maja";
        }

        if ((lv_random == 8)) {
            return "Vera";
        }

        if ((lv_random == 9)) {
            return "Ester";
        }

        if ((lv_random == 10)) {
            return "Ines";
        }

    }

    if ((lv_cultureGroup == 12)) {
        lv_random = RandomInt(1, 10);
        if ((lv_random == 1)) {
            return "Ben";
        }

        if ((lv_random == 2)) {
            return "Jonas";
        }

        if ((lv_random == 3)) {
            return "Leon";
        }

        if ((lv_random == 4)) {
            return "Felix";
        }

        if ((lv_random == 5)) {
            return "Maximilian";
        }

        if ((lv_random == 6)) {
            return "Sofia";
        }

        if ((lv_random == 7)) {
            return "Marie";
        }

        if ((lv_random == 8)) {
            return "Kaiser";
        }

        if ((lv_random == 9)) {
            return "Julia";
        }

        if ((lv_random == 10)) {
            return "Victoria";
        }

    }

    if ((lv_cultureGroup == 13)) {
        lv_random = RandomInt(1, 10);
        if ((lv_random == 1)) {
            return "Alexandru";
        }

        if ((lv_random == 2)) {
            return "Gabriel";
        }

        if ((lv_random == 3)) {
            return "Sebastian";
        }

        if ((lv_random == 4)) {
            return "Slajov";
        }

        if ((lv_random == 5)) {
            return "Vlad";
        }

        if ((lv_random == 6)) {
            return "Alexandra";
        }

        if ((lv_random == 7)) {
            return "Ioana";
        }

        if ((lv_random == 8)) {
            return "Larisa";
        }

        if ((lv_random == 9)) {
            return "Antonia";
        }

        if ((lv_random == 10)) {
            return "Ari";
        }

    }

    if ((lv_cultureGroup == 14)) {
        lv_random = RandomInt(1, 4);
        if ((lv_random == 1)) {
            return "Kostas";
        }

        if ((lv_random == 2)) {
            return "Thanos";
        }

        if ((lv_random == 3)) {
            return "Katherine";
        }

        if ((lv_random == 4)) {
            return "Theodora";
        }

    }

    if ((lv_cultureGroup == 15)) {
        lv_random = RandomInt(1, 4);
        if ((lv_random == 1)) {
            return "Yusuf";
        }

        if ((lv_random == 2)) {
            return "Mustafa";
        }

        if ((lv_random == 3)) {
            return "Elif";
        }

        if ((lv_random == 4)) {
            return "Hira";
        }

    }

    if ((lv_cultureGroup == 16)) {
        lv_random = RandomInt(1, 4);
        if ((lv_random == 1)) {
            return "Anano";
        }

        if ((lv_random == 2)) {
            return "Tatyana";
        }

        if ((lv_random == 3)) {
            return "Giorgi";
        }

        if ((lv_random == 4)) {
            return "Arcil";
        }

    }

    if ((lv_cultureGroup == 17)) {
        lv_random = RandomInt(1, 10);
        if ((lv_random == 1)) {
            return "Jakub";
        }

        if ((lv_random == 2)) {
            return "Kacper";
        }

        if ((lv_random == 3)) {
            return "Szymon";
        }

        if ((lv_random == 4)) {
            return "Franciszek";
        }

        if ((lv_random == 5)) {
            return "Mikolaj";
        }

        if ((lv_random == 6)) {
            return "Maja";
        }

        if ((lv_random == 7)) {
            return "Zuzanna";
        }

        if ((lv_random == 8)) {
            return "Magdalena";
        }

        if ((lv_random == 9)) {
            return "Weronika";
        }

        if ((lv_random == 10)) {
            return "Helena";
        }

    }

    if ((lv_cultureGroup == 18)) {
        lv_random = RandomInt(1, 4);
        if ((lv_random == 1)) {
            return "Andris";
        }

        if ((lv_random == 2)) {
            return "Edgars";
        }

        if ((lv_random == 3)) {
            return "Kaspars";
        }

        if ((lv_random == 4)) {
            return "Raimonds";
        }

    }

    if ((lv_cultureGroup == 19)) {
        lv_random = RandomInt(1, 10);
        if ((lv_random == 1)) {
            return "Bence";
        }

        if ((lv_random == 2)) {
            return "Mate";
        }

        if ((lv_random == 3)) {
            return "Lavente";
        }

        if ((lv_random == 4)) {
            return "Marcell";
        }

        if ((lv_random == 5)) {
            return "Zoltan";
        }

        if ((lv_random == 6)) {
            return "Jazmin";
        }

        if ((lv_random == 7)) {
            return "Fanni";
        }

        if ((lv_random == 8)) {
            return "Zoe";
        }

        if ((lv_random == 9)) {
            return "Petra";
        }

        if ((lv_random == 10)) {
            return "Adel";
        }

    }

    if ((lv_cultureGroup == 20)) {
        lv_random = RandomInt(1, 4);
        if ((lv_random == 1)) {
            return "Borys";
        }

        if ((lv_random == 2)) {
            return "Pavlo";
        }

        if ((lv_random == 3)) {
            return "Ruslana";
        }

        if ((lv_random == 4)) {
            return "Iryna";
        }

    }

    if ((lv_cultureGroup == 21)) {
        lv_random = RandomInt(1, 10);
        if ((lv_random == 1)) {
            return "Nikita";
        }

        if ((lv_random == 2)) {
            return "Dima";
        }

        if ((lv_random == 3)) {
            return "Alex";
        }

        if ((lv_random == 4)) {
            return "Sergey";
        }

        if ((lv_random == 5)) {
            return "Vlad";
        }

        if ((lv_random == 6)) {
            return "Nastya";
        }

        if ((lv_random == 7)) {
            return "Irina";
        }

        if ((lv_random == 8)) {
            return "Arina";
        }

        if ((lv_random == 9)) {
            return "Anya";
        }

        if ((lv_random == 10)) {
            return "Kristina";
        }

    }

    if ((lv_cultureGroup == 22)) {
        lv_random = RandomInt(1, 4);
        if ((lv_random == 1)) {
            return "Ali";
        }

        if ((lv_random == 2)) {
            return "Mehdi";
        }

        if ((lv_random == 3)) {
            return "Zahra";
        }

        if ((lv_random == 4)) {
            return "Sara";
        }

    }

    return "NameError";
}

string gf_GetNation (int lp_cultureGroupID, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_cultureGroupID == 1)) {
        return "America";
    }

    if ((lp_cultureGroupID == 2)) {
        if ((gf_CheckForNationByID(3, lp_player) == false)) {
            return "Celctic";
        }
        else {
            return "Ireland";
        }
    }

    if ((lp_cultureGroupID == 3)) {
        return "Scottland";
    }

    if ((lp_cultureGroupID == 4)) {
        if ((gf_CheckForNationByID(3, lp_player) == false) && (gf_CheckForNationByID(2, lp_player) == false)) {
            return "Great Britain";
        }
        else {
            return "England";
        }
    }

    if ((lp_cultureGroupID == 5)) {
        return "Spain";
    }

    if ((lp_cultureGroupID == 6)) {
        if ((gf_CheckForNationByID(5, lp_player) == false)) {
            return "Andalusia";
        }
        else {
            if ((gf_CheckForNationByID(14, lp_player) == false) && (gf_CheckForNationByID(15, lp_player) == false) && (gf_CheckForNationByID(16, lp_player) == false)) {
                return "Ottoman";
            }
            else {
                return "Africa";
            }
        }
    }

    if ((lp_cultureGroupID == 7)) {
        return "France";
    }

    if ((lp_cultureGroupID == 8)) {
        if ((gf_CheckForNationByID(4, lp_player) == false) && (gf_CheckForNationByID(5, lp_player) == false) && (gf_CheckForNationByID(6, lp_player) == false) && (gf_CheckForNationByID(7, lp_player) == false) && (gf_CheckForNationByID(9, lp_player) == false) && (gf_CheckForNationByID(13, lp_player) == false) && (gf_CheckForNationByID(14, lp_player) == false) && (gf_CheckForNationByID(15, lp_player) == false)) {
            return "Rome";
        }
        else {
            return "Italy";
        }
    }

    if ((lp_cultureGroupID == 9)) {
        if ((gf_CheckForNationByID(19, lp_player) == false) && (gf_CheckForNationByID(13, lp_player) == false) && (gf_CheckForNationByID(12, lp_player) == false)) {
            return "Danubia";
        }
        else {
            if ((gf_CheckForNationByID(19, lp_player) == false)) {
                return "Austria-Hungary";
            }
            else {
                return "Austria";
            }
        }
    }

    if ((lp_cultureGroupID == 10)) {
        return "Netherlands";
    }

    if ((lp_cultureGroupID == 11)) {
        return "Scandinavia";
    }

    if ((lp_cultureGroupID == 12)) {
        if ((gf_CheckForNationByID(9, lp_player) == false)) {
            return "Germany";
        }
        else {
            if ((gf_CheckForNationByID(17, lp_player) == false) && (gf_GetGovernmentType(lp_player) == 3)) {
                return "Prussia";
            }
            else {
                return "Germany";
            }
        }
    }

    if ((lp_cultureGroupID == 13)) {
        return "Yugoslavia";
    }

    if ((lp_cultureGroupID == 14)) {
        if ((gf_CheckForNationByID(15, lp_player) == false)) {
            return "Byzantium";
        }
        else {
            return "Greece";
        }
    }

    if ((lp_cultureGroupID == 15)) {
        if ((gf_CheckForNationByID(14, lp_player) == false) && (gf_CheckForNationByID(16, lp_player) == false)) {
            return "Ottoman";
        }
        else {
            return "Turkey";
        }
    }

    if ((lp_cultureGroupID == 16)) {
        return "Georgia";
    }

    if ((lp_cultureGroupID == 17)) {
        if ((gf_CheckForNationByID(18, lp_player) == false)) {
            return "Commonwealth";
        }
        else {
            return "Poland";
        }
    }

    if ((lp_cultureGroupID == 18)) {
        return "Latvia";
    }

    if ((lp_cultureGroupID == 19)) {
        if ((gf_CheckForNationByID(15, lp_player) == false) && (gf_CheckForNationByID(14, lp_player) == false)) {
            return "Byzantium";
        }
        else {
            return "Hungary";
        }
    }

    if ((lp_cultureGroupID == 20)) {
        return "Ukraine";
    }

    if ((lp_cultureGroupID == 21)) {
        if ((gf_CheckForNationByID(21, lp_player) == false) && (gf_CheckForNationByID(20, lp_player) == false) && (TechTreeUpgradeCount(lp_player, "Communism", c_techCountCompleteOnly) == 1)) {
            return "Soviet Union";
        }
        else {
            return "Russia";
        }
    }

    if ((lp_cultureGroupID == 22)) {
        return "Persia";
    }

    return "CulturegroupNationError";
}

int gf_GetGovernmentType (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if (((TechTreeUpgradeCount(lp_player, "Communism", c_techCountCompleteOnly) == 1) || (TechTreeUpgradeCount(lp_player, "SocialistRepublic", c_techCountCompleteOnly) == 1))) {
        return 1;
    }
    else {
        if (((TechTreeUpgradeCount(lp_player, "DirectDemocracy", c_techCountCompleteOnly) == 1) || (TechTreeUpgradeCount(lp_player, "FauxDemocracy", c_techCountCompleteOnly) == 1) || (TechTreeUpgradeCount(lp_player, "NeoFederation", c_techCountCompleteOnly) == 1) || (TechTreeUpgradeCount(lp_player, "Corporatocracy", c_techCountCompleteOnly) == 1))) {
            return 2;
        }
        else {
            if (((TechTreeUpgradeCount(lp_player, "GrandEmpire", c_techCountCompleteOnly) == 1) || (TechTreeUpgradeCount(lp_player, "Neofascism", c_techCountCompleteOnly) == 1))) {
                return 3;
            }
            else {
                return 0;
            }
        }
    }
}

bool gf_CheckForNationByID (int lp_iD, int lp_player) {
    // Automatic Variable Declarations
    unitgroup autoAD828919_g;
    int autoAD828919_u;
    unit autoAD828919_var;
    unitgroup auto7AF8D9E8_g;
    int auto7AF8D9E8_u;
    unit auto7AF8D9E8_var;

    // Implementation
    autoAD828919_g = UnitGroup("Capital", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoAD828919_u = UnitGroupCount(autoAD828919_g, c_unitCountAll);
    for (;; autoAD828919_u -= 1) {
        autoAD828919_var = UnitGroupUnitFromEnd(autoAD828919_g, autoAD828919_u);
        if (autoAD828919_var == null) { break; }
        if ((gf_GetCultureGroup(gf_GetCountyID(autoAD828919_var)) == lp_iD) && (gv_subjugator[UnitGetOwner(autoAD828919_var)] != lp_player)) {
            return true;
        }

    }
    auto7AF8D9E8_g = UnitGroup("SubstationmkII", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto7AF8D9E8_u = UnitGroupCount(auto7AF8D9E8_g, c_unitCountAll);
    for (;; auto7AF8D9E8_u -= 1) {
        auto7AF8D9E8_var = UnitGroupUnitFromEnd(auto7AF8D9E8_g, auto7AF8D9E8_u);
        if (auto7AF8D9E8_var == null) { break; }
        if ((gf_GetCultureGroup(gf_GetCountyID(auto7AF8D9E8_var)) == lp_iD)) {
            return false;
        }

    }
    return true;
}

string gf_GetNationalFlag (string lp_nation, int lp_player) {
    // Variable Declarations
    int lv_government;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_government = gf_GetGovernmentType(lp_player);

    // Implementation
    if ((lp_nation == "America")) {
        if ((lv_government == 1)) {
            return "Assets\\Nations\\UA1.dds";
        }

        if ((lv_government == 2)) {
            return "Assets\\Nations\\UA2.dds";
        }

        if ((lv_government == 3)) {
            return "Assets\\Nations\\UA3.dds";
        }

    }

    if ((lp_nation == "Ireland")) {
        if ((lv_government == 1)) {
            return "Assets\\Nations\\Ireland01.dds";
        }

        if ((lv_government == 2)) {
            return "Assets\\Nations\\Ireland02.dds";
        }

        if ((lv_government == 3)) {
            return "Assets\\Nations\\Ireland03.dds";
        }

    }

    if ((lp_nation == "Scottland")) {
        if ((lv_government == 1)) {
            return "Assets\\Nations\\Scottland01.dds";
        }

        if ((lv_government == 2)) {
            return "Assets\\Nations\\Scottland02.dds";
        }

        if ((lv_government == 3)) {
            return "Assets\\Nations\\Scottland03.dds";
        }

    }

    if ((lp_nation == "Anglo-France")) {
        if ((lv_government == 1)) {
            return "Assets\\Nations\\AngloFrance01.dds";
        }

        if ((lv_government == 2)) {
            return "Assets\\Nations\\AngloFrance02.dds";
        }

        if ((lv_government == 3)) {
            return "Assets\\Nations\\AngloFrance03.dds";
        }

    }

    if ((lp_nation == "Great Britain")) {
        if ((lv_government == 1)) {
            return "Assets\\Nations\\Britain01.dds";
        }

        if ((lv_government == 2)) {
            return "Assets\\Nations\\Britain02.dds";
        }

        if ((lv_government == 3)) {
            return "Assets\\Nations\\Britain03.dds";
        }

    }

    if ((lp_nation == "England")) {
        if ((lv_government == 1)) {
            return "Assets\\Nations\\England01.dds";
        }

        if ((lv_government == 2)) {
            return "Assets\\Nations\\England02.dds";
        }

        if ((lv_government == 3)) {
            return "Assets\\Nations\\England03.dds";
        }

    }

    if ((lp_nation == "Spain")) {
        if ((lv_government == 1)) {
            return "Assets\\Nations\\Spain01.dds";
        }

        if ((lv_government == 2)) {
            return "Assets\\Nations\\Spain02.dds";
        }

        if ((lv_government == 3)) {
            return "Assets\\Nations\\Spain03.dds";
        }

    }

    if ((lp_nation == "Andalusia")) {
        if ((lv_government == 1)) {
            return "Assets\\Nations\\Andalusia01.dds";
        }

        if ((lv_government == 2)) {
            return "Assets\\Nations\\Andalusia02.dds";
        }

        if ((lv_government == 3)) {
            return "Assets\\Nations\\Andalusia03.dds";
        }

    }

    if ((lp_nation == "Ottoman")) {
        if ((lv_government == 1)) {
            return "Assets\\Nations\\Ottoman01.dds";
        }

        if ((lv_government == 2)) {
            return "Assets\\Nations\\Ottoman02.dds";
        }

        if ((lv_government == 3)) {
            return "Assets\\Nations\\Ottoman03.dds";
        }

    }

    if ((lp_nation == "Africa")) {
        if ((lv_government == 1)) {
            return "Assets\\Nations\\Africa01.dds";
        }

        if ((lv_government == 2)) {
            return "Assets\\Nations\\Africa02.dds";
        }

        if ((lv_government == 3)) {
            return "Assets\\Nations\\Africa03.dds";
        }

    }

    if ((lp_nation == "France")) {
        if ((lv_government == 1)) {
            return "Assets\\Nations\\France01.dds";
        }

        if ((lv_government == 2)) {
            return "Assets\\Nations\\France02.dds";
        }

        if ((lv_government == 3)) {
            return "Assets\\Nations\\France03.dds";
        }

    }

    if ((lp_nation == "Rome")) {
        if ((lv_government == 1)) {
            return "Assets\\Nations\\Rome01.dds";
        }

        if ((lv_government == 2)) {
            return "Assets\\Nations\\Rome02.dds";
        }

        if ((lv_government == 3)) {
            return "Assets\\Nations\\Rome03.dds";
        }

    }

    if ((lp_nation == "Italy")) {
        if ((lv_government == 1)) {
            return "Assets\\Nations\\Italy01.dds";
        }

        if ((lv_government == 2)) {
            return "Assets\\Nations\\Italy02.dds";
        }

        if ((lv_government == 3)) {
            return "Assets\\Nations\\Italy03.dds";
        }

    }

    if ((lp_nation == "Danubia")) {
        if ((lv_government == 1)) {
            return "Assets\\Nations\\Danubia01.dds";
        }

        if ((lv_government == 2)) {
            return "Assets\\Nations\\Danubia02.dds";
        }

        if ((lv_government == 3)) {
            return "Assets\\Nations\\Danubia03.dds";
        }

    }

    if ((lp_nation == "Austria-Hungary")) {
        if ((lv_government == 1)) {
            return "Assets\\Nations\\AustriaHungary01.dds";
        }

        if ((lv_government == 2)) {
            return "Assets\\Nations\\AustriaHungary02.dds";
        }

        if ((lv_government == 3)) {
            return "Assets\\Nations\\AustriaHungary03.dds";
        }

    }

    if ((lp_nation == "Austria")) {
        if ((lv_government == 1)) {
            return "Assets\\Nations\\Austria01.dds";
        }

        if ((lv_government == 2)) {
            return "Assets\\Nations\\Austria02.dds";
        }

        if ((lv_government == 3)) {
            return "Assets\\Nations\\Austria03.dds";
        }

    }

    if ((lp_nation == "Netherlands")) {
        if ((lv_government == 1)) {
            return "Assets\\Nations\\Netherlands01.dds";
        }

        if ((lv_government == 2)) {
            return "Assets\\Nations\\Netherlands02.dds";
        }

        if ((lv_government == 3)) {
            return "Assets\\Nations\\Netherlands03.dds";
        }

    }

    if ((lp_nation == "Scandinavia")) {
        if ((lv_government == 1)) {
            return "Assets\\Nations\\Scandinavia01.dds";
        }

        if ((lv_government == 2)) {
            return "Assets\\Nations\\Scandinavia02.dds";
        }

        if ((lv_government == 3)) {
            return "Assets\\Nations\\Scandinavia03.dds";
        }

    }

    if ((lp_nation == "Germany")) {
        if ((lv_government == 1)) {
            return "Assets\\Nations\\Germany01.dds";
        }

        if ((lv_government == 2)) {
            return "Assets\\Nations\\Germany02.dds";
        }

        if ((lv_government == 3)) {
            return "Assets\\Nations\\Germany03.dds";
        }

    }

    if ((lp_nation == "Prussia")) {
        return "Assets\\Nations\\Germany03.dds";
    }

    if ((lp_nation == "Yugoslavia")) {
        if ((lv_government == 1)) {
            return "Assets\\Nations\\Yugoslavia01.dds";
        }

        if ((lv_government == 2)) {
            return "Assets\\Nations\\Yugoslavia02.dds";
        }

        if ((lv_government == 3)) {
            return "Assets\\Nations\\Yugoslavia03.dds";
        }

    }

    if ((lp_nation == "Byzantium")) {
        if ((lv_government == 1)) {
            return "Assets\\Nations\\Byzantium01.dds";
        }

        if ((lv_government == 2)) {
            return "Assets\\Nations\\Byzantium02.dds";
        }

        if ((lv_government == 3)) {
            return "Assets\\Nations\\Byzantium03.dds";
        }

    }

    if ((lp_nation == "Greece")) {
        if ((lv_government == 1)) {
            return "Assets\\Nations\\Greece01.dds";
        }

        if ((lv_government == 2)) {
            return "Assets\\Nations\\Greece02.dds";
        }

        if ((lv_government == 3)) {
            return "Assets\\Nations\\Greece03.dds";
        }

    }

    if ((lp_nation == "Turkey")) {
        if ((lv_government == 1)) {
            return "Assets\\Nations\\Turkey01.dds";
        }

        if ((lv_government == 2)) {
            return "Assets\\Nations\\Turkey02.dds";
        }

        if ((lv_government == 3)) {
            return "Assets\\Nations\\Turkey03.dds";
        }

    }

    if ((lp_nation == "Georgia")) {
        if ((lv_government == 1)) {
            return "Assets\\Nations\\Georgia01.dds";
        }

        if ((lv_government == 2)) {
            return "Assets\\Nations\\Georgia02.dds";
        }

        if ((lv_government == 3)) {
            return "Assets\\Nations\\Georgia03.dds";
        }

    }

    if ((lp_nation == "Commonwealth")) {
        if ((lv_government == 1)) {
            return "Assets\\Nations\\Commonwealth01.dds";
        }

        if ((lv_government == 2)) {
            return "Assets\\Nations\\Commonwealth02.dds";
        }

        if ((lv_government == 3)) {
            return "Assets\\Nations\\Commonwealth03.dds";
        }

    }

    if ((lp_nation == "Poland")) {
        if ((lv_government == 1)) {
            return "Assets\\Nations\\Poland01.dds";
        }

        if ((lv_government == 2)) {
            return "Assets\\Nations\\Poland02.dds";
        }

        if ((lv_government == 3)) {
            return "Assets\\Nations\\Poland03.dds";
        }

    }

    if ((lp_nation == "Latvia")) {
        if ((lv_government == 1)) {
            return "Assets\\Nations\\Latvia01.dds";
        }

        if ((lv_government == 2)) {
            return "Assets\\Nations\\Latvia02.dds";
        }

        if ((lv_government == 3)) {
            return "Assets\\Nations\\Latvia03.dds";
        }

    }

    if ((lp_nation == "Hungary")) {
        if ((lv_government == 1)) {
            return "Assets\\Nations\\Hungary01.dds";
        }

        if ((lv_government == 2)) {
            return "Assets\\Nations\\Hungary02.dds";
        }

        if ((lv_government == 3)) {
            return "Assets\\Nations\\Hungary03.dds";
        }

    }

    if ((lp_nation == "Ukraine")) {
        if ((lv_government == 1)) {
            return "Assets\\Nations\\Ukraine01.dds";
        }

        if ((lv_government == 2)) {
            return "Assets\\Nations\\Ukraine02.dds";
        }

        if ((lv_government == 3)) {
            return "Assets\\Nations\\Ukraine03.dds";
        }

    }

    if ((lp_nation == "Persia")) {
        if ((lv_government == 1)) {
            return "Assets\\Persia01.dds";
        }

        if ((lv_government == 2)) {
            return "Assets\\Persia02.dds";
        }

        if ((lv_government == 3)) {
            return "Assets\\Persia03.dds";
        }

    }

    return "Assets\\Nations\\NonNation.dds";
}

void gf_Autobuild (string lp_unitType, unit lp_pickedSubstation) {
    // Variable Declarations
    int lv_closestHostile;
    string lv_theLuckyBuilding;
    int lv_substationOwner;

    // Automatic Variable Declarations
    const int auto7D4271DD_n = 144;
    int auto7D4271DD_i;

    // Variable Initialization

    // Implementation
    lv_substationOwner = UnitGetOwner(lp_pickedSubstation);
    lv_closestHostile = FixedToInt(DistanceBetweenPoints(UnitGetPosition(lp_pickedSubstation), UnitGetPosition(UnitGroupClosestToPoint(UnitGroupAlliance(lv_substationOwner, c_unitAllianceEnemy, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lp_pickedSubstation)))));
    if ((lv_closestHostile < 15)) {
        UIDisplayMessage(PlayerGroupSingle(lv_substationOwner), c_messageAreaSubtitle, StringExternal("Param/Value/7397F062"));
    }
    else {
        if ((UnitHasBehavior2(lp_pickedSubstation, "Occupation") == true)) {
            UIDisplayMessage(PlayerGroupSingle(lv_substationOwner), c_messageAreaSubtitle, StringExternal("Param/Value/53AC444B"));
        }
        else {
            lv_theLuckyBuilding = lp_unitType;
            for (auto7D4271DD_i = 1; auto7D4271DD_i <= auto7D4271DD_n; auto7D4271DD_i += 1) {
                if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) > UnitTypeGetCost(lv_theLuckyBuilding, c_unitCostMinerals)) && (PlayerGetPropertyInt(EventPlayer(), c_playerPropTerrazine) > UnitTypeGetCost(lv_theLuckyBuilding, c_unitCostTerrazine))) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_theLuckyBuilding, 0, lv_substationOwner, UnitGetPosition(lp_pickedSubstation));
                    Wait(0.1, c_timeGame);
                    PlayerModifyPropertyInt(lv_substationOwner, c_playerPropMinerals, c_playerPropOperSubtract, UnitTypeGetCost(lv_theLuckyBuilding, c_unitCostMinerals));
                    PlayerModifyPropertyInt(lv_substationOwner, c_playerPropTerrazine, c_playerPropOperSubtract, UnitTypeGetCost(lv_theLuckyBuilding, c_unitCostTerrazine));
                }
                else {
                    break;
                }
                if ((DistanceBetweenPoints(UnitGetPosition(lp_pickedSubstation), UnitGetPosition(UnitLastCreated())) > 6.1)) {
                    UnitRemove(UnitLastCreated());
                    PlayerModifyPropertyInt(lv_substationOwner, c_playerPropMinerals, c_playerPropOperAdd, UnitTypeGetCost(lv_theLuckyBuilding, c_unitCostMinerals));
                    PlayerModifyPropertyInt(lv_substationOwner, c_playerPropTerrazine, c_playerPropOperAdd, UnitTypeGetCost(lv_theLuckyBuilding, c_unitCostTerrazine));
                    break;
                }

            }
        }
    }
}

void gf_ParlimentConquered (unit lp_parliment, int lp_attacker) {
    // Variable Declarations
    playergroup lv_conquerer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_conquerer = PlayerGroupEmpty();

    // Implementation
    UnitSetOwner(lp_parliment, lp_attacker, true);
    DialogSetVisible(gv_eUDialog, PlayerGroupAll(), false);
    TriggerStop(gt_CountVotes);
    libNtve_gf_RemovePlayerGroupFromPlayerGroup(gv_votingYes, gv_votingYes);
    gv_theEUEvent[0] = 0;
    gv_theEUEvent[1] = 0;
    gv_theEUEvent[2] = 0;
    gv_theEUEvent[3] = 0;
    gv_theEUEvent[4] = 0;
    gv_theEUEvent[5] = 0;
    gv_theEUEvent[6] = 0;
    gv_theEUEvent[7] = 0;
    gv_theEUEvent[8] = 0;
    gv_theEUEvent[9] = 0;
    gv_theEUEvent[10] = 0;
    gv_theEUEvent[1] = lp_attacker;
    UIDisplayMessage(gv_theEuroCrew, c_messageAreaSubtitle, (StringExternal("Param/Value/423DE199") + gf_NationOfPlayer(lp_attacker)));
    PlayerGroupAdd(lv_conquerer, lp_attacker);
    libNtve_gf_SetDialogItemText(gv_eUDialogItems[0], StringExternal("Param/Value/4669CBA8"), lv_conquerer);
    libNtve_gf_SetDialogItemText(gv_eUDialogItems[1], StringExternal("Param/Value/F89B4A94"), lv_conquerer);
    libNtve_gf_SetDialogItemTooltip(gv_eUDialogItems[1], StringExternal("Param/Value/C3FFC69E"), lv_conquerer);
    libNtve_gf_SetDialogItemText(gv_eUDialogItems[2], StringExternal("Param/Value/CFA25B4A"), lv_conquerer);
    libNtve_gf_SetDialogItemTooltip(gv_eUDialogItems[2], StringExternal("Param/Value/B634207F"), lv_conquerer);
    libNtve_gf_SetDialogItemText(gv_eUDialogItems[3], StringExternal("Param/Value/D7414095"), lv_conquerer);
    DialogSetVisible(gv_eUDialog, lv_conquerer, true);
}

void gf_BuildingConquerCalculate (unit lp_attackingUnit, unit lp_building) {
    // Variable Declarations
    int lv_captureScore;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_captureScore += FixedToInt(UnitGetPropertyFixed(lp_building, c_unitPropLifePercent, c_unitPropCurrent));
    lv_captureScore += FixedToInt(UnitGetPropertyFixed(lp_building, c_unitPropLifeArmor, c_unitPropCurrent));
    lv_captureScore += FixedToInt(UnitGetPropertyFixed(lp_building, c_unitPropEnergy, c_unitPropCurrent));
    lv_captureScore += FixedToInt(UnitGetPropertyFixed(lp_building, c_unitPropShields, c_unitPropCurrent));
    lv_captureScore += 40;
    lv_captureScore = FixedToInt((IntToFixed(lv_captureScore) * RandomFixed(0.2, 1.8)));
    if ((lv_captureScore < 50) && (UnitGroupCount(UnitCargoGroup(lp_building), c_unitCountAlive) == 0) && (UnitGetPropertyFixed(lp_building, c_unitPropShields, c_unitPropCurrent) == 0.0)) {
        gf_BuildingConquer(lp_attackingUnit, lp_building);
    }

}

void gf_BuildingConquer (unit lp_attackingUnit, unit lp_building) {
    // Variable Declarations
    int lv_previousOwner;
    unitgroup lv_move;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_move = UnitGroupEmpty();

    // Implementation
    UnitBehaviorRemove(lp_building, "Razing", 1);
    lv_previousOwner = UnitGetOwner(lp_building);
    UnitSetPropertyFixed(lp_building, c_unitPropLifePercent, (UnitGetPropertyFixed(lp_building, c_unitPropLifePercent, c_unitPropCurrent) + 10.0));
    UnitSetCustomValue(lp_building, 20, UnitGetOwner(lp_building));
    UnitSetOwner(lp_building, UnitGetOwner(lp_attackingUnit), true);
    UnitBehaviorRemove(lp_building, "PowerUserQueue", 1);
    UnitGroupAdd(lv_move, lp_attackingUnit);
    if (((UnitGetType(lp_attackingUnit) == "InfestedCivilian2") || (UnitGetType(lp_attackingUnit) == "InfestorTerran2") || (UnitGetType(lp_attackingUnit) == "InfestedCivilian22") || (UnitGetType(lp_attackingUnit) == "InfestorTerran22"))) {
        if ((RandomInt(0, 100) < 25) && ((UnitGetType(lp_attackingUnit) == "InfestedCivilian2") || (UnitGetType(lp_attackingUnit) == "InfestorTerran2"))) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestorTerran2", 0, UnitGetOwner(lp_attackingUnit), UnitGetPosition(lp_building));
        }

        if ((RandomInt(0, 100) < 25) && ((UnitGetType(lp_attackingUnit) == "InfestedCivilian22") || (UnitGetType(lp_attackingUnit) == "InfestorTerran22"))) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestorTerran22", 0, UnitGetOwner(lp_attackingUnit), UnitGetPosition(lp_building));
        }

    }
    else {
        if ((libNtve_gf_UnitIsInsideTransport(lp_attackingUnit) == true) && (UnitTypeTestAttribute(UnitGetType(lp_building), c_unitAttributeUser1) == true) && (UnitTypeTestAttribute(UnitGetType(UnitTransport(lp_attackingUnit)), c_unitAttributeUser1) == true)) {
            UnitGroupAddUnitGroup(lv_move, UnitCargoGroup(UnitTransport(lp_attackingUnit)));
            UnitIssueOrder(lp_building, Order(AbilityCommand("AppartmentBunker", 1)), c_orderQueueReplace);
            UnitIssueOrder(UnitTransport(lp_attackingUnit), Order(AbilityCommand("AppartmentBunker", 1)), c_orderQueueReplace);
        }
        else {
            UnitGroupAddUnitGroup(lv_move, UnitGroup(null, UnitGetOwner(lp_attackingUnit), RegionCircle(UnitGetPosition(lp_attackingUnit), 4.0), UnitFilter((1 << c_targetFilterBiological), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        }
    }
    Wait(0.01, c_timeGame);
    if ((UnitGetOwner(lp_attackingUnit) == 10)) {
        gf_ReturnTerritory(UnitGetOwner(lp_attackingUnit), lp_building);
    }
    else {
        if ((UnitGetOwner(lp_attackingUnit) > 9)) {
        }
        else {
            gf_ReturnTerritory(UnitGetOwner(lp_attackingUnit), lp_building);
        }
    }
    Wait(0.01, c_timeGame);
    UnitIssueOrder(lp_building, OrderTargetingUnitGroup(AbilityCommand("SkyScraperBunker", 0), lv_move), c_orderQueueReplace);
}

void gf_ReturnTerritory (int lp_attackingPlayer, unit lp_unit) {
    // Variable Declarations
    int lv_playaLoop;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((UnitHasBehavior2(lp_unit, "Core1") == true) && ((PlayerGetAlliance(lp_attackingPlayer, c_allianceIdChat, 1) == true) || (lp_attackingPlayer == 1))) {
        UnitBehaviorRemove(lp_unit, "Occupation", 1);
        UnitSetOwner(lp_unit, 1, true);
    }
    else {
        if ((UnitHasBehavior2(lp_unit, "Core2") == true) && ((PlayerGetAlliance(lp_attackingPlayer, c_allianceIdChat, 2) == true) || (lp_attackingPlayer == 2))) {
            UnitBehaviorRemove(lp_unit, "Occupation", 1);
            UnitSetOwner(lp_unit, 2, true);
        }
        else {
            if ((UnitHasBehavior2(lp_unit, "CoreTerritoryPlayer13") == true) && ((PlayerGetAlliance(lp_attackingPlayer, c_allianceIdChat, 3) == true) || (lp_attackingPlayer == 3))) {
                UnitBehaviorRemove(lp_unit, "Occupation", 1);
                UnitSetOwner(lp_unit, 3, true);
            }
            else {
                if ((UnitHasBehavior2(lp_unit, "CoreTerritoryPlayer14") == true) && ((PlayerGetAlliance(lp_attackingPlayer, c_allianceIdChat, 4) == true) || (lp_attackingPlayer == 4))) {
                    UnitBehaviorRemove(lp_unit, "Occupation", 1);
                    UnitSetOwner(lp_unit, 4, true);
                }
                else {
                    if ((UnitHasBehavior2(lp_unit, "CoreTerritoryPlayer15") == true) && ((PlayerGetAlliance(lp_attackingPlayer, c_allianceIdChat, 5) == true) || (lp_attackingPlayer == 5))) {
                        UnitBehaviorRemove(lp_unit, "Occupation", 1);
                        UnitSetOwner(lp_unit, 5, true);
                    }
                    else {
                        if ((UnitHasBehavior2(lp_unit, "CoreTerritoryPlayer16") == true) && ((PlayerGetAlliance(lp_attackingPlayer, c_allianceIdChat, 6) == true) || (lp_attackingPlayer == 6))) {
                            UnitBehaviorRemove(lp_unit, "Occupation", 1);
                            UnitSetOwner(lp_unit, 6, true);
                        }
                        else {
                            if ((UnitHasBehavior2(lp_unit, "CoreTerritoryPlayer17") == true) && ((PlayerGetAlliance(lp_attackingPlayer, c_allianceIdChat, 7) == true) || (lp_attackingPlayer == 7))) {
                                UnitBehaviorRemove(lp_unit, "Occupation", 1);
                                UnitSetOwner(lp_unit, 7, true);
                            }
                            else {
                                if ((UnitHasBehavior2(lp_unit, "CoreTerritoryPlayer18") == true) && ((PlayerGetAlliance(lp_attackingPlayer, c_allianceIdChat, 8) == true) || (lp_attackingPlayer == 8))) {
                                    UnitBehaviorRemove(lp_unit, "Occupation", 1);
                                    UnitSetOwner(lp_unit, 8, true);
                                }
                                else {
                                    if ((UnitHasBehavior2(lp_unit, "CoreTerritoryPlayer19") == true) && ((PlayerGetAlliance(lp_attackingPlayer, c_allianceIdChat, 9) == true) || (lp_attackingPlayer == 9))) {
                                        UnitBehaviorRemove(lp_unit, "Occupation", 1);
                                        UnitSetOwner(lp_unit, 9, true);
                                    }
                                    else {
                                        gf_OccupyTerritory(lp_unit);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

void gf_OccupyTerritory (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitGetOwner(lp_unit) < 10)) {
        UnitBehaviorAdd(lp_unit, "Occupation", lp_unit, 1);
        if ((UnitGetOwner(lp_unit) == 1) && (UnitHasBehavior2(lp_unit, "Core1") == true)) {
            UnitBehaviorRemove(lp_unit, "Occupation", 1);
        }

        if ((UnitGetOwner(lp_unit) == 2) && (UnitHasBehavior2(lp_unit, "Core2") == true)) {
            UnitBehaviorRemove(lp_unit, "Occupation", 1);
        }

        if ((UnitGetOwner(lp_unit) == 3) && (UnitHasBehavior2(lp_unit, "CoreTerritoryPlayer13") == true)) {
            UnitBehaviorRemove(lp_unit, "Occupation", 1);
        }

        if ((UnitGetOwner(lp_unit) == 4) && (UnitHasBehavior2(lp_unit, "CoreTerritoryPlayer14") == true)) {
            UnitBehaviorRemove(lp_unit, "Occupation", 1);
        }

        if ((UnitGetOwner(lp_unit) == 5) && (UnitHasBehavior2(lp_unit, "CoreTerritoryPlayer15") == true)) {
            UnitBehaviorRemove(lp_unit, "Occupation", 1);
        }

        if ((UnitGetOwner(lp_unit) == 6) && (UnitHasBehavior2(lp_unit, "CoreTerritoryPlayer16") == true)) {
            UnitBehaviorRemove(lp_unit, "Occupation", 1);
        }

        if ((UnitGetOwner(lp_unit) == 7) && (UnitHasBehavior2(lp_unit, "CoreTerritoryPlayer17") == true)) {
            UnitBehaviorRemove(lp_unit, "Occupation", 1);
        }

        if ((UnitGetOwner(lp_unit) == 8) && (UnitHasBehavior2(lp_unit, "CoreTerritoryPlayer18") == true)) {
            UnitBehaviorRemove(lp_unit, "Occupation", 1);
        }

        if ((UnitGetOwner(lp_unit) == 9) && (UnitHasBehavior2(lp_unit, "CoreTerritoryPlayer19") == true)) {
            UnitBehaviorRemove(lp_unit, "Occupation", 1);
        }

        if ((UnitHasBehavior2(lp_unit, "CoreTerritoryPlayer19") == false) && (UnitHasBehavior2(lp_unit, "Core1") == false) && (UnitHasBehavior2(lp_unit, "Core2") == false) && (UnitHasBehavior2(lp_unit, "CoreTerritoryPlayer13") == false) && (UnitHasBehavior2(lp_unit, "CoreTerritoryPlayer14") == false) && (UnitHasBehavior2(lp_unit, "CoreTerritoryPlayer15") == false) && (UnitHasBehavior2(lp_unit, "CoreTerritoryPlayer16") == false) && (UnitHasBehavior2(lp_unit, "CoreTerritoryPlayer17") == false) && (UnitHasBehavior2(lp_unit, "CoreTerritoryPlayer18") == false)) {
            UnitBehaviorRemove(lp_unit, "Occupation", 1);
        }

    }

}

void gf_SubjugatePlayer (int lp_subjugatingTheEnemy, int lp_beingSubjugated) {
    // Automatic Variable Declarations
    playergroup auto849427B3_g;
    int auto849427B3_var;
    playergroup auto99051EAF_g;
    int auto99051EAF_var;

    // Implementation
    UIDisplayMessage(gv_users, c_messageAreaSubtitle, ((gf_NationOfPlayer(lp_subjugatingTheEnemy) + StringExternal("Param/Value/1E7A9C82")) + gf_NationOfPlayer(lp_beingSubjugated)));
    gv_subjugated[lp_beingSubjugated] = true;
    gv_subjugator[lp_beingSubjugated] = lp_subjugatingTheEnemy;
    PlayerGroupAdd(gv_subjugatedPG[lp_subjugatingTheEnemy], lp_beingSubjugated);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_beingSubjugated, "Subjugated", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_subjugatingTheEnemy, "Subjugator", 1);
    libNtve_gf_SetAllianceOneWay(lp_beingSubjugated, lp_subjugatingTheEnemy, libNtve_ge_AllianceSetting_AllyWithSharedVisionControlAndSpending);
    libNtve_gf_SetAllianceOneWay(lp_subjugatingTheEnemy, lp_beingSubjugated, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    libNtve_gf_RemovePlayerGroupFromPlayerGroup(gv_subjugatedPG[lp_beingSubjugated], gv_subjugatedPG[lp_beingSubjugated]);
    PlayerSetColorIndex(lp_beingSubjugated, PlayerGetColorIndex(lp_subjugatingTheEnemy, false), true);
    auto849427B3_g = gv_users;
    auto849427B3_var = -1;
    while (true) {
        auto849427B3_var = PlayerGroupNextPlayer(auto849427B3_g, auto849427B3_var);
        if (auto849427B3_var < 0) { break; }
        if ((gv_subjugator[auto849427B3_var] == lp_beingSubjugated)) {
            UIDisplayMessage(gv_users, c_messageAreaSubtitle, ((gf_NationOfPlayer(lp_subjugatingTheEnemy) + StringExternal("Param/Value/F745CF95")) + TextWithColor(gf_NationOfPlayer(lp_beingSubjugated), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(auto849427B3_var, false)))));
            PlayerSetColorIndex(auto849427B3_var, PlayerGetColorIndex(lp_subjugatingTheEnemy, false), true);
            PlayerGroupAdd(gv_subjugatedPG[gv_victoriousPlayer], auto849427B3_var);
            libNtve_gf_SetAllianceOneWay(auto849427B3_var, lp_subjugatingTheEnemy, libNtve_ge_AllianceSetting_AllyWithSharedVisionControlAndSpending);
            libNtve_gf_SetAllianceOneWay(lp_subjugatingTheEnemy, auto849427B3_var, libNtve_ge_AllianceSetting_AllyWithSharedVision);
            gv_subjugator[auto849427B3_var] = lp_subjugatingTheEnemy;
            gv_subjugated[auto849427B3_var] = true;
        }

    }
    libNtve_gf_SetPlayerGroupAlliance(gv_subjugatedPG[lp_subjugatingTheEnemy], libNtve_ge_AllianceSetting_AllyWithSharedVision);
    auto99051EAF_g = gv_subjugatedPG[lp_subjugatingTheEnemy];
    auto99051EAF_var = -1;
    while (true) {
        auto99051EAF_var = PlayerGroupNextPlayer(auto99051EAF_g, auto99051EAF_var);
        if (auto99051EAF_var < 0) { break; }
        libNtve_gf_SetAlliance(auto99051EAF_var, lp_subjugatingTheEnemy, libNtve_ge_AllianceSetting_AllyWithSharedVision);
        libNtve_gf_SetAllianceOneWay(auto99051EAF_var, lp_subjugatingTheEnemy, libNtve_ge_AllianceSetting_AllyWithSharedVisionControlAndSpending);
    }
}

void gf_DeSubjugatePlayer (int lp_freePlayer) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetAllianceOneWay(gv_subjugator[lp_freePlayer], lp_freePlayer, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAllianceOneWay(lp_freePlayer, gv_subjugator[lp_freePlayer], libNtve_ge_AllianceSetting_Neutral);
    PlayerGroupRemove(gv_subjugatedPG[gv_subjugator[lp_freePlayer]], lp_freePlayer);
    gv_subjugated[lp_freePlayer] = false;
    gv_subjugator[lp_freePlayer] = 0;
    libNtve_gf_SetUpgradeLevelForPlayer(lp_freePlayer, "Subjugated", 0);
    libNtve_gf_RemovePlayerGroupFromPlayerGroup(gv_subjugatedPG[lp_freePlayer], gv_subjugatedPG[lp_freePlayer]);
    PlayerSetColorIndex(lp_freePlayer, gv_originalPlayerColor[lp_freePlayer], true);
}

void gf_FullSurrender (int lp_surrenderingPlayer, int lp_enforcingPlayer) {
    // Variable Declarations
    int lv_player2;
    int lv_realBoss;

    // Automatic Variable Declarations
    playergroup autoB792B441_g;
    int autoB792B441_var;
    playergroup autoC14975D4_g;
    int autoC14975D4_var;
    unitgroup autoB89620DA_g;
    int autoB89620DA_u;
    unit autoB89620DA_var;

    // Variable Initialization
    lv_realBoss = lp_enforcingPlayer;

    // Implementation
    gv_conqueredPlayer[lp_surrenderingPlayer] = true;
    if ((gv_subjugated[lp_enforcingPlayer] == true)) {
        lv_realBoss = gv_subjugator[lp_enforcingPlayer];
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, ((StringToText(gv_nations[lp_surrenderingPlayer]) + StringExternal("Param/Value/49038143")) + StringToText(gv_nations[lp_enforcingPlayer])));
    libNtve_gf_SetAlliance(lp_enforcingPlayer, lp_surrenderingPlayer, libNtve_ge_AllianceSetting_Neutral);
    autoB792B441_g = gv_users;
    autoB792B441_var = -1;
    while (true) {
        autoB792B441_var = PlayerGroupNextPlayer(autoB792B441_g, autoB792B441_var);
        if (autoB792B441_var < 0) { break; }
        if ((gv_subjugator[autoB792B441_var] == lp_enforcingPlayer)) {
            libNtve_gf_SetAlliance(autoB792B441_var, lp_enforcingPlayer, libNtve_ge_AllianceSetting_Neutral);
        }

        if ((gv_subjugator[autoB792B441_var] == lp_surrenderingPlayer)) {
            libNtve_gf_SetAlliance(autoB792B441_var, lp_surrenderingPlayer, libNtve_ge_AllianceSetting_Neutral);
        }

    }
    PlayerGroupRemove(gv_theEuroCrew, lp_surrenderingPlayer);
    if ((lp_surrenderingPlayer == gv_mrPresident)) {
        if ((PlayerGroupCount(gv_theEuroCrew) > 0)) {
            if ((gv_elections == 4)) {
                gv_mrPresident = PlayerGroupPlayer(gv_theEuroCrew, RandomInt(1, PlayerGroupCount(gv_theEuroCrew)));
                autoB89620DA_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                autoB89620DA_u = UnitGroupCount(autoB89620DA_g, c_unitCountAll);
                for (;; autoB89620DA_u -= 1) {
                    autoB89620DA_var = UnitGroupUnitFromEnd(autoB89620DA_g, autoB89620DA_u);
                    if (autoB89620DA_var == null) { break; }
                    if ((UnitGetType(autoB89620DA_var) == "EuropeanParliment")) {
                        UnitSetOwner(autoB89620DA_var, gv_mrPresident, true);
                    }

                }
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (PlayerName(gv_mrPresident) + StringExternal("Param/Value/BA568FF8")));
            }
            else {
                TriggerExecute(gt_BeginTheElection, true, false);
            }
        }
        else {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/51E5CBAE"));
            gv_mrPresident = 0;
            autoC14975D4_g = gv_users;
            autoC14975D4_var = -1;
            while (true) {
                autoC14975D4_var = PlayerGroupNextPlayer(autoC14975D4_g, autoC14975D4_var);
                if (autoC14975D4_var < 0) { break; }
                libNtve_gf_SetUpgradeLevelForPlayer(lp_surrenderingPlayer, "EUBuilt", 0);
            }
        }
    }

    gf_AddToDiplomacyQueue(lp_surrenderingPlayer, lv_realBoss, 4);
}

void gf_RemoveAllCores (int lp_player) {
    // Automatic Variable Declarations
    unitgroup auto852F3161_g;
    int auto852F3161_u;
    unit auto852F3161_var;
    unitgroup autoAE44B9A9_g;
    int autoAE44B9A9_u;
    unit autoAE44B9A9_var;
    unitgroup autoB76F2BB0_g;
    int autoB76F2BB0_u;
    unit autoB76F2BB0_var;
    unitgroup auto2DDC1D0F_g;
    int auto2DDC1D0F_u;
    unit auto2DDC1D0F_var;
    unitgroup autoE7A4E4C5_g;
    int autoE7A4E4C5_u;
    unit autoE7A4E4C5_var;
    unitgroup auto9B987304_g;
    int auto9B987304_u;
    unit auto9B987304_var;
    unitgroup autoF21B1A4E_g;
    int autoF21B1A4E_u;
    unit autoF21B1A4E_var;
    unitgroup auto10C00200_g;
    int auto10C00200_u;
    unit auto10C00200_var;
    unitgroup autoA70DDD55_g;
    int autoA70DDD55_u;
    unit autoA70DDD55_var;

    // Implementation
    auto852F3161_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto852F3161_u = UnitGroupCount(auto852F3161_g, c_unitCountAll);
    for (;; auto852F3161_u -= 1) {
        auto852F3161_var = UnitGroupUnitFromEnd(auto852F3161_g, auto852F3161_u);
        if (auto852F3161_var == null) { break; }
        if ((lp_player == 1) && (UnitHasBehavior2(EventUnit(), "Core1") == true)) {
            UnitBehaviorRemove(auto852F3161_var, "Core1", 1);
        }

    }
    autoAE44B9A9_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoAE44B9A9_u = UnitGroupCount(autoAE44B9A9_g, c_unitCountAll);
    for (;; autoAE44B9A9_u -= 1) {
        autoAE44B9A9_var = UnitGroupUnitFromEnd(autoAE44B9A9_g, autoAE44B9A9_u);
        if (autoAE44B9A9_var == null) { break; }
        if ((lp_player == 2) && (UnitHasBehavior2(EventUnit(), "Core2") == true)) {
            UnitBehaviorRemove(autoAE44B9A9_var, "Core2", 1);
        }

    }
    autoB76F2BB0_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB76F2BB0_u = UnitGroupCount(autoB76F2BB0_g, c_unitCountAll);
    for (;; autoB76F2BB0_u -= 1) {
        autoB76F2BB0_var = UnitGroupUnitFromEnd(autoB76F2BB0_g, autoB76F2BB0_u);
        if (autoB76F2BB0_var == null) { break; }
        if ((lp_player == 3) && (UnitHasBehavior2(EventUnit(), "CoreTerritoryPlayer13") == true)) {
            UnitBehaviorRemove(autoB76F2BB0_var, "CoreTerritoryPlayer13", 1);
        }

    }
    auto2DDC1D0F_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto2DDC1D0F_u = UnitGroupCount(auto2DDC1D0F_g, c_unitCountAll);
    for (;; auto2DDC1D0F_u -= 1) {
        auto2DDC1D0F_var = UnitGroupUnitFromEnd(auto2DDC1D0F_g, auto2DDC1D0F_u);
        if (auto2DDC1D0F_var == null) { break; }
        if ((lp_player == 4) && (UnitHasBehavior2(EventUnit(), "CoreTerritoryPlayer14") == true)) {
            UnitBehaviorRemove(auto2DDC1D0F_var, "CoreTerritoryPlayer14", 1);
        }

    }
    autoE7A4E4C5_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE7A4E4C5_u = UnitGroupCount(autoE7A4E4C5_g, c_unitCountAll);
    for (;; autoE7A4E4C5_u -= 1) {
        autoE7A4E4C5_var = UnitGroupUnitFromEnd(autoE7A4E4C5_g, autoE7A4E4C5_u);
        if (autoE7A4E4C5_var == null) { break; }
        if ((lp_player == 5) && (UnitHasBehavior2(EventUnit(), "CoreTerritoryPlayer15") == true)) {
            UnitBehaviorRemove(autoE7A4E4C5_var, "CoreTerritoryPlayer15", 1);
        }

    }
    auto9B987304_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9B987304_u = UnitGroupCount(auto9B987304_g, c_unitCountAll);
    for (;; auto9B987304_u -= 1) {
        auto9B987304_var = UnitGroupUnitFromEnd(auto9B987304_g, auto9B987304_u);
        if (auto9B987304_var == null) { break; }
        if ((lp_player == 6) && (UnitHasBehavior2(EventUnit(), "CoreTerritoryPlayer16") == true)) {
            UnitBehaviorRemove(auto9B987304_var, "CoreTerritoryPlayer16", 1);
        }

    }
    autoF21B1A4E_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF21B1A4E_u = UnitGroupCount(autoF21B1A4E_g, c_unitCountAll);
    for (;; autoF21B1A4E_u -= 1) {
        autoF21B1A4E_var = UnitGroupUnitFromEnd(autoF21B1A4E_g, autoF21B1A4E_u);
        if (autoF21B1A4E_var == null) { break; }
        if ((lp_player == 7) && (UnitHasBehavior2(EventUnit(), "CoreTerritoryPlayer17") == true)) {
            UnitBehaviorRemove(autoF21B1A4E_var, "CoreTerritoryPlayer17", 1);
        }

    }
    auto10C00200_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto10C00200_u = UnitGroupCount(auto10C00200_g, c_unitCountAll);
    for (;; auto10C00200_u -= 1) {
        auto10C00200_var = UnitGroupUnitFromEnd(auto10C00200_g, auto10C00200_u);
        if (auto10C00200_var == null) { break; }
        if ((lp_player == 8) && (UnitHasBehavior2(EventUnit(), "CoreTerritoryPlayer18") == true)) {
            UnitBehaviorRemove(auto10C00200_var, "CoreTerritoryPlayer18", 1);
        }

    }
    autoA70DDD55_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA70DDD55_u = UnitGroupCount(autoA70DDD55_g, c_unitCountAll);
    for (;; autoA70DDD55_u -= 1) {
        autoA70DDD55_var = UnitGroupUnitFromEnd(autoA70DDD55_g, autoA70DDD55_u);
        if (autoA70DDD55_var == null) { break; }
        if ((lp_player == 9) && (UnitHasBehavior2(EventUnit(), "CoreTerritoryPlayer19") == true)) {
            UnitBehaviorRemove(autoA70DDD55_var, "CoreTerritoryPlayer19", 1);
        }

    }
}

void gf_SuccessionDecide (unit lp_unit, int lp_leftPlayer) {
    int init_i;

    // Variable Declarations
    int lv_luckyPlayer;
    fixed[10] lv_effectiveDistance;
    fixed lv_russianDistance;

    // Automatic Variable Declarations
    // Variable Initialization
    for (init_i = 0; init_i <= 9; init_i += 1) {
        lv_effectiveDistance[init_i] = 9999.0;
    }
    lv_russianDistance = 9999.0;

    // Implementation
    if (((UnitGetType(lp_unit) == "Metal") || (UnitGetType(lp_unit) == "MineI") || (UnitGetType(lp_unit) == "MineII") || (UnitGetType(lp_unit) == "MineIII") || (UnitGetType(lp_unit) == "MineIV") || (UnitGetType(lp_unit) == "MineV") || (UnitGetType(lp_unit) == "Silver") || (UnitGetType(lp_unit) == "Gold") || (UnitGetType(lp_unit) == "Platinum") || (UnitGetType(lp_unit) == "GeothermalFissure") || (UnitGetType(lp_unit) == "GeothermalPowerPlant") || (UnitGetType(lp_unit) == "BoreholeI") || (UnitGetType(lp_unit) == "BoreholeII") || (UnitGetType(lp_unit) == "BoreholeIII") || (UnitGetType(lp_unit) == "BoreholeIV") || (UnitGetType(lp_unit) == "BoreholeV") || (UnitGetType(lp_unit) == "Oil") || (UnitGetType(lp_unit) == "OilWellI") || (UnitGetType(lp_unit) == "OilWellII"))) {
        UnitSetOwner(lp_unit, 0, true);
        gf_WipeUnitCustomValues(lp_unit, 1, 63);
    }
    else {
        UnitKill(lp_unit);
    }
}

void gf_AnnexProvincesFromPlayer (int lp_takingPlayer, int lp_givingPlayer) {
    // Variable Declarations
    int lv_queueNumber;
    unit lv_capitolOfGiving;

    // Automatic Variable Declarations
    unitgroup auto7A611E48_g;
    int auto7A611E48_u;
    unit auto7A611E48_var;
    const int autoBDDD84FD_ae = gv_numberOfRegions;
    const int autoBDDD84FD_ai = 1;
    unitgroup auto8B1DEA4A_g;
    int auto8B1DEA4A_u;
    unit auto8B1DEA4A_var;

    // Variable Initialization

    // Implementation
    auto7A611E48_g = UnitGroup("Capital", lp_givingPlayer, null, UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto7A611E48_u = UnitGroupCount(auto7A611E48_g, c_unitCountAll);
    for (;; auto7A611E48_u -= 1) {
        auto7A611E48_var = UnitGroupUnitFromEnd(auto7A611E48_g, auto7A611E48_u);
        if (auto7A611E48_var == null) { break; }
        lv_capitolOfGiving = auto7A611E48_var;
    }
    lv_queueNumber = 1;
    for ( ; ( (autoBDDD84FD_ai >= 0 && lv_queueNumber <= autoBDDD84FD_ae) || (autoBDDD84FD_ai < 0 && lv_queueNumber >= autoBDDD84FD_ae) ) ; lv_queueNumber += autoBDDD84FD_ai ) {
        if ((gv_requestedAnnex[lp_takingPlayer][lv_queueNumber] == true)) {
            auto8B1DEA4A_g = UnitGroup(null, lp_givingPlayer, gv_countRegions[lv_queueNumber], UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto8B1DEA4A_u = UnitGroupCount(auto8B1DEA4A_g, c_unitCountAll);
            for (;; auto8B1DEA4A_u -= 1) {
                auto8B1DEA4A_var = UnitGroupUnitFromEnd(auto8B1DEA4A_g, auto8B1DEA4A_u);
                if (auto8B1DEA4A_var == null) { break; }
                UnitSetOwner(auto8B1DEA4A_var, lp_takingPlayer, true);
                UnitBehaviorRemove(auto8B1DEA4A_var, "Occupation", 1);
                UnitBehaviorAdd(auto8B1DEA4A_var, "Separatists", lv_capitolOfGiving, 20);
            }
        }

    }
}

void gf_EnforcePeaceTreaty (int lp_takingPlayer, int lp_givingPlayer, bool lp_readOut) {
    // Variable Declarations
    unit lv_capitolOfGiving;

    // Automatic Variable Declarations
    unitgroup autoDD6ECE8D_g;
    int autoDD6ECE8D_u;
    unit autoDD6ECE8D_var;
    unitgroup autoDA9956F3_g;
    int autoDA9956F3_u;
    unit autoDA9956F3_var;
    playergroup auto87D579C2_g;
    int auto87D579C2_var;

    // Variable Initialization

    // Implementation
    if ((lp_readOut == true)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/889E7D94") + (StringToText(gf_GetCountyName(gf_GetCountyID(gf_FindNeutralCapitol(lp_takingPlayer, lp_givingPlayer)))) + StringExternal("Param/Value/7AABF205"))));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, ((StringExternal("Param/Value/7D225D9A") + StringToText(gv_nations[lp_takingPlayer])) + (StringExternal("Param/Value/A02AF3E8") + gf_GetTotalPeaceDealSend(lp_givingPlayer))));
    }

    gv_embargo[lp_givingPlayer][lp_takingPlayer] = false;
    gv_embargo[lp_takingPlayer][lp_givingPlayer] = false;
    if ((gv_requestFullAnnex[lp_takingPlayer][lp_givingPlayer] == true)) {
        autoDD6ECE8D_g = UnitGroup("Capital", lp_givingPlayer, null, UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoDD6ECE8D_u = UnitGroupCount(autoDD6ECE8D_g, c_unitCountAll);
        for (;; autoDD6ECE8D_u -= 1) {
            autoDD6ECE8D_var = UnitGroupUnitFromEnd(autoDD6ECE8D_g, autoDD6ECE8D_u);
            if (autoDD6ECE8D_var == null) { break; }
            lv_capitolOfGiving = autoDD6ECE8D_var;
        }
        autoDA9956F3_g = UnitGroup(null, lp_givingPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoDA9956F3_u = UnitGroupCount(autoDA9956F3_g, c_unitCountAll);
        for (;; autoDA9956F3_u -= 1) {
            autoDA9956F3_var = UnitGroupUnitFromEnd(autoDA9956F3_g, autoDA9956F3_u);
            if (autoDA9956F3_var == null) { break; }
            if ((UnitGetType(autoDA9956F3_var) == "Capital")) {
                UnitRemove(autoDA9956F3_var);
            }

            UnitSetOwner(autoDA9956F3_var, lp_takingPlayer, true);
            UnitBehaviorRemove(autoDA9956F3_var, "Occupation", 1);
        }
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (PlayerName(lp_givingPlayer) + TextWithColor(StringExternal("Param/Value/598D6A9C"), Color(100.00, 0.00, 0.00))));
        gf_KillCorp(lp_givingPlayer);
        PlayerSetAlliance(1, c_allianceIdVision, lp_givingPlayer, true);
        PlayerSetAlliance(2, c_allianceIdVision, lp_givingPlayer, true);
        PlayerSetAlliance(3, c_allianceIdVision, lp_givingPlayer, true);
        PlayerSetAlliance(4, c_allianceIdVision, lp_givingPlayer, true);
        PlayerSetAlliance(5, c_allianceIdVision, lp_givingPlayer, true);
        PlayerSetAlliance(6, c_allianceIdVision, lp_givingPlayer, true);
        PlayerSetAlliance(7, c_allianceIdVision, lp_givingPlayer, true);
        PlayerSetAlliance(8, c_allianceIdVision, lp_givingPlayer, true);
        PlayerSetAlliance(9, c_allianceIdVision, lp_givingPlayer, true);
        PlayerSetAlliance(10, c_allianceIdVision, lp_givingPlayer, true);
        PlayerSetAlliance(11, c_allianceIdVision, lp_givingPlayer, true);
        PlayerSetAlliance(12, c_allianceIdVision, lp_givingPlayer, true);
        PlayerSetAlliance(13, c_allianceIdVision, lp_givingPlayer, true);
        PlayerSetAlliance(14, c_allianceIdVision, lp_givingPlayer, true);
        PlayerSetAlliance(15, c_allianceIdVision, lp_givingPlayer, true);
    }

    if ((gv_requestEmbargo[lp_takingPlayer][lp_givingPlayer] == true)) {
        gv_embargoed[lp_givingPlayer] = 10;
    }

    if ((gv_requestDisarmament[lp_takingPlayer][lp_givingPlayer] == true)) {
        gv_disarmed[lp_givingPlayer] = 10;
    }

    if ((gv_requestSubjugate[lp_takingPlayer][lp_givingPlayer] == true)) {
        gf_SubjugatePlayer(lp_takingPlayer, lp_givingPlayer);
    }

    if ((gv_requestReleaseVassal[lp_takingPlayer][lp_givingPlayer] == true)) {
        auto87D579C2_g = gv_users;
        auto87D579C2_var = -1;
        while (true) {
            auto87D579C2_var = PlayerGroupNextPlayer(auto87D579C2_g, auto87D579C2_var);
            if (auto87D579C2_var < 0) { break; }
            if ((gv_subjugator[auto87D579C2_var] == lp_givingPlayer)) {
                gf_DeSubjugatePlayer(auto87D579C2_var);
            }

        }
    }

    if ((gv_requestWarReps[lp_takingPlayer][lp_givingPlayer] > 0)) {
        gv_reparations[lp_givingPlayer][lp_takingPlayer] = gv_requestWarReps[lp_takingPlayer][lp_givingPlayer];
    }

}

unit gf_FindNeutralCapitol (int lp_player1, int lp_player2) {
    // Variable Declarations
    playergroup lv_consideredPlayersPremium;
    playergroup lv_consideredPlayersRegular;
    int[10] lv_consideredPlayersList;
    int lv_theConsidered;
    int lv_consideredLoop;
    int lv_maximumGDP;
    unit lv_theUnit;

    // Automatic Variable Declarations
    unitgroup autoB60EF70A_g;
    int autoB60EF70A_u;
    unit autoB60EF70A_var;
    playergroup autoECF7D24C_g;
    int autoECF7D24C_var;
    playergroup autoFB8C57B2_g;
    int autoFB8C57B2_var;
    const int autoFAF7EDDE_ae = 9;
    const int autoFAF7EDDE_ai = 1;
    unitgroup auto41414BF2_g;
    int auto41414BF2_u;
    unit auto41414BF2_var;

    // Variable Initialization
    lv_consideredPlayersPremium = PlayerGroupEmpty();
    lv_consideredPlayersRegular = PlayerGroupEmpty();

    // Implementation
    autoB60EF70A_g = UnitGroup("Capital", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB60EF70A_u = UnitGroupCount(autoB60EF70A_g, c_unitCountAll);
    for (;; autoB60EF70A_u -= 1) {
        autoB60EF70A_var = UnitGroupUnitFromEnd(autoB60EF70A_g, autoB60EF70A_u);
        if (autoB60EF70A_var == null) { break; }
        if ((libNtve_gf_PlayerIsEnemy(UnitGetOwner(autoB60EF70A_var), lp_player1, libNtve_ge_PlayerRelation_NeutralMutual) == true) && (libNtve_gf_PlayerIsEnemy(UnitGetOwner(autoB60EF70A_var), lp_player2, libNtve_ge_PlayerRelation_NeutralMutual) == true) && (UnitGetOwner(autoB60EF70A_var) < 8)) {
            PlayerGroupAdd(lv_consideredPlayersPremium, UnitGetOwner(autoB60EF70A_var));
        }

        if ((libNtve_gf_PlayerIsEnemy(UnitGetOwner(autoB60EF70A_var), lp_player1, libNtve_ge_PlayerRelation_NeutralMutual) == true) && (libNtve_gf_PlayerIsEnemy(UnitGetOwner(autoB60EF70A_var), lp_player2, libNtve_ge_PlayerRelation_NeutralMutual) == true) && (UnitGetOwner(autoB60EF70A_var) < 8)) {
            PlayerGroupAdd(lv_consideredPlayersRegular, UnitGetOwner(autoB60EF70A_var));
        }

    }
    if ((PlayerGroupCount(lv_consideredPlayersPremium) > 0)) {
        autoFB8C57B2_g = lv_consideredPlayersPremium;
        autoFB8C57B2_var = -1;
        while (true) {
            autoFB8C57B2_var = PlayerGroupNextPlayer(autoFB8C57B2_g, autoFB8C57B2_var);
            if (autoFB8C57B2_var < 0) { break; }
            lv_consideredPlayersList[autoFB8C57B2_var] = gv_gDP[autoFB8C57B2_var];
        }
    }
    else {
        if ((PlayerGroupCount(lv_consideredPlayersRegular) > 0)) {
            autoECF7D24C_g = lv_consideredPlayersRegular;
            autoECF7D24C_var = -1;
            while (true) {
                autoECF7D24C_var = PlayerGroupNextPlayer(autoECF7D24C_g, autoECF7D24C_var);
                if (autoECF7D24C_var < 0) { break; }
                lv_consideredPlayersList[autoECF7D24C_var] = gv_gDP[autoECF7D24C_var];
            }
        }
        else {
            lv_consideredPlayersList[lp_player1] = gv_gDP[lp_player1];
            lv_consideredPlayersList[lp_player2] = gv_gDP[lp_player2];
        }
    }
    lv_consideredLoop = 1;
    for ( ; ( (autoFAF7EDDE_ai >= 0 && lv_consideredLoop <= autoFAF7EDDE_ae) || (autoFAF7EDDE_ai < 0 && lv_consideredLoop >= autoFAF7EDDE_ae) ) ; lv_consideredLoop += autoFAF7EDDE_ai ) {
        if ((lv_consideredPlayersList[lv_consideredLoop] > lv_maximumGDP)) {
            lv_maximumGDP = lv_consideredPlayersList[lv_consideredLoop];
            lv_theConsidered = lv_consideredLoop;
        }

    }
    auto41414BF2_g = UnitGroup("Capital", lv_theConsidered, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto41414BF2_u = UnitGroupCount(auto41414BF2_g, c_unitCountAll);
    for (;; auto41414BF2_u -= 1) {
        auto41414BF2_var = UnitGroupUnitFromEnd(auto41414BF2_g, auto41414BF2_u);
        if (auto41414BF2_var == null) { break; }
        lv_theUnit = auto41414BF2_var;
    }
    if ((lv_theUnit == null)) {
        return UnitFromId(176);
    }
    else {
        return lv_theUnit;
    }
}

text gf_GetTotalPeaceDealSend (int lp_player) {
    // Variable Declarations
    text lv_completeText;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((StringLength(gf_GetAnnexText(lp_player)) > 0)) {
        lv_completeText = (lv_completeText + (StringToText(gf_GetAnnexText(lp_player)) + StringExternal("Param/Value/EBE95259")));
    }

    if ((StringLength(gf_GetSubjectText(lp_player)) > 0)) {
        lv_completeText = (lv_completeText + (StringToText(gf_GetSubjectText(lp_player)) + StringExternal("Param/Value/D6FF4634")));
    }

    if ((StringLength(gf_GetReparationsText(lp_player)) > 0)) {
        lv_completeText = (lv_completeText + (StringToText(gf_GetReparationsText(lp_player)) + StringExternal("Param/Value/9A46AD14")));
    }

    if ((StringLength(gf_GetEmbargoText(lp_player)) > 0)) {
        lv_completeText = (lv_completeText + (StringToText(gf_GetEmbargoText(lp_player)) + StringExternal("Param/Value/5F3186E8")));
    }

    if ((StringLength(gf_GetDisarmamentText(lp_player)) > 0)) {
        lv_completeText = (lv_completeText + (StringToText(gf_GetDisarmamentText(lp_player)) + StringExternal("Param/Value/A50CAE02")));
    }

    if ((StringLength(gf_GetReleaseVassalText(lp_player)) > 0)) {
        lv_completeText = (lv_completeText + (StringToText(gf_GetReleaseVassalText(lp_player)) + StringExternal("Param/Value/536DF7F7")));
    }

    if ((StringLength(gf_GetFullAnnexText(lp_player)) > 0)) {
        lv_completeText = (lv_completeText + (StringToText(gf_GetFullAnnexText(lp_player)) + StringExternal("Param/Value/EF55DC6F")));
    }

    return lv_completeText;
}

string gf_GetAnnexText (int lp_player) {
    // Variable Declarations
    bool lv_annexMentioned;
    bool lv_annexMentioned2;
    int lv_queueNumber;
    string lv_completeString;
    text lv_nameOfPlayer;
    string lv_nameOfWhomstplayer;

    // Automatic Variable Declarations
    const int autoE9D591FC_ae = 200;
    const int autoE9D591FC_ai = 1;
    const int auto2259CCFD_ae = 200;
    const int auto2259CCFD_ai = 1;

    // Variable Initialization
    lv_completeString = "";
    lv_nameOfWhomstplayer = "";

    // Implementation
    lv_queueNumber = 1;
    for ( ; ( (autoE9D591FC_ai >= 0 && lv_queueNumber <= autoE9D591FC_ae) || (autoE9D591FC_ai < 0 && lv_queueNumber >= autoE9D591FC_ae) ) ; lv_queueNumber += autoE9D591FC_ai ) {
        if ((gv_requestedAnnex[lp_player][lv_queueNumber] == true)) {
            if ((lv_annexMentioned == false)) {
                lv_completeString = ((lv_completeString + "Secede ") + gf_GetCountyName(lv_queueNumber));
                lv_annexMentioned = true;
            }
            else {
                lv_completeString = ((lv_completeString + " ") + gf_GetCountyName(lv_queueNumber));
            }
        }

    }
    lv_queueNumber = 1;
    for ( ; ( (auto2259CCFD_ai >= 0 && lv_queueNumber <= auto2259CCFD_ae) || (auto2259CCFD_ai < 0 && lv_queueNumber >= auto2259CCFD_ae) ) ; lv_queueNumber += auto2259CCFD_ai ) {
        if ((gv_requestedAnnex[gv_whomstGlobalDiplomcay[lp_player]][lv_queueNumber] == true)) {
            if ((lv_annexMentioned2 == false)) {
                if ((lv_annexMentioned == true)) {
                    lv_completeString = ((lv_completeString + ". ") + "");
                }

                lv_completeString = ((lv_completeString + "Recieve ") + gf_GetCountyName(lv_queueNumber));
                lv_annexMentioned2 = true;
            }
            else {
                lv_completeString = ((lv_completeString + " ") + gf_GetCountyName(lv_queueNumber));
            }
        }

    }
    if ((StringLength(lv_completeString) > 0)) {
        lv_completeString = ((lv_completeString + ".") + "");
    }

    return lv_completeString;
}

string gf_GetSubjectText (int lp_player) {
    // Variable Declarations
    string lv_completeString;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_completeString = "";

    // Implementation
    if ((gv_requestSubjugate[lp_player][gv_whomstGlobalDiplomcay[lp_player]] == true)) {
        lv_completeString = "Become a subject.";
    }

    if ((gv_requestSubjugate[gv_whomstGlobalDiplomcay[lp_player]][lp_player] == true)) {
        lv_completeString = "Subjugate the peacedeal target.";
    }

    return lv_completeString;
}

string gf_GetReparationsText (int lp_player) {
    // Variable Declarations
    string lv_completeString;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_completeString = "";

    // Implementation
    if ((gv_requestWarReps[lp_player][gv_whomstGlobalDiplomcay[lp_player]] > 0)) {
        lv_completeString = ("Pay " + (IntToString(gv_requestWarReps[lp_player][gv_whomstGlobalDiplomcay[lp_player]]) + " Credits in the form of 20% of your income, until the total cost is paid off."));
    }

    if ((gv_requestWarReps[gv_whomstGlobalDiplomcay[lp_player]][lp_player] > 0)) {
        lv_completeString = ("Recieve " + (IntToString(gv_requestWarReps[gv_whomstGlobalDiplomcay[lp_player]][lp_player]) + " Credits in the form of 20% of their income, until the total cost is paid off."));
    }

    return lv_completeString;
}

string gf_GetEmbargoText (int lp_player) {
    // Variable Declarations
    string lv_completeString;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_completeString = "";

    // Implementation
    if ((gv_requestEmbargo[lp_player][gv_whomstGlobalDiplomcay[lp_player]] == true)) {
        lv_completeString = " Force trade embargo against us for 10 years.";
    }

    if ((gv_requestEmbargo[gv_whomstGlobalDiplomcay[lp_player]][lp_player] == true)) {
        lv_completeString = " Enforce a trade embargo on them for 10 years.";
    }

    return lv_completeString;
}

string gf_GetDisarmamentText (int lp_player) {
    // Variable Declarations
    string lv_completeString;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_completeString = "";

    // Implementation
    if ((gv_requestDisarmament[lp_player][gv_whomstGlobalDiplomcay[lp_player]] == true)) {
        lv_completeString = "Stand down the majority of our army capacity for 10 years.";
    }

    if ((gv_requestDisarmament[gv_whomstGlobalDiplomcay[lp_player]][lp_player] == true)) {
        lv_completeString = "Enforce disarmarment of their military for 10 years, decreasing their army capacity.";
    }

    return lv_completeString;
}

string gf_GetReleaseVassalText (int lp_player) {
    // Variable Declarations
    string lv_completeString;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_completeString = "";

    // Implementation
    if ((gv_requestReleaseVassal[lp_player][gv_whomstGlobalDiplomcay[lp_player]] == true)) {
        lv_completeString = "You will release all subjects.";
    }

    if ((gv_requestReleaseVassal[gv_whomstGlobalDiplomcay[lp_player]][lp_player] == true)) {
        lv_completeString = "All enemy subjects will be released.";
    }

    return lv_completeString;
}

string gf_GetFullAnnexText (int lp_player) {
    // Variable Declarations
    string lv_completeString;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_completeString = "";

    // Implementation
    if ((gv_requestFullAnnex[lp_player][gv_whomstGlobalDiplomcay[lp_player]] == true)) {
        lv_completeString = "Become FULLY ANNEXED.";
    }

    if ((gv_requestFullAnnex[gv_whomstGlobalDiplomcay[lp_player]][lp_player] == true)) {
        lv_completeString = "Fully annex all their territories.";
    }

    return lv_completeString;
}

void gf_ReturnOccupiedTerritory (int lp_player) {
    // Variable Declarations
    int lv_occupier;
    int lv_lastOwner;
    unitgroup lv_occupied;

    // Automatic Variable Declarations
    unitgroup autoAF59A041_g;
    int autoAF59A041_u;
    unit autoAF59A041_var;
    unitgroup auto41E914C6_g;
    int auto41E914C6_u;
    unit auto41E914C6_var;
    unitgroup autoEDB98111_g;
    int autoEDB98111_u;
    unit autoEDB98111_var;

    // Variable Initialization
    lv_occupied = UnitGroupEmpty();

    // Implementation
    autoAF59A041_g = UnitGroup(null, lp_player, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoAF59A041_u = UnitGroupCount(autoAF59A041_g, c_unitCountAll);
    for (;; autoAF59A041_u -= 1) {
        autoAF59A041_var = UnitGroupUnitFromEnd(autoAF59A041_g, autoAF59A041_u);
        if (autoAF59A041_var == null) { break; }
        if ((UnitHasBehavior2(autoAF59A041_var, "Occupation") == true)) {
            UnitGroupAdd(lv_occupied, autoAF59A041_var);
        }

    }
    auto41E914C6_g = UnitGroup(null, lp_player, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto41E914C6_u = UnitGroupCount(auto41E914C6_g, c_unitCountAll);
    for (;; auto41E914C6_u -= 1) {
        auto41E914C6_var = UnitGroupUnitFromEnd(auto41E914C6_g, auto41E914C6_u);
        if (auto41E914C6_var == null) { break; }
        UnitBehaviorRemove(auto41E914C6_var, "NegotiatedTerritory", 1);
    }
    autoEDB98111_g = UnitGroupFilter(null, lp_player, lv_occupied, UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoEDB98111_u = UnitGroupCount(autoEDB98111_g, c_unitCountAll);
    for (;; autoEDB98111_u -= 1) {
        autoEDB98111_var = UnitGroupUnitFromEnd(autoEDB98111_g, autoEDB98111_u);
        if (autoEDB98111_var == null) { break; }
        lv_lastOwner = FixedToInt(UnitGetCustomValue(autoEDB98111_var, 20));
        lv_occupier = UnitGetOwner(autoEDB98111_var);
        if ((lv_lastOwner == 1) && (UnitHasBehavior2(autoEDB98111_var, "Core1") == true)) {
            UnitSetOwner(autoEDB98111_var, 1, true);
        }

        if ((lv_lastOwner == 2) && (UnitHasBehavior2(autoEDB98111_var, "Core2") == true)) {
            UnitSetOwner(autoEDB98111_var, 2, true);
        }

        if ((lv_lastOwner == 3) && (UnitHasBehavior2(autoEDB98111_var, "CoreTerritoryPlayer13") == true)) {
            UnitSetOwner(autoEDB98111_var, 3, true);
        }

        if ((lv_lastOwner == 4) && (UnitHasBehavior2(autoEDB98111_var, "CoreTerritoryPlayer14") == true)) {
            UnitSetOwner(autoEDB98111_var, 4, true);
        }

        if ((lv_lastOwner == 5) && (UnitHasBehavior2(autoEDB98111_var, "CoreTerritoryPlayer15") == true)) {
            UnitSetOwner(autoEDB98111_var, 5, true);
        }

        if ((lv_lastOwner == 6) && (UnitHasBehavior2(autoEDB98111_var, "CoreTerritoryPlayer16") == true)) {
            UnitSetOwner(autoEDB98111_var, 6, true);
        }

        if ((lv_lastOwner == 7) && (UnitHasBehavior2(autoEDB98111_var, "CoreTerritoryPlayer17") == true)) {
            UnitSetOwner(autoEDB98111_var, 7, true);
        }

        if ((lv_lastOwner == 8) && (UnitHasBehavior2(autoEDB98111_var, "CoreTerritoryPlayer18") == true)) {
            UnitSetOwner(autoEDB98111_var, 8, true);
        }

        if ((lv_lastOwner == 9) && (UnitHasBehavior2(autoEDB98111_var, "CoreTerritoryPlayer19") == true)) {
            UnitSetOwner(autoEDB98111_var, 9, true);
        }

        if ((lv_occupier == UnitGetOwner(autoEDB98111_var))) {
            if ((UnitHasBehavior2(autoEDB98111_var, "Core1") == true)) {
                UnitSetOwner(autoEDB98111_var, 1, true);
            }

            if ((UnitHasBehavior2(autoEDB98111_var, "Core2") == true)) {
                UnitSetOwner(autoEDB98111_var, 2, true);
            }

            if ((UnitHasBehavior2(autoEDB98111_var, "CoreTerritoryPlayer13") == true)) {
                UnitSetOwner(autoEDB98111_var, 3, true);
            }

            if ((UnitHasBehavior2(autoEDB98111_var, "CoreTerritoryPlayer14") == true)) {
                UnitSetOwner(autoEDB98111_var, 4, true);
            }

            if ((UnitHasBehavior2(autoEDB98111_var, "CoreTerritoryPlayer15") == true)) {
                UnitSetOwner(autoEDB98111_var, 5, true);
            }

            if ((UnitHasBehavior2(autoEDB98111_var, "CoreTerritoryPlayer16") == true)) {
                UnitSetOwner(autoEDB98111_var, 6, true);
            }

            if ((UnitHasBehavior2(autoEDB98111_var, "CoreTerritoryPlayer17") == true)) {
                UnitSetOwner(autoEDB98111_var, 7, true);
            }

            if ((UnitHasBehavior2(autoEDB98111_var, "CoreTerritoryPlayer18") == true)) {
                UnitSetOwner(autoEDB98111_var, 8, true);
            }

            if ((UnitHasBehavior2(autoEDB98111_var, "CoreTerritoryPlayer19") == true)) {
                UnitSetOwner(autoEDB98111_var, 9, true);
            }

            if ((lv_occupier == UnitGetOwner(autoEDB98111_var))) {
                UnitBehaviorRemove(autoEDB98111_var, "Occupation", 1);
            }

        }

    }
}

void gf_ClearPeaceDeal (int lp_player) {
    // Variable Declarations
    int lv_queueNumber;
    int lv_playar2;

    // Automatic Variable Declarations
    const int auto028FF848_ae = 200;
    const int auto028FF848_ai = 1;
    const int autoCB65EED9_ae = 9;
    const int autoCB65EED9_ai = 1;
    unitgroup autoED1602FA_g;
    int autoED1602FA_u;
    unit autoED1602FA_var;

    // Variable Initialization

    // Implementation
    lv_playar2 = gv_whomstGlobalDiplomcay[lp_player];
    lv_queueNumber = 1;
    for ( ; ( (auto028FF848_ai >= 0 && lv_queueNumber <= auto028FF848_ae) || (auto028FF848_ai < 0 && lv_queueNumber >= auto028FF848_ae) ) ; lv_queueNumber += auto028FF848_ai ) {
        gv_requestedAnnex[lp_player][lv_queueNumber] = false;
    }
    gv_requestSubjugate[lp_player][gv_whomstGlobalDiplomcay[lp_player]] = false;
    gv_requestSubjugate[gv_whomstGlobalDiplomcay[lp_player]][lp_player] = false;
    gv_requestWarReps[gv_whomstGlobalDiplomcay[lp_player]][lp_player] = 0;
    gv_requestWarReps[lp_player][gv_whomstGlobalDiplomcay[lp_player]] = 0;
    gv_requestSubjugate[gv_whomstGlobalDiplomcay[lp_player]][lp_player] = false;
    gv_requestSubjugate[lp_player][gv_whomstGlobalDiplomcay[lp_player]] = false;
    gv_requestChangeGovernment[gv_whomstGlobalDiplomcay[lp_player]][lp_player] = false;
    gv_requestChangeGovernment[lp_player][gv_whomstGlobalDiplomcay[lp_player]] = false;
    gv_requestEmbargo[gv_whomstGlobalDiplomcay[lp_player]][lp_player] = false;
    gv_requestEmbargo[lp_player][gv_whomstGlobalDiplomcay[lp_player]] = false;
    gv_requestDisarmament[gv_whomstGlobalDiplomcay[lp_player]][lp_player] = false;
    gv_requestDisarmament[lp_player][gv_whomstGlobalDiplomcay[lp_player]] = false;
    gv_requestFullAnnex[gv_whomstGlobalDiplomcay[lp_player]][lp_player] = false;
    gv_requestFullAnnex[lp_player][gv_whomstGlobalDiplomcay[lp_player]] = false;
    lv_queueNumber = 1;
    for ( ; ( (autoCB65EED9_ai >= 0 && lv_queueNumber <= autoCB65EED9_ae) || (autoCB65EED9_ai < 0 && lv_queueNumber >= autoCB65EED9_ae) ) ; lv_queueNumber += autoCB65EED9_ai ) {
        gv_requestReleaseVassal[lp_player][gv_whomstGlobalDiplomcay[lp_player]] = false;
        gv_requestReleaseVassal[gv_whomstGlobalDiplomcay[lp_player]][lp_player] = false;
    }
    autoED1602FA_g = UnitGroup(null, lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoED1602FA_u = UnitGroupCount(autoED1602FA_g, c_unitCountAll);
    for (;; autoED1602FA_u -= 1) {
        autoED1602FA_var = UnitGroupUnitFromEnd(autoED1602FA_g, autoED1602FA_u);
        if (autoED1602FA_var == null) { break; }
        TextTagDestroy(libHots_gf_TextTagForUnit(autoED1602FA_var, 1));
    }
}

bool gf_AnnexInTreaty (int lp_player) {
    // Variable Declarations
    int lv_queueNumber;
    bool lv_annex;

    // Automatic Variable Declarations
    const int auto0DEC3490_ae = 200;
    const int auto0DEC3490_ai = 1;

    // Variable Initialization

    // Implementation
    lv_queueNumber = 1;
    for ( ; ( (auto0DEC3490_ai >= 0 && lv_queueNumber <= auto0DEC3490_ae) || (auto0DEC3490_ai < 0 && lv_queueNumber >= auto0DEC3490_ae) ) ; lv_queueNumber += auto0DEC3490_ai ) {
        if ((gv_requestedAnnex[lp_player][lv_queueNumber] == true)) {
            lv_annex = true;
        }

    }
    return lv_annex;
}

bool gf_FullAnnexInTreaty (int lp_player) {
    // Variable Declarations
    bool lv_annex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((gv_requestFullAnnex[lp_player][gv_whomstGlobalDiplomcay[lp_player]] == true)) {
        lv_annex = true;
    }

    if ((gv_requestFullAnnex[gv_whomstGlobalDiplomcay[lp_player]][lp_player] == true)) {
        lv_annex = true;
    }

    return lv_annex;
}

void gf_SwitchPeaceTreatyRoles (int lp_givingPeaceDealCurrently, int lp_recivingPeaceDealCurrently) {
    // Automatic Variable Declarations
    // Implementation
    gv_diplomacyQueue[lp_givingPeaceDealCurrently][1][5] = 0;
    gv_diplomacyQueue[lp_recivingPeaceDealCurrently][1][5] = lp_givingPeaceDealCurrently;
    gv_sentPeaceOfferToConsider[lp_givingPeaceDealCurrently] = false;
}

void gf_RemoveDiplomacyBetweenPlayers (int lp_player1, int lp_player2) {
    // Variable Declarations
    int lv_diplomacyLoop;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    gf_RemoveDiplomacyBetweenPlayer(lp_player1, lp_player2);
    gf_RemoveDiplomacyBetweenPlayer(lp_player2, lp_player1);
}

void gf_RemoveDiplomacyBetweenPlayer (int lp_player1, int lp_player2) {
    // Variable Declarations
    int lv_diplomacyLoop;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    gv_reparations[lp_player1][lp_player2] = 0;
    gv_reparations[lp_player2][lp_player1] = 0;
    gf_RemoveAllianceOffers(lp_player1, lp_player2);
    gf_RemoveCeasefireRequests(lp_player1, lp_player2);
    gf_RemovePeaceDrafts(lp_player1, lp_player2);
    gf_RemovePeaceConferences(lp_player1, 0);
}

void gf_RemoveAllianceOffers (int lp_player1, int lp_player2) {
    // Variable Declarations
    int lv_diplomacyLoop;

    // Automatic Variable Declarations
    const int autoB0EA38F5_ae = 9;
    const int autoB0EA38F5_ai = 1;

    // Variable Initialization

    // Implementation
    lv_diplomacyLoop = 1;
    for ( ; ( (autoB0EA38F5_ai >= 0 && lv_diplomacyLoop <= autoB0EA38F5_ae) || (autoB0EA38F5_ai < 0 && lv_diplomacyLoop >= autoB0EA38F5_ae) ) ; lv_diplomacyLoop += autoB0EA38F5_ai ) {
        if ((gv_diplomacyQueue[lp_player1][lv_diplomacyLoop][2] == lp_player2)) {
            gv_diplomacyQueue[lp_player1][lv_diplomacyLoop][2] = 0;
        }

    }
}

void gf_RemoveCeasefireRequests (int lp_player1, int lp_player2) {
    // Variable Declarations
    int lv_diplomacyLoop;

    // Automatic Variable Declarations
    const int autoB1BA3DA9_ae = 9;
    const int autoB1BA3DA9_ai = 1;

    // Variable Initialization

    // Implementation
    lv_diplomacyLoop = 1;
    for ( ; ( (autoB1BA3DA9_ai >= 0 && lv_diplomacyLoop <= autoB1BA3DA9_ae) || (autoB1BA3DA9_ai < 0 && lv_diplomacyLoop >= autoB1BA3DA9_ae) ) ; lv_diplomacyLoop += autoB1BA3DA9_ai ) {
        if ((gv_diplomacyQueue[lp_player1][lv_diplomacyLoop][3] == lp_player2)) {
            gv_diplomacyQueue[lp_player1][lv_diplomacyLoop][3] = 0;
        }

    }
}

void gf_RemovePeaceDrafts (int lp_player1, int lp_player2) {
    // Variable Declarations
    int lv_diplomacyLoop;

    // Automatic Variable Declarations
    const int auto819B26F2_ae = 9;
    const int auto819B26F2_ai = 1;

    // Variable Initialization

    // Implementation
    lv_diplomacyLoop = 1;
    for ( ; ( (auto819B26F2_ai >= 0 && lv_diplomacyLoop <= auto819B26F2_ae) || (auto819B26F2_ai < 0 && lv_diplomacyLoop >= auto819B26F2_ae) ) ; lv_diplomacyLoop += auto819B26F2_ai ) {
        if ((gv_diplomacyQueue[lp_player1][lv_diplomacyLoop][4] == lp_player2)) {
            gv_diplomacyQueue[lp_player1][lv_diplomacyLoop][4] = 0;
        }

    }
}

void gf_RemovePeaceConferences (int lp_player1, int lp_player2) {
    // Variable Declarations
    int lv_diplomacyLoop;

    // Automatic Variable Declarations
    const int auto2E707E4C_ae = 9;
    const int auto2E707E4C_ai = 1;

    // Variable Initialization

    // Implementation
    lv_diplomacyLoop = 1;
    for ( ; ( (auto2E707E4C_ai >= 0 && lv_diplomacyLoop <= auto2E707E4C_ae) || (auto2E707E4C_ai < 0 && lv_diplomacyLoop >= auto2E707E4C_ae) ) ; lv_diplomacyLoop += auto2E707E4C_ai ) {
        if ((gv_diplomacyQueue[lp_player1][lv_diplomacyLoop][5] == lp_player2)) {
            gv_diplomacyQueue[lp_player1][lv_diplomacyLoop][5] = 0;
        }

    }
}

bool gf_CanNeutral (int lp_offensivePlayer, int lp_defensivePlayer) {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_subjugated[lp_offensivePlayer] == true)) {
        UIDisplayMessage(PlayerGroupSingle(lp_offensivePlayer), c_messageAreaSubtitle, StringExternal("Param/Value/10BA8116"));
        return false;

    }
    else {
        if ((gv_subjugated[lp_defensivePlayer] == true)) {
            UIDisplayMessage(PlayerGroupSingle(lp_offensivePlayer), c_messageAreaSubtitle, StringExternal("Param/Value/CFB938ED"));
            return false;

        }
        else {
            if ((PlayerGroupHasPlayer(gv_theEuroCrew, lp_offensivePlayer) == true) && (PlayerGroupHasPlayer(gv_theEuroCrew, lp_defensivePlayer) == true)) {
                UIDisplayMessage(PlayerGroupSingle(lp_offensivePlayer), c_messageAreaSubtitle, StringExternal("Param/Value/21246D1D"));
                return false;

            }
            else {
                if (((libNtve_gf_PlayerIsEnemy(lp_offensivePlayer, lp_defensivePlayer, libNtve_ge_PlayerRelation_Ally) == true) || (libNtve_gf_PlayerIsEnemy(lp_defensivePlayer, lp_offensivePlayer, libNtve_ge_PlayerRelation_Ally) == true))) {
                    return true;
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lp_offensivePlayer), c_messageAreaSubtitle, StringExternal("Param/Value/F555C531"));
                    return false;
                }
            }
        }
    }
}

bool gf_CanAlly (int lp_offensivePlayer, int lp_defensivePlayer) {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_subjugated[lp_offensivePlayer] == true)) {
        UIDisplayMessage(PlayerGroupSingle(lp_offensivePlayer), c_messageAreaSubtitle, StringExternal("Param/Value/6FE12649"));
        return false;

    }
    else {
        if ((gv_subjugated[lp_defensivePlayer] == true)) {
            UIDisplayMessage(PlayerGroupSingle(lp_offensivePlayer), c_messageAreaSubtitle, StringExternal("Param/Value/D0AE3F66"));
            return false;

        }
        else {
            if ((PlayerGroupHasPlayer(gv_theEuroCrew, lp_offensivePlayer) == true) && (PlayerGroupHasPlayer(gv_theEuroCrew, lp_defensivePlayer) == true)) {
                UIDisplayMessage(PlayerGroupSingle(lp_offensivePlayer), c_messageAreaSubtitle, StringExternal("Param/Value/57DE9A35"));
                return false;

            }
            else {
                if (((libNtve_gf_PlayerIsEnemy(lp_offensivePlayer, lp_defensivePlayer, libNtve_ge_PlayerRelation_Ally) == false) || (libNtve_gf_PlayerIsEnemy(lp_defensivePlayer, lp_offensivePlayer, libNtve_ge_PlayerRelation_Ally) == false))) {
                    return true;
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lp_offensivePlayer), c_messageAreaSubtitle, StringExternal("Param/Value/6F049DD1"));
                    return false;
                }
            }
        }
    }
}

bool gf_CanCeaseFire (int lp_offensivePlayer, int lp_defensivePlayer) {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_subjugated[lp_offensivePlayer] == true)) {
        UIDisplayMessage(PlayerGroupSingle(lp_offensivePlayer), c_messageAreaSubtitle, StringExternal("Param/Value/5E197D11"));
        return false;

    }
    else {
        if ((gv_subjugated[lp_defensivePlayer] == true)) {
            UIDisplayMessage(PlayerGroupSingle(lp_offensivePlayer), c_messageAreaSubtitle, StringExternal("Param/Value/715E2AE9"));
            return false;

        }
        else {
            if (((libNtve_gf_PlayerIsEnemy(lp_offensivePlayer, lp_defensivePlayer, libNtve_ge_PlayerRelation_Enemy) == true) || (libNtve_gf_PlayerIsEnemy(lp_defensivePlayer, lp_offensivePlayer, libNtve_ge_PlayerRelation_Enemy) == true))) {
                return true;
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(lp_offensivePlayer), c_messageAreaSubtitle, StringExternal("Param/Value/99569997"));
                return false;
            }
        }
    }
}

void gf_GetWarType (int lp_offensivePlayer, int lp_defensivePlayer) {
    // Variable Declarations
    bool lv_canWar;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_canWar = true;

    // Implementation
    if ((libNtve_gf_PlayerIsEnemy(lp_offensivePlayer, lp_defensivePlayer, libNtve_ge_PlayerRelation_Enemy) == true)) {
        UIDisplayMessage(PlayerGroupSingle(lp_offensivePlayer), c_messageAreaSubtitle, StringExternal("Param/Value/6EEDF03E"));
        lv_canWar = false;

    }

    if ((lp_defensivePlayer == lp_offensivePlayer)) {
        UIDisplayMessage(PlayerGroupSingle(lp_offensivePlayer), c_messageAreaSubtitle, StringExternal("Param/Value/F1627196"));
        lv_canWar = false;

    }

    if ((TechTreeUpgradeCount(lp_offensivePlayer, "Pacifisim", c_techCountQueuedOrBetter) == 1)) {
        UIDisplayMessage(PlayerGroupSingle(lp_offensivePlayer), c_messageAreaSubtitle, StringExternal("Param/Value/6159976C"));
        lv_canWar = false;

    }

    if ((gv_subjugated[lp_offensivePlayer] == true)) {
        UIDisplayMessage(PlayerGroupSingle(lp_offensivePlayer), c_messageAreaSubtitle, StringExternal("Param/Value/DD37B67A"));
        lv_canWar = false;

    }

    if ((PlayerGroupHasPlayer(gv_theEuroCrew, lp_offensivePlayer) == true)) {
        if ((PlayerGroupHasPlayer(gv_theEuroCrew, lp_defensivePlayer) == true)) {
            UIDisplayMessage(PlayerGroupSingle(lp_offensivePlayer), c_messageAreaSubtitle, StringExternal("Param/Value/3B0AAC2D"));
            lv_canWar = false;

        }
        else {
            gf_EUDeclareWar(lp_offensivePlayer, lp_defensivePlayer);
        }
    }

    if ((gv_year < 2310)) {
        UIDisplayMessage(PlayerGroupSingle(lp_offensivePlayer), c_messageAreaSubtitle, StringExternal("Param/Value/89A030AE"));
        lv_canWar = false;

    }

    if ((lv_canWar == true)) {
        gf_WarExecute(3, EventPlayer(), UnitGetOwner(EventUnitTargetUnit()));
    }

}

void gf_EUDeclareWar (int lp_callingWar, int lp_warAgainst) {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_eUVoteInProgress == 0)) {
        gv_yesVotes = 0;
        gv_eUVoteInProgress = 21;
        libNtve_gf_SetDialogItemText(gv_eUDialogItems[0], StringExternal("Param/Value/C6242D27"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemText(gv_eUDialogItems[1], StringExternal("Param/Value/0E5C9F1E"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemTooltip(gv_eUDialogItems[1], StringExternal("Param/Value/33A55761"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemText(gv_eUDialogItems[2], StringExternal("Param/Value/EB65DB79"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemTooltip(gv_eUDialogItems[2], StringExternal("Param/Value/082A3DC3"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemText(gv_eUDialogItems[3], (StringToText("") + (PlayerName(lp_callingWar) + (StringExternal("Param/Value/4CE3D3B0") + PlayerName(lp_warAgainst)))), gv_theEuroCrew);
        DialogSetVisible(gv_eUDialog, gv_theEuroCrew, true);
        TriggerExecute(gt_CountVotes, true, false);
        Wait(40.0, c_timeGame);
        DialogSetVisible(gv_eUDialog, gv_theEuroCrew, false);
        if ((gv_yesVotes > (gv_possibleVotes / 2))) {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/B72AA52C") + (IntToText(gv_yesVotes) + (StringExternal("Param/Value/DDC0C01A") + IntToText((gv_possibleVotes - gv_yesVotes))))));
            gf_WarExecute(1, lp_callingWar, lp_warAgainst);
        }
        else {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/7E2F4916") + (IntToText(gv_yesVotes) + (StringExternal("Param/Value/117C8ACE") + IntToText((gv_possibleVotes - gv_yesVotes))))));
        }
        gv_eUVoteInProgress = 0;

    }
    else {
        Wait(2.0, c_timeGame);
    }
}

void gf_WarExecute (int lp_warType, int lp_offensivePlayer, int lp_defensivePlayer) {
    // Automatic Variable Declarations
    playergroup autoA6A9561A_g;
    int autoA6A9561A_var;
    playergroup autoC839531C_g;
    int autoC839531C_var;

    // Implementation
    if ((lp_warType == 0)) {
        UIDisplayMessage(PlayerGroupSingle(lp_offensivePlayer), c_messageAreaSubtitle, StringExternal("Param/Value/8C375939"));

    }

    if ((lp_warType == 1)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/72E2E660") + gf_NationOfPlayer(lp_defensivePlayer)));
        gf_CallToArmsAddToQueueStep1(lp_defensivePlayer, lp_offensivePlayer);
        autoA6A9561A_g = gv_theEuroCrew;
        autoA6A9561A_var = -1;
        while (true) {
            autoA6A9561A_var = PlayerGroupNextPlayer(autoA6A9561A_g, autoA6A9561A_var);
            if (autoA6A9561A_var < 0) { break; }
            if ((libNtve_gf_PlayerIsEnemy(lp_offensivePlayer, lp_defensivePlayer, libNtve_ge_PlayerRelation_Enemy) == true)) {
            }
            else {
                gf_WarDeclare(autoA6A9561A_var, lp_defensivePlayer);
            }
        }
        Wait(10.0, c_timeGame);
        gf_CallToArmsAddToQueueStep1(lp_offensivePlayer, lp_defensivePlayer);

    }

    if ((lp_warType == 3)) {
        gf_WarDeclare(lp_offensivePlayer, lp_defensivePlayer);
        autoC839531C_g = gv_users;
        autoC839531C_var = -1;
        while (true) {
            autoC839531C_var = PlayerGroupNextPlayer(autoC839531C_g, autoC839531C_var);
            if (autoC839531C_var < 0) { break; }
            if ((gv_subjugator[autoC839531C_var] == lp_offensivePlayer) && (autoC839531C_var != lp_offensivePlayer)) {
                gf_WarDeclare(autoC839531C_var, lp_defensivePlayer);
            }

        }
        gf_CallToArmsAddToQueueStep1(lp_defensivePlayer, lp_offensivePlayer);
        Wait(10.0, c_timeGame);
        gf_CallToArmsAddToQueueStep1(lp_offensivePlayer, lp_defensivePlayer);

    }

}

void gf_WarDeclare (int lp_offensivePlayer, int lp_defensivePlayer) {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_subjugator[lp_defensivePlayer] == lp_offensivePlayer)) {
        gf_DeSubjugatePlayer(lp_defensivePlayer);
    }

    libNtve_gf_SetAlliance(lp_offensivePlayer, lp_defensivePlayer, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(lp_defensivePlayer, lp_offensivePlayer, libNtve_ge_AllianceSetting_Enemy);
    gv_embargo[lp_defensivePlayer][lp_offensivePlayer] = true;
    gv_embargo[lp_offensivePlayer][lp_defensivePlayer] = true;
    if (((gv_diplomacyQueue[lp_defensivePlayer][1][4] == lp_offensivePlayer) || (gv_diplomacyQueue[lp_offensivePlayer][1][4] == lp_defensivePlayer))) {
        UIDisplayMessage(gv_users, c_messageAreaSubtitle, ((TextWithColor(gf_NationOfPlayer(lp_offensivePlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_offensivePlayer, false))) + StringExternal("Param/Value/8AFEC032")) + TextWithColor(gf_NationOfPlayer(lp_defensivePlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_defensivePlayer, false)))));
    }
    else {
        UIDisplayMessage(gv_users, c_messageAreaSubtitle, ((TextWithColor(gf_NationOfPlayer(lp_offensivePlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_offensivePlayer, false))) + StringExternal("Param/Value/23234B21")) + TextWithColor(gf_NationOfPlayer(lp_defensivePlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_defensivePlayer, false)))));
    }
    gf_BreakdownCeaseFireBetweenPlayers(lp_defensivePlayer, lp_offensivePlayer);
    gf_RemoveDiplomacyBetweenPlayers(lp_defensivePlayer, lp_offensivePlayer);
    if (((gv_diplomacyQueue[lp_defensivePlayer][1][5] == lp_offensivePlayer) || (gv_diplomacyQueue[lp_offensivePlayer][1][5] == lp_defensivePlayer))) {
        DialogSetVisible(gv_yesOrNoDialog, PlayerGroupSingle(lp_defensivePlayer), false);
        DialogSetVisible(gv_yesOrNoDialog, PlayerGroupSingle(lp_offensivePlayer), false);
        DialogSetVisible(gv_ceaseFireDialog, PlayerGroupSingle(lp_defensivePlayer), false);
        DialogSetVisible(gv_ceaseFireDialog, PlayerGroupSingle(lp_offensivePlayer), false);
        DialogSetVisible(gv_allianceBackGround, PlayerGroupSingle(lp_defensivePlayer), false);
        DialogSetVisible(gv_allianceBackGround, PlayerGroupSingle(lp_offensivePlayer), false);
        DialogSetVisible(gv_callToArmsDialog, PlayerGroupSingle(lp_defensivePlayer), false);
        DialogSetVisible(gv_callToArmsDialog, PlayerGroupSingle(lp_offensivePlayer), false);
        DialogSetVisible(gv_peaceConferenceUI, PlayerGroupSingle(lp_defensivePlayer), false);
        DialogSetVisible(gv_peaceConferenceUI, PlayerGroupSingle(lp_offensivePlayer), false);
    }

}

void gf_CeaseFireDeclared (int lp_player1, int lp_player2) {
    // Automatic Variable Declarations
    // Implementation
    gf_AddToDiplomacyQueue(lp_player1, lp_player2, 4);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, ((gf_NationOfPlayer(lp_player1) + StringExternal("Param/Value/D5DA9B61")) + (gf_NationOfPlayer(lp_player2) + StringExternal("Param/Value/A35AE927"))));
    libNtve_gf_SetAlliance(lp_player1, lp_player2, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(lp_player2, lp_player1, libNtve_ge_AllianceSetting_Neutral);
}

void gf_CallToArmsAddToQueueStep1 (int lp_guyWhomstAlliesWeCall, int lp_calledAgainst) {
    // Automatic Variable Declarations
    playergroup auto889547D9_g;
    int auto889547D9_var;
    playergroup auto01F9E649_g;
    int auto01F9E649_var;

    // Implementation
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/02AA8F05"));
    UIDisplayMessage(PlayerGroupSingle(lp_guyWhomstAlliesWeCall), c_messageAreaSubtitle, StringExternal("Param/Value/264A60B0"));
    auto889547D9_g = PlayerGroupAlliance(c_playerGroupAlly, lp_guyWhomstAlliesWeCall);
    auto889547D9_var = -1;
    while (true) {
        auto889547D9_var = PlayerGroupNextPlayer(auto889547D9_g, auto889547D9_var);
        if (auto889547D9_var < 0) { break; }
        if ((auto889547D9_var < 10) && (gv_subjugated[auto889547D9_var] == false)) {
            UIDisplayMessage(PlayerGroupSingle(lp_guyWhomstAlliesWeCall), c_messageAreaSubtitle, gf_NationOfPlayer(auto889547D9_var));
        }

    }
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/2B8EDB70"));
    auto01F9E649_g = PlayerGroupAlliance(c_playerGroupAlly, lp_guyWhomstAlliesWeCall);
    auto01F9E649_var = -1;
    while (true) {
        auto01F9E649_var = PlayerGroupNextPlayer(auto01F9E649_g, auto01F9E649_var);
        if (auto01F9E649_var < 0) { break; }
        if ((auto01F9E649_var < 10) && (gv_subjugated[auto01F9E649_var] == false)) {
            if ((PlayerGroupHasPlayer(gv_theEuroCrew, lp_calledAgainst) == true) && (PlayerGroupHasPlayer(gv_theEuroCrew, auto01F9E649_var) == true)) {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (gf_NationOfPlayer(auto01F9E649_var) + (StringExternal("Param/Value/6067337D") + (gf_NationOfPlayer(lp_calledAgainst) + StringExternal("Param/Value/3117BC9F")))));
            }
            else {
                if ((PlayerGetAlliance(auto01F9E649_var, c_allianceIdVision, lp_calledAgainst) == true)) {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (gf_NationOfPlayer(auto01F9E649_var) + (StringExternal("Param/Value/619087FB") + (gf_NationOfPlayer(lp_calledAgainst) + StringExternal("Param/Value/ACE25F03")))));
                }
                else {
                    if ((gv_subjugated[auto01F9E649_var] == false) && (lp_calledAgainst != lp_guyWhomstAlliesWeCall)) {
                        UIDisplayMessage(PlayerGroupSingle(lp_guyWhomstAlliesWeCall), c_messageAreaSubtitle, (StringExternal("Param/Value/DF2A5593") + gf_NationOfPlayer(auto01F9E649_var)));
                        gf_AddToDiplomacyQueue(lp_calledAgainst, auto01F9E649_var, 1);
                    }

                }
            }
        }

    }
}

void gf_AddToDiplomacyQueue (int lp_doingTargetting, int lp_playerFor, int lp_typeOfCall) {
    // Variable Declarations
    int lv_queueNumber;

    // Automatic Variable Declarations
    const int auto3D638B7F_ae = 9;
    const int auto3D638B7F_ai = 1;

    // Variable Initialization

    // Implementation
    lv_queueNumber = 1;
    for ( ; ( (auto3D638B7F_ai >= 0 && lv_queueNumber <= auto3D638B7F_ae) || (auto3D638B7F_ai < 0 && lv_queueNumber >= auto3D638B7F_ae) ) ; lv_queueNumber += auto3D638B7F_ai ) {
        if ((gv_diplomacyQueue[lp_playerFor][lv_queueNumber][lp_typeOfCall] == 0)) {
            gv_diplomacyQueue[lp_playerFor][lv_queueNumber][lp_typeOfCall] = lp_doingTargetting;
            break;
        }

    }
}

void gf_BreakdownCeaseFireBetweenPlayers (int lp_player1, int lp_player2) {
    // Variable Declarations
    int lv_loops;

    // Automatic Variable Declarations
    const int auto39742442_ae = 6;
    const int auto39742442_ai = 1;
    const int autoFA11CFE8_ae = 6;
    const int autoFA11CFE8_ai = 1;
    const int autoEAC53843_ae = 6;
    const int autoEAC53843_ai = 1;
    const int auto9A8FBDC2_ae = 6;
    const int auto9A8FBDC2_ai = 1;

    // Variable Initialization

    // Implementation
    DialogSetVisible(gv_peaceConferenceUI, PlayerGroupSingle(lp_player1), false);
    DialogSetVisible(gv_yesOrNoDialog, PlayerGroupSingle(lp_player1), false);
    DialogSetVisible(gv_peaceConferenceUI, PlayerGroupSingle(lp_player2), false);
    DialogSetVisible(gv_yesOrNoDialog, PlayerGroupSingle(lp_player2), false);
    lv_loops = 1;
    for ( ; ( (auto39742442_ai >= 0 && lv_loops <= auto39742442_ae) || (auto39742442_ai < 0 && lv_loops >= auto39742442_ae) ) ; lv_loops += auto39742442_ai ) {
        if ((gv_diplomacyQueue[lp_player1][lv_loops][4] == lp_player2)) {
            gv_diplomacyQueue[lp_player1][lv_loops][4] = 0;
        }

    }
    lv_loops = 1;
    for ( ; ( (autoFA11CFE8_ai >= 0 && lv_loops <= autoFA11CFE8_ae) || (autoFA11CFE8_ai < 0 && lv_loops >= autoFA11CFE8_ae) ) ; lv_loops += autoFA11CFE8_ai ) {
        if ((gv_diplomacyQueue[lp_player1][lv_loops][5] == lp_player2)) {
            gv_diplomacyQueue[lp_player1][lv_loops][5] = 0;
        }

    }
    lv_loops = 1;
    for ( ; ( (autoEAC53843_ai >= 0 && lv_loops <= autoEAC53843_ae) || (autoEAC53843_ai < 0 && lv_loops >= autoEAC53843_ae) ) ; lv_loops += autoEAC53843_ai ) {
        if ((gv_diplomacyQueue[lp_player2][lv_loops][5] == lp_player1)) {
            gv_diplomacyQueue[lp_player2][lv_loops][5] = 0;
        }

    }
    lv_loops = 1;
    for ( ; ( (auto9A8FBDC2_ai >= 0 && lv_loops <= auto9A8FBDC2_ae) || (auto9A8FBDC2_ai < 0 && lv_loops >= auto9A8FBDC2_ae) ) ; lv_loops += auto9A8FBDC2_ai ) {
        if ((gv_diplomacyQueue[lp_player2][lv_loops][4] == lp_player1)) {
            gv_diplomacyQueue[lp_player2][lv_loops][4] = 0;
        }

    }
}

void gf_ResetPeaceDealUI (int lp_player) {
    // Variable Declarations
    int lv_lOOPSAREFUN;

    // Automatic Variable Declarations
    const int auto03AFC3B4_ae = 12;
    const int auto03AFC3B4_ai = 1;

    // Variable Initialization

    // Implementation
    lv_lOOPSAREFUN = 1;
    for ( ; ( (auto03AFC3B4_ai >= 0 && lv_lOOPSAREFUN <= auto03AFC3B4_ae) || (auto03AFC3B4_ai < 0 && lv_lOOPSAREFUN >= auto03AFC3B4_ae) ) ; lv_lOOPSAREFUN += auto03AFC3B4_ai ) {
        DialogControlSetEnabled(gv_peaceConferenceCancelButton[lv_lOOPSAREFUN], PlayerGroupSingle(lp_player), false);
        DialogControlSetEnabled(gv_peaceConferenceButton[lv_lOOPSAREFUN], PlayerGroupSingle(lp_player), true);
    }
    DialogControlSetEnabled(gv_peaceConferenceButton[7], PlayerGroupSingle(lp_player), false);
    DialogControlSetEnabled(gv_peaceConferenceCancelButton[7], PlayerGroupAll(), true);
}

void gf_ReadDiplomaticOffers () {
    // Automatic Variable Declarations
    playergroup auto677534BE_g;
    int auto677534BE_var;

    // Implementation
    auto677534BE_g = gv_users;
    auto677534BE_var = -1;
    while (true) {
        auto677534BE_var = PlayerGroupNextPlayer(auto677534BE_g, auto677534BE_var);
        if (auto677534BE_var < 0) { break; }
        if ((gv_diplomacyQueue[auto677534BE_var][1][5] > 0)) {
            DialogSetVisible(gv_peaceConferenceUI, PlayerGroupSingle(auto677534BE_var), true);
            gv_whomstGlobalDiplomcay[auto677534BE_var] = gv_diplomacyQueue[auto677534BE_var][1][5];
        }
        else {
            if ((gv_diplomacyQueue[auto677534BE_var][1][4] > 0)) {
                gv_whomstGlobalDiplomcay[auto677534BE_var] = gv_diplomacyQueue[auto677534BE_var][1][4];
                libNtve_gf_SetDialogItemText(gv_peaceConferenceButton[0], TextWithColor((StringExternal("Param/Value/636632A2") + (PlayerName(gv_diplomacyQueue[auto677534BE_var][1][4]) + StringToText(""))), Color(0.00, 100.00, 0.00)), PlayerGroupSingle(auto677534BE_var));
                libNtve_gf_SetDialogItemText(gv_peaceConferenceButton[0], TextWithColor((StringExternal("Param/Value/6B42FF13") + (PlayerName(auto677534BE_var) + StringToText(""))), Color(0.00, 100.00, 0.00)), PlayerGroupSingle(gv_whomstGlobalDiplomcay[auto677534BE_var]));
                if ((gv_diplomacyQueue[auto677534BE_var][1][5] == 0) && (gv_diplomacyQueue[gv_whomstGlobalDiplomcay[auto677534BE_var]][1][5] == 0)) {
                    gv_diplomacyQueue[auto677534BE_var][1][5] = gv_whomstGlobalDiplomcay[auto677534BE_var];
                }

            }
            else {
                if ((gv_diplomacyQueue[auto677534BE_var][1][3] > 0)) {
                    libNtve_gf_SetDialogItemText(gv_ceaseFire[0], TextWithColor((StringExternal("Param/Value/262456F6") + (PlayerName(gv_diplomacyQueue[auto677534BE_var][1][3]) + StringExternal("Param/Value/E6C13E1A"))), Color(0.00, 100.00, 0.00)), PlayerGroupSingle(auto677534BE_var));
                    DialogSetVisible(gv_ceaseFireDialog, PlayerGroupSingle(auto677534BE_var), true);
                    gv_whomstGlobalDiplomcay[auto677534BE_var] = gv_diplomacyQueue[auto677534BE_var][1][3];
                }
                else {
                    if ((gv_diplomacyQueue[auto677534BE_var][1][1] > 0)) {
                        libNtve_gf_SetDialogItemText(gv_callToArms[0], ((StringExternal("Param/Value/792439DB") + gf_NationOfPlayer(gv_diplomacyQueue[auto677534BE_var][1][1])) + StringExternal("Param/Value/E2B6CEF9")), PlayerGroupSingle(auto677534BE_var));
                        DialogSetVisible(gv_callToArmsDialog, PlayerGroupSingle(auto677534BE_var), true);
                        gv_whomstGlobalDiplomcay[auto677534BE_var] = gv_diplomacyQueue[auto677534BE_var][1][1];
                    }
                    else {
                        if ((gv_diplomacyQueue[auto677534BE_var][1][2] > 0)) {
                            libNtve_gf_SetDialogItemText(gv_whoSaskin, TextWithColor((StringExternal("Param/Value/C7C659A2") + gf_NationOfPlayer(gv_diplomacyQueue[auto677534BE_var][1][2])), Color(0.00, 100.00, 0.00)), PlayerGroupSingle(auto677534BE_var));
                            DialogSetVisible(gv_allianceBackGround, PlayerGroupSingle(auto677534BE_var), true);
                            gv_whomstGlobalDiplomcay[auto677534BE_var] = gv_diplomacyQueue[auto677534BE_var][1][2];
                        }

                    }
                }
            }
        }
    }
}

void gf_IfNoResponseOr0ThenDeclined () {
    // Automatic Variable Declarations
}

void gf_HideDiplomaticUIs () {
    // Automatic Variable Declarations
    // Implementation
    DialogSetVisible(gv_allianceBackGround, PlayerGroupAll(), false);
    DialogSetVisible(gv_callToArmsDialog, PlayerGroupAll(), false);
    DialogSetVisible(gv_ceaseFireDialog, PlayerGroupAll(), false);
}

void gf_ShiftDiplomaticQueueDown () {
    // Variable Declarations
    int lv_queueNumber;

    // Automatic Variable Declarations
    playergroup auto0040C680_g;
    int auto0040C680_var;
    const int auto098C6C59_ae = 9;
    const int auto098C6C59_ai = 1;

    // Variable Initialization

    // Implementation
    auto0040C680_g = gv_users;
    auto0040C680_var = -1;
    while (true) {
        auto0040C680_var = PlayerGroupNextPlayer(auto0040C680_g, auto0040C680_var);
        if (auto0040C680_var < 0) { break; }
        lv_queueNumber = 1;
        for ( ; ( (auto098C6C59_ai >= 0 && lv_queueNumber <= auto098C6C59_ae) || (auto098C6C59_ai < 0 && lv_queueNumber >= auto098C6C59_ae) ) ; lv_queueNumber += auto098C6C59_ai ) {
            if ((gv_diplomacyQueue[auto0040C680_var][lv_queueNumber][1] == 0)) {
                gv_diplomacyQueue[auto0040C680_var][lv_queueNumber][1] = gv_diplomacyQueue[auto0040C680_var][(lv_queueNumber + 1)][1];
                gv_diplomacyQueue[auto0040C680_var][(lv_queueNumber + 1)][1] = 0;
            }

            if ((gv_diplomacyQueue[auto0040C680_var][lv_queueNumber][2] == 0)) {
                gv_diplomacyQueue[auto0040C680_var][lv_queueNumber][2] = gv_diplomacyQueue[auto0040C680_var][(lv_queueNumber + 1)][2];
                gv_diplomacyQueue[auto0040C680_var][(lv_queueNumber + 1)][2] = 0;
            }

            if ((gv_diplomacyQueue[auto0040C680_var][lv_queueNumber][3] == 0)) {
                gv_diplomacyQueue[auto0040C680_var][lv_queueNumber][3] = gv_diplomacyQueue[auto0040C680_var][(lv_queueNumber + 1)][3];
                gv_diplomacyQueue[auto0040C680_var][(lv_queueNumber + 1)][3] = 0;
            }

            if ((gv_diplomacyQueue[auto0040C680_var][lv_queueNumber][4] == 0)) {
                gv_diplomacyQueue[auto0040C680_var][lv_queueNumber][4] = gv_diplomacyQueue[auto0040C680_var][(lv_queueNumber + 1)][4];
                gv_diplomacyQueue[auto0040C680_var][(lv_queueNumber + 1)][4] = 0;
            }

        }
    }
}

void gf_ReadClear () {
    // Variable Declarations
    int lv_queueNumber;

    // Automatic Variable Declarations
    playergroup autoD93CD1EB_g;
    int autoD93CD1EB_var;

    // Variable Initialization

    // Implementation
    autoD93CD1EB_g = gv_users;
    autoD93CD1EB_var = -1;
    while (true) {
        autoD93CD1EB_var = PlayerGroupNextPlayer(autoD93CD1EB_g, autoD93CD1EB_var);
        if (autoD93CD1EB_var < 0) { break; }
        gv_diplomacyQueue[autoD93CD1EB_var][1][1] = 0;
        gv_diplomacyQueue[autoD93CD1EB_var][1][2] = 0;
        gv_diplomacyQueue[autoD93CD1EB_var][1][3] = 0;
        gv_diplomacyQueue[autoD93CD1EB_var][1][4] = 0;
    }
}

void gf_SubjectRelations (int lp_subject) {
    // Variable Declarations
    int lv_overlord;

    // Automatic Variable Declarations
    playergroup auto8EC6068C_g;
    int auto8EC6068C_var;

    // Variable Initialization
    lv_overlord = gv_subjugator[lp_subject];

    // Implementation
    auto8EC6068C_g = gv_users;
    auto8EC6068C_var = -1;
    while (true) {
        auto8EC6068C_var = PlayerGroupNextPlayer(auto8EC6068C_g, auto8EC6068C_var);
        if (auto8EC6068C_var < 0) { break; }
        if ((auto8EC6068C_var == lp_subject)) {
        }
        else {
            if ((auto8EC6068C_var == lv_overlord)) {
                libNtve_gf_SetAlliance(lv_overlord, lp_subject, libNtve_ge_AllianceSetting_AllyWithSharedVision);
                libNtve_gf_SetAllianceOneWay(lp_subject, lv_overlord, libNtve_ge_AllianceSetting_AllyWithSharedVisionControlAndSpending);
            }
            else {
                if ((libNtve_gf_PlayerIsEnemy(lv_overlord, auto8EC6068C_var, libNtve_ge_PlayerRelation_Enemy) == true)) {
                    libNtve_gf_SetAlliance(auto8EC6068C_var, lp_subject, libNtve_ge_AllianceSetting_Enemy);
                }
                else {
                    if ((libNtve_gf_PlayerIsEnemy(lv_overlord, auto8EC6068C_var, libNtve_ge_PlayerRelation_Ally) == true)) {
                        libNtve_gf_SetAlliance(auto8EC6068C_var, lp_subject, libNtve_ge_AllianceSetting_AllyWithSharedVision);
                    }
                    else {
                        libNtve_gf_SetAlliance(auto8EC6068C_var, lp_subject, libNtve_ge_AllianceSetting_Neutral);
                    }
                }
            }
        }
    }
}

void gf_ResetWarPolicy (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((TechTreeUpgradeCount(lp_player, "InhumaneWar", c_techCountCompleteOnly) == 1)) {
        gv_creditIncomeModifier[lp_player] += 180;
        gv_foodIncomeModifier[lp_player] += 70;
        gv_electricityIncomeModifier[lp_player] -= 50;
        gv_metalIncomeModifier[lp_player] -= 100;
        gv_oilIncomeModifier[lp_player] -= 100;
        gv_popGrowth[lp_player] += 0.04;
        gv_techIncomeModifier[lp_player] -= 40;
        PlayerModifyPropertyInt(lp_player, c_playerPropSuppliesLimit, c_playerPropOperSubtract, 250);
    }

    if ((TechTreeUpgradeCount(lp_player, "TotalWar", c_techCountCompleteOnly) == 1)) {
        gv_creditIncomeModifier[lp_player] += 120;
        gv_foodIncomeModifier[lp_player] += 50;
        gv_electricityIncomeModifier[lp_player] -= 30;
        gv_metalIncomeModifier[lp_player] -= 50;
        gv_oilIncomeModifier[lp_player] -= 50;
        gv_popGrowth[lp_player] += 0.02;
        gv_techIncomeModifier[lp_player] -= 20;
        PlayerModifyPropertyInt(lp_player, c_playerPropSuppliesLimit, c_playerPropOperSubtract, 150);
    }

    if ((TechTreeUpgradeCount(lp_player, "LimitedWar", c_techCountCompleteOnly) == 1)) {
        gv_creditIncomeModifier[lp_player] += 45;
        gv_foodIncomeModifier[lp_player] += 10;
        gv_electricityIncomeModifier[lp_player] -= 10;
        gv_metalIncomeModifier[lp_player] -= 25;
        gv_oilIncomeModifier[lp_player] -= 25;
        gv_popGrowth[lp_player] += 0.003;
        gv_techIncomeModifier[lp_player] -= 5;
        PlayerModifyPropertyInt(lp_player, c_playerPropSuppliesLimit, c_playerPropOperSubtract, 50);
    }

    if ((TechTreeUpgradeCount(lp_player, "DefensiveWar", c_techCountCompleteOnly) == 1)) {
        gv_creditIncomeModifier[lp_player] -= 15;
        gv_popGrowth[lp_player] -= 0.005;
    }

    if ((TechTreeUpgradeCount(lp_player, "Pacifist", c_techCountCompleteOnly) == 1)) {
        gv_creditIncomeModifier[lp_player] -= 30;
        gv_foodIncomeModifier[lp_player] -= 20;
        gv_metalIncomeModifier[lp_player] += 10;
        gv_oilIncomeModifier[lp_player] += 10;
        gv_popGrowth[lp_player] -= 0.001;
        PlayerModifyPropertyInt(lp_player, c_playerPropSuppliesLimit, c_playerPropOperAdd, 50);
    }

    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "ChangeWarPolicy", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "Pacifist", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "DefensiveWar", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "LimitedWar", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "TotalWar", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "InhumaneWar", 0);
}

string gf_GetEmperorTitle (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_govPower[lp_player] == 0)) {
        return "Governor";
    }
    else {
        if ((gv_govPower[lp_player] == 1)) {
            return "Duke";
        }
        else {
            if ((gv_govPower[lp_player] == 2)) {
                return "King";
            }
            else {
                if ((gv_govPower[lp_player] == 3)) {
                    return "Emperor";
                }
                else {
                    return "President";
                }
            }
        }
    }
}

unit gf_FindCheapestResource (int lp_demandingPlayer, int lp_resourceType, point lp_demandingLocation, int lp_quantity) {
    // Variable Declarations
    unitgroup lv_resourceWanted;
    int[100] lv_resourcePrice;
    int lv_resourceVariable;
    int lv_bestResourcePrice;
    unit lv_bestResource;

    // Automatic Variable Declarations
    unitgroup autoFDD7C7EE_g;
    int autoFDD7C7EE_u;
    unit autoFDD7C7EE_var;
    unitgroup auto5C09F309_g;
    int auto5C09F309_u;
    unit auto5C09F309_var;
    unitgroup auto25294731_g;
    int auto25294731_u;
    unit auto25294731_var;
    unitgroup auto8FE42072_g;
    int auto8FE42072_u;
    unit auto8FE42072_var;

    // Variable Initialization
    lv_resourceWanted = UnitGroupEmpty();
    lv_bestResourcePrice = 99999;

    // Implementation
    if ((lp_resourceType == 1)) {
        autoFDD7C7EE_g = UnitGroup("CorporateHeadquarters", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoFDD7C7EE_u = UnitGroupCount(autoFDD7C7EE_g, c_unitCountAll);
        for (;; autoFDD7C7EE_u -= 1) {
            autoFDD7C7EE_var = UnitGroupUnitFromEnd(autoFDD7C7EE_g, autoFDD7C7EE_u);
            if (autoFDD7C7EE_var == null) { break; }
            if ((UnitGetOwner(autoFDD7C7EE_var) < 8) && (gf_GetUnitCustomValue(autoFDD7C7EE_var, 12) >= 10) && (UnitGetOwner(autoFDD7C7EE_var) != 0) && (gv_embargo[UnitGetOwner(autoFDD7C7EE_var)][lp_demandingPlayer] != true) && (gv_embargo[lp_demandingPlayer][UnitGetOwner(autoFDD7C7EE_var)] != true)) {
                lv_resourceVariable += 1;
                lv_resourcePrice[lv_resourceVariable] = gf_CalculateCostWithTariffs(UnitGetOwner(autoFDD7C7EE_var), lp_demandingPlayer, FixedToInt(UnitGetCustomValue(autoFDD7C7EE_var, 14)));
                lv_resourcePrice[lv_resourceVariable] += (gf_GetFuelCostsMonetary(lp_demandingPlayer, lp_demandingLocation, UnitGetPosition(autoFDD7C7EE_var), false) / lp_quantity);
                UnitGroupAdd(lv_resourceWanted, autoFDD7C7EE_var);
            }

        }
        lv_resourceVariable = 0;
    }
    else {
        auto5C09F309_g = gv_allResources;
        auto5C09F309_u = UnitGroupCount(auto5C09F309_g, c_unitCountAll);
        for (;; auto5C09F309_u -= 1) {
            auto5C09F309_var = UnitGroupUnitFromEnd(auto5C09F309_g, auto5C09F309_u);
            if (auto5C09F309_var == null) { break; }
            if ((UnitGetOwner(auto5C09F309_var) < 8) && (gf_GetUnitCustomValue(auto5C09F309_var, 12) >= 10) && (UnitGetOwner(auto5C09F309_var) != 0) && (UnitGetType(auto5C09F309_var) != "Metal") && (UnitGetType(auto5C09F309_var) != "Oil")) {
                if ((gf_GetResourceType(auto5C09F309_var) == lp_resourceType) && (gv_embargo[UnitGetOwner(auto5C09F309_var)][lp_demandingPlayer] != true) && (gv_embargo[lp_demandingPlayer][UnitGetOwner(auto5C09F309_var)] != true)) {
                    UnitGroupAdd(lv_resourceWanted, auto5C09F309_var);
                }

            }

        }
        lv_resourceVariable = 0;
        if ((lp_resourceType == 3) && (UnitGroupCount(lv_resourceWanted, c_unitCountAlive) == 0)) {
            return UnitFromId(1189982933);
        }

        auto25294731_g = lv_resourceWanted;
        auto25294731_u = UnitGroupCount(auto25294731_g, c_unitCountAll);
        for (;; auto25294731_u -= 1) {
            auto25294731_var = UnitGroupUnitFromEnd(auto25294731_g, auto25294731_u);
            if (auto25294731_var == null) { break; }
            lv_resourceVariable += 1;
            lv_resourcePrice[lv_resourceVariable] = gf_CalculateCostWithTariffs(UnitGetOwner(auto25294731_var), lp_demandingPlayer, FixedToInt(UnitGetCustomValue(auto25294731_var, 14)));
            if ((lp_resourceType == 3)) {
            }
            else {
                lv_resourcePrice[lv_resourceVariable] += (gf_GetFuelCostsMonetary(lp_demandingPlayer, lp_demandingLocation, UnitGetPosition(auto25294731_var), false) / lp_quantity);
            }
        }
        lv_resourceVariable = 0;
    }
    if ((UnitGroupCount(lv_resourceWanted, c_unitCountAlive) == 0)) {
        return null;
    }
    else {
        lv_resourceVariable = 0;
        lv_bestResource = UnitGroupRandomUnit(lv_resourceWanted, c_unitCountAlive);
        auto8FE42072_g = lv_resourceWanted;
        auto8FE42072_u = UnitGroupCount(auto8FE42072_g, c_unitCountAll);
        for (;; auto8FE42072_u -= 1) {
            auto8FE42072_var = UnitGroupUnitFromEnd(auto8FE42072_g, auto8FE42072_u);
            if (auto8FE42072_var == null) { break; }
            lv_resourceVariable += 1;
            if ((lv_resourcePrice[lv_resourceVariable] <= lv_bestResourcePrice) && (lv_resourcePrice[lv_resourceVariable] != 0)) {
                TextTagCreate((StringExternal("Param/Value/8FA15F4B") + ((gf_MakeUIPresentable(FixedToInt(UnitGetCustomValue(auto8FE42072_var, 14))) + StringExternal("Param/Value/9CEB70F3")) + gf_MakeUIPresentable(lv_resourcePrice[lv_resourceVariable]))), 14, UnitGetPosition(auto8FE42072_var), 1.0, true, false, PlayerGroupSingle(lp_demandingPlayer));
                TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 2.0);
                lv_bestResourcePrice = lv_resourcePrice[lv_resourceVariable];
                lv_bestResource = auto8FE42072_var;
            }

        }
    }
    return lv_bestResource;
}

int gf_FindMetalBuyingPriceAverage (int lp_demandingPlayer, point lp_demandingLocation) {
    // Variable Declarations
    int lv_resourcePriceSum;
    int lv_averageResourcePrice;
    unitgroup lv_resourceWanted;
    int[100] lv_resourcePrice;
    int lv_resourceVariable;
    unit lv_bestResource;

    // Automatic Variable Declarations
    unitgroup autoA2D0F385_g;
    int autoA2D0F385_u;
    unit autoA2D0F385_var;
    unitgroup auto664E24B7_g;
    int auto664E24B7_u;
    unit auto664E24B7_var;

    // Variable Initialization
    lv_resourceWanted = UnitGroupEmpty();

    // Implementation
    autoA2D0F385_g = gv_allResources;
    autoA2D0F385_u = UnitGroupCount(autoA2D0F385_g, c_unitCountAll);
    for (;; autoA2D0F385_u -= 1) {
        autoA2D0F385_var = UnitGroupUnitFromEnd(autoA2D0F385_g, autoA2D0F385_u);
        if (autoA2D0F385_var == null) { break; }
        if ((UnitGetOwner(autoA2D0F385_var) < 8) && (gf_GetUnitCustomValue(autoA2D0F385_var, 12) >= 10) && (UnitGetOwner(autoA2D0F385_var) != 0) && (gf_GetResourceType(autoA2D0F385_var) == 2) && (UnitGetType(autoA2D0F385_var) != "Metal") && (gv_embargo[UnitGetOwner(autoA2D0F385_var)][lp_demandingPlayer] != true) && (gv_embargo[lp_demandingPlayer][UnitGetOwner(autoA2D0F385_var)] != true)) {
            UnitGroupAdd(lv_resourceWanted, autoA2D0F385_var);
        }

    }
    lv_resourceVariable = 0;
    if ((UnitGroupCount(lv_resourceWanted, c_unitCountAlive) == 0)) {
        return -1;
    }

    auto664E24B7_g = lv_resourceWanted;
    auto664E24B7_u = UnitGroupCount(auto664E24B7_g, c_unitCountAll);
    for (;; auto664E24B7_u -= 1) {
        auto664E24B7_var = UnitGroupUnitFromEnd(auto664E24B7_g, auto664E24B7_u);
        if (auto664E24B7_var == null) { break; }
        lv_resourceVariable += 1;
        lv_resourcePriceSum += gf_CalculateCostWithTariffs(UnitGetOwner(auto664E24B7_var), lp_demandingPlayer, FixedToInt(UnitGetCustomValue(auto664E24B7_var, 14)));
    }
    return (lv_resourcePriceSum / lv_resourceVariable);
}

unit gf_FindMostExpensiveResourceBuyingPrice (int lp_demandingPlayer, int lp_resourceType, point lp_demandingLocation) {
    // Variable Declarations
    unitgroup lv_resourceWanted;
    int[100] lv_resourcePrice;
    int lv_resourceVariable;
    int lv_bestResourcePrice;
    unit lv_bestResource;

    // Automatic Variable Declarations
    unitgroup autoC9E96285_g;
    int autoC9E96285_u;
    unit autoC9E96285_var;
    unitgroup autoFD3937C8_g;
    int autoFD3937C8_u;
    unit autoFD3937C8_var;
    unitgroup autoD50F82B4_g;
    int autoD50F82B4_u;
    unit autoD50F82B4_var;
    unitgroup autoD76462E7_g;
    int autoD76462E7_u;
    unit autoD76462E7_var;

    // Variable Initialization
    lv_resourceWanted = UnitGroupEmpty();

    // Implementation
    if ((lp_resourceType == 1)) {
        autoC9E96285_g = UnitGroup("CorporateHeadquarters", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoC9E96285_u = UnitGroupCount(autoC9E96285_g, c_unitCountAll);
        for (;; autoC9E96285_u -= 1) {
            autoC9E96285_var = UnitGroupUnitFromEnd(autoC9E96285_g, autoC9E96285_u);
            if (autoC9E96285_var == null) { break; }
            if ((UnitGetOwner(autoC9E96285_var) < 8) && (gf_GetUnitCustomValue(autoC9E96285_var, 12) >= 10) && (UnitGetOwner(autoC9E96285_var) != 0) && (gv_embargo[UnitGetOwner(autoC9E96285_var)][lp_demandingPlayer] != true) && (gv_embargo[lp_demandingPlayer][UnitGetOwner(autoC9E96285_var)] != true)) {
                lv_resourceVariable += 1;
                lv_resourcePrice[lv_resourceVariable] = gf_CalculateCostWithTariffs(UnitGetOwner(autoC9E96285_var), lp_demandingPlayer, FixedToInt(UnitGetCustomValue(autoC9E96285_var, 14)));
                lv_resourcePrice[lv_resourceVariable] += (gf_GetFuelCostsMonetary(lp_demandingPlayer, lp_demandingLocation, UnitGetPosition(autoC9E96285_var), false) / 100);
                UnitGroupAdd(lv_resourceWanted, autoC9E96285_var);
            }

        }
        lv_resourceVariable = 0;
    }
    else {
        autoFD3937C8_g = gv_allResources;
        autoFD3937C8_u = UnitGroupCount(autoFD3937C8_g, c_unitCountAll);
        for (;; autoFD3937C8_u -= 1) {
            autoFD3937C8_var = UnitGroupUnitFromEnd(autoFD3937C8_g, autoFD3937C8_u);
            if (autoFD3937C8_var == null) { break; }
            if ((UnitGetOwner(autoFD3937C8_var) < 8) && (gf_GetUnitCustomValue(autoFD3937C8_var, 12) >= 10) && (UnitGetOwner(autoFD3937C8_var) != 0) && (UnitGetType(autoFD3937C8_var) != "Metal") && (UnitGetType(autoFD3937C8_var) != "Oil")) {
                if ((gf_GetResourceType(autoFD3937C8_var) == lp_resourceType) && (gv_embargo[UnitGetOwner(autoFD3937C8_var)][lp_demandingPlayer] != true) && (gv_embargo[lp_demandingPlayer][UnitGetOwner(autoFD3937C8_var)] != true)) {
                    UnitGroupAdd(lv_resourceWanted, autoFD3937C8_var);
                }

            }

        }
        lv_resourceVariable = 0;
        if ((lp_resourceType == 3) && (UnitGroupCount(lv_resourceWanted, c_unitCountAlive) == 0)) {
            return UnitFromId(1189982933);
        }

        autoD50F82B4_g = lv_resourceWanted;
        autoD50F82B4_u = UnitGroupCount(autoD50F82B4_g, c_unitCountAll);
        for (;; autoD50F82B4_u -= 1) {
            autoD50F82B4_var = UnitGroupUnitFromEnd(autoD50F82B4_g, autoD50F82B4_u);
            if (autoD50F82B4_var == null) { break; }
            lv_resourceVariable += 1;
            lv_resourcePrice[lv_resourceVariable] = gf_CalculateCostWithTariffs(UnitGetOwner(autoD50F82B4_var), lp_demandingPlayer, FixedToInt(UnitGetCustomValue(autoD50F82B4_var, 14)));
            if ((lp_resourceType == 3)) {
            }
            else {
                lv_resourcePrice[lv_resourceVariable] -= (gf_GetFuelCostsMonetary(lp_demandingPlayer, lp_demandingLocation, UnitGetPosition(autoD50F82B4_var), false) / 100);
            }
        }
        lv_resourceVariable = 0;
    }
    if ((UnitGroupCount(lv_resourceWanted, c_unitCountAlive) == 0)) {
        return null;
    }
    else {
        lv_resourceVariable = 0;
        lv_bestResource = UnitGroupRandomUnit(lv_resourceWanted, c_unitCountAlive);
        autoD76462E7_g = lv_resourceWanted;
        autoD76462E7_u = UnitGroupCount(autoD76462E7_g, c_unitCountAll);
        for (;; autoD76462E7_u -= 1) {
            autoD76462E7_var = UnitGroupUnitFromEnd(autoD76462E7_g, autoD76462E7_u);
            if (autoD76462E7_var == null) { break; }
            lv_resourceVariable += 1;
            if ((lv_resourcePrice[lv_resourceVariable] >= lv_bestResourcePrice) && (lv_resourcePrice[lv_resourceVariable] != 0)) {
                lv_bestResourcePrice = lv_resourcePrice[lv_resourceVariable];
                lv_bestResource = autoD76462E7_var;
            }

        }
    }
    return lv_bestResource;
}

bool gf_TakeLoan (int lp_player, int lp_ammountRequested) {
    // Variable Declarations
    int lv_highestCapitaPlayer;
    fixed lv_highestCapitaValue;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_highestCapitaPlayer = 1;

    // Implementation
    if ((lp_ammountRequested < 0)) {
        return false;
    }
    else {
        if ((lp_ammountRequested > gf_GetAllowedDebt(lp_player))) {
            return false;
        }
        else {
            gv_totalDebt[lp_player] = gf_GetTotalDebt(lp_player);
            return gf_TakeLoanRecursion(lp_player, lp_ammountRequested, 1);
        }
    }
}

bool gf_TakeLoanRecursion (int lp_player, int lp_ammountRequested, int lp_stage) {
    // Variable Declarations
    int lv_highestCapitaPlayer;
    fixed lv_highestCapitaValue;

    // Automatic Variable Declarations
    playergroup autoEC56DED2_g;
    int autoEC56DED2_var;
    playergroup autoC46B1CE6_g;
    int autoC46B1CE6_var;

    // Variable Initialization

    // Implementation
    if ((lp_ammountRequested < 1)) {
        return true;
    }

    if ((lp_stage == 1)) {
        if ((gv_subjugated[lp_player] == true)) {
            return gf_TakeLoanRecursion(lp_player, (lp_ammountRequested - gf_TakeLoanSingleBank(lp_ammountRequested, lp_player, lp_player)), 2);
        }
        else {
            return gf_TakeLoanRecursion(lp_player, (lp_ammountRequested - gf_TakeLoanSingleBank(lp_ammountRequested, lp_player, lp_player)), 3);
        }
    }

    if ((lp_stage == 2)) {
        return gf_TakeLoanRecursion(lp_player, (lp_ammountRequested - gf_TakeLoanSingleBank(lp_ammountRequested, lp_player, gv_subjugator[lp_player])), 3);
    }

    if ((lp_stage == 3)) {
        autoEC56DED2_g = gv_users;
        autoEC56DED2_var = -1;
        while (true) {
            autoEC56DED2_var = PlayerGroupNextPlayer(autoEC56DED2_g, autoEC56DED2_var);
            if (autoEC56DED2_var < 0) { break; }
            if ((gv_gDPPerCapita[autoEC56DED2_var] > lv_highestCapitaValue)) {
                lv_highestCapitaPlayer = autoEC56DED2_var;
                lv_highestCapitaValue = gv_gDPPerCapita[autoEC56DED2_var];
            }

        }
    }
    else {
        autoC46B1CE6_g = gv_users;
        autoC46B1CE6_var = -1;
        while (true) {
            autoC46B1CE6_var = PlayerGroupNextPlayer(autoC46B1CE6_g, autoC46B1CE6_var);
            if (autoC46B1CE6_var < 0) { break; }
            if ((gv_gDPPerCapita[autoC46B1CE6_var] > lv_highestCapitaValue) && (gv_gDPPerCapita[(lp_stage - 7)] > gv_gDPPerCapita[autoC46B1CE6_var]) && ((lp_stage - 7) != autoC46B1CE6_var) && (lp_player != autoC46B1CE6_var) && (gv_subjugator[lp_player] != autoC46B1CE6_var)) {
                lv_highestCapitaPlayer = autoC46B1CE6_var;
                lv_highestCapitaValue = gv_gDPPerCapita[autoC46B1CE6_var];
            }

        }
    }
    if ((lv_highestCapitaPlayer == 0)) {
        UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, (gf_MakeUIPresentable(lp_ammountRequested) + StringExternal("Param/Value/75101726")));
        return false;
    }
    else {
        return gf_TakeLoanRecursion(lp_player, (lp_ammountRequested - gf_TakeLoanSingleBank(lp_ammountRequested, lp_player, lv_highestCapitaPlayer)), (lv_highestCapitaPlayer + 7));
    }
}

void gf_RepayLoans (int lp_player, int lp_amount) {
    // Variable Declarations
    int lv_payAmmount;

    // Automatic Variable Declarations
    playergroup auto73A08E4D_g;
    int auto73A08E4D_var;

    // Variable Initialization

    // Implementation
    auto73A08E4D_g = gv_users;
    auto73A08E4D_var = -1;
    while (true) {
        auto73A08E4D_var = PlayerGroupNextPlayer(auto73A08E4D_g, auto73A08E4D_var);
        if (auto73A08E4D_var < 0) { break; }
        if ((lp_amount <= 0)) {
            break;
        }
        else {
            if ((gv_nationalBankDebts[auto73A08E4D_var][lp_player] > 0)) {
                lv_payAmmount = libNtve_gf_ArithmeticIntClamp(lp_amount, 0, gv_nationalBankDebts[auto73A08E4D_var][lp_player]);
                gv_nationalBankCash[auto73A08E4D_var] += lv_payAmmount;
                gv_nationalBankDebts[auto73A08E4D_var][lp_player] -= lv_payAmmount;
                PlayerModifyPropertyInt(lp_player, c_playerPropMinerals, c_playerPropOperSubtract, lv_payAmmount);
            }

        }
    }
}

int gf_GetTotalDebt (int lp_player) {
    // Variable Declarations
    int lv_total;

    // Automatic Variable Declarations
    playergroup auto7680E2EC_g;
    int auto7680E2EC_var;

    // Variable Initialization

    // Implementation
    auto7680E2EC_g = gv_users;
    auto7680E2EC_var = -1;
    while (true) {
        auto7680E2EC_var = PlayerGroupNextPlayer(auto7680E2EC_g, auto7680E2EC_var);
        if (auto7680E2EC_var < 0) { break; }
        lv_total += gv_nationalBankDebts[auto7680E2EC_var][lp_player];
    }
    return lv_total;
}

int gf_GetAllowedDebt (int lp_player) {
    // Variable Declarations
    int lv_total;
    int lv_totalR;
    int lv_availableDebt;
    int lv_totalDebt;
    text lv_availableDebts;
    text lv_nationalBankTooltip;

    // Automatic Variable Declarations
    playergroup autoBE241595_g;
    int autoBE241595_var;
    int auto38733C23_n;
    int auto38733C23_i;
    int autoA993AD3D_n;
    int autoA993AD3D_i;
    playergroup auto0E571874_g;
    int auto0E571874_var;

    // Variable Initialization
    lv_availableDebts = StringExternal("Param/Value/CC29C90F");
    lv_nationalBankTooltip = StringExternal("Param/Value/196116F2");

    // Implementation
    autoBE241595_g = gv_users;
    autoBE241595_var = -1;
    while (true) {
        autoBE241595_var = PlayerGroupNextPlayer(autoBE241595_g, autoBE241595_var);
        if (autoBE241595_var < 0) { break; }
        if ((gv_creditRatingValue[lp_player] < 100)) {
            return (0 + 0);
        }

        lv_totalDebt = gf_AllowedDebtSingleBank(lp_player, autoBE241595_var);
        lv_availableDebt = (lv_totalDebt - gv_nationalBankDebts[autoBE241595_var][lp_player]);
        lv_availableDebts = (lv_availableDebts + (StringExternal("Param/Value/0A84F76D") + (TextWithColor((StringExternal("Param/Value/E469E891") + gf_NationOfPlayer(autoBE241595_var)), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(autoBE241595_var, false))) + StringToText(""))));
        auto38733C23_n = (24 - StringLength(("Bank of " + gf_NationOfPlayerString(autoBE241595_var))));
        for (auto38733C23_i = 1; auto38733C23_i <= auto38733C23_n; auto38733C23_i += 1) {
            lv_availableDebts = (lv_availableDebts + StringExternal("Param/Value/62DB9F93"));
        }
        lv_availableDebts = (lv_availableDebts + StringExternal("Param/Value/C5DD9C98"));
        lv_availableDebts = ((lv_availableDebts + gf_MakeUIPresentable(lv_availableDebt)) + (StringExternal("Param/Value/EE5FC79F") + gf_MakeUIPresentable(lv_totalDebt)));
        autoA993AD3D_n = (16 - StringLength(((gf_MakeUIPresentableString(lv_availableDebt) + "/") + gf_MakeUIPresentableString(lv_availableDebt))));
        for (autoA993AD3D_i = 1; autoA993AD3D_i <= autoA993AD3D_n; autoA993AD3D_i += 1) {
            lv_availableDebts = (lv_availableDebts + StringExternal("Param/Value/4D1B802F"));
        }
        lv_availableDebt = libNtve_gf_ArithmeticIntClamp(lv_availableDebt, 0, 100000000);
        lv_total += libNtve_gf_ArithmeticIntClamp(lv_availableDebt, 0, 1000000000);
        lv_totalR += gv_reparations[autoBE241595_var][lp_player];
    }
    libNtve_gf_SetDialogItemTooltip(gv_economicDebtPolicyDialogItems[2], lv_availableDebts, PlayerGroupSingle(lp_player));
    auto0E571874_g = gv_users;
    auto0E571874_var = -1;
    while (true) {
        auto0E571874_var = PlayerGroupNextPlayer(auto0E571874_g, auto0E571874_var);
        if (auto0E571874_var < 0) { break; }
        lv_nationalBankTooltip = ((lv_nationalBankTooltip + StringExternal("Param/Value/47BDF6DF")) + (TextWithColor(gf_NationOfPlayer(auto0E571874_var), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(auto0E571874_var, false))) + (StringExternal("Param/Value/4D5149B6") + gf_MakeUIPresentable(gv_nationalBankDebts[auto0E571874_var][lp_player]))));
    }
    libNtve_gf_SetDialogItemTooltip(gv_economicDebtPolicyDialogItems[1], (lv_nationalBankTooltip + (StringExternal("Param/Value/E4F0E1DE") + (StringExternal("Param/Value/4960AEF4") + gf_MakeUIPresentable(lv_totalR)))), PlayerGroupSingle(lp_player));
    return (lv_total + 0);
}

int gf_TakeLoanSingleBank (int lp_ammount, int lp_playerTaking, int lp_playerBank) {
    // Variable Declarations
    int lv_availableDebt;
    int lv_remainingAvailable;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_availableDebt = gf_AllowedDebtSingleBank(lp_playerTaking, lp_playerBank);
    lv_remainingAvailable = (lv_availableDebt - gv_nationalBankDebts[lp_playerBank][lp_playerTaking]);
    lv_remainingAvailable = libNtve_gf_ArithmeticIntClamp(lv_remainingAvailable, 0, libNtve_gf_ArithmeticIntClamp(gv_nationalBankCash[lp_playerBank], 0, lp_ammount));
    gv_nationalBankCash[lp_playerBank] -= lv_remainingAvailable;
    gv_nationalBankDebts[lp_playerBank][lp_playerTaking] += lv_remainingAvailable;
    PlayerModifyPropertyInt(lp_playerTaking, c_playerPropMinerals, c_playerPropOperAdd, lv_remainingAvailable);
    return lv_remainingAvailable;
}

int gf_AllowedDebtSingleBank (int lp_playerTaking, int lp_playerBank) {
    // Variable Declarations
    int lv_availableDebt;

    // Automatic Variable Declarations
    playergroup auto8720CC49_g;
    int auto8720CC49_var;

    // Variable Initialization

    // Implementation
    if ((gv_creditRatingValue[lp_playerTaking] < 100)) {
        return gv_nationalBankDebts[lp_playerBank][lp_playerTaking];
    }

    if ((lp_playerBank == lp_playerTaking)) {
        auto8720CC49_g = gv_users;
        auto8720CC49_var = -1;
        while (true) {
            auto8720CC49_var = PlayerGroupNextPlayer(auto8720CC49_g, auto8720CC49_var);
            if (auto8720CC49_var < 0) { break; }
            lv_availableDebt += gv_nationalBankDebts[lp_playerBank][auto8720CC49_var];
        }
        lv_availableDebt += gv_nationalBankCash[lp_playerBank];
    }
    else {
        if ((gv_embargo[lp_playerBank][lp_playerTaking] == true)) {
            return gv_nationalBankDebts[lp_playerBank][lp_playerTaking];
        }
        else {
            if ((gv_nationalBankCash[lp_playerBank] > 50000)) {
                lv_availableDebt = ((gf_GetTotalBankValue(lp_playerBank) / 100) * gv_gDPPercent[lp_playerTaking]);
            }
            else {
                lv_availableDebt = ((gf_GetTotalBankValue(lp_playerBank) * gv_gDPPercent[lp_playerTaking]) / 100);
            }
        }
    }
    return libNtve_gf_ArithmeticIntClamp(lv_availableDebt, 0, gv_nationalBankCash[lp_playerBank]);
}

int gf_GetTotalBankValue (int lp_bank) {
    // Variable Declarations
    int lv_total;

    // Automatic Variable Declarations
    playergroup auto23193AF2_g;
    int auto23193AF2_var;

    // Variable Initialization

    // Implementation
    auto23193AF2_g = gv_users;
    auto23193AF2_var = -1;
    while (true) {
        auto23193AF2_var = PlayerGroupNextPlayer(auto23193AF2_g, auto23193AF2_var);
        if (auto23193AF2_var < 0) { break; }
        lv_total += libNtve_gf_ArithmeticIntClamp(gv_nationalBankDebts[lp_bank][auto23193AF2_var], 0, 100000000);
    }
    lv_total += libNtve_gf_ArithmeticIntClamp(gv_nationalBankCash[lp_bank], 0, 1000000000);
    return lv_total;
}

void gf_ResetBuySell (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    gv_buySellQuantity[lp_player] = 0;
    gv_buySellPrice[lp_player] = 0;
    gv_buySellVariable[lp_player] = 0;
}

void gf_PushGlobalTrackingDown () {
    // Variable Declarations
    int lv_rNA;
    int lv_como;

    // Automatic Variable Declarations
    const int autoECA52E5A_ae = 1;
    const int autoECA52E5A_ai = -1;
    const int auto96CFAE1B_ae = 3;
    const int auto96CFAE1B_ai = 1;
    const int autoBA73C4B9_ae = 3;
    const int autoBA73C4B9_ai = 1;

    // Variable Initialization

    // Implementation
    lv_rNA = 128;
    for ( ; ( (autoECA52E5A_ai >= 0 && lv_rNA <= autoECA52E5A_ae) || (autoECA52E5A_ai < 0 && lv_rNA >= autoECA52E5A_ae) ) ; lv_rNA += autoECA52E5A_ai ) {
        lv_como = 1;
        for ( ; ( (auto96CFAE1B_ai >= 0 && lv_como <= auto96CFAE1B_ae) || (auto96CFAE1B_ai < 0 && lv_como >= auto96CFAE1B_ae) ) ; lv_como += auto96CFAE1B_ai ) {
            gv_globalSupply[lv_como][lv_rNA] = gv_globalSupply[lv_como][(lv_rNA - 1)];
            gv_aggregatePrice[lv_como][lv_rNA] = gv_aggregatePrice[lv_como][(lv_rNA - 1)];
        }
    }
    lv_rNA = 0;
    lv_como = 1;
    for ( ; ( (autoBA73C4B9_ai >= 0 && lv_como <= autoBA73C4B9_ae) || (autoBA73C4B9_ai < 0 && lv_como >= autoBA73C4B9_ae) ) ; lv_como += autoBA73C4B9_ai ) {
        gv_globalSupply[lv_como][lv_rNA] = 0;
        gv_aggregatePrice[lv_como][lv_rNA] = 0;
    }
}

void gf_FindGlobalTrackers () {
    // Variable Declarations
    int[4] lv_totalResource;
    int[4] lv_totalPrice;

    // Automatic Variable Declarations
    unitgroup auto511604E7_g;
    int auto511604E7_u;
    unit auto511604E7_var;

    // Variable Initialization

    // Implementation
    auto511604E7_g = gv_allResources;
    auto511604E7_u = UnitGroupCount(auto511604E7_g, c_unitCountAll);
    for (;; auto511604E7_u -= 1) {
        auto511604E7_var = UnitGroupUnitFromEnd(auto511604E7_g, auto511604E7_u);
        if (auto511604E7_var == null) { break; }
        if ((UnitGetCustomValue(auto511604E7_var, 10) > 0.0) && (UnitGetCustomValue(auto511604E7_var, 14) > 0.0)) {
            lv_totalResource[gf_GetResourceType(auto511604E7_var)] += 1;
            lv_totalPrice[gf_GetResourceType(auto511604E7_var)] += FixedToInt(UnitGetCustomValue(auto511604E7_var, 14));
            gv_globalSupply[gf_GetResourceType(auto511604E7_var)][0] += gf_GetUnitCustomValue(auto511604E7_var, 12);
        }

    }
    if ((lv_totalResource[1] == 0)) {
        gv_aggregatePrice[1][0] = 0;
    }
    else {
        gv_aggregatePrice[1][0] = (lv_totalPrice[1] / lv_totalResource[1]);
    }
    if ((lv_totalResource[2] == 0)) {
        gv_aggregatePrice[1][0] = 0;
    }
    else {
        gv_aggregatePrice[2][0] = (lv_totalPrice[2] / lv_totalResource[2]);
    }
    if ((lv_totalResource[3] == 0)) {
        gv_aggregatePrice[1][0] = 0;
    }
    else {
        gv_aggregatePrice[3][0] = (lv_totalPrice[3] / lv_totalResource[3]);
    }
}

void gf_UpdateMainTradeScreen () {
    int init_i;

    // Variable Declarations
    int[4] lv_guessedSupply;
    text lv_tooltip;
    unit lv_cheapestResource;
    unit lv_expensiveistResources;
    int lv_cheapestPrice;
    int lv_expensivePrice;
    point[16] lv_capitals;

    // Automatic Variable Declarations
    unitgroup auto4739659E_g;
    int auto4739659E_u;
    unit auto4739659E_var;
    playergroup autoCD111D37_g;
    int autoCD111D37_var;
    const int autoD6752696_ae = 7;
    int autoD6752696_var;
    playergroup auto0AA3961B_g;
    int auto0AA3961B_var;
    playergroup autoBB1C6B4F_g;
    int autoBB1C6B4F_var;
    playergroup auto114EB3CB_g;
    int auto114EB3CB_var;
    const int autoFAC4B9B6_ae = 7;
    int autoFAC4B9B6_var;

    // Variable Initialization
    lv_tooltip = StringExternal("Param/Value/C57D4274");
    for (init_i = 0; init_i <= 15; init_i += 1) {
        lv_capitals[init_i] = PointFromId(143);
    }

    // Implementation
    auto4739659E_g = UnitGroup("Capital", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4739659E_u = UnitGroupCount(auto4739659E_g, c_unitCountAll);
    for (;; auto4739659E_u -= 1) {
        auto4739659E_var = UnitGroupUnitFromEnd(auto4739659E_g, auto4739659E_u);
        if (auto4739659E_var == null) { break; }
        lv_capitals[UnitGetOwner(auto4739659E_var)] = UnitGetPosition(auto4739659E_var);
    }
    lv_tooltip = StringExternal("Param/Value/983B9D77");
    autoCD111D37_g = gv_users;
    autoCD111D37_var = -1;
    while (true) {
        autoCD111D37_var = PlayerGroupNextPlayer(autoCD111D37_g, autoCD111D37_var);
        if (autoCD111D37_var < 0) { break; }
        autoD6752696_var = 1;
        for ( ; autoD6752696_var <= autoD6752696_ae; autoD6752696_var += 1 ) {
            if ((gv_cheapestFoodArrayPrice[autoCD111D37_var][autoD6752696_var] != 1000000000)) {
                lv_guessedSupply[1] += gv_foodStockpile[gv_cheapestFoodArrayPlayer[autoCD111D37_var][autoD6752696_var]];
                lv_tooltip = ((lv_tooltip + StringExternal("Param/Value/BC575448")) + (TextWithColor(IntToText(gv_cheapestFoodArrayPlayer[autoCD111D37_var][autoD6752696_var]), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(autoCD111D37_var, false))) + (StringExternal("Param/Value/F348ACBF") + gf_MakeUIPresentable(lv_guessedSupply[autoCD111D37_var]))));
            }

        }
        libNtve_gf_SetDialogItemText(gv_tradeDialogItems[1], gf_MakeUIPresentable(lv_guessedSupply[1]), PlayerGroupSingle(autoCD111D37_var));
        libNtve_gf_SetDialogItemTooltip(gv_tradeDialogItems[1], lv_tooltip, PlayerGroupSingle(autoCD111D37_var));
        lv_guessedSupply[1] = 0;
    }
    lv_tooltip = StringExternal("Param/Value/8F78D3F1");
    auto0AA3961B_g = gv_users;
    auto0AA3961B_var = -1;
    while (true) {
        auto0AA3961B_var = PlayerGroupNextPlayer(auto0AA3961B_g, auto0AA3961B_var);
        if (auto0AA3961B_var < 0) { break; }
        if ((gv_deadCorp[auto0AA3961B_var] == false) && (StringLength(gv_corpName[auto0AA3961B_var]) != 0)) {
            lv_tooltip = ((lv_tooltip + StringExternal("Param/Value/B6E93B28")) + (TextWithColor(StringToText(gv_corpTicker[auto0AA3961B_var]), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(auto0AA3961B_var, false))) + (StringExternal("Param/Value/404B9E4F") + gf_MakeUIPresentable(gv_cSupply[auto0AA3961B_var][2]))));
            lv_guessedSupply[2] += gv_cSupply[auto0AA3961B_var][2];
        }

    }
    libNtve_gf_SetDialogItemText(gv_tradeDialogItems[2], gf_MakeUIPresentable(lv_guessedSupply[2]), PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_tradeDialogItems[2], lv_tooltip, PlayerGroupAll());
    lv_tooltip = StringExternal("Param/Value/913723F9");
    autoBB1C6B4F_g = gv_users;
    autoBB1C6B4F_var = -1;
    while (true) {
        autoBB1C6B4F_var = PlayerGroupNextPlayer(autoBB1C6B4F_g, autoBB1C6B4F_var);
        if (autoBB1C6B4F_var < 0) { break; }
        if ((gv_deadCorp[autoBB1C6B4F_var] == false) && (StringLength(gv_corpName[autoBB1C6B4F_var]) != 0)) {
            lv_tooltip = ((lv_tooltip + StringExternal("Param/Value/1CF68AF5")) + (TextWithColor(StringToText(gv_corpTicker[autoBB1C6B4F_var]), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(autoBB1C6B4F_var, false))) + (StringExternal("Param/Value/9EF0A38B") + gf_MakeUIPresentable(gv_cSupply[autoBB1C6B4F_var][3]))));
            lv_guessedSupply[3] += gv_cSupply[autoBB1C6B4F_var][3];
        }

    }
    libNtve_gf_SetDialogItemText(gv_tradeDialogItems[3], gf_MakeUIPresentable(lv_guessedSupply[3]), PlayerGroupAll());
    lv_tooltip = ((lv_tooltip + StringExternal("Param/Value/286FC281")) + (TextWithColor(StringToText("MEC"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(12, false))) + (StringExternal("Param/Value/B13F6EDD") + StringExternal("Param/Value/69E1D150"))));
    libNtve_gf_SetDialogItemTooltip(gv_tradeDialogItems[3], lv_tooltip, PlayerGroupAll());
    auto114EB3CB_g = gv_users;
    auto114EB3CB_var = -1;
    while (true) {
        auto114EB3CB_var = PlayerGroupNextPlayer(auto114EB3CB_g, auto114EB3CB_var);
        if (auto114EB3CB_var < 0) { break; }
        lv_cheapestPrice = gv_cheapestFoodArrayPrice[auto114EB3CB_var][0];
        lv_expensivePrice = 1000000000;
        autoFAC4B9B6_var = 1;
        for ( ; autoFAC4B9B6_var <= autoFAC4B9B6_ae; autoFAC4B9B6_var += 1 ) {
            if ((gv_cheapestFoodArrayPrice[auto114EB3CB_var][autoFAC4B9B6_var] < 1000000000)) {
                lv_expensivePrice = gv_cheapestFoodArrayPrice[auto114EB3CB_var][autoFAC4B9B6_var];
            }

        }
        if ((lv_cheapestPrice == 0)) {
            lv_cheapestPrice = 1;
        }

        if ((lv_expensivePrice == 1000000000)) {
            lv_expensivePrice = 0;
        }
        else {
            lv_cheapestPrice = FixedToInt((IntToFixed(lv_cheapestPrice) / 1000.0));
            lv_expensivePrice = FixedToInt((IntToFixed(lv_expensivePrice) / 1000.0));
        }
        if ((gv_cheapestFoodArrayPrice[auto114EB3CB_var][0] < 1000000000)) {
            libNtve_gf_SetDialogItemText(gv_tradeDialogItems[4], IntToText(lv_cheapestPrice), PlayerGroupSingle(auto114EB3CB_var));
            libNtve_gf_SetDialogItemTooltip(gv_tradeDialogItems[4], ((StringExternal("Param/Value/7BC9BAB8") + (IntToText(lv_cheapestPrice) + (StringToText("") + StringToText("")))) + (StringExternal("Param/Value/35F70270") + IntToText(lv_expensivePrice))), PlayerGroupSingle(auto114EB3CB_var));
        }
        else {
            libNtve_gf_SetDialogItemText(gv_tradeDialogItems[4], IntToText(0), PlayerGroupSingle(auto114EB3CB_var));
            libNtve_gf_SetDialogItemTooltip(gv_tradeDialogItems[4], ((StringExternal("Param/Value/3DEB0D0E") + (IntToText(0) + (StringToText("") + StringToText("")))) + (StringExternal("Param/Value/548BA500") + IntToText(lv_expensivePrice))), PlayerGroupSingle(0));
        }
        lv_cheapestResource = gf_FindCheapestResource(auto114EB3CB_var, 2, lv_capitals[auto114EB3CB_var], 500);
        lv_expensiveistResources = gf_FindMostExpensiveResourceBuyingPrice(auto114EB3CB_var, 2, lv_capitals[auto114EB3CB_var]);
        lv_cheapestPrice = gf_CalculateCostWithTariffs(UnitGetOwner(lv_cheapestResource), auto114EB3CB_var, FixedToInt(UnitGetCustomValue(lv_cheapestResource, 14)));
        lv_expensivePrice = gf_CalculateCostWithTariffs(UnitGetOwner(lv_expensiveistResources), auto114EB3CB_var, FixedToInt(UnitGetCustomValue(lv_expensiveistResources, 14)));
        if ((lv_cheapestPrice == 0)) {
            lv_cheapestPrice = gv_aggregatePrice[2][1];
        }

        if ((lv_expensivePrice == 0)) {
            lv_cheapestPrice = gv_aggregatePrice[2][1];
        }

        if ((lv_cheapestResource == null)) {
            libNtve_gf_SetDialogItemText(gv_tradeDialogItems[5], IntToText(gv_aggregatePrice[2][1]), PlayerGroupSingle(auto114EB3CB_var));
        }
        else {
            libNtve_gf_SetDialogItemText(gv_tradeDialogItems[5], IntToText(gf_CalculateCostWithTariffs(UnitGetOwner(lv_cheapestResource), auto114EB3CB_var, FixedToInt(UnitGetCustomValue(lv_cheapestResource, 14)))), PlayerGroupSingle(auto114EB3CB_var));
        }
        libNtve_gf_SetDialogItemTooltip(gv_tradeDialogItems[5], ((StringExternal("Param/Value/14C7DD03") + (IntToText(gf_CalculateCostWithTariffs(UnitGetOwner(lv_cheapestResource), auto114EB3CB_var, FixedToInt(UnitGetCustomValue(lv_cheapestResource, 14)))) + (StringExternal("Param/Value/7C4C47F8") + IntToText(gv_aggregatePrice[1][1])))) + (StringExternal("Param/Value/46DBDC03") + IntToText(gf_CalculateCostWithTariffs(UnitGetOwner(lv_expensiveistResources), auto114EB3CB_var, FixedToInt(UnitGetCustomValue(lv_expensiveistResources, 14)))))), PlayerGroupSingle(auto114EB3CB_var));
        lv_cheapestResource = gf_FindCheapestResource(auto114EB3CB_var, 3, lv_capitals[auto114EB3CB_var], 500);
        lv_expensiveistResources = gf_FindMostExpensiveResourceBuyingPrice(auto114EB3CB_var, 3, lv_capitals[auto114EB3CB_var]);
        lv_cheapestPrice = gf_CalculateCostWithTariffs(UnitGetOwner(lv_cheapestResource), auto114EB3CB_var, FixedToInt(UnitGetCustomValue(lv_cheapestResource, 14)));
        lv_expensivePrice = gf_CalculateCostWithTariffs(UnitGetOwner(lv_expensiveistResources), auto114EB3CB_var, FixedToInt(UnitGetCustomValue(lv_expensiveistResources, 14)));
        if ((lv_cheapestPrice == 0)) {
            lv_cheapestPrice = gv_aggregatePrice[3][1];
        }

        if ((lv_expensivePrice == 0)) {
            lv_cheapestPrice = gv_aggregatePrice[3][1];
        }

        if ((gv_aggregatePrice[3][1] == 0)) {
            gv_aggregatePrice[3][1] = lv_cheapestPrice;
        }

        if ((lv_cheapestResource == null)) {
            libNtve_gf_SetDialogItemText(gv_tradeDialogItems[6], IntToText(gv_aggregatePrice[3][1]), PlayerGroupSingle(auto114EB3CB_var));
        }
        else {
            libNtve_gf_SetDialogItemText(gv_tradeDialogItems[6], IntToText(gf_CalculateCostWithTariffs(UnitGetOwner(lv_cheapestResource), auto114EB3CB_var, FixedToInt(UnitGetCustomValue(lv_cheapestResource, 14)))), PlayerGroupSingle(auto114EB3CB_var));
        }
        libNtve_gf_SetDialogItemTooltip(gv_tradeDialogItems[6], ((StringExternal("Param/Value/7FC4CF08") + (IntToText(gf_CalculateCostWithTariffs(UnitGetOwner(lv_cheapestResource), auto114EB3CB_var, FixedToInt(UnitGetCustomValue(lv_cheapestResource, 14)))) + (StringExternal("Param/Value/FD9D73CB") + IntToText(gv_aggregatePrice[3][1])))) + (StringExternal("Param/Value/FF49D33B") + IntToText(gf_CalculateCostWithTariffs(UnitGetOwner(lv_expensiveistResources), auto114EB3CB_var, FixedToInt(UnitGetCustomValue(lv_expensiveistResources, 14)))))), PlayerGroupSingle(auto114EB3CB_var));
        gv_autoImports[auto114EB3CB_var][1] = FixedToInt(libNtve_gf_DialogItemValue(gv_tradeDialogItems[16], auto114EB3CB_var));
        gv_autoImports[auto114EB3CB_var][3] = FixedToInt(libNtve_gf_DialogItemValue(gv_tradeDialogItems[18], auto114EB3CB_var));
        gv_autoExports[auto114EB3CB_var][1] = FixedToInt(libNtve_gf_DialogItemValue(gv_tradeDialogItems[31], auto114EB3CB_var));
        gv_autoExports[auto114EB3CB_var][2] = FixedToInt(libNtve_gf_DialogItemValue(gv_tradeDialogItems[32], auto114EB3CB_var));
        gv_autoExports[auto114EB3CB_var][3] = FixedToInt(libNtve_gf_DialogItemValue(gv_tradeDialogItems[33], auto114EB3CB_var));
        libNtve_gf_SetDialogItemText(gv_tradeDialogItems[19], IntToText(gv_autoImports[auto114EB3CB_var][1]), PlayerGroupSingle(auto114EB3CB_var));
        libNtve_gf_SetDialogItemText(gv_tradeDialogItems[21], IntToText(gv_autoImports[auto114EB3CB_var][3]), PlayerGroupSingle(auto114EB3CB_var));
        libNtve_gf_SetDialogItemText(gv_tradeDialogItems[34], IntToText(gv_autoExports[auto114EB3CB_var][1]), PlayerGroupSingle(auto114EB3CB_var));
        libNtve_gf_SetDialogItemText(gv_tradeDialogItems[35], IntToText(gv_autoExports[auto114EB3CB_var][2]), PlayerGroupSingle(auto114EB3CB_var));
        libNtve_gf_SetDialogItemText(gv_tradeDialogItems[36], IntToText(gv_autoExports[auto114EB3CB_var][3]), PlayerGroupSingle(auto114EB3CB_var));
    }
}

void gf_UpdateExternalTradePolicies () {
    // Variable Declarations
    playergroup lv_theSubjugatedPlayers;
    int lv_dialogNumber;
    int lv_recivingPlayer;
    int lv_subjectPlayer;

    // Automatic Variable Declarations
    playergroup auto186D3FC7_g;
    int auto186D3FC7_var;
    const int auto3A12554F_ae = 72;
    const int auto3A12554F_ai = 1;
    const int auto044ACD22_ae = 72;
    const int auto044ACD22_ai = 1;
    playergroup autoA3C752A3_g;
    int autoA3C752A3_var;
    int auto79C80A1F_ae;
    const int auto79C80A1F_ai = 1;
    const int auto219D886F_ae = 9;
    const int auto219D886F_ai = 1;
    playergroup auto242324F4_g;
    int auto242324F4_var;
    int autoF79D22F6_ae;
    const int autoF79D22F6_ai = 1;
    const int autoBADE5839_ae = 9;
    const int autoBADE5839_ai = 1;
    playergroup autoA23D8E37_g;
    int autoA23D8E37_var;
    const int autoDFE53D4E_ae = 9;
    const int autoDFE53D4E_ai = 1;
    const int auto5C17D892_ae = 9;
    const int auto5C17D892_ai = 1;

    // Variable Initialization
    lv_theSubjugatedPlayers = PlayerGroupEmpty();

    // Implementation
    auto186D3FC7_g = gv_users;
    auto186D3FC7_var = -1;
    while (true) {
        auto186D3FC7_var = PlayerGroupNextPlayer(auto186D3FC7_g, auto186D3FC7_var);
        if (auto186D3FC7_var < 0) { break; }
        if ((gv_subjugated[auto186D3FC7_var] == true)) {
            PlayerGroupAdd(lv_theSubjugatedPlayers, auto186D3FC7_var);
        }

    }
    lv_dialogNumber = 1;
    for ( ; ( (auto3A12554F_ai >= 0 && lv_dialogNumber <= auto3A12554F_ae) || (auto3A12554F_ai < 0 && lv_dialogNumber >= auto3A12554F_ae) ) ; lv_dialogNumber += auto3A12554F_ai ) {
        DialogControlSetEnabled(gv_economicExternalPolicyDialogItems[lv_dialogNumber], PlayerGroupAll(), true);
    }
    lv_dialogNumber = 1;
    for ( ; ( (auto044ACD22_ai >= 0 && lv_dialogNumber <= auto044ACD22_ae) || (auto044ACD22_ai < 0 && lv_dialogNumber >= auto044ACD22_ae) ) ; lv_dialogNumber += auto044ACD22_ai ) {
        DialogControlSetEnabled(gv_economicExternalPolicyDialogItems[lv_dialogNumber], lv_theSubjugatedPlayers, false);
    }
    autoA3C752A3_g = gv_users;
    autoA3C752A3_var = -1;
    while (true) {
        autoA3C752A3_var = PlayerGroupNextPlayer(autoA3C752A3_g, autoA3C752A3_var);
        if (autoA3C752A3_var < 0) { break; }
        auto79C80A1F_ae = (28 + PlayerGroupCount(gv_users));
        lv_dialogNumber = 29;
        for ( ; ( (auto79C80A1F_ai >= 0 && lv_dialogNumber <= auto79C80A1F_ae) || (auto79C80A1F_ai < 0 && lv_dialogNumber >= auto79C80A1F_ae) ) ; lv_dialogNumber += auto79C80A1F_ai ) {
            if ((gv_importTariff[autoA3C752A3_var][PlayerGroupPlayer(gv_users, (lv_dialogNumber - 28))] != FixedToInt(libNtve_gf_DialogItemValue(gv_economicExternalPolicyDialogItems[lv_dialogNumber], autoA3C752A3_var))) && (PlayerGroupPlayer(gv_users, (lv_dialogNumber - 28)) != autoA3C752A3_var) && (gv_subjugated[autoA3C752A3_var] != true)) {
                gv_importTariff[autoA3C752A3_var][PlayerGroupPlayer(gv_users, (lv_dialogNumber - 28))] = FixedToInt(libNtve_gf_DialogItemValue(gv_economicExternalPolicyDialogItems[lv_dialogNumber], autoA3C752A3_var));
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, ((gf_NationOfPlayer(autoA3C752A3_var) + StringExternal("Param/Value/01D841E4")) + (IntToText(gv_importTariff[autoA3C752A3_var][PlayerGroupPlayer(gv_users, (lv_dialogNumber - 28))]) + (StringExternal("Param/Value/21BD7326") + gf_NationOfPlayer(PlayerGroupPlayer(gv_users, (lv_dialogNumber - 28)))))));
                lv_subjectPlayer = 1;
                for ( ; ( (auto219D886F_ai >= 0 && lv_subjectPlayer <= auto219D886F_ae) || (auto219D886F_ai < 0 && lv_subjectPlayer >= auto219D886F_ae) ) ; lv_subjectPlayer += auto219D886F_ai ) {
                    if ((gv_subjugator[lv_subjectPlayer] == autoA3C752A3_var) && (gv_subjugator[lv_subjectPlayer] != PlayerGroupPlayer(gv_users, (lv_dialogNumber - 28)))) {
                        gv_importTariff[lv_subjectPlayer][PlayerGroupPlayer(gv_users, (lv_dialogNumber - 28))] = FixedToInt(libNtve_gf_DialogItemValue(gv_economicExternalPolicyDialogItems[lv_dialogNumber], autoA3C752A3_var));
                        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, ((gf_NationOfPlayer(lv_subjectPlayer) + StringExternal("Param/Value/DE635D48")) + (IntToText(gv_importTariff[autoA3C752A3_var][PlayerGroupPlayer(gv_users, (lv_dialogNumber - 28))]) + (StringExternal("Param/Value/0CB538E2") + gf_NationOfPlayer(PlayerGroupPlayer(gv_users, (lv_dialogNumber - 28)))))));
                    }

                }
                if ((gv_automaticRetaliatoryTariffs[(lv_dialogNumber - 28)] == true) && (gv_importTariff[autoA3C752A3_var][PlayerGroupPlayer(gv_users, (lv_dialogNumber - 28))] >= 0)) {
                    libNtve_gf_SetDialogItemCurrentValue(gv_economicExternalPolicyDialogItems[PlayerGroupPlayer(gv_users, (lv_dialogNumber - 28))], IntToFixed(gv_importTariff[autoA3C752A3_var][PlayerGroupPlayer(gv_users, (lv_dialogNumber - 28))]), PlayerGroupSingle(PlayerGroupPlayer(gv_users, (lv_dialogNumber - 28))));
                }

            }

        }
    }
    auto242324F4_g = gv_users;
    auto242324F4_var = -1;
    while (true) {
        auto242324F4_var = PlayerGroupNextPlayer(auto242324F4_g, auto242324F4_var);
        if (auto242324F4_var < 0) { break; }
        autoF79D22F6_ae = (49 + PlayerGroupCount(gv_users));
        lv_dialogNumber = 50;
        for ( ; ( (autoF79D22F6_ai >= 0 && lv_dialogNumber <= autoF79D22F6_ae) || (autoF79D22F6_ai < 0 && lv_dialogNumber >= autoF79D22F6_ae) ) ; lv_dialogNumber += autoF79D22F6_ai ) {
            if ((gv_exportTariff[auto242324F4_var][PlayerGroupPlayer(gv_users, (lv_dialogNumber - 49))] != FixedToInt(libNtve_gf_DialogItemValue(gv_economicExternalPolicyDialogItems[lv_dialogNumber], auto242324F4_var))) && (PlayerGroupPlayer(gv_users, (lv_dialogNumber - 49)) != auto242324F4_var) && (gv_subjugated[auto242324F4_var] != true)) {
                gv_exportTariff[auto242324F4_var][PlayerGroupPlayer(gv_users, (lv_dialogNumber - 49))] = FixedToInt(libNtve_gf_DialogItemValue(gv_economicExternalPolicyDialogItems[lv_dialogNumber], auto242324F4_var));
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, ((gf_NationOfPlayer(auto242324F4_var) + StringExternal("Param/Value/B017B1D7")) + (IntToText(gv_exportTariff[auto242324F4_var][PlayerGroupPlayer(gv_users, (lv_dialogNumber - 49))]) + (StringExternal("Param/Value/C1FD04F6") + gf_NationOfPlayer(PlayerGroupPlayer(gv_users, (lv_dialogNumber - 49)))))));
                lv_subjectPlayer = 1;
                for ( ; ( (autoBADE5839_ai >= 0 && lv_subjectPlayer <= autoBADE5839_ae) || (autoBADE5839_ai < 0 && lv_subjectPlayer >= autoBADE5839_ae) ) ; lv_subjectPlayer += autoBADE5839_ai ) {
                    if ((gv_subjugator[lv_subjectPlayer] == auto242324F4_var) && (gv_subjugator[lv_subjectPlayer] != PlayerGroupPlayer(gv_users, (lv_dialogNumber - 49)))) {
                        gv_exportTariff[lv_subjectPlayer][PlayerGroupPlayer(gv_users, (lv_dialogNumber - 49))] = FixedToInt(libNtve_gf_DialogItemValue(gv_economicExternalPolicyDialogItems[lv_dialogNumber], auto242324F4_var));
                        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, ((gf_NationOfPlayer(lv_subjectPlayer) + StringExternal("Param/Value/36ACF232")) + (IntToText(gv_exportTariff[auto242324F4_var][PlayerGroupPlayer(gv_users, (lv_dialogNumber - 49))]) + (StringExternal("Param/Value/3AE9E3FD") + gf_NationOfPlayer(PlayerGroupPlayer(gv_users, (lv_dialogNumber - 49)))))));
                    }

                }
                if ((gv_automaticRetaliatoryTariffs[(lv_dialogNumber - 49)] == true) && (gv_exportTariff[auto242324F4_var][PlayerGroupPlayer(gv_users, (lv_dialogNumber - 49))] >= 0)) {
                    libNtve_gf_SetDialogItemCurrentValue(gv_economicExternalPolicyDialogItems[PlayerGroupPlayer(gv_users, (lv_dialogNumber - 49))], IntToFixed(gv_exportTariff[auto242324F4_var][PlayerGroupPlayer(gv_users, (lv_dialogNumber - 49))]), PlayerGroupSingle(PlayerGroupPlayer(gv_users, (lv_dialogNumber - 49))));
                }

            }

        }
    }
    autoA23D8E37_g = gv_users;
    autoA23D8E37_var = -1;
    while (true) {
        autoA23D8E37_var = PlayerGroupNextPlayer(autoA23D8E37_g, autoA23D8E37_var);
        if (autoA23D8E37_var < 0) { break; }
        if ((libNtve_gf_DialogItemIsChecked(gv_economicExternalPolicyDialogItems[71], autoA23D8E37_var) != gv_bannedForeignEquity[autoA23D8E37_var])) {
            if ((libNtve_gf_DialogItemIsChecked(gv_economicExternalPolicyDialogItems[71], autoA23D8E37_var) == true)) {
                gv_bannedForeignEquity[autoA23D8E37_var] = true;
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (gf_NationOfPlayer(autoA23D8E37_var) + StringExternal("Param/Value/BF75C712")));
                lv_subjectPlayer = 1;
                for ( ; ( (auto5C17D892_ai >= 0 && lv_subjectPlayer <= auto5C17D892_ae) || (auto5C17D892_ai < 0 && lv_subjectPlayer >= auto5C17D892_ae) ) ; lv_subjectPlayer += auto5C17D892_ai ) {
                    if ((gv_subjugator[lv_subjectPlayer] == autoA23D8E37_var)) {
                        gv_bannedForeignEquity[autoA23D8E37_var] = true;
                        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (gf_NationOfPlayer(lv_subjectPlayer) + StringExternal("Param/Value/D557BF69")));
                    }

                }
            }
            else {
                gv_bannedForeignEquity[autoA23D8E37_var] = false;
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (gf_NationOfPlayer(autoA23D8E37_var) + StringExternal("Param/Value/583EB2D0")));
                lv_subjectPlayer = 1;
                for ( ; ( (autoDFE53D4E_ai >= 0 && lv_subjectPlayer <= autoDFE53D4E_ae) || (autoDFE53D4E_ai < 0 && lv_subjectPlayer >= autoDFE53D4E_ae) ) ; lv_subjectPlayer += autoDFE53D4E_ai ) {
                    if ((gv_subjugator[lv_subjectPlayer] == autoA23D8E37_var)) {
                        gv_bannedForeignEquity[autoA23D8E37_var] = false;
                        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (gf_NationOfPlayer(lv_subjectPlayer) + StringExternal("Param/Value/BDBD8201")));
                    }

                }
            }
        }

        if ((libNtve_gf_DialogItemIsChecked(gv_economicExternalPolicyDialogItems[72], autoA23D8E37_var) != gv_automaticRetaliatoryTariffs[autoA23D8E37_var])) {
            if ((libNtve_gf_DialogItemIsChecked(gv_economicExternalPolicyDialogItems[72], autoA23D8E37_var) == true)) {
                gv_automaticRetaliatoryTariffs[autoA23D8E37_var] = true;
            }
            else {
                gv_automaticRetaliatoryTariffs[autoA23D8E37_var] = false;
            }
        }

    }
}

void gf_UpdateTradePolicyUI () {
    // Variable Declarations
    int lv_usersInUser;
    int lv_dialogItem;
    int lv_secondaryPlayer;

    // Automatic Variable Declarations
    const int auto93FC198A_ae = 70;
    const int auto93FC198A_ai = 1;
    int auto56F27A18_ae;
    const int auto56F27A18_ai = 1;
    int auto556AF824_ae;
    const int auto556AF824_ai = 1;
    playergroup auto98B8E20A_g;
    int auto98B8E20A_var;
    int auto7B080174_ae;
    const int auto7B080174_ai = 1;
    playergroup autoE32B3771_g;
    int autoE32B3771_var;
    int auto2C12FF82_ae;
    const int auto2C12FF82_ai = 1;
    playergroup autoBA644CEC_g;
    int autoBA644CEC_var;
    int auto55EE7A39_ae;
    const int auto55EE7A39_ai = 1;
    playergroup auto1A1C85E7_g;
    int auto1A1C85E7_var;
    playergroup autoD4DF085A_g;
    int autoD4DF085A_var;
    int auto3EF3403F_ae;
    const int auto3EF3403F_ai = 1;
    playergroup autoF7CB040E_g;
    int autoF7CB040E_var;
    int auto107A3EB4_ae;
    const int auto107A3EB4_ai = 1;
    playergroup autoA79C28F2_g;
    int autoA79C28F2_var;
    int auto388165E9_ae;
    const int auto388165E9_ai = 1;
    playergroup auto31F381DF_g;
    int auto31F381DF_var;
    playergroup auto6E085020_g;
    int auto6E085020_var;
    int autoBE248E05_ae;
    const int autoBE248E05_ai = 1;
    playergroup auto8837CDE3_g;
    int auto8837CDE3_var;
    int autoD372C148_ae;
    const int autoD372C148_ai = 1;
    playergroup autoCF71CD7F_g;
    int autoCF71CD7F_var;
    playergroup autoF0A71692_g;
    int autoF0A71692_var;
    int auto7111CA69_ae;
    const int auto7111CA69_ai = 1;

    // Variable Initialization

    // Implementation
    lv_dialogItem = 1;
    for ( ; ( (auto93FC198A_ai >= 0 && lv_dialogItem <= auto93FC198A_ae) || (auto93FC198A_ai < 0 && lv_dialogItem >= auto93FC198A_ae) ) ; lv_dialogItem += auto93FC198A_ai ) {
        DialogControlSetVisible(gv_economicExternalPolicyDialogItems[lv_dialogItem], PlayerGroupAll(), false);
    }
    lv_usersInUser = PlayerGroupCount(gv_users);
    auto56F27A18_ae = (0 + lv_usersInUser);
    lv_dialogItem = 1;
    for ( ; ( (auto56F27A18_ai >= 0 && lv_dialogItem <= auto56F27A18_ae) || (auto56F27A18_ai < 0 && lv_dialogItem >= auto56F27A18_ae) ) ; lv_dialogItem += auto56F27A18_ai ) {
        DialogControlSetVisible(gv_economicExternalPolicyDialogItems[lv_dialogItem], PlayerGroupAll(), true);
        libNtve_gf_SetDialogItemText(gv_economicExternalPolicyDialogItems[lv_dialogItem], TextWithColor(gf_NationOfPlayer(lv_dialogItem), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_dialogItem, false))), PlayerGroupAll());
    }
    auto556AF824_ae = (7 + lv_usersInUser);
    lv_dialogItem = 8;
    for ( ; ( (auto556AF824_ai >= 0 && lv_dialogItem <= auto556AF824_ae) || (auto556AF824_ai < 0 && lv_dialogItem >= auto556AF824_ae) ) ; lv_dialogItem += auto556AF824_ai ) {
        auto98B8E20A_g = gv_users;
        auto98B8E20A_var = -1;
        while (true) {
            auto98B8E20A_var = PlayerGroupNextPlayer(auto98B8E20A_g, auto98B8E20A_var);
            if (auto98B8E20A_var < 0) { break; }
            DialogControlSetVisible(gv_economicExternalPolicyDialogItems[lv_dialogItem], PlayerGroupSingle(auto98B8E20A_var), true);
            if ((auto98B8E20A_var != PlayerGroupPlayer(gv_users, lv_usersInUser))) {
            }

        }
    }
    auto7B080174_ae = (14 + lv_usersInUser);
    lv_dialogItem = 15;
    for ( ; ( (auto7B080174_ai >= 0 && lv_dialogItem <= auto7B080174_ae) || (auto7B080174_ai < 0 && lv_dialogItem >= auto7B080174_ae) ) ; lv_dialogItem += auto7B080174_ai ) {
        autoE32B3771_g = gv_users;
        autoE32B3771_var = -1;
        while (true) {
            autoE32B3771_var = PlayerGroupNextPlayer(autoE32B3771_g, autoE32B3771_var);
            if (autoE32B3771_var < 0) { break; }
            DialogControlSetVisible(gv_economicExternalPolicyDialogItems[lv_dialogItem], PlayerGroupSingle(autoE32B3771_var), true);
            if ((autoE32B3771_var != PlayerGroupPlayer(gv_users, lv_usersInUser))) {
            }

        }
    }
    auto2C12FF82_ae = (21 + lv_usersInUser);
    lv_dialogItem = 22;
    for ( ; ( (auto2C12FF82_ai >= 0 && lv_dialogItem <= auto2C12FF82_ae) || (auto2C12FF82_ai < 0 && lv_dialogItem >= auto2C12FF82_ae) ) ; lv_dialogItem += auto2C12FF82_ai ) {
        autoBA644CEC_g = gv_users;
        autoBA644CEC_var = -1;
        while (true) {
            autoBA644CEC_var = PlayerGroupNextPlayer(autoBA644CEC_g, autoBA644CEC_var);
            if (autoBA644CEC_var < 0) { break; }
            DialogControlSetVisible(gv_economicExternalPolicyDialogItems[lv_dialogItem], PlayerGroupSingle(autoBA644CEC_var), true);
            if ((autoBA644CEC_var != PlayerGroupPlayer(gv_users, lv_usersInUser))) {
            }

        }
    }
    auto55EE7A39_ae = (28 + lv_usersInUser);
    lv_dialogItem = 29;
    for ( ; ( (auto55EE7A39_ai >= 0 && lv_dialogItem <= auto55EE7A39_ae) || (auto55EE7A39_ai < 0 && lv_dialogItem >= auto55EE7A39_ae) ) ; lv_dialogItem += auto55EE7A39_ai ) {
        auto1A1C85E7_g = gv_users;
        auto1A1C85E7_var = -1;
        while (true) {
            auto1A1C85E7_var = PlayerGroupNextPlayer(auto1A1C85E7_g, auto1A1C85E7_var);
            if (auto1A1C85E7_var < 0) { break; }
            libNtve_gf_SetDialogItemCurrentValue(gv_economicExternalPolicyDialogItems[(lv_usersInUser + 28)], IntToFixed(gv_importTariff[auto1A1C85E7_var][PlayerGroupPlayer(gv_users, lv_usersInUser)]), PlayerGroupSingle(auto1A1C85E7_var));
        }
        autoD4DF085A_g = gv_users;
        autoD4DF085A_var = -1;
        while (true) {
            autoD4DF085A_var = PlayerGroupNextPlayer(autoD4DF085A_g, autoD4DF085A_var);
            if (autoD4DF085A_var < 0) { break; }
            DialogControlSetVisible(gv_economicExternalPolicyDialogItems[lv_dialogItem], PlayerGroupSingle(autoD4DF085A_var), true);
            if ((autoD4DF085A_var != PlayerGroupPlayer(gv_users, lv_usersInUser))) {
            }

        }
    }
    auto3EF3403F_ae = (35 + lv_usersInUser);
    lv_dialogItem = 36;
    for ( ; ( (auto3EF3403F_ai >= 0 && lv_dialogItem <= auto3EF3403F_ae) || (auto3EF3403F_ai < 0 && lv_dialogItem >= auto3EF3403F_ae) ) ; lv_dialogItem += auto3EF3403F_ai ) {
        autoF7CB040E_g = gv_users;
        autoF7CB040E_var = -1;
        while (true) {
            autoF7CB040E_var = PlayerGroupNextPlayer(autoF7CB040E_g, autoF7CB040E_var);
            if (autoF7CB040E_var < 0) { break; }
            DialogControlSetVisible(gv_economicExternalPolicyDialogItems[lv_dialogItem], PlayerGroupSingle(autoF7CB040E_var), true);
            if ((autoF7CB040E_var != PlayerGroupPlayer(gv_users, lv_usersInUser))) {
            }

        }
    }
    auto107A3EB4_ae = (42 + lv_usersInUser);
    lv_dialogItem = 43;
    for ( ; ( (auto107A3EB4_ai >= 0 && lv_dialogItem <= auto107A3EB4_ae) || (auto107A3EB4_ai < 0 && lv_dialogItem >= auto107A3EB4_ae) ) ; lv_dialogItem += auto107A3EB4_ai ) {
        autoA79C28F2_g = gv_users;
        autoA79C28F2_var = -1;
        while (true) {
            autoA79C28F2_var = PlayerGroupNextPlayer(autoA79C28F2_g, autoA79C28F2_var);
            if (autoA79C28F2_var < 0) { break; }
            DialogControlSetVisible(gv_economicExternalPolicyDialogItems[lv_dialogItem], PlayerGroupSingle(autoA79C28F2_var), true);
            if ((autoA79C28F2_var != PlayerGroupPlayer(gv_users, lv_usersInUser))) {
            }

        }
    }
    auto388165E9_ae = (49 + lv_usersInUser);
    lv_dialogItem = 50;
    for ( ; ( (auto388165E9_ai >= 0 && lv_dialogItem <= auto388165E9_ae) || (auto388165E9_ai < 0 && lv_dialogItem >= auto388165E9_ae) ) ; lv_dialogItem += auto388165E9_ai ) {
        auto31F381DF_g = gv_users;
        auto31F381DF_var = -1;
        while (true) {
            auto31F381DF_var = PlayerGroupNextPlayer(auto31F381DF_g, auto31F381DF_var);
            if (auto31F381DF_var < 0) { break; }
            libNtve_gf_SetDialogItemCurrentValue(gv_economicExternalPolicyDialogItems[(lv_usersInUser + 49)], IntToFixed(gv_exportTariff[auto31F381DF_var][PlayerGroupPlayer(gv_users, lv_usersInUser)]), PlayerGroupSingle(auto31F381DF_var));
        }
        auto6E085020_g = gv_users;
        auto6E085020_var = -1;
        while (true) {
            auto6E085020_var = PlayerGroupNextPlayer(auto6E085020_g, auto6E085020_var);
            if (auto6E085020_var < 0) { break; }
            DialogControlSetVisible(gv_economicExternalPolicyDialogItems[lv_dialogItem], PlayerGroupSingle(auto6E085020_var), true);
            if ((auto6E085020_var != PlayerGroupPlayer(gv_users, lv_usersInUser))) {
            }

        }
    }
    autoBE248E05_ae = (56 + lv_usersInUser);
    lv_dialogItem = 57;
    for ( ; ( (autoBE248E05_ai >= 0 && lv_dialogItem <= autoBE248E05_ae) || (autoBE248E05_ai < 0 && lv_dialogItem >= autoBE248E05_ae) ) ; lv_dialogItem += autoBE248E05_ai ) {
        auto8837CDE3_g = gv_users;
        auto8837CDE3_var = -1;
        while (true) {
            auto8837CDE3_var = PlayerGroupNextPlayer(auto8837CDE3_g, auto8837CDE3_var);
            if (auto8837CDE3_var < 0) { break; }
            DialogControlSetVisible(gv_economicExternalPolicyDialogItems[lv_dialogItem], PlayerGroupSingle(auto8837CDE3_var), true);
            if ((auto8837CDE3_var != PlayerGroupPlayer(gv_users, lv_usersInUser))) {
            }

        }
    }
    autoD372C148_ae = (63 + lv_usersInUser);
    lv_dialogItem = 64;
    for ( ; ( (autoD372C148_ai >= 0 && lv_dialogItem <= autoD372C148_ae) || (autoD372C148_ai < 0 && lv_dialogItem >= autoD372C148_ae) ) ; lv_dialogItem += autoD372C148_ai ) {
        autoCF71CD7F_g = gv_users;
        autoCF71CD7F_var = -1;
        while (true) {
            autoCF71CD7F_var = PlayerGroupNextPlayer(autoCF71CD7F_g, autoCF71CD7F_var);
            if (autoCF71CD7F_var < 0) { break; }
            DialogControlSetVisible(gv_economicExternalPolicyDialogItems[lv_dialogItem], PlayerGroupSingle(autoCF71CD7F_var), true);
            if ((autoCF71CD7F_var != PlayerGroupPlayer(gv_users, lv_usersInUser))) {
            }

        }
    }
    autoF0A71692_g = gv_users;
    autoF0A71692_var = -1;
    while (true) {
        autoF0A71692_var = PlayerGroupNextPlayer(autoF0A71692_g, autoF0A71692_var);
        if (autoF0A71692_var < 0) { break; }
        auto7111CA69_ae = (PlayerGroupCount(gv_users) + 0);
        lv_secondaryPlayer = 1;
        for ( ; ( (auto7111CA69_ai >= 0 && lv_secondaryPlayer <= auto7111CA69_ae) || (auto7111CA69_ai < 0 && lv_secondaryPlayer >= auto7111CA69_ae) ) ; lv_secondaryPlayer += auto7111CA69_ai ) {
            libNtve_gf_SetDialogItemText(gv_economicExternalPolicyDialogItems[(35 + lv_secondaryPlayer)], (IntToText(gv_importTariff[autoF0A71692_var][PlayerGroupPlayer(gv_users, lv_secondaryPlayer)]) + StringExternal("Param/Value/4F5EC9E9")), PlayerGroupSingle(autoF0A71692_var));
            libNtve_gf_SetDialogItemText(gv_economicExternalPolicyDialogItems[(42 + lv_secondaryPlayer)], (IntToText(gv_importTariff[PlayerGroupPlayer(gv_users, lv_secondaryPlayer)][autoF0A71692_var]) + StringExternal("Param/Value/9686ADFA")), PlayerGroupSingle(autoF0A71692_var));
            libNtve_gf_SetDialogItemText(gv_economicExternalPolicyDialogItems[(56 + lv_secondaryPlayer)], (IntToText(gv_exportTariff[autoF0A71692_var][PlayerGroupPlayer(gv_users, lv_secondaryPlayer)]) + StringExternal("Param/Value/4D8DE7F9")), PlayerGroupSingle(autoF0A71692_var));
            libNtve_gf_SetDialogItemText(gv_economicExternalPolicyDialogItems[(63 + lv_secondaryPlayer)], (IntToText(gv_exportTariff[PlayerGroupPlayer(gv_users, lv_secondaryPlayer)][autoF0A71692_var]) + StringExternal("Param/Value/8FFA9D9E")), PlayerGroupSingle(autoF0A71692_var));
            if ((gv_embargo[autoF0A71692_var][PlayerGroupPlayer(gv_users, lv_secondaryPlayer)] == true)) {
                libNtve_gf_SetDialogItemImage(gv_economicExternalPolicyDialogItems[(14 + lv_secondaryPlayer)], "Diplomatic Policies\\Xmarksthespot.tga", PlayerGroupSingle(autoF0A71692_var));
                DialogControlSetEnabled(gv_economicExternalPolicyDialogItems[(lv_secondaryPlayer + 28)], PlayerGroupSingle(autoF0A71692_var), false);
                DialogControlSetEnabled(gv_economicExternalPolicyDialogItems[(lv_secondaryPlayer + 49)], PlayerGroupSingle(autoF0A71692_var), false);
                libNtve_gf_SetDialogItemText(gv_economicExternalPolicyDialogItems[(35 + lv_secondaryPlayer)], StringExternal("Param/Value/23F9B654"), PlayerGroupSingle(autoF0A71692_var));
                libNtve_gf_SetDialogItemText(gv_economicExternalPolicyDialogItems[(42 + lv_secondaryPlayer)], StringExternal("Param/Value/4137A8FE"), PlayerGroupSingle(autoF0A71692_var));
                libNtve_gf_SetDialogItemText(gv_economicExternalPolicyDialogItems[(56 + lv_secondaryPlayer)], StringExternal("Param/Value/35293E4A"), PlayerGroupSingle(autoF0A71692_var));
                libNtve_gf_SetDialogItemText(gv_economicExternalPolicyDialogItems[(63 + lv_secondaryPlayer)], StringExternal("Param/Value/11F52908"), PlayerGroupSingle(autoF0A71692_var));
            }
            else {
                libNtve_gf_SetDialogItemImage(gv_economicExternalPolicyDialogItems[(14 + lv_secondaryPlayer)], "Military\\Screenshots\\PossibleScreenshots\\Yes\\Yes\\Research\\Special\\Research\\Special\\Symbols\\SmallCheck.tga", PlayerGroupSingle(autoF0A71692_var));
            }
            if ((gv_embargo[PlayerGroupPlayer(gv_users, lv_secondaryPlayer)][autoF0A71692_var] == true)) {
                libNtve_gf_SetDialogItemImage(gv_economicExternalPolicyDialogItems[(21 + lv_secondaryPlayer)], "Military\\Screenshots\\PossibleScreenshots\\Yes\\Yes\\Research\\Special\\Research\\Special\\Symbols\\SmallRedX.tga", PlayerGroupSingle(autoF0A71692_var));
                DialogControlSetEnabled(gv_economicExternalPolicyDialogItems[(lv_secondaryPlayer + 28)], PlayerGroupSingle(autoF0A71692_var), false);
                DialogControlSetEnabled(gv_economicExternalPolicyDialogItems[(lv_secondaryPlayer + 49)], PlayerGroupSingle(autoF0A71692_var), false);
                libNtve_gf_SetDialogItemText(gv_economicExternalPolicyDialogItems[(35 + lv_secondaryPlayer)], StringExternal("Param/Value/6F7FBCB0"), PlayerGroupSingle(autoF0A71692_var));
                libNtve_gf_SetDialogItemText(gv_economicExternalPolicyDialogItems[(42 + lv_secondaryPlayer)], StringExternal("Param/Value/908D8AE7"), PlayerGroupSingle(autoF0A71692_var));
                libNtve_gf_SetDialogItemText(gv_economicExternalPolicyDialogItems[(56 + lv_secondaryPlayer)], StringExternal("Param/Value/5076953B"), PlayerGroupSingle(autoF0A71692_var));
                libNtve_gf_SetDialogItemText(gv_economicExternalPolicyDialogItems[(63 + lv_secondaryPlayer)], StringExternal("Param/Value/356C948C"), PlayerGroupSingle(autoF0A71692_var));
            }
            else {
                libNtve_gf_SetDialogItemImage(gv_economicExternalPolicyDialogItems[(21 + lv_secondaryPlayer)], "Military\\Screenshots\\PossibleScreenshots\\Yes\\Yes\\Research\\Special\\Research\\Special\\Symbols\\SmallCheck.tga", PlayerGroupSingle(autoF0A71692_var));
            }
        }
    }
}

void gf_UpdateInternalPolicy () {
    // Automatic Variable Declarations
    playergroup auto984B0CD6_g;
    int auto984B0CD6_var;

    // Implementation
    auto984B0CD6_g = gv_users;
    auto984B0CD6_var = -1;
    while (true) {
        auto984B0CD6_var = PlayerGroupNextPlayer(auto984B0CD6_g, auto984B0CD6_var);
        if (auto984B0CD6_var < 0) { break; }
        gv_deinvestment[auto984B0CD6_var] = libNtve_gf_DialogItemValue(gv_economicInternalPolicyDialogItems[1], auto984B0CD6_var);
        gv_corporateTax[auto984B0CD6_var] = libNtve_gf_DialogItemValue(gv_economicInternalPolicyDialogItems[2], auto984B0CD6_var);
        gv_investment[auto984B0CD6_var] = libNtve_gf_DialogItemValue(gv_economicInternalPolicyDialogItems[3], auto984B0CD6_var);
        gv_loanRepayment[auto984B0CD6_var] = libNtve_gf_DialogItemValue(gv_economicInternalPolicyDialogItems[4], auto984B0CD6_var);
        gv_research[auto984B0CD6_var] = libNtve_gf_DialogItemValue(gv_economicInternalPolicyDialogItems[5], auto984B0CD6_var);
        gv_subsidies[auto984B0CD6_var] = libNtve_gf_DialogItemValue(gv_economicInternalPolicyDialogItems[6], auto984B0CD6_var);
        gv_resourceShare[auto984B0CD6_var] = libNtve_gf_DialogItemValue(gv_economicInternalPolicyDialogItems[7], auto984B0CD6_var);
        gv_metalImports[auto984B0CD6_var] = libNtve_gf_DialogItemValue(gv_economicInternalPolicyDialogItems[15], auto984B0CD6_var);
        gv_corporateTax[auto984B0CD6_var] /= 2.0;
        libNtve_gf_SetDialogItemText(gv_economicInternalPolicyDialogItems[8], (FixedToText(gv_deinvestment[auto984B0CD6_var], 1) + StringExternal("Param/Value/BC8FAAD6")), PlayerGroupSingle(auto984B0CD6_var));
        libNtve_gf_SetDialogItemText(gv_economicInternalPolicyDialogItems[9], (FixedToText(gv_corporateTax[auto984B0CD6_var], 1) + StringExternal("Param/Value/3EF9BCB6")), PlayerGroupSingle(auto984B0CD6_var));
        libNtve_gf_SetDialogItemText(gv_economicInternalPolicyDialogItems[10], (FixedToText(gv_investment[auto984B0CD6_var], 1) + StringExternal("Param/Value/C11CC126")), PlayerGroupSingle(auto984B0CD6_var));
        libNtve_gf_SetDialogItemText(gv_economicInternalPolicyDialogItems[11], (FixedToText(gv_loanRepayment[auto984B0CD6_var], 1) + StringExternal("Param/Value/76B710C9")), PlayerGroupSingle(auto984B0CD6_var));
        libNtve_gf_SetDialogItemText(gv_economicInternalPolicyDialogItems[12], (FixedToText(gv_research[auto984B0CD6_var], 1) + StringExternal("Param/Value/AB7141EE")), PlayerGroupSingle(auto984B0CD6_var));
        libNtve_gf_SetDialogItemText(gv_economicInternalPolicyDialogItems[13], (FixedToText(gv_subsidies[auto984B0CD6_var], 1) + StringExternal("Param/Value/36FE66E5")), PlayerGroupSingle(auto984B0CD6_var));
        libNtve_gf_SetDialogItemText(gv_economicInternalPolicyDialogItems[14], (FixedToText(gv_resourceShare[auto984B0CD6_var], 1) + StringExternal("Param/Value/F227406F")), PlayerGroupSingle(auto984B0CD6_var));
        libNtve_gf_SetDialogItemText(gv_economicInternalPolicyDialogItems[16], (FixedToText(gv_metalImports[auto984B0CD6_var], 1) + StringExternal("Param/Value/540BB0A1")), PlayerGroupSingle(auto984B0CD6_var));
    }
}

void gf_RotMarketFoodStockpile () {
    // Variable Declarations
    const int lv_rOT_RATE = 20;

    // Automatic Variable Declarations
    const int auto558B8FF3_ae = 7;
    int auto558B8FF3_var;

    // Variable Initialization

    // Implementation
    auto558B8FF3_var = 1;
    for ( ; auto558B8FF3_var <= auto558B8FF3_ae; auto558B8FF3_var += 1 ) {
        if ((gv_foodStockpile[auto558B8FF3_var] > 50000)) {
            gv_foodStockpile[auto558B8FF3_var] = ((gv_foodStockpile[auto558B8FF3_var] / 100) * lv_rOT_RATE);
        }
        else {
            if ((gv_foodStockpile[auto558B8FF3_var] < 0)) {
                gv_foodStockpile[auto558B8FF3_var] = 0;
            }
            else {
                gv_foodStockpile[auto558B8FF3_var] = ((gv_foodStockpile[auto558B8FF3_var] * lv_rOT_RATE) / 100);
            }
        }
    }
}

void gf_UpdateCheapestFoodArray () {
    // Variable Declarations
    int lv_purchasingPlayer;
    int lv_sellingPlayer;
    int lv_loop;
    int lv_tempReassign;
    int lv_tempReassignPlayer;

    // Automatic Variable Declarations
    const int auto160A8C39_ae = 7;
    const int auto160A8C39_ai = 1;
    const int autoB465C381_ae = 7;
    const int autoB465C381_ai = 1;
    playergroup auto70CE124C_g;
    const int auto43BB751E_ae = 7;
    const int auto43BB751E_ai = 1;
    const int auto7508BCD6_ae = 6;
    const int auto7508BCD6_ai = 1;

    // Variable Initialization

    // Implementation
    lv_purchasingPlayer = 1;
    for ( ; ( (auto160A8C39_ai >= 0 && lv_purchasingPlayer <= auto160A8C39_ae) || (auto160A8C39_ai < 0 && lv_purchasingPlayer >= auto160A8C39_ae) ) ; lv_purchasingPlayer += auto160A8C39_ai ) {
        lv_sellingPlayer = 1;
        for ( ; ( (autoB465C381_ai >= 0 && lv_sellingPlayer <= autoB465C381_ae) || (autoB465C381_ai < 0 && lv_sellingPlayer >= autoB465C381_ae) ) ; lv_sellingPlayer += autoB465C381_ai ) {
            gv_cheapestFoodArrayPrice[lv_purchasingPlayer][lv_sellingPlayer] = gf_getFoodPricePerThousand(lv_purchasingPlayer, lv_sellingPlayer);
            gv_cheapestFoodArrayPlayer[lv_purchasingPlayer][lv_sellingPlayer] = lv_sellingPlayer;
        }
    }
    auto70CE124C_g = gv_users;
    lv_purchasingPlayer = -1;
    while (true) {
        lv_purchasingPlayer = PlayerGroupNextPlayer(auto70CE124C_g, lv_purchasingPlayer);
        if (lv_purchasingPlayer < 0) { break; }
        lv_sellingPlayer = 1;
        for ( ; ( (auto43BB751E_ai >= 0 && lv_sellingPlayer <= auto43BB751E_ae) || (auto43BB751E_ai < 0 && lv_sellingPlayer >= auto43BB751E_ae) ) ; lv_sellingPlayer += auto43BB751E_ai ) {
            lv_loop = 1;
            for ( ; ( (auto7508BCD6_ai >= 0 && lv_loop <= auto7508BCD6_ae) || (auto7508BCD6_ai < 0 && lv_loop >= auto7508BCD6_ae) ) ; lv_loop += auto7508BCD6_ai ) {
                if ((gv_cheapestFoodArrayPrice[lv_purchasingPlayer][lv_loop] > gv_cheapestFoodArrayPrice[lv_purchasingPlayer][(lv_loop + 1)])) {
                    lv_tempReassign = gv_cheapestFoodArrayPrice[lv_purchasingPlayer][lv_loop];
                    gv_cheapestFoodArrayPrice[lv_purchasingPlayer][lv_loop] = gv_cheapestFoodArrayPrice[lv_purchasingPlayer][(lv_loop + 1)];
                    gv_cheapestFoodArrayPrice[lv_purchasingPlayer][(lv_loop + 1)] = lv_tempReassign;
                    lv_tempReassignPlayer = gv_cheapestFoodArrayPlayer[lv_purchasingPlayer][lv_loop];
                    gv_cheapestFoodArrayPlayer[lv_purchasingPlayer][lv_loop] = gv_cheapestFoodArrayPlayer[lv_purchasingPlayer][(lv_loop + 1)];
                    gv_cheapestFoodArrayPlayer[lv_purchasingPlayer][(lv_loop + 1)] = lv_tempReassignPlayer;
                }

            }
        }
    }
}

int gf_getFoodPricePerThousand (int lp_purchasingPlayer, int lp_sellingPlayer) {
    // Variable Declarations
    unitgroup lv_purchaseHeadquarters;
    unitgroup lv_sellingHeadquarters;
    point lv_purchasePoint;
    point lv_sellingPoint;
    int lv_fuelCosts;

    // Automatic Variable Declarations
    unitgroup auto407DBB65_g;
    int auto407DBB65_u;
    unit auto407DBB65_var;
    unitgroup autoAFFE2084_g;
    int autoAFFE2084_u;
    unit autoAFFE2084_var;

    // Variable Initialization
    lv_purchaseHeadquarters = UnitGroupFilterRegion(UnitGroup("Capital", lp_purchasingPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), RegionPlayableMap(), 1);
    lv_sellingHeadquarters = UnitGroupFilterRegion(UnitGroup("Capital", lp_sellingPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), RegionPlayableMap(), 1);

    // Implementation
    if ((UnitGroupCount(lv_purchaseHeadquarters, c_unitCountAlive) == 0)) {
        gv_foodStockpile[lp_purchasingPlayer] = 0;
        return 1000000000;
    }

    if ((UnitGroupCount(lv_sellingHeadquarters, c_unitCountAlive) == 0)) {
        gv_foodStockpile[lp_sellingPlayer] = 0;
        return 1000000000;
    }

    if ((gv_foodStockpile[lp_sellingPlayer] == 0)) {
        return 1000000000;
    }

    if (((gv_embargo[lp_sellingPlayer][lp_purchasingPlayer] == true) || (gv_embargo[lp_purchasingPlayer][lp_sellingPlayer] == true) || (gv_embargoed[lp_purchasingPlayer] > 0) || (gv_embargoed[lp_sellingPlayer] > 0))) {
        return 1000000000;
    }

    auto407DBB65_g = lv_purchaseHeadquarters;
    auto407DBB65_u = UnitGroupCount(auto407DBB65_g, c_unitCountAll);
    for (;; auto407DBB65_u -= 1) {
        auto407DBB65_var = UnitGroupUnitFromEnd(auto407DBB65_g, auto407DBB65_u);
        if (auto407DBB65_var == null) { break; }
        lv_purchasePoint = UnitGetPosition(auto407DBB65_var);
    }
    autoAFFE2084_g = lv_sellingHeadquarters;
    autoAFFE2084_u = UnitGroupCount(autoAFFE2084_g, c_unitCountAll);
    for (;; autoAFFE2084_u -= 1) {
        autoAFFE2084_var = UnitGroupUnitFromEnd(autoAFFE2084_g, autoAFFE2084_u);
        if (autoAFFE2084_var == null) { break; }
        lv_sellingPoint = UnitGetPosition(autoAFFE2084_var);
    }
    lv_fuelCosts = gf_GetFuelCostsMonetary(lp_purchasingPlayer, lv_purchasePoint, lv_sellingPoint, false);
    return (gf_CalculateCostWithTariffs(lp_sellingPlayer, lp_purchasingPlayer, (gv_foodPrice * 1000)) + lv_fuelCosts);
}

int gf_GetUnitCustomValue (unit lp_unit, int lp_customValue) {
    // Variable Declarations
    fixed lv_theReal;
    int lv_returnInt;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_theReal = UnitGetCustomValue(lp_unit, lp_customValue);

    // Implementation
    if ((lv_theReal <= 0.0)) {
        return 0;
    }

    if ((lv_theReal < 500.0)) {
        lv_returnInt = FixedToInt((lv_theReal * 10000.0));
    }
    else {
        if ((lv_theReal < 5000.0)) {
            lv_returnInt = FixedToInt((lv_theReal * 1000.0));
            lv_returnInt *= 10;
        }
        else {
            if ((lv_theReal < 50000.0)) {
                lv_returnInt = FixedToInt((lv_theReal * 100.0));
                lv_returnInt *= 100;
            }
            else {
                if ((lv_theReal < 500000.0)) {
                    lv_returnInt = FixedToInt((lv_theReal * 10.0));
                    lv_returnInt *= 1000;
                }
                else {
                    lv_returnInt = FixedToInt((lv_theReal * 1.0));
                    lv_returnInt *= 10000;
                }
            }
        }
    }
    return lv_returnInt;
}

void gf_SetUnitCustomValue (unit lp_unit, int lp_customValue, int lp_setValue) {
    // Variable Declarations
    int lv_extraDigits;
    fixed lv_theReal;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_setValue > 5000000)) {
        lv_theReal = IntToFixed((lp_setValue / 10000));
    }
    else {
        if ((lp_setValue > 500000)) {
            lv_theReal = IntToFixed((lp_setValue / 1000));
            lv_theReal /= 10.0;
        }
        else {
            if ((lp_setValue > 50000)) {
                lv_theReal = IntToFixed((lp_setValue / 100));
                lv_theReal /= 100.0;
            }
            else {
                if ((lp_setValue > 500)) {
                    lv_theReal = IntToFixed((lp_setValue / 10));
                    lv_theReal /= 1000.0;
                }
                else {
                    if ((lp_setValue < 1)) {
                        lv_theReal = 0.0;
                    }
                    else {
                        lv_theReal = IntToFixed((lp_setValue / 1));
                        lv_theReal /= 10000.0;
                    }
                }
            }
        }
    }
    UnitSetCustomValue(lp_unit, lp_customValue, lv_theReal);
}

void gf_ModifyUnitCustomValue (unit lp_unit, int lp_customValue, int lp_modifyValue) {
    // Variable Declarations
    int lv_newValue;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_modifyValue >= 0)) {
        gf_SetUnitCustomValue(lp_unit, lp_customValue, (lp_customValue + lp_modifyValue));
    }
    else {
        lv_newValue = libNtve_gf_ArithmeticIntClamp((lp_customValue + lp_modifyValue), 0, 1000000000);
        gf_SetUnitCustomValue(lp_unit, lp_customValue, lv_newValue);
    }
}

void gf_UpdateResourceUnitGroup () {
    // Automatic Variable Declarations
    unitgroup auto4AC7484B_g;
    int auto4AC7484B_u;
    unit auto4AC7484B_var;
    string auto56C6C465_val;

    // Implementation
    auto4AC7484B_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterMechanical) | (1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4AC7484B_u = UnitGroupCount(auto4AC7484B_g, c_unitCountAll);
    for (;; auto4AC7484B_u -= 1) {
        auto4AC7484B_var = UnitGroupUnitFromEnd(auto4AC7484B_g, auto4AC7484B_u);
        if (auto4AC7484B_var == null) { break; }
        auto56C6C465_val = UnitGetType(auto4AC7484B_var);
        if (auto56C6C465_val == "Metal") {
            gv_cUpkeepExpenses[FixedToInt(UnitGetCustomValue(auto4AC7484B_var, 10))][0] += gv_metalMineUpkeep[0];
            UnitGroupAdd(gv_allResources, auto4AC7484B_var);
        }
        else if (auto56C6C465_val == "MineI") {
            gv_cUpkeepExpenses[FixedToInt(UnitGetCustomValue(auto4AC7484B_var, 10))][0] += gv_metalMineUpkeep[1];
            UnitGroupAdd(gv_allResources, auto4AC7484B_var);
        }
        else if (auto56C6C465_val == "MineII") {
            gv_cUpkeepExpenses[FixedToInt(UnitGetCustomValue(auto4AC7484B_var, 10))][0] += gv_metalMineUpkeep[2];
            UnitGroupAdd(gv_allResources, auto4AC7484B_var);
        }
        else if (auto56C6C465_val == "MineIII") {
            gv_cUpkeepExpenses[FixedToInt(UnitGetCustomValue(auto4AC7484B_var, 10))][0] += gv_metalMineUpkeep[3];
            UnitGroupAdd(gv_allResources, auto4AC7484B_var);
        }
        else if (auto56C6C465_val == "MineIV") {
            gv_cUpkeepExpenses[FixedToInt(UnitGetCustomValue(auto4AC7484B_var, 10))][0] += gv_metalMineUpkeep[4];
            UnitGroupAdd(gv_allResources, auto4AC7484B_var);
        }
        else if (auto56C6C465_val == "MineV") {
            gv_cUpkeepExpenses[FixedToInt(UnitGetCustomValue(auto4AC7484B_var, 10))][0] += gv_metalMineUpkeep[5];
            UnitGroupAdd(gv_allResources, auto4AC7484B_var);
        }
        else if (auto56C6C465_val == "BoreholeI") {
            gv_cUpkeepExpenses[FixedToInt(UnitGetCustomValue(auto4AC7484B_var, 10))][0] += gv_metalBoreholeUpkeep[1];
            UnitGroupAdd(gv_allResources, auto4AC7484B_var);
        }
        else if (auto56C6C465_val == "BoreholeII") {
            gv_cUpkeepExpenses[FixedToInt(UnitGetCustomValue(auto4AC7484B_var, 10))][0] += gv_metalBoreholeUpkeep[2];
            UnitGroupAdd(gv_allResources, auto4AC7484B_var);
        }
        else if (auto56C6C465_val == "BoreholeIII") {
            gv_cUpkeepExpenses[FixedToInt(UnitGetCustomValue(auto4AC7484B_var, 10))][0] += gv_metalBoreholeUpkeep[3];
            UnitGroupAdd(gv_allResources, auto4AC7484B_var);
        }
        else if (auto56C6C465_val == "BoreholeIV") {
            gv_cUpkeepExpenses[FixedToInt(UnitGetCustomValue(auto4AC7484B_var, 10))][0] += gv_metalBoreholeUpkeep[4];
            UnitGroupAdd(gv_allResources, auto4AC7484B_var);
        }
        else if (auto56C6C465_val == "BoreholeV") {
            gv_cUpkeepExpenses[FixedToInt(UnitGetCustomValue(auto4AC7484B_var, 10))][0] += gv_metalBoreholeUpkeep[5];
            UnitGroupAdd(gv_allResources, auto4AC7484B_var);
        }
        else if (auto56C6C465_val == "Oil") {
            gv_cUpkeepExpenses[FixedToInt(UnitGetCustomValue(auto4AC7484B_var, 10))][0] += gv_oilWellUpkeep[0];
            UnitSetCustomValue(auto4AC7484B_var, 16, 3.0);
            UnitGroupAdd(gv_allResources, auto4AC7484B_var);
        }
        else if (auto56C6C465_val == "OilWellI") {
            gv_cUpkeepExpenses[FixedToInt(UnitGetCustomValue(auto4AC7484B_var, 10))][0] += gv_oilWellUpkeep[1];
            UnitSetCustomValue(auto4AC7484B_var, 16, 3.0);
            UnitGroupAdd(gv_allResources, auto4AC7484B_var);
        }
        else if (auto56C6C465_val == "OilWellII") {
            gv_cUpkeepExpenses[FixedToInt(UnitGetCustomValue(auto4AC7484B_var, 10))][0] += gv_oilWellUpkeep[2];
            UnitSetCustomValue(auto4AC7484B_var, 16, 3.0);
            UnitGroupAdd(gv_allResources, auto4AC7484B_var);
        }
        else {
        }
        if ((UnitGetOwner(auto4AC7484B_var) == 12)) {
            UnitSetOwner(auto4AC7484B_var, 0, true);
        }

        gf_NoNegativeCustomValues(auto4AC7484B_var, 0, 64);
    }
}

void gf_SetPricesGetSuppliesGetMeanGDPRotFood (int lp_resourceType) {
    // Variable Declarations
    bool lv_theBIGTIK;

    // Automatic Variable Declarations
    playergroup autoA20B4FA9_g;
    int autoA20B4FA9_var;
    playergroup auto8760BB51_g;
    int auto8760BB51_var;
    unitgroup auto6CE95EF7_g;
    int auto6CE95EF7_u;
    unit auto6CE95EF7_var;
    playergroup autoDDC98CB2_g;
    int autoDDC98CB2_var;
    unitgroup autoB7875E21_g;
    int autoB7875E21_u;
    unit autoB7875E21_var;
    unitgroup autoEC9BC642_g;
    int autoEC9BC642_u;
    unit autoEC9BC642_var;
    playergroup auto518F13FE_g;
    int auto518F13FE_var;
    unitgroup autoBA2083E8_g;
    int autoBA2083E8_u;
    unit autoBA2083E8_var;

    // Variable Initialization

    // Implementation
    if ((lp_resourceType == 0)) {
        lv_theBIGTIK = true;
        auto518F13FE_g = gv_users;
        auto518F13FE_var = -1;
        while (true) {
            auto518F13FE_var = PlayerGroupNextPlayer(auto518F13FE_g, auto518F13FE_var);
            if (auto518F13FE_var < 0) { break; }
            gv_cSupply[auto518F13FE_var][1] = gv_cUnrealizedSupplyImports[auto518F13FE_var][1];
            gv_cSupply[auto518F13FE_var][2] = gv_cUnrealizedSupplyImports[auto518F13FE_var][2];
            gv_cSupply[auto518F13FE_var][3] = gv_cUnrealizedSupplyImports[auto518F13FE_var][3];
            gv_cDemand[auto518F13FE_var][1] = 0;
            gv_cDemand[auto518F13FE_var][2] = 0;
            gv_cDemand[auto518F13FE_var][3] = 0;
        }
        autoBA2083E8_g = gv_allResources;
        autoBA2083E8_u = UnitGroupCount(autoBA2083E8_g, c_unitCountAll);
        for (;; autoBA2083E8_u -= 1) {
            autoBA2083E8_var = UnitGroupUnitFromEnd(autoBA2083E8_g, autoBA2083E8_u);
            if (autoBA2083E8_var == null) { break; }
            if ((gf_GetResourceType(autoBA2083E8_var) == 3)) {
                gf_RefreshResourceActualDemand(autoBA2083E8_var, true);
                gf_GetMeanGDPofDemanders(autoBA2083E8_var);
                gv_cSupply[FixedToInt(UnitGetCustomValue(autoBA2083E8_var, 10))][3] += gf_GetUnitCustomValue(autoBA2083E8_var, 12);
                gv_cDemand[FixedToInt(UnitGetCustomValue(autoBA2083E8_var, 10))][3] += gf_GetUnitCustomValue(autoBA2083E8_var, 13);
                gf_SetLocalResourcePrice(autoBA2083E8_var);
            }
            else {
                if ((gf_GetResourceType(autoBA2083E8_var) == 2)) {
                    gf_RefreshResourceActualDemand(autoBA2083E8_var, true);
                    gf_GetMeanGDPofDemanders(autoBA2083E8_var);
                    gv_cSupply[FixedToInt(UnitGetCustomValue(autoBA2083E8_var, 10))][2] += gf_GetUnitCustomValue(autoBA2083E8_var, 12);
                    gv_cDemand[FixedToInt(UnitGetCustomValue(autoBA2083E8_var, 10))][2] += gf_GetUnitCustomValue(autoBA2083E8_var, 13);
                    gf_SetLocalResourcePrice(autoBA2083E8_var);
                }

            }
        }
    }
    else {
        if ((lp_resourceType == 1)) {
            autoA20B4FA9_g = gv_users;
            autoA20B4FA9_var = -1;
            while (true) {
                autoA20B4FA9_var = PlayerGroupNextPlayer(autoA20B4FA9_g, autoA20B4FA9_var);
                if (autoA20B4FA9_var < 0) { break; }
                gv_cSupply[autoA20B4FA9_var][1] = gv_cUnrealizedSupplyImports[autoA20B4FA9_var][1];
                gv_cDemand[autoA20B4FA9_var][1] = 0;
            }
            autoEC9BC642_g = UnitGroup("CorporateHeadquarters", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoEC9BC642_u = UnitGroupCount(autoEC9BC642_g, c_unitCountAll);
            for (;; autoEC9BC642_u -= 1) {
                autoEC9BC642_var = UnitGroupUnitFromEnd(autoEC9BC642_g, autoEC9BC642_u);
                if (autoEC9BC642_var == null) { break; }
                gf_RefreshResourceActualDemand(autoEC9BC642_var, false);
                gf_GetMeanGDPofDemanders(autoEC9BC642_var);
                gv_cSupply[UnitGetOwner(autoEC9BC642_var)][1] += gf_GetUnitCustomValue(autoEC9BC642_var, 12);
                gv_cDemand[UnitGetOwner(autoEC9BC642_var)][1] += gf_GetUnitCustomValue(autoEC9BC642_var, 13);
                gf_SetLocalResourcePrice(autoEC9BC642_var);
            }
        }
        else {
            if ((lp_resourceType == 2)) {
                autoDDC98CB2_g = gv_users;
                autoDDC98CB2_var = -1;
                while (true) {
                    autoDDC98CB2_var = PlayerGroupNextPlayer(autoDDC98CB2_g, autoDDC98CB2_var);
                    if (autoDDC98CB2_var < 0) { break; }
                    gv_cSupply[autoDDC98CB2_var][2] = gv_cUnrealizedSupplyImports[autoDDC98CB2_var][2];
                    gv_cDemand[autoDDC98CB2_var][2] = 0;
                }
                autoB7875E21_g = gv_allResources;
                autoB7875E21_u = UnitGroupCount(autoB7875E21_g, c_unitCountAll);
                for (;; autoB7875E21_u -= 1) {
                    autoB7875E21_var = UnitGroupUnitFromEnd(autoB7875E21_g, autoB7875E21_u);
                    if (autoB7875E21_var == null) { break; }
                    if ((gf_GetResourceType(autoB7875E21_var) == 2)) {
                        gf_RefreshResourceActualDemand(autoB7875E21_var, false);
                        gf_GetMeanGDPofDemanders(autoB7875E21_var);
                        gv_cSupply[FixedToInt(UnitGetCustomValue(autoB7875E21_var, 10))][2] += gf_GetUnitCustomValue(autoB7875E21_var, 12);
                        gv_cDemand[FixedToInt(UnitGetCustomValue(autoB7875E21_var, 10))][2] += gf_GetUnitCustomValue(autoB7875E21_var, 13);
                        gf_SetLocalResourcePrice(autoB7875E21_var);
                    }

                }
            }
            else {
                if ((lp_resourceType == 3)) {
                    auto8760BB51_g = gv_users;
                    auto8760BB51_var = -1;
                    while (true) {
                        auto8760BB51_var = PlayerGroupNextPlayer(auto8760BB51_g, auto8760BB51_var);
                        if (auto8760BB51_var < 0) { break; }
                        gv_cSupply[auto8760BB51_var][3] = gv_cUnrealizedSupplyImports[auto8760BB51_var][3];
                        gv_cDemand[auto8760BB51_var][3] = 0;
                    }
                    auto6CE95EF7_g = gv_allResources;
                    auto6CE95EF7_u = UnitGroupCount(auto6CE95EF7_g, c_unitCountAll);
                    for (;; auto6CE95EF7_u -= 1) {
                        auto6CE95EF7_var = UnitGroupUnitFromEnd(auto6CE95EF7_g, auto6CE95EF7_u);
                        if (auto6CE95EF7_var == null) { break; }
                        if ((gf_GetResourceType(auto6CE95EF7_var) == 3)) {
                            gf_RefreshResourceActualDemand(auto6CE95EF7_var, false);
                            gf_GetMeanGDPofDemanders(auto6CE95EF7_var);
                            gv_cSupply[FixedToInt(UnitGetCustomValue(auto6CE95EF7_var, 10))][3] += gf_GetUnitCustomValue(auto6CE95EF7_var, 12);
                            gv_cDemand[FixedToInt(UnitGetCustomValue(auto6CE95EF7_var, 10))][3] += gf_GetUnitCustomValue(auto6CE95EF7_var, 13);
                            gf_SetLocalResourcePrice(auto6CE95EF7_var);
                        }

                    }
                }

            }
        }
    }
    gf_AggregatePrice();
}

void gf_RotFood (unit lp_headquarter) {
    // Variable Declarations
    const fixed lv_decayRate = 0.8;
    fixed lv_food;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    UnitSetCustomValue(lp_headquarter, 12, libNtve_gf_ArithmeticRealClamp((AbsF(UnitGetCustomValue(lp_headquarter, 12)) * lv_decayRate), 0.0, 524287.0));
}

void gf_RefreshCorpUI (int lp_player) {
    // Variable Declarations
    int lv_dialogitem;
    int lv_month;
    int lv_selectedCorp;
    int[4] lv_aExportIncome;
    int lv_aGrantsIncome;
    int lv_aTotalIncome;
    int lv_aUpkeepExpenses;
    int lv_aMilitaryExpenses;
    int[4] lv_aImportExpenses;
    int lv_aInterestExpenses;
    int lv_aTaxExpenses;
    int lv_aDividendExpenses;
    int lv_aTotalExpenses;
    int lv_aTotalRevenue;
    int lv_aRD;
    int lv_aRevenue;
    int lv_foreignShares;
    int lv_domesticShares;

    // Automatic Variable Declarations
    const int auto951706A8_ae = 34;
    const int auto951706A8_ai = 1;
    const int auto7390CFE0_ae = 34;
    const int auto7390CFE0_ai = 1;
    const int autoB2FBC4DD_ae = 12;
    const int autoB2FBC4DD_ai = 1;
    playergroup auto4446EEB0_g;
    int auto4446EEB0_var;

    // Variable Initialization

    // Implementation
    lv_selectedCorp = gv_selectedCorporation[lp_player];
    if ((gv_deadCorp[lv_selectedCorp] == false)) {
        lv_dialogitem = 1;
        for ( ; ( (auto951706A8_ai >= 0 && lv_dialogitem <= auto951706A8_ae) || (auto951706A8_ai < 0 && lv_dialogitem >= auto951706A8_ae) ) ; lv_dialogitem += auto951706A8_ai ) {
            DialogControlSetEnabled(gv_corporationDialogItems[lv_dialogitem], PlayerGroupSingle(lp_player), true);
        }
        libNtve_gf_SetDialogItemTooltip(gv_corporationDialogItems[1], (((((((StringExternal("Param/Value/EF29BD66") + gf_MakeUIPresentable(gv_cMilitary[lv_selectedCorp][1])) + StringExternal("Param/Value/9A882DF1")) + gf_MakeUIPresentable(gv_cExpansion[lv_selectedCorp][1])) + StringExternal("Param/Value/6FE24BCF")) + gf_MakeUIPresentable(gv_cInfrastructure[lv_selectedCorp][1])) + StringExternal("Param/Value/0EF590E5")) + ((((gf_MakeUIPresentable(gv_cResearch[lv_selectedCorp][1]) + StringToText("")) + StringToText("")) + ((((StringExternal("Param/Value/595A747E") + gf_MakeUIPresentable(gv_cImports[lv_selectedCorp][2][1])) + StringExternal("Param/Value/423A6316")) + gf_MakeUIPresentable(gv_cImports[lv_selectedCorp][3][1])) + StringExternal("Param/Value/5BFF8F58"))) + (gf_MakeUIPresentable(gv_cSelling[lv_selectedCorp][1]) + ((StringExternal("Param/Value/DEF4BA21") + StringToText(gf_GetMonth(lv_selectedCorp))) + StringToText(""))))), PlayerGroupSingle(lp_player));
        lv_month = 1;
        for ( ; ( (autoB2FBC4DD_ai >= 0 && lv_month <= autoB2FBC4DD_ae) || (autoB2FBC4DD_ai < 0 && lv_month >= autoB2FBC4DD_ae) ) ; lv_month += autoB2FBC4DD_ai ) {
            lv_aExportIncome[2] += gv_cExportIncome[lv_selectedCorp][2][lv_month];
            lv_aExportIncome[3] += gv_cExportIncome[lv_selectedCorp][3][lv_month];
            lv_aGrantsIncome += gv_cGrantsIncome[lv_selectedCorp][lv_month];
            lv_aTotalIncome += gv_cTotalIncome[lv_selectedCorp][lv_month];
            lv_aUpkeepExpenses += gv_cUpkeepExpenses[lv_selectedCorp][lv_month];
            lv_aMilitaryExpenses += gv_cMilitaryUpkeepExpenses[lv_selectedCorp][lv_month];
            lv_aImportExpenses[2] += gv_cImportExpenses[lv_selectedCorp][2][lv_month];
            lv_aImportExpenses[3] += gv_cImportExpenses[lv_selectedCorp][3][lv_month];
            lv_aInterestExpenses += gv_cInterestExpenses[lv_selectedCorp][lv_month];
            lv_aTaxExpenses += gv_cTaxExpenses[lv_selectedCorp][lv_month];
            lv_aDividendExpenses += gv_cDividendExpenses[lv_selectedCorp][lv_month];
            lv_aTotalExpenses += gv_cTotalExpenses[lv_selectedCorp][lv_month];
            lv_aTotalRevenue += gv_cTotalRevenue[lv_selectedCorp][lv_month];
            lv_aRD += gv_cRDobsolete[lv_selectedCorp][lv_month];
            lv_aRevenue += gv_cRevenue[lv_selectedCorp][lv_month];
        }
    }
    else {
        lv_dialogitem = 1;
        for ( ; ( (auto7390CFE0_ai >= 0 && lv_dialogitem <= auto7390CFE0_ae) || (auto7390CFE0_ai < 0 && lv_dialogitem >= auto7390CFE0_ae) ) ; lv_dialogitem += auto7390CFE0_ai ) {
            DialogControlSetEnabled(gv_corporationDialogItems[lv_dialogitem], PlayerGroupSingle(lp_player), false);
        }
        libNtve_gf_SetDialogItemText(gv_corporationDialogItems[1], StringExternal("Param/Value/21A0A60D"), PlayerGroupSingle(lp_player));
        libNtve_gf_SetDialogItemTooltip(gv_corporationDialogItems[1], StringExternal("Param/Value/1B114C08"), PlayerGroupSingle(lp_player));
        if ((lv_selectedCorp == lp_player)) {
            libNtve_gf_SetDialogItemText(gv_corporationDialogItems[34], StringExternal("Param/Value/031F9E6C"), PlayerGroupSingle(lp_player));
            libNtve_gf_SetDialogItemTooltip(gv_corporationDialogItems[34], StringExternal("Param/Value/1FBF2F11"), PlayerGroupSingle(lp_player));
            DialogControlSetEnabled(gv_corporationDialogItems[34], PlayerGroupSingle(lp_player), true);
        }

    }
    auto4446EEB0_g = gv_users;
    auto4446EEB0_var = -1;
    while (true) {
        auto4446EEB0_var = PlayerGroupNextPlayer(auto4446EEB0_g, auto4446EEB0_var);
        if (auto4446EEB0_var < 0) { break; }
        lv_foreignShares += gv_stockOwned[auto4446EEB0_var][lv_selectedCorp];
    }
    lv_domesticShares = (10000 - lv_foreignShares);
    lv_foreignShares -= gv_stockOwned[lp_player][lv_selectedCorp];
    libNtve_gf_SetDialogItemText(gv_corporationDialogItems[1], StringToText(gv_corpName[lv_selectedCorp]), PlayerGroupSingle(lp_player));
    libNtve_gf_SetDialogItemColor(gv_corporationDialogItems[1], libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_selectedCorp, false)), PlayerGroupSingle(lp_player));
    libNtve_gf_SetDialogItemText(gv_corporationDialogItems[3], gf_MakeUIPresentable(lv_aExportIncome[2]), PlayerGroupSingle(lp_player));
    libNtve_gf_SetDialogItemText(gv_corporationDialogItems[4], gf_MakeUIPresentable(lv_aExportIncome[3]), PlayerGroupSingle(lp_player));
    libNtve_gf_SetDialogItemText(gv_corporationDialogItems[5], gf_MakeUIPresentable(lv_aGrantsIncome), PlayerGroupSingle(lp_player));
    libNtve_gf_SetDialogItemText(gv_corporationDialogItems[6], gf_MakeUIPresentable(lv_aTotalIncome), PlayerGroupSingle(lp_player));
    libNtve_gf_SetDialogItemText(gv_corporationDialogItems[7], gf_MakeUIPresentable((lv_aUpkeepExpenses + lv_aMilitaryExpenses)), PlayerGroupSingle(lp_player));
    libNtve_gf_SetDialogItemTooltip(gv_corporationDialogItems[7], ((StringExternal("Param/Value/A80DA7B8") + gf_MakeUIPresentable(lv_aUpkeepExpenses)) + (StringExternal("Param/Value/67DE7761") + gf_MakeUIPresentable(lv_aMilitaryExpenses))), PlayerGroupSingle(lp_player));
    libNtve_gf_SetDialogItemText(gv_corporationDialogItems[9], gf_MakeUIPresentable(lv_aImportExpenses[2]), PlayerGroupSingle(lp_player));
    libNtve_gf_SetDialogItemText(gv_corporationDialogItems[10], gf_MakeUIPresentable(lv_aImportExpenses[3]), PlayerGroupSingle(lp_player));
    libNtve_gf_SetDialogItemText(gv_corporationDialogItems[11], gf_MakeUIPresentable(lv_aInterestExpenses), PlayerGroupSingle(lp_player));
    libNtve_gf_SetDialogItemText(gv_corporationDialogItems[12], gf_MakeUIPresentable(lv_aTaxExpenses), PlayerGroupSingle(lp_player));
    libNtve_gf_SetDialogItemText(gv_corporationDialogItems[13], gf_MakeUIPresentable(lv_aDividendExpenses), PlayerGroupSingle(lp_player));
    libNtve_gf_SetDialogItemText(gv_corporationDialogItems[14], gf_MakeUIPresentable(lv_aTotalExpenses), PlayerGroupSingle(lp_player));
    libNtve_gf_SetDialogItemText(gv_corporationDialogItems[15], gf_MakeUIPresentable(lv_aRevenue), PlayerGroupSingle(lp_player));
    libNtve_gf_SetDialogItemText(gv_corporationDialogItems[17], gf_MakeUIPresentable(gv_aggregateResourcePrice[lv_selectedCorp][2]), PlayerGroupSingle(lp_player));
    libNtve_gf_SetDialogItemText(gv_corporationDialogItems[18], gf_MakeUIPresentable(gv_aggregateResourcePrice[lv_selectedCorp][3]), PlayerGroupSingle(lp_player));
    libNtve_gf_SetDialogItemText(gv_corporationDialogItems[20], gf_MakeUIPresentable(gv_cSupply[lv_selectedCorp][2]), PlayerGroupSingle(lp_player));
    libNtve_gf_SetDialogItemText(gv_corporationDialogItems[21], gf_MakeUIPresentable(gv_cSupply[lv_selectedCorp][3]), PlayerGroupSingle(lp_player));
    libNtve_gf_SetDialogItemText(gv_corporationDialogItems[23], gf_MakeUIPresentable(gv_cDemand[lv_selectedCorp][2]), PlayerGroupSingle(lp_player));
    libNtve_gf_SetDialogItemText(gv_corporationDialogItems[24], gf_MakeUIPresentable(gv_cDemand[lv_selectedCorp][3]), PlayerGroupSingle(lp_player));
    libNtve_gf_SetDialogItemTooltip(gv_corporationDialogItems[25], (StringExternal("Param/Value/DE6004D6") + gf_MakeUIPresentable(lv_foreignShares)), PlayerGroupSingle(lp_player));
    DialogControlSetSize(gv_corporationDialogItems[26], PlayerGroupSingle(lp_player), libNtve_gf_ArithmeticIntClamp(FixedToInt((IntToFixed((lv_domesticShares + gv_stockOwned[lp_player][lv_selectedCorp])) * 0.03)), 1, 300), 30);
    libNtve_gf_SetDialogItemTooltip(gv_corporationDialogItems[26], (StringExternal("Param/Value/95292857") + gf_MakeUIPresentable(lv_domesticShares)), PlayerGroupSingle(lp_player));
    DialogControlSetSize(gv_corporationDialogItems[27], PlayerGroupSingle(lp_player), libNtve_gf_ArithmeticIntClamp(FixedToInt((IntToFixed(gv_stockOwned[lp_player][lv_selectedCorp]) * 0.03)), 1, 300), 30);
    libNtve_gf_SetDialogItemTooltip(gv_corporationDialogItems[27], (StringExternal("Param/Value/9D341136") + gf_MakeUIPresentable(gv_stockOwned[lp_player][lv_selectedCorp])), PlayerGroupSingle(lp_player));
    libNtve_gf_SetDialogItemText(gv_corporationDialogItems[28], (StringExternal("Param/Value/D161DA69") + gf_MakeUIPresentable(gv_stockPrice[lv_selectedCorp])), PlayerGroupSingle(lp_player));
    libNtve_gf_SetDialogItemCurrentValue(gv_corporationDialogItems[29], IntToFixed(gv_stockTarget[lp_player][lv_selectedCorp]), PlayerGroupSingle(lp_player));
    libNtve_gf_SetDialogItemText(gv_corporationDialogItems[30], (gf_MakeUIPresentable(gv_cCredits[gv_selectedCorporation[lp_player]]) + (TextWithColor(((StringExternal("Param/Value/3FF0101D") + gf_MakeUIPresentable(gv_cDebt[gv_selectedCorporation[lp_player]])) + StringExternal("Param/Value/488C12F5")), Color(100.00, 54.12, 54.12)) + StringToText(""))), PlayerGroupSingle(lp_player));
    libNtve_gf_SetDialogItemText(gv_corporationDialogItems[31], gf_MakeUIPresentable(gv_cAssetValue[lv_selectedCorp]), PlayerGroupSingle(lp_player));
    libNtve_gf_SetDialogItemText(gv_corporationDialogItems[32], gf_MakeUIPresentable(gv_cUpgradeLevels[lv_selectedCorp]), PlayerGroupSingle(lp_player));
    if ((gv_deadCorp[lv_selectedCorp] == false)) {
        if ((gv_nationalized[lv_selectedCorp] == true)) {
            DialogControlSetEnabled(gv_corporationDialogItems[33], PlayerGroupSingle(lp_player), false);
            libNtve_gf_SetDialogItemTooltip(gv_corporationDialogItems[33], StringExternal("Param/Value/2B0C9A07"), PlayerGroupSingle(lp_player));
            libNtve_gf_SetDialogItemText(gv_corporationDialogItems[34], StringExternal("Param/Value/88AEA328"), PlayerGroupSingle(lp_player));
            libNtve_gf_SetDialogItemTooltip(gv_corporationDialogItems[34], StringExternal("Param/Value/47E59FEB"), PlayerGroupSingle(lp_player));
            if ((lv_selectedCorp == lp_player)) {
                DialogControlSetEnabled(gv_corporationDialogItems[34], PlayerGroupSingle(lp_player), true);
            }
            else {
                DialogControlSetEnabled(gv_corporationDialogItems[34], PlayerGroupSingle(lp_player), false);
            }
        }
        else {
            libNtve_gf_SetDialogItemTooltip(gv_corporationDialogItems[33], StringExternal("Param/Value/4462C621"), PlayerGroupSingle(lp_player));
            libNtve_gf_SetDialogItemText(gv_corporationDialogItems[34], StringExternal("Param/Value/2255C807"), PlayerGroupSingle(lp_player));
            libNtve_gf_SetDialogItemTooltip(gv_corporationDialogItems[34], StringExternal("Param/Value/5E28F3B2"), PlayerGroupSingle(lp_player));
            if ((gv_stockOwned[lp_player][lv_selectedCorp] > 5001)) {
                DialogControlSetEnabled(gv_corporationDialogItems[33], PlayerGroupSingle(lp_player), true);
                libNtve_gf_SetDialogItemTooltip(gv_corporationDialogItems[33], (StringExternal("Param/Value/6A636723") + TextWithColor((StringExternal("Param/Value/5D1C261A") + IntToText(((10000 - gv_stockOwned[lp_player][lv_selectedCorp]) * gv_stockPrice[lv_selectedCorp]))), Color(0.00, 100.00, 0.00))), PlayerGroupSingle(lp_player));
            }
            else {
                DialogControlSetEnabled(gv_corporationDialogItems[33], PlayerGroupSingle(lp_player), false);
                libNtve_gf_SetDialogItemTooltip(gv_corporationDialogItems[33], (StringExternal("Param/Value/856CF5BD") + TextWithColor((StringExternal("Param/Value/D7A8E5FE") + IntToText(((10000 - gv_stockOwned[lp_player][lv_selectedCorp]) * gv_stockPrice[lv_selectedCorp]))), Color(0.00, 100.00, 0.00))), PlayerGroupSingle(lp_player));
            }
            if ((lv_selectedCorp == lp_player)) {
                libNtve_gf_SetDialogItemText(gv_corporationDialogItems[33], StringExternal("Param/Value/3C3E503D"), PlayerGroupSingle(lp_player));
                DialogControlSetEnabled(gv_corporationDialogItems[34], PlayerGroupSingle(lp_player), true);
            }
            else {
                libNtve_gf_SetDialogItemText(gv_corporationDialogItems[33], StringExternal("Param/Value/30865EFD"), PlayerGroupSingle(lp_player));
                DialogControlSetEnabled(gv_corporationDialogItems[34], PlayerGroupSingle(lp_player), false);
            }
        }
    }

}

void gf_ResourceCollection () {
    // Variable Declarations
    int lv_como;
    int lv_corporation;
    int lv_resourceCollected;
    int lv_toOverlord;

    // Automatic Variable Declarations
    const int autoBE0403C9_ae = 7;
    const int autoBE0403C9_ai = 1;
    unitgroup auto9841FBF7_g;
    int auto9841FBF7_u;
    unit auto9841FBF7_var;
    unitgroup auto9F9A1D3F_g;
    int auto9F9A1D3F_u;
    unit auto9F9A1D3F_var;
    string auto3533EBED_val;

    // Variable Initialization
    lv_como = 2;

    // Implementation
    lv_corporation = 1;
    for ( ; ( (autoBE0403C9_ai >= 0 && lv_corporation <= autoBE0403C9_ae) || (autoBE0403C9_ai < 0 && lv_corporation >= autoBE0403C9_ae) ) ; lv_corporation += autoBE0403C9_ai ) {
        auto9841FBF7_g = gv_corpResources[lv_corporation];
        auto9841FBF7_u = UnitGroupCount(auto9841FBF7_g, c_unitCountAll);
        for (;; auto9841FBF7_u -= 1) {
            auto9841FBF7_var = UnitGroupUnitFromEnd(auto9841FBF7_g, auto9841FBF7_u);
            if (auto9841FBF7_var == null) { break; }
            UnitGroupRemove(gv_corpResources[lv_corporation], auto9841FBF7_var);
        }
    }
    auto9F9A1D3F_g = gv_allResources;
    auto9F9A1D3F_u = UnitGroupCount(auto9F9A1D3F_g, c_unitCountAll);
    for (;; auto9F9A1D3F_u -= 1) {
        auto9F9A1D3F_var = UnitGroupUnitFromEnd(auto9F9A1D3F_g, auto9F9A1D3F_u);
        if (auto9F9A1D3F_var == null) { break; }
        if ((UnitGetOwner(auto9F9A1D3F_var) < 8) && (UnitGetOwner(auto9F9A1D3F_var) != 0)) {
            UnitGroupAdd(gv_corpResources[FixedToInt(UnitGetCustomValue(auto9F9A1D3F_var, 10))], auto9F9A1D3F_var);
            lv_resourceCollected = 0;
            lv_como = 2;
            lv_corporation = FixedToInt(UnitGetCustomValue(auto9F9A1D3F_var, 10));
            auto3533EBED_val = UnitGetType(auto9F9A1D3F_var);
            if (auto3533EBED_val == "MineI") {
                lv_resourceCollected = 10;
            }
            else if (auto3533EBED_val == "MineII") {
                lv_resourceCollected = 20;
            }
            else if (auto3533EBED_val == "MineIII") {
                lv_resourceCollected = 30;
            }
            else if (auto3533EBED_val == "MineIV") {
                lv_resourceCollected = 40;
            }
            else if (auto3533EBED_val == "MineV") {
                lv_resourceCollected = 50;
            }
            else if (auto3533EBED_val == "BoreholeI") {
                lv_resourceCollected = 100;
            }
            else if (auto3533EBED_val == "BoreholeII") {
                lv_resourceCollected = 200;
            }
            else if (auto3533EBED_val == "BoreholeIII") {
                lv_resourceCollected = 300;
            }
            else if (auto3533EBED_val == "BoreholeIV") {
                lv_resourceCollected = 400;
            }
            else if (auto3533EBED_val == "BoreholeV") {
                lv_resourceCollected = 500;
            }
            else if (auto3533EBED_val == "Oil") {
            }
            else if (auto3533EBED_val == "OilWellI") {
            }
            else if (auto3533EBED_val == "OilWellII") {
            }
            else {
            }
            if ((RegionContainsPoint(RegionFromId(67), UnitGetPosition(auto9F9A1D3F_var)) == true)) {
                lv_resourceCollected *= 2;
            }

            lv_resourceCollected *= gv_metalIncomeModifier[UnitGetOwner(auto9F9A1D3F_var)];
            if ((UnitGetType(auto9F9A1D3F_var) == "OilWellI")) {
                lv_resourceCollected = 30;
                lv_como = 3;
                lv_resourceCollected *= gv_oilIncomeModifier[UnitGetOwner(auto9F9A1D3F_var)];
                if ((RegionContainsPoint(RegionFromId(66), UnitGetPosition(auto9F9A1D3F_var)) == true)) {
                    lv_resourceCollected *= 5;
                }

            }

            if ((UnitGetType(auto9F9A1D3F_var) == "OilWellII")) {
                lv_resourceCollected = 60;
                lv_como = 3;
                lv_resourceCollected *= gv_oilIncomeModifier[UnitGetOwner(auto9F9A1D3F_var)];
                if ((RegionContainsPoint(RegionFromId(66), UnitGetPosition(auto9F9A1D3F_var)) == true)) {
                    lv_resourceCollected *= 5;
                }

            }

            lv_resourceCollected /= 100;
            lv_resourceCollected += ((lv_resourceCollected * gv_cUpgradeLevels[FixedToInt(lv_corporation)]) / 100);
            if ((UnitGetType(auto9F9A1D3F_var) != "Metal") && (UnitGetType(auto9F9A1D3F_var) != "Oil") && (lv_toOverlord < 3)) {
                lv_toOverlord = 2;
            }

            if ((gv_nationalized[lv_corporation] == true) && (UnitGetCustomValue(auto9F9A1D3F_var, 10) > 0.0) && (UnitGetOwner(auto9F9A1D3F_var) == lv_corporation)) {
                lv_toOverlord = libNtve_gf_ArithmeticIntClamp(FixedToInt((lv_resourceCollected * gv_resourceShare[UnitGetOwner(auto9F9A1D3F_var)])), 0, 999999);
                lv_toOverlord /= 100;
                if ((gv_deadCorp[UnitGetOwner(auto9F9A1D3F_var)] == true)) {
                    gf_CreateConvoy(UnitGetPosition(auto9F9A1D3F_var), UnitGetOwner(auto9F9A1D3F_var), lv_como, (lv_toOverlord * 1), UnitGetOwner(auto9F9A1D3F_var), UnitGetOwner(auto9F9A1D3F_var));
                }
                else {
                    gf_CreateConvoy(UnitGetPosition(auto9F9A1D3F_var), lv_corporation, lv_como, (lv_toOverlord * 1), (lv_corporation + 7), UnitGetOwner(auto9F9A1D3F_var));
                }
                if ((gf_GetFuelCostsOil(UnitGetOwner(auto9F9A1D3F_var), UnitGetPosition(auto9F9A1D3F_var), gf_GetCapitolLocation(UnitGetOwner(auto9F9A1D3F_var))) > gv_oil[UnitGetOwner(auto9F9A1D3F_var)])) {
                    gv_importExpenses[UnitGetOwner(auto9F9A1D3F_var)][0][3] += gf_GetFuelCostsMonetary(UnitGetOwner(auto9F9A1D3F_var), UnitGetPosition(auto9F9A1D3F_var), gf_GetCapitolLocation(UnitGetOwner(auto9F9A1D3F_var)), true);
                }
                else {
                    gv_oilConsumption[UnitGetOwner(auto9F9A1D3F_var)][0] += gf_GetFuelCostsOil(UnitGetOwner(auto9F9A1D3F_var), gf_GetCapitolLocation(UnitGetOwner(auto9F9A1D3F_var)), UnitGetPosition(auto9F9A1D3F_var));
                }
            }
            else {
                lv_toOverlord = (lv_resourceCollected / 10);
                gf_CreateConvoy(UnitGetPosition(auto9F9A1D3F_var), UnitGetOwner(auto9F9A1D3F_var), lv_como, (lv_toOverlord * 1), (lv_corporation + 7), UnitGetOwner(auto9F9A1D3F_var));
                if ((lv_como == 3)) {
                }
                else {
                    if ((gf_GetFuelCostsOil(UnitGetOwner(auto9F9A1D3F_var), UnitGetPosition(auto9F9A1D3F_var), gf_GetCapitolLocation(UnitGetOwner(auto9F9A1D3F_var))) > gv_oil[UnitGetOwner(auto9F9A1D3F_var)])) {
                        gv_importExpenses[UnitGetOwner(auto9F9A1D3F_var)][0][3] += gf_GetFuelCostsMonetary(UnitGetOwner(auto9F9A1D3F_var), UnitGetPosition(auto9F9A1D3F_var), gf_GetCapitolLocation(UnitGetOwner(auto9F9A1D3F_var)), true);
                    }
                    else {
                        gv_oilConsumption[UnitGetOwner(auto9F9A1D3F_var)][0] += gf_GetFuelCostsOil(UnitGetOwner(auto9F9A1D3F_var), gf_GetCapitolLocation(UnitGetOwner(auto9F9A1D3F_var)), UnitGetPosition(auto9F9A1D3F_var));
                    }
                }
            }
            lv_resourceCollected -= lv_toOverlord;
            lv_resourceCollected = libNtve_gf_ArithmeticIntClamp(lv_resourceCollected, 1, 500000);
            UnitSetCustomValue(auto9F9A1D3F_var, 11, (0.0 + IntToFixed(lv_resourceCollected)));
            TextTagDestroy(libHots_gf_TextTagForUnit(auto9F9A1D3F_var, 1));
            if ((gv_deadCorp[UnitGetOwner(auto9F9A1D3F_var)] == false)) {
                UnitSetCustomValue(auto9F9A1D3F_var, 10, IntToFixed(UnitGetOwner(auto9F9A1D3F_var)));
                gf_ModifyUnitCustomValue(auto9F9A1D3F_var, 12, lv_resourceCollected);
                TextTagCreate((StringToText(gv_corpTicker[lv_corporation]) + ((StringExternal("Param/Value/3BCB83DF") + gf_MakeUIPresentable((lv_resourceCollected + lv_toOverlord))) + StringExternal("Param/Value/4CE1B6A5"))), 18, UnitGetPosition(auto9F9A1D3F_var), 3.0, true, false, PlayerGroupAll());
            }
            else {
                UnitSetCustomValue(auto9F9A1D3F_var, 11, 0.0);
                UnitSetCustomValue(auto9F9A1D3F_var, 12, 0.0);
                TextTagCreate((StringToText("") + ((StringExternal("Param/Value/B15C01DD") + gf_MakeUIPresentable((0 + lv_toOverlord))) + StringExternal("Param/Value/0A575143"))), 18, UnitGetPosition(auto9F9A1D3F_var), 3.0, true, false, PlayerGroupAll());
            }
            TextTagSetColor(TextTagLastCreated(), c_textTagColorText, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_corporation, false)));
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 60.0);
            libHots_gf_StoreTextTagForUnit(auto9F9A1D3F_var, 1, TextTagLastCreated());
        }

    }
}

void gf_MeetPlayerDemandandCorpExports () {
    // Variable Declarations
    int lv_averageMetalPrice;
    int lv_metalToPurchase;
    int lv_toTrade;
    int lv_integer;
    int lv_innerinteger;
    int lv_player;
    int lv_ram;
    int[8] lv_gDPSort;
    int lv_budget;
    int lv_como;

    // Automatic Variable Declarations
    const int auto2AA8F917_ae = 7;
    const int auto2AA8F917_ai = 1;
    const int auto02B2605B_ae = 6;
    const int auto02B2605B_ai = 1;
    const int autoEDB1742B_ae = 6;
    const int autoEDB1742B_ai = 1;
    const int autoA2EB7F48_ae = 7;
    const int autoA2EB7F48_ai = 1;

    // Variable Initialization

    // Implementation
    gv_cID3 = StringExternal("Param/Value/6169B703");
    lv_integer = 1;
    for ( ; ( (auto2AA8F917_ai >= 0 && lv_integer <= auto2AA8F917_ae) || (auto2AA8F917_ai < 0 && lv_integer >= auto2AA8F917_ae) ) ; lv_integer += auto2AA8F917_ai ) {
        lv_gDPSort[lv_integer] = lv_integer;
    }
    gv_cID3 = StringExternal("Param/Value/35DAACAE");
    lv_integer = 1;
    for ( ; ( (auto02B2605B_ai >= 0 && lv_integer <= auto02B2605B_ae) || (auto02B2605B_ai < 0 && lv_integer >= auto02B2605B_ae) ) ; lv_integer += auto02B2605B_ai ) {
        lv_innerinteger = 1;
        for ( ; ( (autoEDB1742B_ai >= 0 && lv_innerinteger <= autoEDB1742B_ae) || (autoEDB1742B_ai < 0 && lv_innerinteger >= autoEDB1742B_ae) ) ; lv_innerinteger += autoEDB1742B_ai ) {
            if ((gv_gDPPerCapita[lv_gDPSort[lv_innerinteger]] > gv_gDPPerCapita[lv_gDPSort[(lv_innerinteger + 1)]])) {
                lv_ram = lv_gDPSort[lv_innerinteger];
                lv_gDPSort[lv_innerinteger] = lv_gDPSort[(lv_innerinteger + 1)];
                lv_gDPSort[(lv_innerinteger + 1)] = lv_ram;
            }

        }
    }
    lv_integer = 1;
    for ( ; ( (autoA2EB7F48_ai >= 0 && lv_integer <= autoA2EB7F48_ae) || (autoA2EB7F48_ai < 0 && lv_integer >= autoA2EB7F48_ae) ) ; lv_integer += autoA2EB7F48_ai ) {
        lv_player = lv_gDPSort[lv_integer];
        gv_seeDetailedInfo[lv_player] = libNtve_gf_DialogItemIsChecked(gv_tradeDialogItems[46], lv_player);
        if (((PlayerGroupHasPlayer(PlayerGroupActive(), lv_player) == false) || (lv_player == 0) || (lv_player > 7))) {
            continue;
        }

        gv_cID3 = StringExternal("Param/Value/47C11910");
        if ((gf_GetCapitolLocation(lv_player) == null)) {
        }
        else {
            gv_cID3 = StringExternal("Param/Value/6496C2D0");
            if ((gv_autoExportsMode[lv_player][1] == 1) && (gv_foodIncome[lv_player][1] > gv_foodConsumption[lv_player][1]) && (gv_food[lv_player] > 10)) {
                lv_toTrade = libNtve_gf_ArithmeticIntClamp((gv_foodIncome[lv_player][1] - gv_foodConsumption[lv_player][1]), 10, gv_food[lv_player]);
                if ((lv_toTrade > 10)) {
                    gf_SellResources(lv_player, lv_toTrade, gv_autoExports[lv_player][1], 1, false, gv_seeDetailedInfo[lv_player]);
                }

            }

            gv_cID3 = StringExternal("Param/Value/FC6F7A58");
            if ((gv_autoExportsMode[lv_player][1] == 2) && (gv_food[lv_player] > 10)) {
                gf_SellResources(lv_player, (gv_food[lv_player] - 0), gv_autoExports[lv_player][1], 1, false, gv_seeDetailedInfo[lv_player]);
            }

            gv_cID3 = StringExternal("Param/Value/4B629B1F");
            if ((gv_autoExportsMode[lv_player][2] == 1) && (gv_metalIncome[lv_player][1] == 1) && (PlayerGetPropertyInt(lv_player, c_playerPropTerrazine) > 10)) {
                lv_toTrade = libNtve_gf_ArithmeticIntClamp((gv_metalIncome[lv_player][1] - gv_metalConsumption[lv_player][1]), 10, PlayerGetPropertyInt(lv_player, c_playerPropTerrazine));
                if ((lv_toTrade > 10)) {
                    gf_SellResources(lv_player, lv_toTrade, gv_autoExports[lv_player][2], 2, false, gv_seeDetailedInfo[lv_player]);
                }

            }

            gv_cID3 = StringExternal("Param/Value/7EE1180F");
            if ((gv_autoExportsMode[lv_player][2] == 2) && (PlayerGetPropertyInt(lv_player, c_playerPropTerrazine) > 10)) {
                gf_SellResources(lv_player, (PlayerGetPropertyInt(lv_player, c_playerPropTerrazine) - 0), gv_autoExports[lv_player][2], 2, false, gv_seeDetailedInfo[lv_player]);
            }

            gv_cID3 = StringExternal("Param/Value/F192A07B");
            if ((gv_autoExportsMode[lv_player][3] == 1) && (gv_oilIncome[lv_player][1] > gv_oilConsumption[lv_player][1]) && (gv_oil[lv_player] > 10)) {
                lv_toTrade = libNtve_gf_ArithmeticIntClamp((gv_oilIncome[lv_player][1] - gv_oilConsumption[lv_player][1]), 10, gv_oil[lv_player]);
                if ((lv_toTrade > 10)) {
                    gf_SellResources(lv_player, lv_toTrade, gv_autoExports[lv_player][3], 3, false, gv_seeDetailedInfo[lv_player]);
                }

            }

            gv_cID3 = StringExternal("Param/Value/159576DC");
            if ((gv_autoExportsMode[lv_player][3] == 2) && (gv_oil[lv_player] > 10)) {
                gf_SellResources(lv_player, (gv_oil[lv_player] - 0), gv_autoExports[lv_player][3], 3, false, gv_seeDetailedInfo[lv_player]);
            }

            if ((gv_canAffordImports[lv_player] == false)) {
                UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaSubtitle, StringExternal("Param/Value/7C034CB2"));
            }
            else {
                gv_cID3 = StringExternal("Param/Value/DEE718DB");
                if ((gv_metalImports[lv_player] > 0.0)) {
                    gv_cID3 = StringExternal("Param/Value/38E71A24");
                    lv_budget = ((gv_totalIncome[lv_player][2] / 100) * FixedToInt(gv_metalImports[lv_player]));
                    lv_averageMetalPrice = gf_FindMetalBuyingPriceAverage(lv_player, gf_GetCapitolLocation(lv_player));
                    if ((lv_averageMetalPrice > 0)) {
                        lv_averageMetalPrice += 1;
                        gv_cID3 = StringExternal("Param/Value/5481AB7C");
                        if (((lv_averageMetalPrice * 10) <= lv_budget)) {
                            gv_cID3 = StringExternal("Param/Value/92D9208C");
                            lv_metalToPurchase = (lv_budget / lv_averageMetalPrice);
                            if ((lv_metalToPurchase >= 10)) {
                                gv_cID3 = StringExternal("Param/Value/109F95D9");
                                gf_BuyResources(lv_player, lv_metalToPurchase, lv_averageMetalPrice, 2, true);
                            }

                        }

                    }

                }

                if ((PlayerGroupHasPlayer(gv_debugPlayers, lv_player) == true) && (gv_metalImports[lv_player] > 0.0)) {
                    UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaSubtitle, (StringExternal("Param/Value/5D0A80A8") + gv_cID3));
                }

                gv_cID3 = StringExternal("Param/Value/69EFDD8B");
                if ((gv_autoImportMode[lv_player][1] == 1)) {
                    gf_BuyResources(lv_player, libNtve_gf_ArithmeticIntClamp(gf_GetPlayerFoodDemand(lv_player), 10, 500000), gv_autoImports[lv_player][1], 1, true);
                }

                gv_cID3 = StringExternal("Param/Value/EAB775AB");
                if ((gv_autoImportMode[lv_player][1] == 2)) {
                    gf_BuyResources(lv_player, 500000, gv_autoImports[lv_player][1], 1, true);
                }

                gv_cID3 = StringExternal("Param/Value/C487A5DF");
                if ((gv_autoImportMode[lv_player][3] == 1)) {
                    gf_BuyResources(lv_player, gv_oilConsumption[lv_player][2], gv_autoImports[lv_player][3], 3, true);
                }

                gv_cID3 = StringExternal("Param/Value/966CF63A");
                if ((gv_autoImportMode[lv_player][3] == 2)) {
                    gf_BuyResources(lv_player, 500000, gv_autoImports[lv_player][3], 3, true);
                }

            }
        }
    }
}

int gf_GetPlayerFoodDemand (int lp_player) {
    // Variable Declarations
    int lv_averageFoodDemand;
    int lv_maximumFoodDemand;
    int lv_currentFoodDemand;

    // Automatic Variable Declarations
    unitgroup auto051083DB_g;
    int auto051083DB_u;
    unit auto051083DB_var;

    // Variable Initialization

    // Implementation
    auto051083DB_g = UnitGroup(null, lp_player, RegionEntireMap(), UnitFilter((1 << c_targetFilterUser1), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto051083DB_u = UnitGroupCount(auto051083DB_g, c_unitCountAll);
    for (;; auto051083DB_u -= 1) {
        auto051083DB_var = UnitGroupUnitFromEnd(auto051083DB_g, auto051083DB_u);
        if (auto051083DB_var == null) { break; }
        lv_maximumFoodDemand += FixedToInt(UnitGetPropertyFixed(auto051083DB_var, c_unitPropEnergyMax, c_unitPropCurrent));
        lv_currentFoodDemand += FixedToInt(UnitGetPropertyFixed(auto051083DB_var, c_unitPropEnergy, c_unitPropCurrent));
    }
    lv_maximumFoodDemand /= 2;
    lv_currentFoodDemand /= 2;
    lv_averageFoodDemand += lv_maximumFoodDemand;
    lv_averageFoodDemand += lv_currentFoodDemand;
    return libNtve_gf_ArithmeticIntClamp((((lv_averageFoodDemand - gv_foodIncome[lp_player][1]) - (gv_foodFromMarkert[lp_player] / 2)) + 10), 10, 1000000000);
}

void gf_MeetCivilianMetalOilDemand () {
    // Variable Declarations
    unit lv_pickedSuppliedUnit;
    int lv_inventory;
    int lv_fuelcosts;
    int lv_resourceCost;
    int lv_quantitySupplied;
    int lv_placeholder;
    int lv_playerSelected;
    int lv_resourceType;
    int lv_civilianGDP;
    bool lv_hadToFix;
    int[8] lv_orderOfCivilianByGDP;

    // Automatic Variable Declarations
    const int auto16C0C687_ae = 7;
    const int auto16C0C687_ai = 1;
    const int autoB4B19E67_n = 25;
    int autoB4B19E67_i;
    const int auto81DCD70D_ae = 2;
    const int auto81DCD70D_ai = -1;
    unitgroup auto420512EC_g;
    int auto420512EC_u;
    unit auto420512EC_var;
    int auto817AF45E_ae;
    const int auto817AF45E_ai = 1;
    const int autoC94AF84A_n = 999;
    int autoC94AF84A_i;

    // Variable Initialization

    // Implementation
    lv_civilianGDP = 1;
    for ( ; ( (auto16C0C687_ai >= 0 && lv_civilianGDP <= auto16C0C687_ae) || (auto16C0C687_ai < 0 && lv_civilianGDP >= auto16C0C687_ae) ) ; lv_civilianGDP += auto16C0C687_ai ) {
        lv_orderOfCivilianByGDP[lv_civilianGDP] = lv_civilianGDP;
    }
    for (autoB4B19E67_i = 1; autoB4B19E67_i <= autoB4B19E67_n; autoB4B19E67_i += 1) {
        lv_civilianGDP = 7;
        for ( ; ( (auto81DCD70D_ai >= 0 && lv_civilianGDP <= auto81DCD70D_ae) || (auto81DCD70D_ai < 0 && lv_civilianGDP >= auto81DCD70D_ae) ) ; lv_civilianGDP += auto81DCD70D_ai ) {
            if ((gv_gDP[lv_orderOfCivilianByGDP[lv_civilianGDP]] > gv_gDP[lv_orderOfCivilianByGDP[(lv_civilianGDP - 1)]])) {
                lv_placeholder = lv_orderOfCivilianByGDP[(lv_civilianGDP - 1)];
                lv_orderOfCivilianByGDP[(lv_civilianGDP - 1)] = lv_orderOfCivilianByGDP[lv_civilianGDP];
                lv_orderOfCivilianByGDP[(lv_civilianGDP - 0)] = lv_placeholder;
                lv_hadToFix = true;
            }

        }
        if ((lv_hadToFix == false)) {
            break;
        }

    }
    auto420512EC_g = gv_allResources;
    auto420512EC_u = UnitGroupCount(auto420512EC_g, c_unitCountAll);
    for (;; auto420512EC_u -= 1) {
        auto420512EC_var = UnitGroupUnitFromEnd(auto420512EC_g, auto420512EC_u);
        if (auto420512EC_var == null) { break; }
        if ((UnitGetOwner(auto420512EC_var) < 8) && (UnitGetOwner(auto420512EC_var) != 0) && (gf_GetUnitCustomValue(auto420512EC_var, 12) > 9)) {
            lv_resourceType = gf_GetResourceType(auto420512EC_var);
            auto817AF45E_ae = PlayerGroupCount(gv_users);
            lv_civilianGDP = 1;
            for ( ; ( (auto817AF45E_ai >= 0 && lv_civilianGDP <= auto817AF45E_ae) || (auto817AF45E_ai < 0 && lv_civilianGDP >= auto817AF45E_ae) ) ; lv_civilianGDP += auto817AF45E_ai ) {
                if ((gf_GetUnitCustomValue(auto420512EC_var, (lv_orderOfCivilianByGDP[lv_civilianGDP] + 20)) > 10)) {
                    lv_playerSelected = lv_orderOfCivilianByGDP[lv_civilianGDP];
                    lv_quantitySupplied = libNtve_gf_ArithmeticIntClamp(gf_GetUnitCustomValue(auto420512EC_var, (lv_playerSelected + 20)), 0, gf_GetUnitCustomValue(auto420512EC_var, 12));
                    lv_quantitySupplied /= 3;
                    lv_resourceCost = gf_CalculateCostWithTariffs(UnitGetOwner(auto420512EC_var), lv_playerSelected, FixedToInt(UnitGetCustomValue(auto420512EC_var, 14)));
                    lv_resourceCost /= 3;
                    lv_resourceCost *= 5;
                    if ((lv_resourceCost < 0)) {
                        lv_resourceCost *= -1;
                        if ((lv_quantitySupplied < 0)) {
                            lv_quantitySupplied *= -1;
                            if ((lv_resourceCost < 0)) {
                                lv_resourceCost = FixedToInt(UnitGetCustomValue(auto420512EC_var, 14));
                                if ((lv_resourceCost < 0)) {
                                    lv_resourceCost = FixedToInt(UnitGetCustomValue(auto420512EC_var, 14));
                                    if ((lv_resourceCost < 0)) {
                                        lv_resourceCost = gv_aggregateResourcePrice[FixedToInt(UnitGetCustomValue(auto420512EC_var, 10))][lv_resourceType];
                                    }

                                }

                            }

                        }

                    }

                    if (((UnitGetType(auto420512EC_var) == "OilWellI") || (UnitGetType(auto420512EC_var) == "OilWellII"))) {
                        gv_cExportIncome[FixedToInt(UnitGetOwner(auto420512EC_var))][3][1] += (lv_quantitySupplied * lv_resourceCost);
                        gv_cExportIncome[FixedToInt(UnitGetOwner(auto420512EC_var))][3][1] -= gf_CollectTariffs(UnitGetOwner(auto420512EC_var), lv_playerSelected, FixedToInt(UnitGetCustomValue(auto420512EC_var, 14)), lv_quantitySupplied);
                    }
                    else {
                        gv_cExportIncome[FixedToInt(UnitGetOwner(auto420512EC_var))][2][1] += (lv_quantitySupplied * lv_resourceCost);
                        gv_cExportIncome[FixedToInt(UnitGetOwner(auto420512EC_var))][2][1] -= gf_CollectTariffs(UnitGetOwner(auto420512EC_var), lv_playerSelected, FixedToInt(UnitGetCustomValue(auto420512EC_var, 14)), lv_quantitySupplied);
                    }
                    gf_ModifyUnitCustomValue(auto420512EC_var, 12, (lv_quantitySupplied * -1));
                    lv_inventory = lv_quantitySupplied;
                    for (autoC94AF84A_i = 1; autoC94AF84A_i <= autoC94AF84A_n; autoC94AF84A_i += 1) {
                        lv_pickedSuppliedUnit = gf_GetCivilianDemandingResources(lv_playerSelected);
                        UnitBehaviorAdd(lv_pickedSuppliedUnit, "WellSupplied", lv_pickedSuppliedUnit, 1);
                        if ((lv_pickedSuppliedUnit == null)) {
                            break;
                        }

                        lv_inventory -= FixedToInt(UnitGetPropertyFixed(lv_pickedSuppliedUnit, c_unitPropEnergy, c_unitPropCurrent));
                        if ((lv_inventory <= 10)) {
                            break;
                        }

                    }
                }

            }
        }

    }
}

void gf_FinalizeVariablesSetDividendsPayDividendsGetBalanceTransfercostsIfNationalizedInterestMilitaryExpense () {
    // Variable Declarations
    fixed lv_economicInterestRate;
    int lv_debtOwed;
    int lv_corp;
    fixed[8] lv_dividendPerStock;

    // Automatic Variable Declarations
    const int auto2C0CBDCF_ae = 7;
    const int auto2C0CBDCF_ai = 1;
    const int autoA6166FCF_ae = 7;
    const int autoA6166FCF_ai = 1;
    unitgroup autoCC7C8B33_g;
    int autoCC7C8B33_u;
    unit autoCC7C8B33_var;
    playergroup auto52FD6E23_g;
    int auto52FD6E23_var;
    const int autoAB9FEEC8_ae = 7;
    const int autoAB9FEEC8_ai = 1;

    // Variable Initialization

    // Implementation
    lv_economicInterestRate = (((IntToFixed((1000 - gv_economyHealth)) / 200.0) + 100.0) / 1.0);
    lv_corp = 1;
    for ( ; ( (auto2C0CBDCF_ai >= 0 && lv_corp <= auto2C0CBDCF_ae) || (auto2C0CBDCF_ai < 0 && lv_corp >= auto2C0CBDCF_ae) ) ; lv_corp += auto2C0CBDCF_ai ) {
        if ((gv_deadCorp[lv_corp] == false)) {
            gv_cTotalIncome[lv_corp][1] = (((gv_cExportIncome[lv_corp][1][1] + gv_cExportIncome[lv_corp][2][1]) + gv_cExportIncome[lv_corp][3][1]) + gv_cGrantsIncome[lv_corp][1]);
            gv_cInterestExpenses[lv_corp][1] = ((gv_cDebt[lv_corp] * FixedToInt(lv_economicInterestRate)) / 12000);
        }

    }
    lv_corp = 1;
    for ( ; ( (autoA6166FCF_ai >= 0 && lv_corp <= autoA6166FCF_ae) || (autoA6166FCF_ai < 0 && lv_corp >= autoA6166FCF_ae) ) ; lv_corp += autoA6166FCF_ai ) {
        if ((gv_deadCorp[lv_corp] == false)) {
            autoCC7C8B33_g = UnitGroup("ParamilitaryForces", lv_corp, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoCC7C8B33_u = UnitGroupCount(autoCC7C8B33_g, c_unitCountAll);
            for (;; autoCC7C8B33_u -= 1) {
                autoCC7C8B33_var = UnitGroupUnitFromEnd(autoCC7C8B33_g, autoCC7C8B33_u);
                if (autoCC7C8B33_var == null) { break; }
                if ((UnitGetCustomValue(autoCC7C8B33_var, 17) != 3.0)) {
                    gv_cMilitaryUpkeepExpenses[lv_corp][1] += (((FixedToInt(UnitGetPropertyFixed(autoCC7C8B33_var, c_unitPropLifeMax, c_unitPropCurrent)) - 400) * 1) + 100);
                }

            }
            gv_cTotalExpenses[lv_corp][1] = (((gv_cImportExpenses[lv_corp][1][1] + gv_cImportExpenses[lv_corp][2][1]) + gv_cImportExpenses[lv_corp][3][1]) + (((gv_cUpkeepExpenses[lv_corp][1] + gv_cInterestExpenses[lv_corp][1]) + gv_cTaxExpenses[lv_corp][1]) + (gv_cDividendExpenses[lv_corp][1] + (gv_cMilitaryUpkeepExpenses[lv_corp][1] + 0))));
            gv_cRevenue[lv_corp][1] = (gv_cTotalIncome[lv_corp][1] - gv_cTotalExpenses[lv_corp][1]);
            gv_cTaxExpenses[lv_corp][1] = FixedToInt((IntToFixed((gv_cRevenue[lv_corp][1] / 100)) * gv_corporateTax[lv_corp]));
            gv_cTotalExpenses[lv_corp][1] = (((gv_cImportExpenses[lv_corp][1][1] + gv_cImportExpenses[lv_corp][2][1]) + gv_cImportExpenses[lv_corp][3][1]) + (((gv_cUpkeepExpenses[lv_corp][1] + gv_cInterestExpenses[lv_corp][1]) + gv_cTaxExpenses[lv_corp][1]) + (gv_cDividendExpenses[lv_corp][1] + (gv_cMilitaryUpkeepExpenses[lv_corp][1] + 0))));
            gv_cRevenue[lv_corp][1] = (gv_cTotalIncome[lv_corp][1] - gv_cTotalExpenses[lv_corp][1]);
            if ((gv_cRevenue[lv_corp][1] > 0)) {
                gv_cDividendExpenses[lv_corp][1] = ((gv_cRevenue[lv_corp][2] + gv_cDividendExpenses[lv_corp][2]) / 4);
                lv_dividendPerStock[lv_corp] = (IntToFixed(gv_cDividendExpenses[lv_corp][1]) / 10000.0);
            }
            else {
                gv_cDividendExpenses[lv_corp][1] = 0;
                lv_dividendPerStock[lv_corp] = 0.0;
            }
            if (((gv_cTaxExpenses[lv_corp][1] < 0) || (gv_cDividendExpenses[lv_corp][1] < 0))) {
                lv_dividendPerStock[lv_corp] = 0.0;
                gv_cDividendExpenses[lv_corp][1] = 0;
                gv_cTaxExpenses[lv_corp][1] = 0;
            }

            gv_corporateIncome[lv_corp][0] += gv_cTaxExpenses[lv_corp][1];
            auto52FD6E23_g = gv_users;
            auto52FD6E23_var = -1;
            while (true) {
                auto52FD6E23_var = PlayerGroupNextPlayer(auto52FD6E23_g, auto52FD6E23_var);
                if (auto52FD6E23_var < 0) { break; }
                gv_investmentIncome[auto52FD6E23_var][0] += (FixedToInt(((IntToFixed((gv_stockOwned[auto52FD6E23_var][lv_corp] / 10)) * lv_dividendPerStock[lv_corp]) * 1.0)) * 10);
            }
            gv_cTotalExpenses[lv_corp][1] = (((gv_cImportExpenses[lv_corp][1][1] + gv_cImportExpenses[lv_corp][2][1]) + gv_cImportExpenses[lv_corp][3][1]) + (((gv_cUpkeepExpenses[lv_corp][1] + gv_cInterestExpenses[lv_corp][1]) + gv_cTaxExpenses[lv_corp][1]) + (gv_cDividendExpenses[lv_corp][1] + (gv_cMilitaryUpkeepExpenses[lv_corp][1] + 0))));
            gv_cRevenue[lv_corp][1] = (gv_cTotalIncome[lv_corp][1] - gv_cTotalExpenses[lv_corp][1]);
        }

    }
    lv_corp = 1;
    for ( ; ( (autoAB9FEEC8_ai >= 0 && lv_corp <= autoAB9FEEC8_ae) || (autoAB9FEEC8_ai < 0 && lv_corp >= autoAB9FEEC8_ae) ) ; lv_corp += autoAB9FEEC8_ai ) {
        if ((gv_deadCorp[lv_corp] == false) && ((gv_cRevenue[lv_corp][1] > 1) || ((gv_cRevenue[lv_corp][1] * -1) < gv_cCredits[lv_corp]))) {
            gv_cCredits[lv_corp] += gv_cRevenue[lv_corp][1];
        }
        else {
            lv_debtOwed = 0;
            lv_debtOwed = ((gv_cRevenue[lv_corp][1] * -1) - gv_cCredits[lv_corp]);
            gv_cCredits[lv_corp] = 0;
            if ((gf_CTakeLoan(lv_corp, lv_debtOwed) == true)) {
            }
            else {
                if ((gv_nationalized[lv_corp] == true)) {
                    if ((RandomInt(0, 100) < 10)) {
                        UIDisplayMessage(PlayerGroupSingle(lv_corp), c_messageAreaSubtitle, StringExternal("Param/Value/1D3EFDB1"));
                    }

                    gv_buildingOtherExpenses[lv_corp][1] += lv_debtOwed;
                }
                else {
                    if ((RandomInt(0, 100) < 12)) {
                        gf_CBankrupt(lv_corp);
                    }

                }
            }
        }
    }
}

void gf_CCalculateAssetValue () {
    // Variable Declarations
    int lv_corp;

    // Automatic Variable Declarations
    const int autoED6EC07A_ae = 7;
    const int autoED6EC07A_ai = 1;
    const int autoC12AD3B0_ae = 7;
    const int autoC12AD3B0_ai = 1;
    unitgroup auto23AE6FBE_g;
    int auto23AE6FBE_u;
    unit auto23AE6FBE_var;

    // Variable Initialization

    // Implementation
    lv_corp = 1;
    for ( ; ( (autoED6EC07A_ai >= 0 && lv_corp <= autoED6EC07A_ae) || (autoED6EC07A_ai < 0 && lv_corp >= autoED6EC07A_ae) ) ; lv_corp += autoED6EC07A_ai ) {
        gv_cAssetValue[lv_corp] = 0;
    }
    lv_corp = 1;
    for ( ; ( (autoC12AD3B0_ai >= 0 && lv_corp <= autoC12AD3B0_ae) || (autoC12AD3B0_ai < 0 && lv_corp >= autoC12AD3B0_ae) ) ; lv_corp += autoC12AD3B0_ai ) {
        gv_cAssetValue[lv_corp] += (gv_cSupply[lv_corp][1] * gv_aggregateResourcePrice[1][0]);
        gv_cAssetValue[lv_corp] += (gv_cSupply[lv_corp][2] * gv_aggregateResourcePrice[2][0]);
        gv_cAssetValue[lv_corp] += (gv_cSupply[lv_corp][3] * gv_aggregateResourcePrice[3][0]);
    }
    auto23AE6FBE_g = gv_allResources;
    auto23AE6FBE_u = UnitGroupCount(auto23AE6FBE_g, c_unitCountAll);
    for (;; auto23AE6FBE_u -= 1) {
        auto23AE6FBE_var = UnitGroupUnitFromEnd(auto23AE6FBE_g, auto23AE6FBE_u);
        if (auto23AE6FBE_var == null) { break; }
        gv_cAssetValue[FixedToInt(UnitGetCustomValue(auto23AE6FBE_var, 10))] += (FixedToInt(gf_ValueMineInThousands(auto23AE6FBE_var, FixedToInt(UnitGetCustomValue(auto23AE6FBE_var, 10)))) * 1000);
    }
}

void gf_CSetStockPricesPlayerStockTargets () {
    // Variable Declarations
    int lv_rollingBoi;
    int lv_assetValue;
    int lv_currentIncomeValue;
    int lv_incomeGrowthValue;
    fixed lv_stockPricePullTarget;
    int lv_corp;
    fixed lv_economicHealthSituation;
    fixed lv_economicPolicySituation;

    // Automatic Variable Declarations
    playergroup auto59D425A6_g;
    int auto59D425A6_var;
    const int autoE6CBFC2D_ae = 7;
    const int autoE6CBFC2D_ai = 1;
    const int auto0F56071D_ae = 12;
    const int auto0F56071D_ai = 1;

    // Variable Initialization

    // Implementation
    auto59D425A6_g = gv_users;
    auto59D425A6_var = -1;
    while (true) {
        auto59D425A6_var = PlayerGroupNextPlayer(auto59D425A6_g, auto59D425A6_var);
        if (auto59D425A6_var < 0) { break; }
        gv_stockTarget[auto59D425A6_var][gv_selectedCorporation[auto59D425A6_var]] = FixedToInt(libNtve_gf_DialogItemValue(gv_corporationDialogItems[29], auto59D425A6_var));
    }
    lv_corp = 1;
    for ( ; ( (autoE6CBFC2D_ai >= 0 && lv_corp <= autoE6CBFC2D_ae) || (autoE6CBFC2D_ai < 0 && lv_corp >= autoE6CBFC2D_ae) ) ; lv_corp += autoE6CBFC2D_ai ) {
        if ((gv_deadCorp[lv_corp] == true)) {
            gv_stockPrice[lv_corp] = 0;
        }
        else {
            lv_assetValue = ((gv_cAssetValue[lv_corp] / 7000) - ((gv_cDebt[lv_corp] + 1) / 10));
            lv_assetValue += (gv_cCredits[lv_corp] / 100);
            lv_currentIncomeValue = 0;
            lv_incomeGrowthValue = 0;
            lv_rollingBoi = 2;
            for ( ; ( (auto0F56071D_ai >= 0 && lv_rollingBoi <= auto0F56071D_ae) || (auto0F56071D_ai < 0 && lv_rollingBoi >= auto0F56071D_ae) ) ; lv_rollingBoi += auto0F56071D_ai ) {
                lv_currentIncomeValue += (gv_cRevenue[lv_corp][lv_rollingBoi] * (100 / (lv_rollingBoi * 4)));
                if ((lv_rollingBoi < 6)) {
                    lv_incomeGrowthValue += (gv_cRevenue[lv_corp][lv_rollingBoi] - gv_cRevenue[lv_corp][(14 - lv_rollingBoi)]);
                }

            }
            lv_currentIncomeValue /= 100;
            lv_currentIncomeValue += 1;
            lv_incomeGrowthValue = ((lv_incomeGrowthValue * 10) / (lv_currentIncomeValue + 1));
            lv_incomeGrowthValue += (gv_cUpgradeLevels[lv_corp] * 2);
            lv_economicHealthSituation = (((gv_economyHealth / 500.0) + 10.0) / 10.0);
            lv_economicPolicySituation = 1.0;
            lv_incomeGrowthValue /= 3;
            lv_assetValue /= 4;
            lv_currentIncomeValue /= 8;
            lv_assetValue = libNtve_gf_ArithmeticIntClamp(lv_assetValue, 1, 1000000);
            lv_incomeGrowthValue = libNtve_gf_ArithmeticIntClamp(lv_incomeGrowthValue, 1, 500000);
            lv_currentIncomeValue = libNtve_gf_ArithmeticIntClamp(lv_currentIncomeValue, 1, 500000);
            lv_stockPricePullTarget = ((Pow(IntToFixed(lv_assetValue), 0.5) * (Pow(IntToFixed(lv_incomeGrowthValue), 0.15) * Pow(IntToFixed(lv_currentIncomeValue), 0.35))) + 0.0);
            lv_stockPricePullTarget *= lv_economicHealthSituation;
            lv_stockPricePullTarget *= lv_economicPolicySituation;
            lv_stockPricePullTarget *= RandomFixed(0.97, 1.03);
            if ((gv_stockPrice[lv_corp] < 50)) {
                gv_stockPrice[lv_corp] = FixedToInt(((IntToFixed((gv_stockPrice[lv_corp] * 5)) + lv_stockPricePullTarget) / 6.0));
            }
            else {
                gv_stockPrice[lv_corp] = FixedToInt(((IntToFixed((gv_stockPrice[lv_corp] * 11)) + lv_stockPricePullTarget) / 12.0));
            }
            gv_stockPrice[lv_corp] = libNtve_gf_ArithmeticIntClamp(gv_stockPrice[lv_corp], 5, 99999);
            if ((gv_nationalized[lv_corp] == true)) {
                gv_stockPrice[lv_corp] /= 3;
            }

        }
    }
}

void gf_PushDownCVariables (bool lp_start) {
    // Variable Declarations
    int lv_rNA;
    int lv_corp;
    int lv_como;
    int lv_player;

    // Automatic Variable Declarations
    const int auto9F8CCD6A_ae = 7;
    const int auto9F8CCD6A_ai = 1;
    const int autoD423EE3A_ae = 7;
    const int autoD423EE3A_ai = 1;
    const int autoB775C9B3_ae = 3;
    const int autoB775C9B3_ai = 1;
    const int auto877174CD_ae = 15;
    const int auto877174CD_ai = 1;
    const int autoE54FAB9B_ae = 1;
    const int autoE54FAB9B_ai = -1;
    const int auto88C3E750_ae = 15;
    const int auto88C3E750_ai = 1;

    // Variable Initialization

    // Implementation
    lv_player = 1;
    for ( ; ( (auto9F8CCD6A_ai >= 0 && lv_player <= auto9F8CCD6A_ae) || (auto9F8CCD6A_ai < 0 && lv_player >= auto9F8CCD6A_ae) ) ; lv_player += auto9F8CCD6A_ai ) {
        lv_corp = 1;
        for ( ; ( (autoD423EE3A_ai >= 0 && lv_corp <= autoD423EE3A_ae) || (autoD423EE3A_ai < 0 && lv_corp >= autoD423EE3A_ae) ) ; lv_corp += autoD423EE3A_ai ) {
            if ((gv_stockOwned[lv_player][lv_corp] < 0)) {
                gv_stockOwned[lv_player][lv_corp] = 0;
            }

        }
    }
    lv_como = 1;
    for ( ; ( (autoB775C9B3_ai >= 0 && lv_como <= autoB775C9B3_ae) || (autoB775C9B3_ai < 0 && lv_como >= autoB775C9B3_ae) ) ; lv_como += autoB775C9B3_ai ) {
        if ((gv_cDemand[0][lv_como] < 0)) {
            gv_cDemand[0][lv_como] *= -1;
        }

        if ((gv_cDemand[1][lv_como] < 0)) {
            gv_cDemand[1][lv_como] *= -1;
        }

    }
    if ((lp_start == true)) {
        lv_rNA = 12;
        for ( ; ( (autoE54FAB9B_ai >= 0 && lv_rNA <= autoE54FAB9B_ae) || (autoE54FAB9B_ai < 0 && lv_rNA >= autoE54FAB9B_ae) ) ; lv_rNA += autoE54FAB9B_ai ) {
            lv_corp = 0;
            for ( ; ( (auto88C3E750_ai >= 0 && lv_corp <= auto88C3E750_ae) || (auto88C3E750_ai < 0 && lv_corp >= auto88C3E750_ae) ) ; lv_corp += auto88C3E750_ai ) {
                gv_cExportIncome[lv_corp][1][lv_rNA] = gv_cExportIncome[lv_corp][1][(lv_rNA - 1)];
                gv_cExportIncome[lv_corp][2][lv_rNA] = gv_cExportIncome[lv_corp][2][(lv_rNA - 1)];
                gv_cExportIncome[lv_corp][3][lv_rNA] = gv_cExportIncome[lv_corp][3][(lv_rNA - 1)];
                gv_cGrantsIncome[lv_corp][lv_rNA] = gv_cGrantsIncome[lv_corp][(lv_rNA - 1)];
                gv_cTotalIncome[lv_corp][lv_rNA] = gv_cTotalIncome[lv_corp][(lv_rNA - 1)];
                gv_cUpkeepExpenses[lv_corp][lv_rNA] = gv_cUpkeepExpenses[lv_corp][(lv_rNA - 1)];
                gv_cMilitaryUpkeepExpenses[lv_corp][lv_rNA] = gv_cMilitaryUpkeepExpenses[lv_corp][(lv_rNA - 1)];
                gv_cImportExpenses[lv_corp][1][lv_rNA] = gv_cImportExpenses[lv_corp][1][(lv_rNA - 1)];
                gv_cImportExpenses[lv_corp][2][lv_rNA] = gv_cImportExpenses[lv_corp][2][(lv_rNA - 1)];
                gv_cImportExpenses[lv_corp][3][lv_rNA] = gv_cImportExpenses[lv_corp][3][(lv_rNA - 1)];
                gv_cInterestExpenses[lv_corp][lv_rNA] = gv_cInterestExpenses[lv_corp][(lv_rNA - 1)];
                gv_cTaxExpenses[lv_corp][lv_rNA] = gv_cTaxExpenses[lv_corp][(lv_rNA - 1)];
                gv_cDividendExpenses[lv_corp][lv_rNA] = gv_cDividendExpenses[lv_corp][(lv_rNA - 1)];
                gv_cTotalExpenses[lv_corp][lv_rNA] = gv_cTotalExpenses[lv_corp][(lv_rNA - 1)];
                gv_cTotalRevenue[lv_corp][lv_rNA] = gv_cTotalRevenue[lv_corp][(lv_rNA - 1)];
                gv_cRDobsolete[lv_corp][lv_rNA] = gv_cRDobsolete[lv_corp][(lv_rNA - 1)];
                gv_cRevenue[lv_corp][lv_rNA] = gv_cRevenue[lv_corp][(lv_rNA - 1)];
            }
        }
    }
    else {
        lv_rNA = 0;
        lv_corp = 0;
        for ( ; ( (auto877174CD_ai >= 0 && lv_corp <= auto877174CD_ae) || (auto877174CD_ai < 0 && lv_corp >= auto877174CD_ae) ) ; lv_corp += auto877174CD_ai ) {
            gv_cExportIncome[lv_corp][1][lv_rNA] = 0;
            gv_cExportIncome[lv_corp][2][lv_rNA] = 0;
            gv_cExportIncome[lv_corp][3][lv_rNA] = 0;
            gv_cGrantsIncome[lv_corp][lv_rNA] = 0;
            gv_cTotalIncome[lv_corp][lv_rNA] = 0;
            gv_cUpkeepExpenses[lv_corp][lv_rNA] = 0;
            gv_cMilitaryUpkeepExpenses[lv_corp][lv_rNA] = 0;
            gv_cImportExpenses[lv_corp][1][lv_rNA] = 0;
            gv_cImportExpenses[lv_corp][2][lv_rNA] = 0;
            gv_cImportExpenses[lv_corp][3][lv_rNA] = 0;
            gv_cInterestExpenses[lv_corp][lv_rNA] = 0;
            gv_cTaxExpenses[lv_corp][lv_rNA] = 0;
            gv_cDividendExpenses[lv_corp][lv_rNA] = 0;
            gv_cTotalExpenses[lv_corp][lv_rNA] = 0;
            gv_cTotalRevenue[lv_corp][lv_rNA] = 0;
            gv_cRDobsolete[lv_corp][lv_rNA] = 0;
            gv_cRevenue[lv_corp][lv_rNA] = 0;
        }
    }
}

void gf_GetMeanGDPofDemanders (unit lp_unit) {
    // Variable Declarations
    int lv_player;
    int[8] lv_demandPerCivilian;
    int[8] lv_normalizedDemand;
    int lv_totalDemand;
    fixed lv_meanGDP;

    // Automatic Variable Declarations
    const int auto48E410BD_ae = 7;
    const int auto48E410BD_ai = 1;
    const int auto4192B08F_ae = 7;
    const int auto4192B08F_ai = 1;
    const int autoD98BABCF_ae = 7;
    const int autoD98BABCF_ai = 1;

    // Variable Initialization

    // Implementation
    lv_player = 1;
    for ( ; ( (auto48E410BD_ai >= 0 && lv_player <= auto48E410BD_ae) || (auto48E410BD_ai < 0 && lv_player >= auto48E410BD_ae) ) ; lv_player += auto48E410BD_ai ) {
        lv_demandPerCivilian[lv_player] = FixedToInt(UnitGetCustomValue(lp_unit, (lv_player + 20)));
        lv_demandPerCivilian[lv_player] *= 100;
        lv_totalDemand += FixedToInt(UnitGetCustomValue(lp_unit, (lv_player + 20)));
    }
    lv_totalDemand += 1;
    lv_player = 1;
    for ( ; ( (auto4192B08F_ai >= 0 && lv_player <= auto4192B08F_ae) || (auto4192B08F_ai < 0 && lv_player >= auto4192B08F_ae) ) ; lv_player += auto4192B08F_ai ) {
        lv_normalizedDemand[lv_player] = (lv_demandPerCivilian[lv_player] / lv_totalDemand);
    }
    lv_player = 1;
    for ( ; ( (autoD98BABCF_ai >= 0 && lv_player <= autoD98BABCF_ae) || (autoD98BABCF_ai < 0 && lv_player >= autoD98BABCF_ae) ) ; lv_player += autoD98BABCF_ai ) {
        lv_meanGDP += (IntToFixed(lv_normalizedDemand[lv_player]) * gv_gDPPerCapita[lv_player]);
    }
    lv_meanGDP /= 100.0;
    UnitSetCustomValue(lp_unit, 28, lv_meanGDP);
}

void gf_AggregatePrice () {
    // Variable Declarations
    int lv_mid;
    int lv_corp;
    int lv_como;

    // Automatic Variable Declarations
    const int auto01DC3FF2_ae = 7;
    const int auto01DC3FF2_ai = 1;
    const int auto8223DD95_ae = 3;
    const int auto8223DD95_ai = 1;
    const int auto2079A4AE_ae = 3;
    const int auto2079A4AE_ai = 1;

    // Variable Initialization

    // Implementation
    lv_corp = 1;
    for ( ; ( (auto01DC3FF2_ai >= 0 && lv_corp <= auto01DC3FF2_ae) || (auto01DC3FF2_ai < 0 && lv_corp >= auto01DC3FF2_ae) ) ; lv_corp += auto01DC3FF2_ai ) {
        lv_como = 1;
        for ( ; ( (auto8223DD95_ai >= 0 && lv_como <= auto8223DD95_ae) || (auto8223DD95_ai < 0 && lv_como >= auto8223DD95_ae) ) ; lv_como += auto8223DD95_ai ) {
            if ((gv_cDemand[0][lv_como] < 0)) {
                gv_cDemand[0][lv_como] *= -1;
            }

            if ((gv_cDemand[1][lv_como] < 0)) {
                gv_cDemand[1][lv_como] *= -1;
            }

        }
        lv_como = 1;
        for ( ; ( (auto2079A4AE_ai >= 0 && lv_como <= auto2079A4AE_ae) || (auto2079A4AE_ai < 0 && lv_como >= auto2079A4AE_ae) ) ; lv_como += auto2079A4AE_ai ) {
            lv_mid = FixedToInt(gf_GetEquilibriumPrice(gv_cDemand[lv_corp][lv_como], gv_cSupply[lv_corp][lv_como], gv_gDPPerCapita[lv_corp], lv_como));
            gv_aggregateResourcePrice[lv_corp][lv_como] = ((lv_mid + gv_aggregateResourcePrice[lv_corp][lv_como]) / 2);
            if ((gv_cSupply[lv_corp][lv_como] > 0) && (lv_mid == 0)) {
                gv_aggregateResourcePrice[lv_corp][lv_como] = 1;
            }

        }
    }
}

void gf_CreateCorporation (int lp_player) {
    // Variable Declarations
    bool lv_resourceNounUsed;
    string lv_namePart1;
    string lv_namePart2;
    string lv_namePart3;
    string lv_ticker;
    int lv_random;
    unit lv_startingPoint;

    // Automatic Variable Declarations
    const int autoC9EAAC11_n = 10;
    int autoC9EAAC11_i;
    unitgroup auto2993778B_g;
    int auto2993778B_u;
    unit auto2993778B_var;

    // Variable Initialization
    lv_namePart1 = "";
    lv_namePart2 = "";
    lv_namePart3 = "";
    lv_ticker = "";

    // Implementation
    gf_KillCorp(lp_player);
    lv_random = RandomInt(1, 3);
    if ((lv_random == 1)) {
        lv_namePart1 = gf_CorporationNoun(lp_player);
    }

    if ((!(((TechTreeUpgradeCount(lp_player, "DirectDemocracy", c_techCountCompleteOnly) == 1) || (TechTreeUpgradeCount(lp_player, "FauxDemocracy", c_techCountCompleteOnly) == 1) || (TechTreeUpgradeCount(lp_player, "NeoFederation", c_techCountCompleteOnly) == 1) || (TechTreeUpgradeCount(lp_player, "Corporatocracy", c_techCountCompleteOnly) == 1)))) && (lv_random == 2)) {
        lv_namePart1 = gf_GetCultureGroupNames(lp_player);
    }

    if ((lv_random == 3)) {
        lv_namePart1 = gf_ResourceNoun(lp_player);
        lv_resourceNounUsed = true;
    }

    lv_random = RandomInt(1, 3);
    if ((lv_random == 1)) {
        lv_namePart2 = gf_CorporationNoun(lp_player);
    }

    if ((!(((TechTreeUpgradeCount(lp_player, "DirectDemocracy", c_techCountCompleteOnly) == 1) || (TechTreeUpgradeCount(lp_player, "FauxDemocracy", c_techCountCompleteOnly) == 1) || (TechTreeUpgradeCount(lp_player, "NeoFederation", c_techCountCompleteOnly) == 1) || (TechTreeUpgradeCount(lp_player, "Corporatocracy", c_techCountCompleteOnly) == 1)))) && (lv_random == 2)) {
        lv_namePart2 = gf_GetCultureGroupNames(lp_player);
    }

    if ((lv_random == 3) && (lv_resourceNounUsed == true)) {
        lv_namePart2 = gf_ResourceNoun(lp_player);
        lv_resourceNounUsed = true;
    }

    lv_random = RandomInt(1, 3);
    if ((lv_random == 1)) {
        lv_namePart3 = gf_CorporationNoun(lp_player);
    }

    if ((!(((TechTreeUpgradeCount(lp_player, "DirectDemocracy", c_techCountCompleteOnly) == 1) || (TechTreeUpgradeCount(lp_player, "FauxDemocracy", c_techCountCompleteOnly) == 1) || (TechTreeUpgradeCount(lp_player, "NeoFederation", c_techCountCompleteOnly) == 1) || (TechTreeUpgradeCount(lp_player, "Corporatocracy", c_techCountCompleteOnly) == 1)))) && (lv_random == 2)) {
        lv_namePart3 = gf_GetCultureGroupNames(lp_player);
    }

    if ((lv_random == 3) && (lv_resourceNounUsed == true)) {
        lv_namePart3 = gf_ResourceNoun(lp_player);
    }

    if ((lv_namePart1 == lv_namePart2)) {
        lv_namePart2 = "";
    }

    if ((lv_namePart1 == lv_namePart3)) {
        lv_namePart3 = "";
    }

    if ((lv_namePart2 == lv_namePart3)) {
        lv_namePart2 = "";
    }

    if ((lv_namePart2 == "")) {
        if (((TechTreeUpgradeCount(lp_player, "DirectDemocracy", c_techCountCompleteOnly) == 1) || (TechTreeUpgradeCount(lp_player, "FauxDemocracy", c_techCountCompleteOnly) == 1) || (TechTreeUpgradeCount(lp_player, "NeoFederation", c_techCountCompleteOnly) == 1) || (TechTreeUpgradeCount(lp_player, "Corporatocracy", c_techCountCompleteOnly) == 1))) {
            lv_namePart2 = gf_CorporationNoun(lp_player);
        }
        else {
            lv_namePart2 = lv_namePart3;
            lv_namePart3 = "";
        }
    }

    gv_deadCorp[lp_player] = false;
    lv_namePart1 = (lv_namePart1 + " ");
    lv_namePart2 = (lv_namePart2 + " ");
    lv_ticker = ((StringSub(lv_namePart1, 1, 1) + StringSub(lv_namePart2, 1, 1)) + StringSub(lv_namePart3, 1, 1));
    gv_corpName[lp_player] = ((lv_namePart1 + lv_namePart2) + lv_namePart3);
    while ((StringSub(gv_corpName[lp_player], (StringLength(gv_corpName[lp_player]) - 1), StringLength(gv_corpName[lp_player])) == " ")) {
        gv_corpName[lp_player] = StringSub(gv_corpName[lp_player], 1, (StringLength(gv_corpName[lp_player]) - 1));
    }
    gv_corpTicker[lp_player] = lv_ticker;
    if ((gv_year < 2310)) {
        gv_cCredits[lp_player] = 40000;
    }
    else {
        gv_cCredits[lp_player] = ((gv_year - 2250) * 750);
    }
    gv_cDebt[lp_player] = 0;
    for (autoC9EAAC11_i = 1; autoC9EAAC11_i <= autoC9EAAC11_n; autoC9EAAC11_i += 1) {
        lv_startingPoint = UnitGroupClosestToPoint(gv_allResources, UnitGetPosition(UnitGroupRandomUnit(UnitGroup("Capital", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive)));
        if ((UnitGetCustomValue(lv_startingPoint, 10) > 0.0)) {
            UnitGroupRemove(gv_allResources, lv_startingPoint);
            lv_startingPoint = null;
        }
        else {
            break;
        }
    }
    auto2993778B_g = UnitGroup(null, lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto2993778B_u = UnitGroupCount(auto2993778B_g, c_unitCountAll);
    for (;; auto2993778B_u -= 1) {
        auto2993778B_var = UnitGroupUnitFromEnd(auto2993778B_g, auto2993778B_u);
        if (auto2993778B_var == null) { break; }
        if ((gf_GetResourceType(auto2993778B_var) < 4) && (gf_GetResourceType(auto2993778B_var) != 0) && ((gv_deadCorp[FixedToInt(UnitGetCustomValue(auto2993778B_var, 10))] == true) || (UnitGetCustomValue(auto2993778B_var, 10) == 0.0))) {
            UnitSetCustomValue(auto2993778B_var, 10, IntToFixed(lp_player));
        }

    }
    UnitSetOwner(lv_startingPoint, lp_player, true);
    UnitSetCustomValue(lv_startingPoint, 10, IntToFixed(lp_player));
}

void gf_HeadquartersFortheHeadquarterless () {
    // Variable Declarations
    point lv_possibleLocation;

    // Automatic Variable Declarations
    playergroup auto1B7DBFA9_g;
    int auto1B7DBFA9_var;

    // Variable Initialization

    // Implementation
    auto1B7DBFA9_g = gv_users;
    auto1B7DBFA9_var = -1;
    while (true) {
        auto1B7DBFA9_var = PlayerGroupNextPlayer(auto1B7DBFA9_g, auto1B7DBFA9_var);
        if (auto1B7DBFA9_var < 0) { break; }
        if ((StringLength(gv_corpName[auto1B7DBFA9_var]) > 0) && (gv_deadCorp[auto1B7DBFA9_var] == false)) {
            if ((UnitGroupCount(UnitGroup("CorporateHeadquarters", auto1B7DBFA9_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (RandomInt(0, 100) < 50) && (UnitGroupCount(UnitGroup(null, auto1B7DBFA9_var, RegionEntireMap(), UnitFilter((1 << c_targetFilterPsionic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
                lv_possibleLocation = UnitGetPosition(UnitGroupRandomUnit(UnitGroup(null, auto1B7DBFA9_var, RegionEntireMap(), UnitFilter((1 << c_targetFilterPsionic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive));
                if ((lv_possibleLocation != null)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "CorporateHeadquarters", 0, auto1B7DBFA9_var, lv_possibleLocation);
                    if ((gf_GetCountyID(UnitLastCreated()) > 0)) {
                        UnitSetCustomValue(UnitLastCreated(), 10, IntToFixed(auto1B7DBFA9_var));
                        gf_SetUnitCustomValue(UnitLastCreated(), 12, 100);
                        gv_cCredits[auto1B7DBFA9_var] /= 2;
                        MinimapPing(PlayerGroupAll(), lv_possibleLocation, 2.0, Color(100.00, 100.00, 100.00));
                        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, ((StringToText("") + TextWithColor(StringToText(gv_corpName[auto1B7DBFA9_var]), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(auto1B7DBFA9_var, false)))) + (StringExternal("Param/Value/D1D77167") + (StringToText(gf_GetCountyName(gf_GetCountyID(UnitLastCreated()))) + StringExternal("Param/Value/46D92158")))));
                    }

                }

            }

        }

    }
}

void gf_IntraCorporationTrading (int lp_corp) {
    int init_i;

    // Variable Declarations
    unitgroup[4] lv_availableResources;

    // Automatic Variable Declarations
    unitgroup auto253D7208_g;
    int auto253D7208_u;
    unit auto253D7208_var;

    // Variable Initialization
    for (init_i = 0; init_i <= 3; init_i += 1) {
        lv_availableResources[init_i] = UnitGroupEmpty();
    }

    // Implementation
    auto253D7208_g = gv_allResources;
    auto253D7208_u = UnitGroupCount(auto253D7208_g, c_unitCountAll);
    for (;; auto253D7208_u -= 1) {
        auto253D7208_var = UnitGroupUnitFromEnd(auto253D7208_g, auto253D7208_u);
        if (auto253D7208_var == null) { break; }
        if ((UnitGetCustomValue(auto253D7208_var, 10) == lp_corp) && (UnitGetType(auto253D7208_var) != "Metal") && (UnitGetType(auto253D7208_var) != "Oil")) {
            UnitGroupAdd(lv_availableResources[gf_GetResourceType(auto253D7208_var)], auto253D7208_var);
        }

    }
    if ((UnitGroupCount(lv_availableResources[2], c_unitCountAlive) > 1)) {
        gf_IntraCorporationTradingpt2(lv_availableResources[2]);
    }

    if ((UnitGroupCount(lv_availableResources[3], c_unitCountAlive) > 1)) {
        gf_IntraCorporationTradingpt2(lv_availableResources[3]);
    }

}

void gf_IntraCorporationTradingpt2 (unitgroup lp_resources) {
    // Variable Declarations
    unit lv_recivingUnit;
    int lv_quantityToSend;
    int lv_unitCount;
    int lv_surplus;
    unitgroup lv_surplusResources;
    unitgroup lv_demandingResources;
    fixed[100] lv_supplyDemandRatio;
    fixed[100] lv_modifiedRatio;
    fixed[100] lv_normalizedRatio;
    fixed[100] lv_importsDemanded;
    fixed lv_totalModifiedRatio;
    fixed[100] lv_finalModifiedRatio;

    // Automatic Variable Declarations
    unitgroup auto806EA8AB_g;
    int auto806EA8AB_u;
    unit auto806EA8AB_var;
    unitgroup auto2BB27F19_g;
    int auto2BB27F19_u;
    unit auto2BB27F19_var;
    unitgroup auto58BDF6A1_g;
    int auto58BDF6A1_u;
    unitgroup auto72984DB6_g;
    int auto72984DB6_u;
    unit auto72984DB6_var;

    // Variable Initialization
    lv_surplusResources = UnitGroupEmpty();
    lv_demandingResources = UnitGroupEmpty();

    // Implementation
    auto806EA8AB_g = lp_resources;
    auto806EA8AB_u = UnitGroupCount(auto806EA8AB_g, c_unitCountAll);
    for (;; auto806EA8AB_u -= 1) {
        auto806EA8AB_var = UnitGroupUnitFromEnd(auto806EA8AB_g, auto806EA8AB_u);
        if (auto806EA8AB_var == null) { break; }
        lv_unitCount += 1;
        lv_supplyDemandRatio[lv_unitCount] = (gf_GetUnitCustomValue(auto806EA8AB_var, 12) / libNtve_gf_ArithmeticIntClamp(gf_GetUnitCustomValue(auto806EA8AB_var, 13), 1, 1000000000));
        if ((lv_supplyDemandRatio[lv_unitCount] > 1.0)) {
            lv_surplus += gf_GetUnitCustomValue(auto806EA8AB_var, 12);
            UnitGroupAdd(lv_surplusResources, auto806EA8AB_var);
        }
        else {
            lv_supplyDemandRatio[lv_unitCount] += 0.001;
            lv_modifiedRatio[lv_unitCount] = libNtve_gf_ArithmeticRealClamp(libNtve_gf_Log((1.0 / lv_supplyDemandRatio[lv_unitCount]), 10.0), 1.0, 250000.0);
            lv_totalModifiedRatio += lv_modifiedRatio[lv_unitCount];
            UnitSetCustomValue(auto806EA8AB_var, 41, lv_modifiedRatio[lv_unitCount]);
            UnitGroupAdd(lv_demandingResources, auto806EA8AB_var);
        }
    }
    if (((UnitGroupCount(lv_surplusResources, c_unitCountAlive) == 0) || (UnitGroupCount(lv_demandingResources, c_unitCountAlive) == 0))) {

    }

    lv_unitCount = 0;
    lv_totalModifiedRatio += 1.0;
    auto2BB27F19_g = lv_demandingResources;
    auto2BB27F19_u = UnitGroupCount(auto2BB27F19_g, c_unitCountAll);
    for (;; auto2BB27F19_u -= 1) {
        auto2BB27F19_var = UnitGroupUnitFromEnd(auto2BB27F19_g, auto2BB27F19_u);
        if (auto2BB27F19_var == null) { break; }
        lv_unitCount += 1;
        lv_finalModifiedRatio[lv_unitCount] = UnitGetCustomValue(auto2BB27F19_var, 41);
        lv_normalizedRatio[lv_unitCount] = ((lv_finalModifiedRatio[lv_unitCount] * 100.0) / lv_totalModifiedRatio);
        lv_importsDemanded[lv_unitCount] = ((lv_finalModifiedRatio[lv_unitCount] / 10.0) * IntToFixed(lv_surplus));
    }
    lv_unitCount = 0;
    auto58BDF6A1_g = lv_demandingResources;
    auto58BDF6A1_u = UnitGroupCount(auto58BDF6A1_g, c_unitCountAll);
    for (;; auto58BDF6A1_u -= 1) {
        lv_recivingUnit = UnitGroupUnitFromEnd(auto58BDF6A1_g, auto58BDF6A1_u);
        if (lv_recivingUnit == null) { break; }
        lv_unitCount += 1;
        auto72984DB6_g = lv_surplusResources;
        auto72984DB6_u = UnitGroupCount(auto72984DB6_g, c_unitCountAll);
        for (;; auto72984DB6_u -= 1) {
            auto72984DB6_var = UnitGroupUnitFromEnd(auto72984DB6_g, auto72984DB6_u);
            if (auto72984DB6_var == null) { break; }
            lv_quantityToSend = libNtve_gf_ArithmeticIntClamp(gf_GetUnitCustomValue(auto72984DB6_var, 12), 0, FixedToInt(lv_importsDemanded[lv_unitCount]));
            gf_ModifyUnitCustomValue(auto72984DB6_var, 12, (lv_quantityToSend * -1));
            lv_importsDemanded[lv_unitCount] -= IntToFixed(lv_quantityToSend);
            if ((lv_quantityToSend > 1)) {
                gf_IntraCorpConvoy(UnitGetPosition(auto72984DB6_var), UnitGetPosition(lv_recivingUnit), UnitGetOwner(auto72984DB6_var), gf_GetResourceType(auto72984DB6_var), lv_quantityToSend);
            }

            if ((lv_importsDemanded[lv_unitCount] < 1)) {
                break;
            }

        }
    }
}

void gf_InterCorporationTrading (int lp_corp) {
    // Variable Declarations
    int lv_totalPrice;
    int lv_basePrice;
    int lv_buyingCorp;
    int lv_bestResourcePrice;
    int lv_bestResourceQuantity;
    int lv_bestBuyingCorp;
    int lv_resourcePrice;
    int lv_resourceQuantity;

    // Automatic Variable Declarations
    unitgroup auto89B8B263_g;
    int auto89B8B263_u;
    unit auto89B8B263_var;
    const int autoA9ECCB39_n = 99;
    int autoA9ECCB39_i;
    const int autoE26F0D95_ae = 7;
    const int autoE26F0D95_ai = 1;

    // Variable Initialization

    // Implementation
    auto89B8B263_g = gv_corpResources[lp_corp];
    auto89B8B263_u = UnitGroupCount(auto89B8B263_g, c_unitCountAll);
    for (;; auto89B8B263_u -= 1) {
        auto89B8B263_var = UnitGroupUnitFromEnd(auto89B8B263_g, auto89B8B263_u);
        if (auto89B8B263_var == null) { break; }
        if ((gv_embargo[lp_corp][UnitGetOwner(auto89B8B263_var)] == false) && (gv_embargo[UnitGetOwner(auto89B8B263_var)][lp_corp] == false)) {
            lv_bestResourceQuantity = 0;
            lv_bestResourcePrice = 0;
            lv_bestBuyingCorp = 0;
            for (autoA9ECCB39_i = 1; autoA9ECCB39_i <= autoA9ECCB39_n; autoA9ECCB39_i += 1) {
                if ((gf_GetUnitCustomValue(auto89B8B263_var, 12) >= 10)) {
                }
                else {
                    break;
                }
                lv_buyingCorp = 1;
                for ( ; ( (autoE26F0D95_ai >= 0 && lv_buyingCorp <= autoE26F0D95_ae) || (autoE26F0D95_ai < 0 && lv_buyingCorp >= autoE26F0D95_ae) ) ; lv_buyingCorp += autoE26F0D95_ai ) {
                    lv_resourcePrice = gf_CalculateCostWithTariffsCountingAsLoss(lp_corp, FixedToInt(UnitGetCustomValue(auto89B8B263_var, 10)), FixedToInt(UnitGetCustomValue(auto89B8B263_var, 14)));
                    if ((lv_resourcePrice == 0)) {
                        lv_resourcePrice = 1;
                    }

                    lv_resourceQuantity = (gv_cImportsPot[FixedToInt(UnitGetCustomValue(auto89B8B263_var, 10))][gf_GetResourceType(auto89B8B263_var)][0] / lv_resourcePrice);
                    lv_resourceQuantity = libNtve_gf_ArithmeticIntClamp(lv_resourcePrice, 0, 100);
                    lv_resourceQuantity = libNtve_gf_ArithmeticIntClamp(lv_resourcePrice, 0, gf_GetUnitCustomValue(auto89B8B263_var, 12));
                    if ((lv_resourceQuantity >= 10) && (lv_bestResourcePrice < lv_resourcePrice) && (UnitGetCustomValue(auto89B8B263_var, 10) != lp_corp)) {
                        lv_bestResourceQuantity = lv_resourceQuantity;
                        lv_bestResourcePrice = lv_resourcePrice;
                        lv_bestBuyingCorp = lv_buyingCorp;
                    }

                }
                gf_ModifyUnitCustomValue(auto89B8B263_var, 12, (lv_bestResourceQuantity * -1));
                lv_basePrice = FixedToInt(UnitGetCustomValue(auto89B8B263_var, 14));
                gv_cExportIncome[lp_corp][gf_GetResourceType(auto89B8B263_var)][1] += gf_CalculateCostWithTariffsCountingAsLoss(lp_corp, lv_buyingCorp, lv_basePrice);
                lv_totalPrice = (lv_basePrice + gf_CollectTariffs(lp_corp, lv_bestBuyingCorp, lv_resourcePrice, lv_resourceQuantity));
                if ((gf_GetResourceType(auto89B8B263_var) == 3)) {
                }
                else {
                    if ((gf_GetCapitolLocation(lv_buyingCorp) == null)) {
                    }
                    else {
                        lv_totalPrice += gf_GetFuelCostsMonetary(lp_corp, UnitGetPosition(auto89B8B263_var), gf_GetCapitolLocation(lv_buyingCorp), true);
                    }
                }
                gv_cImportExpenses[lp_corp][gf_GetResourceType(auto89B8B263_var)][1] += lv_totalPrice;
                gv_cImportsPot[lp_corp][gf_GetResourceType(auto89B8B263_var)][0] -= lv_totalPrice;
            }
        }

    }
}

void gf_CorporationAIBudgetAllocation () {
    int init_i;

    // Variable Declarations
    fixed lv_oldDecay;
    unitgroup[8] lv_corpResources;

    // Automatic Variable Declarations
    unitgroup auto078EE27E_g;
    int auto078EE27E_u;
    unit auto078EE27E_var;
    playergroup auto5E9DC445_g;
    int auto5E9DC445_var;
    unitgroup auto2C8C35BE_g;
    int auto2C8C35BE_u;
    unit auto2C8C35BE_var;

    // Variable Initialization
    for (init_i = 0; init_i <= 7; init_i += 1) {
        lv_corpResources[init_i] = UnitGroupEmpty();
    }

    // Implementation
    auto078EE27E_g = gv_allResources;
    auto078EE27E_u = UnitGroupCount(auto078EE27E_g, c_unitCountAll);
    for (;; auto078EE27E_u -= 1) {
        auto078EE27E_var = UnitGroupUnitFromEnd(auto078EE27E_g, auto078EE27E_u);
        if (auto078EE27E_var == null) { break; }
        lv_oldDecay = UnitGetCustomValue(auto078EE27E_var, 15);
        lv_oldDecay *= 0.95;
        if ((UnitGetOwner(auto078EE27E_var) < 8)) {
            UnitSetCustomValue(auto078EE27E_var, 15, (lv_oldDecay + IntToFixed(UnitGroupCount(UnitGroupAlliance(FixedToInt(UnitGetCustomValue(auto078EE27E_var, 10)), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(auto078EE27E_var), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive))));
        }
        else {
            UnitSetCustomValue(auto078EE27E_var, 15, (lv_oldDecay + 1.0));
        }
    }
    auto5E9DC445_g = gv_users;
    auto5E9DC445_var = -1;
    while (true) {
        auto5E9DC445_var = PlayerGroupNextPlayer(auto5E9DC445_g, auto5E9DC445_var);
        if (auto5E9DC445_var < 0) { break; }
        if ((gv_deadCorp[auto5E9DC445_var] == false) && (StringLength(gv_corpName[auto5E9DC445_var]) != 0)) {
            if ((gv_month == auto5E9DC445_var)) {
                auto2C8C35BE_g = gv_allResources;
                auto2C8C35BE_u = UnitGroupCount(auto2C8C35BE_g, c_unitCountAll);
                for (;; auto2C8C35BE_u -= 1) {
                    auto2C8C35BE_var = UnitGroupUnitFromEnd(auto2C8C35BE_g, auto2C8C35BE_u);
                    if (auto2C8C35BE_var == null) { break; }
                    if ((UnitGetCustomValue(auto2C8C35BE_var, 10) == auto5E9DC445_var)) {
                        UnitGroupAdd(lv_corpResources[auto5E9DC445_var], auto2C8C35BE_var);
                    }

                }
                gf_CorporationYearlyReport(auto5E9DC445_var, lv_corpResources[auto5E9DC445_var]);
                gf_CCreateArmyYearly(auto5E9DC445_var, gv_cMilitary[auto5E9DC445_var][1]);
                gf_CCommandArmyYearly(auto5E9DC445_var);
                gf_CResearchYearly(auto5E9DC445_var, gv_cResearch[auto5E9DC445_var][1]);
                gv_cInfrastructurePot[auto5E9DC445_var] = gv_cInfrastructure[auto5E9DC445_var][1];
                gv_cExpansionPot[auto5E9DC445_var] = gv_cExpansion[auto5E9DC445_var][1];
                gv_cImportsPot[auto5E9DC445_var][1][0] = 0;
                gv_cImportsPot[auto5E9DC445_var][2][0] = 0;
                gv_cImportsPot[auto5E9DC445_var][3][0] = 0;
            }
            else {
                gf_ExpansionBleed(auto5E9DC445_var);
            }
            gf_SendExpedition(auto5E9DC445_var);
            gf_SearchForUpgradeInfrastructure(auto5E9DC445_var);
            gf_PayOffDebts(auto5E9DC445_var);
            gv_cImportsPot[auto5E9DC445_var][1][0] += (gv_cImports[auto5E9DC445_var][1][1] / 11);
            gv_cImportsPot[auto5E9DC445_var][2][0] += (gv_cImports[auto5E9DC445_var][2][1] / 11);
            gv_cImportsPot[auto5E9DC445_var][3][0] += (gv_cImports[auto5E9DC445_var][3][1] / 11);
            if ((gv_year < 2311)) {
            }
            else {
                gf_SellOffCrisis(auto5E9DC445_var);
                gf_SellOffGoodDeal(auto5E9DC445_var);
            }
        }

    }
}

void gf_CorporationYearlyReport (int lp_corp, unitgroup lp_coolAndGoodResources) {
    // Variable Declarations
    unit lv_closestUnit;
    int lv_como;
    int lv_completeAIValue;
    unit lv_forOtherResource;
    int lv_totalBudget;
    int lv_totalIncome;
    int lv_monthRAM;
    int lv_upkeep;
    int lv_military;
    int lv_expansion;
    int lv_infrastructurte;
    int lv_research;
    int lv_savings;
    int[4] lv_imports;
    int lv_selling;

    // Automatic Variable Declarations
    const int auto7520C58D_ae = 3;
    const int auto7520C58D_ai = 1;
    const int auto9E70D84F_ae = 12;
    const int auto9E70D84F_ai = 1;
    unitgroup auto811950E8_g;
    int auto811950E8_u;
    unit auto811950E8_var;
    unitgroup auto317E63C3_g;
    int auto317E63C3_u;
    unit auto317E63C3_var;
    unitgroup auto2A60033A_g;
    int auto2A60033A_u;
    unit auto2A60033A_var;
    unitgroup auto92B120EA_g;
    int auto92B120EA_u;
    unit auto92B120EA_var;

    // Variable Initialization

    // Implementation
    lv_como = 1;
    for ( ; ( (auto7520C58D_ai >= 0 && lv_como <= auto7520C58D_ae) || (auto7520C58D_ai < 0 && lv_como >= auto7520C58D_ae) ) ; lv_como += auto7520C58D_ai ) {
        if ((gv_cDemand[0][lv_como] < 0)) {
            gv_cDemand[0][lv_como] *= -1;
        }

        if ((gv_cDemand[1][lv_como] < 0)) {
            gv_cDemand[1][lv_como] *= -1;
        }

    }
    gv_cImports[lp_corp][2][0] += 15;
    gv_cImports[lp_corp][3][0] += 5;
    lv_monthRAM = 1;
    for ( ; ( (auto9E70D84F_ai >= 0 && lv_monthRAM <= auto9E70D84F_ae) || (auto9E70D84F_ai < 0 && lv_monthRAM >= auto9E70D84F_ae) ) ; lv_monthRAM += auto9E70D84F_ai ) {
        lv_totalBudget += gv_cRevenue[lp_corp][lv_monthRAM];
        lv_totalIncome += gv_cTotalIncome[lp_corp][lv_monthRAM];
        lv_upkeep += gv_cUpkeepExpenses[lp_corp][lv_monthRAM];
    }
    lv_totalBudget += 1;
    lv_totalIncome += 1;
    lv_upkeep = ((lv_upkeep * 100) / lv_totalIncome);
    auto811950E8_g = gv_allResources;
    auto811950E8_u = UnitGroupCount(auto811950E8_g, c_unitCountAll);
    for (;; auto811950E8_u -= 1) {
        auto811950E8_var = UnitGroupUnitFromEnd(auto811950E8_g, auto811950E8_u);
        if (auto811950E8_var == null) { break; }
        if (((UnitGetType(auto811950E8_var) == "Metal") || (UnitGetType(auto811950E8_var) == "Oil"))) {
            gv_cInfrastructure[UnitGetOwner(auto811950E8_var)][0] += 40;
        }

        if ((UnitGroupHasUnit(lp_coolAndGoodResources, auto811950E8_var) == false)) {
            lv_closestUnit = UnitGroupClosestToPoint(lp_coolAndGoodResources, UnitGetPosition(auto811950E8_var));
            UnitSetCustomValue(auto811950E8_var, (lp_corp + 30), gf_ValueMineInThousands(auto811950E8_var, lp_corp));
            if ((lv_closestUnit == null)) {
            }
            else {
                if ((UnitGetCustomValue(auto811950E8_var, 10) == 0.0) && (DistanceBetweenPoints(UnitGetPosition(auto811950E8_var), UnitGetPosition(UnitGroupClosestToPoint(lp_coolAndGoodResources, UnitGetPosition(auto811950E8_var)))) < 150.0)) {
                    lv_expansion += libNtve_gf_ArithmeticIntClamp((FixedToInt(gf_ValueMineInThousands(auto811950E8_var, lp_corp)) * libNtve_gf_ArithmeticIntClamp((150 - FixedToInt(DistanceBetweenPoints(UnitGetPosition(auto811950E8_var), UnitGetPosition(lv_closestUnit)))), 40, 90)), 100, 100000000);
                    lv_infrastructurte -= libNtve_gf_ArithmeticIntClamp((FixedToInt(gf_ValueMineInThousands(auto811950E8_var, lp_corp)) * libNtve_gf_ArithmeticIntClamp((100 - FixedToInt(DistanceBetweenPoints(UnitGetPosition(auto811950E8_var), UnitGetPosition(lv_closestUnit)))), 40, 90)), 100, 100000000);
                    if ((UnitGroupCount(lp_coolAndGoodResources, c_unitCountAlive) < (UnitGroupCount(gv_allResources, c_unitCountAlive) / PlayerGroupCount(gv_users)))) {
                        lv_expansion += libNtve_gf_ArithmeticIntClamp((FixedToInt(gf_ValueMineInThousands(auto811950E8_var, lp_corp)) * libNtve_gf_ArithmeticIntClamp((150 - FixedToInt(DistanceBetweenPoints(UnitGetPosition(auto811950E8_var), UnitGetPosition(lv_closestUnit)))), 50, 100)), 100, 100000000);
                        lv_infrastructurte -= libNtve_gf_ArithmeticIntClamp((FixedToInt(gf_ValueMineInThousands(auto811950E8_var, lp_corp)) * libNtve_gf_ArithmeticIntClamp((100 - FixedToInt(DistanceBetweenPoints(UnitGetPosition(auto811950E8_var), UnitGetPosition(lv_closestUnit)))), 50, 100)), 100, 100000000);
                    }

                }
                else {
                    if ((UnitGroupCount(lp_coolAndGoodResources, c_unitCountAlive) < (UnitGroupCount(gv_allResources, c_unitCountAlive) / PlayerGroupCount(gv_users))) && (UnitGetCustomValue(auto811950E8_var, 10) == 0.0)) {
                        lv_expansion += libNtve_gf_ArithmeticIntClamp((FixedToInt(gf_ValueMineInThousands(auto811950E8_var, lp_corp)) * libNtve_gf_ArithmeticIntClamp((300 - FixedToInt(DistanceBetweenPoints(UnitGetPosition(auto811950E8_var), UnitGetPosition(lv_closestUnit)))), 20, 45)), 100, 100000000);
                        lv_infrastructurte -= libNtve_gf_ArithmeticIntClamp((FixedToInt(gf_ValueMineInThousands(auto811950E8_var, lp_corp)) * libNtve_gf_ArithmeticIntClamp((150 - FixedToInt(DistanceBetweenPoints(UnitGetPosition(auto811950E8_var), UnitGetPosition(lv_closestUnit)))), 20, 45)), 100, 100000000);
                    }
                    else {
                        if ((UnitGetCustomValue(auto811950E8_var, 43) == 1.0)) {
                            lv_expansion += libNtve_gf_ArithmeticIntClamp((FixedToInt(gf_ValueMineInThousands(auto811950E8_var, lp_corp)) * libNtve_gf_ArithmeticIntClamp((150 - FixedToInt(DistanceBetweenPoints(UnitGetPosition(auto811950E8_var), UnitGetPosition(lv_closestUnit)))), 40, 90)), 100, 100000000);
                            lv_infrastructurte -= libNtve_gf_ArithmeticIntClamp((FixedToInt(gf_ValueMineInThousands(auto811950E8_var, lp_corp)) * libNtve_gf_ArithmeticIntClamp((100 - FixedToInt(DistanceBetweenPoints(UnitGetPosition(auto811950E8_var), UnitGetPosition(lv_closestUnit)))), 40, 90)), 100, 100000000);
                        }

                    }
                }
            }
        }
        else {
            UnitSetCustomValue(auto811950E8_var, 42, gf_ValueMineInThousands(auto811950E8_var, lp_corp));
        }
    }
    lv_infrastructurte /= 100;
    auto317E63C3_g = lp_coolAndGoodResources;
    auto317E63C3_u = UnitGroupCount(auto317E63C3_g, c_unitCountAll);
    for (;; auto317E63C3_u -= 1) {
        auto317E63C3_var = UnitGroupUnitFromEnd(auto317E63C3_g, auto317E63C3_u);
        if (auto317E63C3_var == null) { break; }
        lv_military += FixedToInt(UnitGetCustomValue(auto317E63C3_var, 15));
        lv_infrastructurte += ((gf_GetUnitCustomValue(auto317E63C3_var, 13) / (gf_GetUnitCustomValue(auto317E63C3_var, 12) + 1)) * (gv_aggregateResourcePrice[lp_corp][gf_GetResourceType(auto317E63C3_var)] * 100));
        lv_research += FixedToInt(UnitGetCustomValue(auto317E63C3_var, 42));
        lv_research += ((gv_year - 2305) * 4);
        lv_research += ((gv_economyHealth - 400) / 5);
    }
    lv_military *= 20;
    if ((lv_infrastructurte < 10)) {
        lv_infrastructurte = 10;
    }

    if ((gv_cSupply[lp_corp][2] < (gv_globalSupply[2][4] / PlayerGroupCount(gv_users)))) {
        lv_infrastructurte *= 3;
        lv_infrastructurte /= 2;
    }

    if ((gv_cSupply[lp_corp][3] < (gv_globalSupply[3][4] / PlayerGroupCount(gv_users)))) {
        lv_infrastructurte *= 3;
        lv_infrastructurte /= 2;
    }

    lv_savings += (gv_cDebt[lp_corp] * 5);
    lv_savings += (gv_cAssetValue[lp_corp] / libNtve_gf_ArithmeticIntClamp((gv_economyHealth * 3), 200, 2700));
    if ((gv_lastYearBudget[lp_corp] > lv_totalBudget)) {
        lv_military *= 2;
        lv_military /= 3;
        lv_research /= 2;
        lv_savings /= 2;
        lv_savings *= 3;
        gv_stockPrice[lp_corp] *= 19;
        gv_stockPrice[lp_corp] /= 20;
    }
    else {
        gv_stockPrice[lp_corp] *= 20;
        gv_stockPrice[lp_corp] /= 19;
    }
    if ((gv_aggregateResourcePrice[lp_corp][1] >= gv_aggregatePrice[1][4])) {
        lv_imports[1] += ((gv_cDemand[lp_corp][1] * 7) - gv_cSupply[lp_corp][1]);
    }
    else {
        lv_imports[1] += ((gv_cDemand[lp_corp][1] * 2) - gv_cSupply[lp_corp][1]);
    }
    if ((gv_aggregateResourcePrice[lp_corp][2] >= gv_aggregatePrice[2][4])) {
        lv_imports[2] += ((gv_cDemand[lp_corp][2] * 7) - gv_cSupply[lp_corp][2]);
    }
    else {
        lv_imports[2] += ((gv_cDemand[lp_corp][2] * 2) - gv_cSupply[lp_corp][2]);
    }
    if ((gv_aggregateResourcePrice[lp_corp][3] >= gv_aggregatePrice[3][4])) {
        lv_imports[3] += ((gv_cDemand[lp_corp][3] * 7) - gv_cSupply[lp_corp][3]);
    }
    else {
        lv_imports[3] += ((gv_cDemand[lp_corp][3] * 2) - gv_cSupply[lp_corp][3]);
    }
    if ((gv_cDemand[lp_corp][1] < 10)) {
        lv_imports[1] = 0;
    }

    if ((gv_cDemand[lp_corp][2] < 10)) {
        lv_imports[2] = 0;
    }

    if ((gv_cDemand[lp_corp][3] < 10)) {
        lv_imports[3] = 0;
    }

    if ((lv_totalIncome < 0)) {
        lv_selling += 10;
        if ((gv_lastYearBudget[lp_corp] < 0)) {
            lv_selling += 10;
        }

    }

    if ((lv_upkeep > 90)) {
        lv_selling += (lv_upkeep - 90);
    }

    if ((gv_cDebt[lp_corp] > gv_cCredits[lp_corp])) {
        lv_selling *= 2;
    }

    auto2A60033A_g = UnitGroup("Metal", lp_corp, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto2A60033A_u = UnitGroupCount(auto2A60033A_g, c_unitCountAll);
    for (;; auto2A60033A_u -= 1) {
        auto2A60033A_var = UnitGroupUnitFromEnd(auto2A60033A_g, auto2A60033A_u);
        if (auto2A60033A_var == null) { break; }
        lv_infrastructurte += 10;
    }
    auto92B120EA_g = UnitGroup("Oil", lp_corp, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto92B120EA_u = UnitGroupCount(auto92B120EA_g, c_unitCountAll);
    for (;; auto92B120EA_u -= 1) {
        auto92B120EA_var = UnitGroupUnitFromEnd(auto92B120EA_g, auto92B120EA_u);
        if (auto92B120EA_var == null) { break; }
        lv_infrastructurte += 10;
    }
    lv_expansion /= 100;
    lv_expansion = libNtve_gf_ArithmeticIntClamp(lv_expansion, 10, 100000000);
    lv_military = libNtve_gf_ArithmeticIntClamp(lv_military, 10, 100000000);
    lv_infrastructurte = libNtve_gf_ArithmeticIntClamp(lv_infrastructurte, 10, 100000000);
    lv_research = libNtve_gf_ArithmeticIntClamp(lv_research, 10, 100000000);
    lv_savings = libNtve_gf_ArithmeticIntClamp(lv_savings, 10, 100000000);
    lv_selling = libNtve_gf_ArithmeticIntClamp(lv_selling, 0, 50);
    lv_imports[1] = libNtve_gf_ArithmeticIntClamp(lv_imports[1], 10, 100000000);
    lv_imports[2] = libNtve_gf_ArithmeticIntClamp(lv_imports[2], 10, 100000000);
    lv_imports[3] = libNtve_gf_ArithmeticIntClamp(lv_imports[3], 10, 100000000);
    lv_completeAIValue += lv_expansion;
    lv_completeAIValue += lv_military;
    lv_completeAIValue += lv_infrastructurte;
    lv_completeAIValue += lv_research;
    lv_completeAIValue += lv_savings;
    lv_completeAIValue += lv_imports[1];
    lv_completeAIValue += lv_imports[2];
    lv_completeAIValue += lv_imports[3];
    lv_completeAIValue /= 100;
    lv_completeAIValue += 1;
    lv_expansion /= lv_completeAIValue;
    lv_military /= lv_completeAIValue;
    lv_infrastructurte /= lv_completeAIValue;
    lv_research /= lv_completeAIValue;
    lv_savings /= lv_completeAIValue;
    lv_imports[1] /= lv_completeAIValue;
    lv_imports[2] /= lv_completeAIValue;
    lv_imports[3] /= lv_completeAIValue;
    lv_completeAIValue = 0;
    if ((lv_research > 10)) {
        lv_research = 10;
    }

    lv_completeAIValue += lv_expansion;
    lv_completeAIValue += lv_military;
    lv_completeAIValue += lv_infrastructurte;
    lv_completeAIValue += lv_research;
    lv_completeAIValue += lv_savings;
    lv_completeAIValue += lv_selling;
    lv_completeAIValue += lv_imports[1];
    lv_completeAIValue += lv_imports[2];
    lv_completeAIValue += lv_imports[3];
    if ((lv_imports[1] >= 30)) {
        lv_imports[1] = 30;
    }

    if ((lv_imports[2] >= 30)) {
        lv_imports[2] = 30;
    }

    if ((lv_imports[3] >= 30)) {
        lv_imports[3] = 30;
    }

    while ((lv_completeAIValue > 100)) {
        if ((lv_expansion > 10) && (lv_completeAIValue > 100)) {
            lv_completeAIValue -= 1;
            lv_expansion -= 1;
        }

        if ((lv_infrastructurte > 10) && (lv_completeAIValue > 100)) {
            lv_completeAIValue -= 1;
            lv_infrastructurte -= 1;
        }

        if ((lv_research > 10) && (lv_completeAIValue > 100)) {
            lv_completeAIValue -= 1;
            lv_research -= 1;
        }

        if ((lv_military > 10) && (lv_completeAIValue > 100)) {
            lv_completeAIValue -= 1;
            lv_military -= 1;
        }

        if ((lv_savings > 10) && (lv_completeAIValue > 100)) {
            lv_completeAIValue -= 1;
            lv_savings -= 1;
        }

        if ((RandomInt(0, 100) > 95)) {
            lv_completeAIValue -= 1;
        }

    }
    while ((lv_completeAIValue < 100)) {
        if ((lv_completeAIValue < 100) && (lv_research < 10)) {
            lv_completeAIValue += 1;
            lv_research += 1;
        }

        if ((lv_completeAIValue < 100)) {
            lv_completeAIValue += 1;
            lv_military += 1;
        }

        if ((lv_completeAIValue < 100)) {
            lv_completeAIValue += 1;
            lv_savings += 1;
        }

        if ((lv_completeAIValue < 100)) {
            lv_completeAIValue += 1;
            lv_expansion += 1;
        }

        if ((lv_completeAIValue < 100)) {
            lv_completeAIValue += 1;
            lv_infrastructurte += 1;
        }

    }
    gv_cMilitary[lp_corp][0] = ((gv_cMilitary[lp_corp][0] + lv_military) / 2);
    gv_cExpansion[lp_corp][0] = ((gv_cExpansion[lp_corp][0] + lv_expansion) / 2);
    gv_cImports[lp_corp][2][0] = ((gv_cImports[lp_corp][2][0] + lv_imports[2]) / 2);
    gv_cImports[lp_corp][3][0] = ((gv_cImports[lp_corp][3][0] + lv_imports[3]) / 2);
    gv_cInfrastructure[lp_corp][0] = ((gv_cInfrastructure[lp_corp][0] + lv_infrastructurte) / 2);
    gv_cResearch[lp_corp][0] = ((gv_cResearch[lp_corp][0] + lv_research) / 2);
    gv_cSavings[lp_corp][0] = ((gv_cSavings[lp_corp][0] + lv_savings) / 2);
    gv_cSelling[lp_corp][0] = ((gv_cSelling[lp_corp][0] + (lv_selling * 2)) / 3);
    lv_completeAIValue = 0;
    lv_completeAIValue += gv_cMilitary[lp_corp][0];
    lv_completeAIValue += gv_cExpansion[lp_corp][0];
    lv_completeAIValue += gv_cImports[lp_corp][1][0];
    lv_completeAIValue += gv_cImports[lp_corp][2][0];
    lv_completeAIValue += gv_cImports[lp_corp][3][0];
    lv_completeAIValue += gv_cInfrastructure[lp_corp][0];
    lv_completeAIValue += gv_cResearch[lp_corp][0];
    lv_completeAIValue += gv_cSavings[lp_corp][0];
    while ((lv_completeAIValue > 100)) {
        if ((gv_cExpansion[lp_corp][0] > 10) && (lv_completeAIValue > 100)) {
            lv_completeAIValue -= 1;
            gv_cExpansion[lp_corp][0] -= 1;
        }

        if ((gv_cInfrastructure[lp_corp][0] > 10) && (lv_completeAIValue > 100)) {
            lv_completeAIValue -= 1;
            gv_cInfrastructure[lp_corp][0] -= 1;
        }

        if ((gv_cResearch[lp_corp][0] > 10) && (lv_completeAIValue > 100)) {
            lv_completeAIValue -= 1;
            gv_cResearch[lp_corp][0] -= 1;
        }

        if ((gv_cMilitary[lp_corp][0] > 10) && (lv_completeAIValue > 100)) {
            lv_completeAIValue -= 1;
            gv_cMilitary[lp_corp][0] -= 1;
        }

        if ((RandomInt(0, 100) > 95)) {
            lv_completeAIValue -= 1;
        }

    }
    lv_totalBudget = (lv_totalIncome / 208);
    lv_totalBudget += ((gv_cCredits[lp_corp] / 2) * 3);
    lv_totalBudget /= 100;
    gv_cSelling[lp_corp][1] /= 100;
    gv_cSelling[lp_corp][1] += (gv_cSelling[lp_corp][0] * (lv_totalBudget * 13));
    lv_totalBudget = (lv_totalBudget - (gv_cDebt[lp_corp] * 3));
    if ((lv_totalBudget < 0)) {
        lv_totalBudget = gv_totalIncome[lp_corp][4];
    }

    gv_cMilitary[lp_corp][1] /= 100;
    gv_cExpansion[lp_corp][1] /= 100;
    gv_cImports[lp_corp][2][1] /= 100;
    gv_cImports[lp_corp][3][1] /= 100;
    gv_cInfrastructure[lp_corp][1] /= 100;
    gv_cResearch[lp_corp][1] /= 100;
    gv_cSavings[lp_corp][1] /= 100;
    gv_cSelling[lp_corp][1] = libNtve_gf_ArithmeticIntClamp(gv_cSelling[lp_corp][1], 0, gv_cAssetValue[lp_corp]);
    gv_cMilitary[lp_corp][1] += (gv_cMilitary[lp_corp][0] * lv_totalBudget);
    gv_cExpansion[lp_corp][1] += (gv_cExpansion[lp_corp][0] * lv_totalBudget);
    gv_cImports[lp_corp][2][1] += (gv_cImports[lp_corp][2][0] * lv_totalBudget);
    gv_cImports[lp_corp][3][1] += (gv_cImports[lp_corp][3][0] * lv_totalBudget);
    gv_cInfrastructure[lp_corp][1] += (gv_cInfrastructure[lp_corp][0] * lv_totalBudget);
    gv_cResearch[lp_corp][1] += (gv_cResearch[lp_corp][0] * lv_totalBudget);
    gv_cSavings[lp_corp][1] += (gv_cSavings[lp_corp][0] * lv_totalBudget);
    if ((gv_cMilitary[lp_corp][1] < 0)) {
        gv_cMilitary[lp_corp][1] = 0;
    }

    if ((gv_cExpansion[lp_corp][1] < 0)) {
        gv_cExpansion[lp_corp][1] = 0;
    }

    if ((gv_cImports[lp_corp][1][1] < 0)) {
        gv_cImports[lp_corp][1][1] = 0;
    }

    if ((gv_cImports[lp_corp][2][1] < 0)) {
        gv_cImports[lp_corp][2][1] = 0;
    }

    if ((gv_cImports[lp_corp][3][1] < 0)) {
        gv_cImports[lp_corp][3][1] = 0;
    }

    if ((gv_cInfrastructure[lp_corp][1] < 0)) {
        gv_cInfrastructure[lp_corp][1] = 0;
    }

    if ((gv_cResearch[lp_corp][1] < 0)) {
        gv_cResearch[lp_corp][1] = 0;
    }

    if ((gv_cSavings[lp_corp][1] < 0)) {
        gv_cSavings[lp_corp][1] = 0;
    }

    if ((gv_cSelling[lp_corp][1] < 0)) {
        gv_cSelling[lp_corp][1] *= -1;
    }

    gv_cSelling[lp_corp][1] = libNtve_gf_ArithmeticIntClamp(gv_cSelling[lp_corp][1], 0, gv_cAssetValue[lp_corp]);
}

void gf_SearchForUpgradeInfrastructure (int lp_corp) {
    // Variable Declarations
    int lv_bestRealValueUnaffordable;
    int lv_bestRealValue;
    unit lv_bestResourceValue;
    int lv_currentRealValue;

    // Automatic Variable Declarations
    const int auto73B9EBBA_n = 3;
    int auto73B9EBBA_i;
    unitgroup autoA39673FD_g;
    int autoA39673FD_u;
    unit autoA39673FD_var;

    // Variable Initialization

    // Implementation
    if (((gv_cInfrastructurePot[lp_corp] < 1) || (gv_deadCorp[lp_corp] == true))) {
    }
    else {
        for (auto73B9EBBA_i = 1; auto73B9EBBA_i <= auto73B9EBBA_n; auto73B9EBBA_i += 1) {
            lv_bestRealValue = 1000000;
            lv_bestRealValueUnaffordable = 100000;
            autoA39673FD_g = gv_corpResources[lp_corp];
            autoA39673FD_u = UnitGroupCount(autoA39673FD_g, c_unitCountAll);
            for (;; autoA39673FD_u -= 1) {
                autoA39673FD_var = UnitGroupUnitFromEnd(autoA39673FD_g, autoA39673FD_u);
                if (autoA39673FD_var == null) { break; }
                lv_currentRealValue = gf_GetResourceUpgradeValue(autoA39673FD_var);
                if ((gf_GetResourceUpgradeCost(autoA39673FD_var) < gv_cInfrastructurePot[lp_corp])) {
                    if ((((lv_currentRealValue == lv_bestRealValue) && (UnitGetCustomValue(autoA39673FD_var, 42) > UnitGetCustomValue(lv_bestResourceValue, 42))) || (lv_currentRealValue < lv_bestRealValue))) {
                        lv_bestRealValue = lv_currentRealValue;
                        lv_bestResourceValue = autoA39673FD_var;
                    }

                }
                else {
                    if ((lv_currentRealValue < lv_bestRealValueUnaffordable)) {
                        lv_bestRealValueUnaffordable = lv_currentRealValue;
                    }

                }
            }
            if ((lv_bestRealValue >= (lv_bestRealValueUnaffordable / 10))) {
                break;
            }
            else {
                if ((gf_CorpSpendMoney(lp_corp, gf_GetResourceUpgradeCost(lv_bestResourceValue)) == true)) {
                    gv_cInfrastructurePot[lp_corp] -= gf_GetResourceUpgradeCost(lv_bestResourceValue);
                    gf_CorpUpgradeResource(lv_bestResourceValue);
                }

            }
        }
    }
}

void gf_PayOffDebts (int lp_corp) {
    // Variable Declarations
    int lv_canPay;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((gv_cDebt[lp_corp] > 0)) {
        lv_canPay = (gv_cRevenue[lp_corp][1] / 6);
        lv_canPay = libNtve_gf_ArithmeticIntClamp(lv_canPay, 0, gv_cDebt[lp_corp]);
        gv_cDebt[lp_corp] -= lv_canPay;
        gv_cCredits[lp_corp] -= lv_canPay;
        if ((gv_cDebt[lp_corp] < 0)) {
            gv_cDebt[lp_corp] = 0;
        }

    }

}

void gf_RealizeImports () {
    // Variable Declarations
    int lv_corp;
    int lv_como;

    // Automatic Variable Declarations
    const int auto96A2CDE6_ae = 7;
    const int auto96A2CDE6_ai = 1;
    const int auto8CCCD6E7_ae = 3;
    const int auto8CCCD6E7_ai = 1;

    // Variable Initialization

    // Implementation
    lv_corp = 1;
    for ( ; ( (auto96A2CDE6_ai >= 0 && lv_corp <= auto96A2CDE6_ae) || (auto96A2CDE6_ai < 0 && lv_corp >= auto96A2CDE6_ae) ) ; lv_corp += auto96A2CDE6_ai ) {
        lv_como = 1;
        for ( ; ( (auto8CCCD6E7_ai >= 0 && lv_como <= auto8CCCD6E7_ae) || (auto8CCCD6E7_ai < 0 && lv_como >= auto8CCCD6E7_ae) ) ; lv_como += auto8CCCD6E7_ai ) {
            gv_cUnrealizedSupplyImports[lv_corp][lv_como] /= 10;
        }
    }
}

void gf_NoResourceTooMuchSupply () {
    // Automatic Variable Declarations
    // Implementation
}

void gf_SellOffCrisis (int lp_corp) {
    // Variable Declarations
    int lv_finalCost;
    int lv_currentSellingRatio;
    int lv_bestSellingRatio;
    unit lv_bestSellingUnit;
    int lv_bestSellingUnitBuyer;
    int lv_buyingCorp;

    // Automatic Variable Declarations
    unitgroup autoE7398A24_g;
    int autoE7398A24_u;
    unit autoE7398A24_var;
    const int auto96733F2D_ae = 7;
    const int auto96733F2D_ai = 1;

    // Variable Initialization

    // Implementation
    if ((gv_cSelling[lp_corp][1] > 0)) {
        autoE7398A24_g = gv_corpResources[lp_corp];
        autoE7398A24_u = UnitGroupCount(autoE7398A24_g, c_unitCountAll);
        for (;; autoE7398A24_u -= 1) {
            autoE7398A24_var = UnitGroupUnitFromEnd(autoE7398A24_g, autoE7398A24_u);
            if (autoE7398A24_var == null) { break; }
            if ((UnitGetCustomValue(autoE7398A24_var, 42) != 0.0) && (UnitGetCustomValue(autoE7398A24_var, 42) <= ((gv_cSelling[lp_corp][1] / 180) * 2))) {
                lv_buyingCorp = 1;
                for ( ; ( (auto96733F2D_ai >= 0 && lv_buyingCorp <= auto96733F2D_ae) || (auto96733F2D_ai < 0 && lv_buyingCorp >= auto96733F2D_ae) ) ; lv_buyingCorp += auto96733F2D_ai ) {
                    if (((gv_cExpansionPot[lv_buyingCorp] / 100) >= FixedToInt(UnitGetCustomValue(autoE7398A24_var, (lv_buyingCorp + 30))))) {
                        lv_currentSellingRatio = ((FixedToInt(UnitGetCustomValue(autoE7398A24_var, (lv_buyingCorp + 30))) * 100) / FixedToInt(UnitGetCustomValue(autoE7398A24_var, 42)));
                        if ((lv_currentSellingRatio > lv_bestSellingRatio)) {
                            lv_bestSellingRatio = lv_currentSellingRatio;
                            lv_bestSellingUnit = autoE7398A24_var;
                            lv_bestSellingUnitBuyer = lv_buyingCorp;
                        }

                    }

                }
            }

        }
        if ((lv_bestSellingRatio > 80)) {
            lv_finalCost = (FixedToInt(UnitGetCustomValue(lv_bestSellingUnit, (lv_bestSellingUnitBuyer + 30))) * 100);
            if ((gf_CorpSpendMoney(lv_buyingCorp, lv_finalCost) == true)) {
                gv_cSelling[lp_corp][1] -= lv_finalCost;
                gv_cCredits[lp_corp] += lv_finalCost;
                UnitSetCustomValue(lv_bestSellingUnit, 10, IntToFixed(lv_bestSellingUnitBuyer));
            }

        }

    }

}

void gf_SellOffGoodDeal (int lp_corp) {
    // Variable Declarations
    int lv_finalCost;
    int lv_currentSellingRatio;
    int lv_bestSellingRatio;
    unit lv_bestSellingUnit;
    int lv_bestSellingUnitBuyer;
    int lv_buyingCorp;

    // Automatic Variable Declarations
    unitgroup autoE3BBDF19_g;
    int autoE3BBDF19_u;
    unit autoE3BBDF19_var;
    const int auto8B6C4BA8_ae = 7;
    const int auto8B6C4BA8_ai = 1;

    // Variable Initialization

    // Implementation
    autoE3BBDF19_g = gv_corpResources[lp_corp];
    autoE3BBDF19_u = UnitGroupCount(autoE3BBDF19_g, c_unitCountAll);
    for (;; autoE3BBDF19_u -= 1) {
        autoE3BBDF19_var = UnitGroupUnitFromEnd(autoE3BBDF19_g, autoE3BBDF19_u);
        if (autoE3BBDF19_var == null) { break; }
        if ((UnitGetCustomValue(autoE3BBDF19_var, 42) != 0.0)) {
            lv_buyingCorp = 1;
            for ( ; ( (auto8B6C4BA8_ai >= 0 && lv_buyingCorp <= auto8B6C4BA8_ae) || (auto8B6C4BA8_ai < 0 && lv_buyingCorp >= auto8B6C4BA8_ae) ) ; lv_buyingCorp += auto8B6C4BA8_ai ) {
                if (((gv_cExpansionPot[lv_buyingCorp] / 100) >= FixedToInt(UnitGetCustomValue(autoE3BBDF19_var, (lv_buyingCorp + 30))))) {
                    lv_currentSellingRatio = ((FixedToInt(UnitGetCustomValue(autoE3BBDF19_var, (lv_buyingCorp + 30))) * 100) / FixedToInt(UnitGetCustomValue(autoE3BBDF19_var, 42)));
                    if ((lv_currentSellingRatio > lv_bestSellingRatio)) {
                        lv_bestSellingRatio = lv_currentSellingRatio;
                        lv_bestSellingUnit = autoE3BBDF19_var;
                        lv_bestSellingUnitBuyer = lv_buyingCorp;
                    }

                }

            }
        }

    }
    if ((lv_bestSellingRatio > 200)) {
        lv_finalCost = (FixedToInt(UnitGetCustomValue(lv_bestSellingUnit, (lv_bestSellingUnitBuyer + 30))) * 100);
        if ((gf_CorpSpendMoney(lv_buyingCorp, lv_finalCost) == true)) {
            gv_cSelling[lp_corp][1] -= lv_finalCost;
            gv_cCredits[lp_corp] += lv_finalCost;
            UnitSetCustomValue(lv_bestSellingUnit, 10, IntToFixed(lv_bestSellingUnitBuyer));
        }

    }

}

fixed gf_ValueMineInThousands (unit lp_mine, int lp_corp) {
    // Variable Declarations
    int lv_normalizedResourceValues;
    int lv__10YearIncome;
    int lv_implicitValue;
    int lv_resourceValue;
    int lv_aIValue;
    int lv_totalValue;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv__10YearIncome = (FixedToInt(UnitGetCustomValue(lp_mine, 11)) * gv_aggregateResourcePrice[lp_corp][gf_GetResourceType(lp_mine)]);
    lv__10YearIncome = (lv__10YearIncome * 120);
    if ((UnitGetType(lp_mine) == "Metal")) {
        lv_implicitValue = gv_metalMineCost[0];
    }
    else {
        if ((UnitGetType(lp_mine) == "MineI")) {
            lv_implicitValue = gv_metalMineCost[1];
        }
        else {
            if ((UnitGetType(lp_mine) == "MineII")) {
                lv_implicitValue = gv_metalMineCost[2];
            }
            else {
                if ((UnitGetType(lp_mine) == "MineIII")) {
                    lv_implicitValue = gv_metalMineCost[3];
                }
                else {
                    if ((UnitGetType(lp_mine) == "MineIV")) {
                        lv_implicitValue = gv_metalMineCost[4];
                    }
                    else {
                        if ((UnitGetType(lp_mine) == "MineV")) {
                            lv_implicitValue = gv_metalMineCost[5];
                        }
                        else {
                            if ((UnitGetType(lp_mine) == "BoreholeI")) {
                                lv_implicitValue = gv_metalBoreholeCost[1];
                            }
                            else {
                                if ((UnitGetType(lp_mine) == "BoreholeII")) {
                                    lv_implicitValue = gv_metalBoreholeCost[2];
                                }
                                else {
                                    if ((UnitGetType(lp_mine) == "BoreholeIII")) {
                                        lv_implicitValue = gv_metalBoreholeCost[3];
                                    }
                                    else {
                                        if ((UnitGetType(lp_mine) == "BoreholeIV")) {
                                            lv_implicitValue = gv_metalBoreholeCost[4];
                                        }
                                        else {
                                            if ((UnitGetType(lp_mine) == "BoreholeV")) {
                                                lv_implicitValue = gv_metalBoreholeCost[5];
                                            }
                                            else {
                                                if ((UnitGetType(lp_mine) == "Oil")) {
                                                    lv_implicitValue = gv_oilWellCost[0];
                                                }
                                                else {
                                                    if ((UnitGetType(lp_mine) == "OilWellI")) {
                                                        lv_implicitValue = gv_oilWellCost[1];
                                                    }
                                                    else {
                                                        if ((UnitGetType(lp_mine) == "OilWellII")) {
                                                            lv_implicitValue = gv_oilWellCost[2];
                                                        }

                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    lv__10YearIncome -= (lv_implicitValue / 1);
    if ((lv_implicitValue < 20000)) {
        lv_aIValue += ((lv_implicitValue / 5) * gv_cInfrastructure[lp_corp][0]);
    }

    lv_aIValue += ((lv_implicitValue / 20) * gv_cExpansion[lp_corp][0]);
    lv_aIValue += (FixedToInt(UnitGetCustomValue(lp_mine, 15)) * gv_cMilitary[lp_corp][0]);
    lv_normalizedResourceValues += gv_aggregatePrice[1][1];
    lv_normalizedResourceValues += gv_aggregatePrice[2][1];
    lv_normalizedResourceValues += gv_aggregatePrice[3][1];
    lv_normalizedResourceValues += 1;
    lv_resourceValue += ((gv_aggregatePrice[gf_GetResourceType(lp_mine)][1] * 100) / lv_normalizedResourceValues);
    lv_resourceValue *= lv_implicitValue;
    lv_resourceValue /= 33;
    lv_implicitValue -= (FixedToInt(UnitGetCustomValue(lp_mine, 15)) * 30);
    lv_totalValue += lv_aIValue;
    lv_totalValue += lv_implicitValue;
    lv_totalValue += lv__10YearIncome;
    lv_totalValue += lv_resourceValue;
    lv_totalValue /= 1000;
    if ((gv_aggregateResourcePrice[lp_corp][gf_GetResourceType(lp_mine)] < gv_aggregatePrice[gf_GetResourceType(lp_mine)][4])) {
        lv_totalValue *= 95;
    }
    else {
        lv_totalValue *= 115;
    }
    lv_totalValue /= 100;
    lv_totalValue *= (libNtve_gf_ArithmeticIntClamp(Log2I(gv_stockPrice[lp_corp]), 3, 10) * 20);
    lv_totalValue /= 100;
    return libNtve_gf_ArithmeticRealClamp(IntToFixed(lv_totalValue), 1.0, 500000.0);
}

bool gf_CorpSpendMoney (int lp_corp, int lp_spending) {
    // Variable Declarations
    int lv_debtOwed;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_spending <= gv_cCredits[lp_corp])) {
        gv_cCredits[lp_corp] -= lp_spending;
        return true;
    }
    else {
        lv_debtOwed = (lp_spending - gv_cCredits[lp_corp]);
        if ((gf_CTakeLoan(lp_corp, lv_debtOwed) == true)) {
            gv_cCredits[lp_corp] = 0;
            return true;
        }
        else {
            return false;
        }
    }
}

void gf_CCreateArmyYearly (int lp_corp, int lp_budget) {
    // Variable Declarations
    point lv_spawnLocation;
    unitgroup lv_hiredUnitGroup;
    fixed lv_lifePercent;
    int lv_maximumHires;
    int lv_surplusHires;
    int lv_currentHires;

    // Automatic Variable Declarations
    unitgroup auto41991CBA_g;
    int auto41991CBA_u;
    unit auto41991CBA_var;
    unitgroup auto79F9DA4C_g;
    int auto79F9DA4C_u;
    unit auto79F9DA4C_var;

    // Variable Initialization
    lv_hiredUnitGroup = UnitGroupEmpty();

    // Implementation
    if ((gv_year < 2310)) {
    }
    else {
        lv_maximumHires = (lp_budget / 2400);
        auto41991CBA_g = UnitGroup("ParamilitaryForces", lp_corp, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto41991CBA_u = UnitGroupCount(auto41991CBA_g, c_unitCountAll);
        for (;; auto41991CBA_u -= 1) {
            auto41991CBA_var = UnitGroupUnitFromEnd(auto41991CBA_g, auto41991CBA_u);
            if (auto41991CBA_var == null) { break; }
            if ((UnitGetCustomValue(auto41991CBA_var, 17) != 3.0)) {
                UnitGroupAdd(lv_hiredUnitGroup, auto41991CBA_var);
                lv_currentHires += 1;
            }

        }
        if ((lv_currentHires > lv_maximumHires)) {
            while ((lv_currentHires > lv_maximumHires)) {
                UnitKill(UnitGroupRandomUnit(lv_hiredUnitGroup, c_unitCountAlive));
                lv_currentHires -= 1;
            }
        }

        if ((lv_currentHires < lv_maximumHires)) {
            while ((lv_currentHires < lv_maximumHires) && (lv_currentHires < 15)) {
                lv_currentHires += 1;
                lv_spawnLocation = null;
                lv_spawnLocation = UnitGetPosition(UnitGroupRandomUnit(gv_corpResources[lp_corp], c_unitCountAlive));
                if (((lv_spawnLocation == null) || (RandomInt(0, 100) < 15))) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ParamilitaryForces", 0, lp_corp, gf_GetCapitolLocation(lp_corp));
                }
                else {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ParamilitaryForces", 0, lp_corp, lv_spawnLocation);
                }
            }
            lv_surplusHires = (lv_maximumHires - lv_currentHires);
            lv_surplusHires = libNtve_gf_ArithmeticIntClamp(lv_surplusHires, 0, 100);
            auto79F9DA4C_g = UnitGroup("ParamilitaryForces", lp_corp, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto79F9DA4C_u = UnitGroupCount(auto79F9DA4C_g, c_unitCountAll);
            for (;; auto79F9DA4C_u -= 1) {
                auto79F9DA4C_var = UnitGroupUnitFromEnd(auto79F9DA4C_g, auto79F9DA4C_u);
                if (auto79F9DA4C_var == null) { break; }
                lv_lifePercent = UnitGetPropertyFixed(auto79F9DA4C_var, c_unitPropLifePercent, c_unitPropCurrent);
                UnitSetPropertyFixed(auto79F9DA4C_var, c_unitPropLifeMax, IntToFixed(((lv_surplusHires * 20) + 400)));
                UnitSetPropertyFixed(auto79F9DA4C_var, c_unitPropLifePercent, lv_lifePercent);
            }
        }

    }
}

void gf_CCommandArmyYearly (int lp_corp) {
    // Variable Declarations
    unit lv_assignedUnit;
    unitgroup lv_assignedSquad;
    int lv_totalDanger91;
    unit lv_convertUnit;
    int lv_guardForces;
    int lv_patrolForces;
    unitgroup lv_guardGroup;
    unitgroup lv_patrolGroup;

    // Automatic Variable Declarations
    unitgroup auto61523C9B_g;
    int auto61523C9B_u;
    unit auto61523C9B_var;
    unitgroup auto072B5FE4_g;
    int auto072B5FE4_u;
    unit auto072B5FE4_var;
    unitgroup auto12413AAA_g;
    int auto12413AAA_u;
    unit auto12413AAA_var;
    int auto7A735807_n;
    int auto7A735807_i;
    unitgroup autoC382FE0E_g;
    int autoC382FE0E_u;
    unitgroup auto81230C5B_g;
    int auto81230C5B_u;
    unit auto81230C5B_var;
    int auto92975140_n;
    int auto92975140_i;
    unitgroup auto7E717548_g;
    int auto7E717548_u;
    unit auto7E717548_var;

    // Variable Initialization
    lv_assignedSquad = UnitGroupEmpty();
    lv_guardGroup = UnitGroupEmpty();
    lv_patrolGroup = UnitGroupEmpty();

    // Implementation
    auto61523C9B_g = UnitGroup("ParamilitaryForces", lp_corp, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto61523C9B_u = UnitGroupCount(auto61523C9B_g, c_unitCountAll);
    for (;; auto61523C9B_u -= 1) {
        auto61523C9B_var = UnitGroupUnitFromEnd(auto61523C9B_g, auto61523C9B_u);
        if (auto61523C9B_var == null) { break; }
        if ((UnitGetCustomValue(auto61523C9B_var, 17) == 0.0)) {
            if ((lv_guardForces <= lv_patrolForces)) {
                UnitSetCustomValue(auto61523C9B_var, 17, 1.0);
                lv_guardForces += 1;
                UnitGroupAdd(lv_guardGroup, auto61523C9B_var);
            }
            else {
                UnitSetCustomValue(auto61523C9B_var, 17, 2.0);
                lv_patrolForces += 1;
                UnitGroupAdd(lv_patrolGroup, auto61523C9B_var);
            }
        }

        if ((UnitGetCustomValue(auto61523C9B_var, 17) == 1.0)) {
            lv_guardForces += 1;
            UnitGroupAdd(lv_guardGroup, auto61523C9B_var);
        }

        if ((UnitGetCustomValue(auto61523C9B_var, 17) == 2.0)) {
            lv_patrolForces += 1;
            UnitGroupAdd(lv_patrolGroup, auto61523C9B_var);
        }

    }
    if ((lv_guardForces == 0) && (lv_patrolForces == 0)) {

    }

    if ((lv_guardForces < lv_patrolForces) && ((lv_guardForces + lv_patrolForces) > 4)) {
        while ((lv_guardForces < lv_patrolForces)) {
            lv_convertUnit = UnitGroupRandomUnit(lv_patrolGroup, c_unitCountAlive);
            UnitGroupRemove(lv_patrolGroup, lv_convertUnit);
            UnitGroupAdd(lv_guardGroup, lv_convertUnit);
            UnitSetCustomValue(lv_convertUnit, 17, 1.0);
            lv_patrolForces -= 1;
            lv_guardForces += 1;
        }
    }

    if ((lv_guardForces > lv_patrolForces) && ((lv_guardForces + lv_patrolForces) > 4)) {
        while ((lv_guardForces > lv_patrolForces)) {
            lv_convertUnit = UnitGroupRandomUnit(lv_guardGroup, c_unitCountAlive);
            UnitGroupRemove(lv_guardGroup, lv_convertUnit);
            UnitGroupAdd(lv_patrolGroup, lv_convertUnit);
            UnitSetCustomValue(lv_convertUnit, 17, 2.0);
            lv_patrolForces += 1;
            lv_guardForces -= 1;
        }
    }

    auto072B5FE4_g = gv_corpResources[lp_corp];
    auto072B5FE4_u = UnitGroupCount(auto072B5FE4_g, c_unitCountAll);
    for (;; auto072B5FE4_u -= 1) {
        auto072B5FE4_var = UnitGroupUnitFromEnd(auto072B5FE4_g, auto072B5FE4_u);
        if (auto072B5FE4_var == null) { break; }
        lv_totalDanger91 += (FixedToInt(UnitGetCustomValue(auto072B5FE4_var, 15)) + 1);
    }
    auto12413AAA_g = gv_corpResources[lp_corp];
    auto12413AAA_u = UnitGroupCount(auto12413AAA_g, c_unitCountAll);
    for (;; auto12413AAA_u -= 1) {
        auto12413AAA_var = UnitGroupUnitFromEnd(auto12413AAA_g, auto12413AAA_u);
        if (auto12413AAA_var == null) { break; }
        UnitGroupRemoveUnitGroup(lv_guardGroup, lv_assignedSquad);
        UnitGroupRemoveUnitGroup(lv_assignedSquad, lv_assignedSquad);
        if ((UnitGroupCount(lv_guardGroup, c_unitCountAlive) > 0)) {
            auto7A735807_n = FixedToInt(Floor(((UnitGetCustomValue(auto12413AAA_var, 15) * IntToFixed(lv_guardForces)) / IntToFixed(lv_totalDanger91))));
            for (auto7A735807_i = 1; auto7A735807_i <= auto7A735807_n; auto7A735807_i += 1) {
                UnitGroupAdd(lv_assignedSquad, UnitGroupRandomUnit(lv_guardGroup, c_unitCountAlive));
            }
            autoC382FE0E_g = lv_assignedSquad;
            autoC382FE0E_u = UnitGroupCount(autoC382FE0E_g, c_unitCountAll);
            for (;; autoC382FE0E_u -= 1) {
                lv_assignedUnit = UnitGroupUnitFromEnd(autoC382FE0E_g, autoC382FE0E_u);
                if (lv_assignedUnit == null) { break; }
                UnitIssueOrder(lv_assignedUnit, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(auto12413AAA_var), 6.0))), c_orderQueueReplace);
            }
        }

    }
    auto81230C5B_g = gv_corpResources[lp_corp];
    auto81230C5B_u = UnitGroupCount(auto81230C5B_g, c_unitCountAll);
    for (;; auto81230C5B_u -= 1) {
        auto81230C5B_var = UnitGroupUnitFromEnd(auto81230C5B_g, auto81230C5B_u);
        if (auto81230C5B_var == null) { break; }
        UnitGroupRemoveUnitGroup(lv_patrolGroup, lv_assignedSquad);
        UnitGroupRemoveUnitGroup(lv_assignedSquad, lv_assignedSquad);
        if ((UnitGroupCount(lv_patrolGroup, c_unitCountAlive) > 0)) {
            auto92975140_n = FixedToInt(Floor(((UnitGetCustomValue(auto81230C5B_var, 15) * IntToFixed(lv_patrolForces)) / IntToFixed(lv_totalDanger91))));
            for (auto92975140_i = 1; auto92975140_i <= auto92975140_n; auto92975140_i += 1) {
                UnitGroupAdd(lv_assignedSquad, UnitGroupRandomUnit(lv_patrolGroup, c_unitCountAlive));
            }
        }

    }
    auto7E717548_g = lv_assignedSquad;
    auto7E717548_u = UnitGroupCount(auto7E717548_g, c_unitCountAll);
    for (;; auto7E717548_u -= 1) {
        auto7E717548_var = UnitGroupUnitFromEnd(auto7E717548_g, auto7E717548_u);
        if (auto7E717548_var == null) { break; }
        UnitIssueOrder(auto7E717548_var, OrderTargetingPoint(AbilityCommand("move", 1), RegionRandomPoint(RegionCircle(UnitGetPosition(UnitGroupRandomUnit(gv_corpResources[lp_corp], c_unitCountAlive)), 6.0))), c_orderQueueReplace);
    }
}

void gf_CResearchYearly (int lp_corp, int lp_budget) {
    // Variable Declarations
    int lv_upgradeLevel;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_budget > 10)) {
        if ((gf_CorpSpendMoney(lp_corp, lp_budget) == true)) {
            lv_upgradeLevel = (Log2I(lp_budget) + 0);
            lv_upgradeLevel /= 5;
            if ((lv_upgradeLevel < 0)) {
                lv_upgradeLevel = 0;
            }

            gv_cUpgradeLevels[lp_corp] += lv_upgradeLevel;
            if ((gv_cUpgradeLevels[lp_corp] < 0)) {
                gv_cUpgradeLevels[lp_corp] = 0;
            }

        }

    }

}

int gf_GetResourceUpgradeCost (unit lp_resource) {
    // Variable Declarations
    int lv_debtOwed;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((UnitGetType(lp_resource) == "BoreholeV") || (UnitGetType(lp_resource) == "OilWellII"))) {
        return 0;
    }

    if ((UnitGetType(lp_resource) == "Metal")) {
        return gv_metalMineCost[1];
    }

    if ((UnitGetType(lp_resource) == "MineI")) {
        return gv_metalMineCost[2];
    }

    if ((UnitGetType(lp_resource) == "MineII")) {
        return gv_metalMineCost[3];
    }

    if ((UnitGetType(lp_resource) == "MineIII")) {
        return gv_metalMineCost[4];
    }

    if ((UnitGetType(lp_resource) == "MineIV")) {
        return gv_metalMineCost[5];
    }

    if ((UnitGetType(lp_resource) == "MineV") && (gv_electricityIncome[UnitGetOwner(lp_resource)][1] > 0)) {
        return gv_metalBoreholeCost[1];
    }

    if ((UnitGetType(lp_resource) == "BoreholeI") && (gv_electricityIncome[UnitGetOwner(lp_resource)][1] > 0)) {
        return gv_metalBoreholeCost[2];
    }

    if ((UnitGetType(lp_resource) == "BoreholeII") && (gv_electricityIncome[UnitGetOwner(lp_resource)][1] > 0)) {
        return gv_metalBoreholeCost[3];
    }

    if ((UnitGetType(lp_resource) == "BoreholeIII") && (gv_electricityIncome[UnitGetOwner(lp_resource)][1] > 0)) {
        return gv_metalBoreholeCost[4];
    }

    if ((UnitGetType(lp_resource) == "BoreholeIV") && (gv_electricityIncome[UnitGetOwner(lp_resource)][1] > 0)) {
        return gv_metalBoreholeCost[5];
    }

    if ((UnitGetType(lp_resource) == "Oil")) {
        return gv_oilWellCost[1];
    }

    if ((UnitGetType(lp_resource) == "OilWellI")) {
        return gv_oilWellCost[2];
    }

    return 0;
}

int gf_GetResourceUpgradeValue (unit lp_resource) {
    // Variable Declarations
    int lv_finalForm;
    int lv_resourceUpgradeCost;
    int lv_resourcePrice;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_resourceUpgradeCost = gf_GetResourceUpgradeCost(lp_resource);
    lv_resourceUpgradeCost /= 10;
    if ((lv_resourceUpgradeCost == 0)) {
        lv_resourceUpgradeCost = 1000000;
    }

    if ((gv_aggregateResourcePrice[FixedToInt(UnitGetCustomValue(lp_resource, 10))][gf_GetResourceType(lp_resource)] < 4)) {
        if ((gv_aggregatePrice[gf_GetResourceType(lp_resource)][4] < 4)) {
            lv_resourcePrice = 50;
        }
        else {
            lv_resourcePrice = gv_aggregatePrice[gf_GetResourceType(lp_resource)][4];
        }
    }
    else {
        lv_resourcePrice = gv_aggregateResourcePrice[FixedToInt(UnitGetCustomValue(lp_resource, 10))][gf_GetResourceType(lp_resource)];
    }
    lv_finalForm = (lv_resourceUpgradeCost / lv_resourcePrice);
    if ((libNtve_gf_UnitInRegion(lp_resource, RegionFromId(67)) == true) && (gf_GetResourceType(lp_resource) == 2)) {
        lv_finalForm /= 3;
    }

    if ((libNtve_gf_UnitInRegion(lp_resource, RegionFromId(66)) == true) && (gf_GetResourceType(lp_resource) == 3)) {
        lv_finalForm /= 5;
    }

    if ((UnitGetCustomValue(lp_resource, 15) > 10.0)) {
        lv_finalForm *= 2;
    }

    return lv_finalForm;
}

void gf_CorpUpgradeResource (unit lp_resource) {
    // Variable Declarations
    int lv_realStore;
    fixed[100] lv_storedReals;

    // Automatic Variable Declarations
    const int auto21678803_ae = 64;
    const int auto21678803_ai = 1;
    const int auto1F5266B6_ae = 64;
    const int auto1F5266B6_ai = 1;

    // Variable Initialization

    // Implementation
    lv_realStore = 1;
    for ( ; ( (auto21678803_ai >= 0 && lv_realStore <= auto21678803_ae) || (auto21678803_ai < 0 && lv_realStore >= auto21678803_ae) ) ; lv_realStore += auto21678803_ai ) {
        lv_storedReals[lv_realStore] = UnitGetCustomValue(lp_resource, lv_realStore);
    }
    if ((UnitGetType(lp_resource) == "Metal")) {
        libNtve_gf_ReplaceUnit(lp_resource, "MineI", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
    }

    if ((UnitGetType(lp_resource) == "MineI")) {
        libNtve_gf_ReplaceUnit(lp_resource, "MineII", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
    }

    if ((UnitGetType(lp_resource) == "MineII")) {
        libNtve_gf_ReplaceUnit(lp_resource, "MineIII", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
    }

    if ((UnitGetType(lp_resource) == "MineIII")) {
        libNtve_gf_ReplaceUnit(lp_resource, "MineIV", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
    }

    if ((UnitGetType(lp_resource) == "MineIV")) {
        libNtve_gf_ReplaceUnit(lp_resource, "MineV", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
    }

    if ((UnitGetType(lp_resource) == "MineV")) {
        libNtve_gf_ReplaceUnit(lp_resource, "BoreholeI", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
    }

    if ((UnitGetType(lp_resource) == "BoreholeI")) {
        libNtve_gf_ReplaceUnit(lp_resource, "BoreholeII", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
    }

    if ((UnitGetType(lp_resource) == "BoreholeII")) {
        libNtve_gf_ReplaceUnit(lp_resource, "BoreholeIII", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
    }

    if ((UnitGetType(lp_resource) == "BoreholeIII")) {
        libNtve_gf_ReplaceUnit(lp_resource, "BoreholeIV", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
    }

    if ((UnitGetType(lp_resource) == "BoreholeIV")) {
        libNtve_gf_ReplaceUnit(lp_resource, "BoreholeV", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
    }

    if ((UnitGetType(lp_resource) == "Oil")) {
        libNtve_gf_ReplaceUnit(lp_resource, "OilWellI", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
    }

    if ((UnitGetType(lp_resource) == "OilWellI")) {
        libNtve_gf_ReplaceUnit(lp_resource, "OilWellII", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
    }

    lv_realStore = 1;
    for ( ; ( (auto1F5266B6_ai >= 0 && lv_realStore <= auto1F5266B6_ae) || (auto1F5266B6_ai < 0 && lv_realStore >= auto1F5266B6_ae) ) ; lv_realStore += auto1F5266B6_ai ) {
        UnitSetCustomValue(libNtve_gf_LastReplacedUnit(), lv_realStore, lv_storedReals[lv_realStore]);
    }
}

void gf_ExpansionBleed (int lp_corp) {
    // Variable Declarations
    int lv_transfercount;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((gv_cExpansionPot[lp_corp] > 0)) {
        lv_transfercount = gv_cExpansionPot[lp_corp];
        lv_transfercount /= 100;
        lv_transfercount *= 15;
        gv_cExpansionPot[lp_corp] -= lv_transfercount;
        gv_cInfrastructurePot[lp_corp] += lv_transfercount;
    }

}

void gf_SendExpedition (int lp_corp) {
    // Variable Declarations
    point lv_corpHeadquarters;
    unit lv_bestExpansion;

    // Automatic Variable Declarations
    unitgroup auto860127CC_g;
    int auto860127CC_u;
    unit auto860127CC_var;
    unitgroup autoB463BB7A_g;
    int autoB463BB7A_u;
    unit autoB463BB7A_var;
    unitgroup auto0BEB1AD0_g;
    int auto0BEB1AD0_u;
    unit auto0BEB1AD0_var;
    unitgroup auto83149B05_g;
    int auto83149B05_u;
    unit auto83149B05_var;
    unitgroup auto31634C2F_g;
    int auto31634C2F_u;
    unit auto31634C2F_var;
    unitgroup auto9B024ED2_g;
    int auto9B024ED2_u;
    unit auto9B024ED2_var;

    // Variable Initialization

    // Implementation
    if ((gv_cExpansionPot[lp_corp] > 500)) {
        lv_bestExpansion = gf_GetBestExpansion(lp_corp);
        if ((lv_bestExpansion == null)) {
        }
        else {
            if ((gf_CorpSpendMoney(lp_corp, gf_GetExpansionCost(lp_corp, lv_bestExpansion)) == true)) {
                gv_cExpansionPot[lp_corp] -= gf_GetExpansionCost(lp_corp, lv_bestExpansion);
                gv_cExpansionPot[lp_corp] = 0;
                auto860127CC_g = UnitGroup("CorporateHeadquarters", lp_corp, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                auto860127CC_u = UnitGroupCount(auto860127CC_g, c_unitCountAll);
                for (;; auto860127CC_u -= 1) {
                    auto860127CC_var = UnitGroupUnitFromEnd(auto860127CC_g, auto860127CC_u);
                    if (auto860127CC_var == null) { break; }
                    lv_corpHeadquarters = UnitGetPosition(auto860127CC_var);
                }
                if ((DistanceBetweenPoints(lv_corpHeadquarters, UnitGetPosition(lv_bestExpansion)) < 10.0)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ParamilitaryForces", 0, lp_corp, lv_corpHeadquarters);
                    auto9B024ED2_g = UnitLastCreatedGroup();
                    auto9B024ED2_u = UnitGroupCount(auto9B024ED2_g, c_unitCountAll);
                    for (;; auto9B024ED2_u -= 1) {
                        auto9B024ED2_var = UnitGroupUnitFromEnd(auto9B024ED2_g, auto9B024ED2_u);
                        if (auto9B024ED2_var == null) { break; }
                        UnitSetCustomValue(auto9B024ED2_var, 17, 3.0);
                        UnitIssueOrder(auto9B024ED2_var, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(lv_bestExpansion), 2.5))), c_orderQueueReplace);
                    }
                }
                else {
                    if ((DistanceBetweenPoints(lv_corpHeadquarters, UnitGetPosition(lv_bestExpansion)) < 30.0)) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(2, "ParamilitaryForces", 0, lp_corp, lv_corpHeadquarters);
                        auto31634C2F_g = UnitLastCreatedGroup();
                        auto31634C2F_u = UnitGroupCount(auto31634C2F_g, c_unitCountAll);
                        for (;; auto31634C2F_u -= 1) {
                            auto31634C2F_var = UnitGroupUnitFromEnd(auto31634C2F_g, auto31634C2F_u);
                            if (auto31634C2F_var == null) { break; }
                            UnitSetCustomValue(auto31634C2F_var, 17, 3.0);
                            UnitIssueOrder(auto31634C2F_var, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(lv_bestExpansion), 2.5))), c_orderQueueReplace);
                        }
                    }
                    else {
                        if ((DistanceBetweenPoints(lv_corpHeadquarters, UnitGetPosition(lv_bestExpansion)) < 50.0)) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(5, "ParamilitaryForces", 0, lp_corp, lv_corpHeadquarters);
                            auto83149B05_g = UnitLastCreatedGroup();
                            auto83149B05_u = UnitGroupCount(auto83149B05_g, c_unitCountAll);
                            for (;; auto83149B05_u -= 1) {
                                auto83149B05_var = UnitGroupUnitFromEnd(auto83149B05_g, auto83149B05_u);
                                if (auto83149B05_var == null) { break; }
                                UnitSetCustomValue(auto83149B05_var, 17, 3.0);
                                UnitIssueOrder(auto83149B05_var, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(lv_bestExpansion), 2.5))), c_orderQueueReplace);
                            }
                        }
                        else {
                            if ((DistanceBetweenPoints(lv_corpHeadquarters, UnitGetPosition(lv_bestExpansion)) < 100.0)) {
                                libNtve_gf_CreateUnitsWithDefaultFacing(10, "ParamilitaryForces", 0, lp_corp, lv_corpHeadquarters);
                                auto0BEB1AD0_g = UnitLastCreatedGroup();
                                auto0BEB1AD0_u = UnitGroupCount(auto0BEB1AD0_g, c_unitCountAll);
                                for (;; auto0BEB1AD0_u -= 1) {
                                    auto0BEB1AD0_var = UnitGroupUnitFromEnd(auto0BEB1AD0_g, auto0BEB1AD0_u);
                                    if (auto0BEB1AD0_var == null) { break; }
                                    UnitSetCustomValue(auto0BEB1AD0_var, 17, 3.0);
                                    UnitIssueOrder(auto0BEB1AD0_var, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(lv_bestExpansion), 2.5))), c_orderQueueReplace);
                                }
                            }
                            else {
                                libNtve_gf_CreateUnitsWithDefaultFacing(15, "ParamilitaryForces", 0, lp_corp, lv_corpHeadquarters);
                                autoB463BB7A_g = UnitLastCreatedGroup();
                                autoB463BB7A_u = UnitGroupCount(autoB463BB7A_g, c_unitCountAll);
                                for (;; autoB463BB7A_u -= 1) {
                                    autoB463BB7A_var = UnitGroupUnitFromEnd(autoB463BB7A_g, autoB463BB7A_u);
                                    if (autoB463BB7A_var == null) { break; }
                                    UnitSetCustomValue(autoB463BB7A_var, 17, 3.0);
                                    UnitIssueOrder(autoB463BB7A_var, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(lv_bestExpansion), 2.5))), c_orderQueueReplace);
                                }
                            }
                        }
                    }
                }
            }

        }
    }

}

unit gf_GetBestExpansion (int lp_corp) {
    // Variable Declarations
    point lv_headquarters;
    int lv_bestValue;
    unit lv_bestValueUnit;
    int lv_currentValue;
    unitgroup lv_possibleUnits;

    // Automatic Variable Declarations
    unitgroup autoBCAD99FC_g;
    int autoBCAD99FC_u;
    unit autoBCAD99FC_var;
    unitgroup auto43CDCBA6_g;
    int auto43CDCBA6_u;
    unit auto43CDCBA6_var;
    unitgroup auto63829385_g;
    int auto63829385_u;
    unit auto63829385_var;

    // Variable Initialization
    lv_possibleUnits = UnitGroupEmpty();

    // Implementation
    autoBCAD99FC_g = UnitGroup("CorporateHeadquarters", lp_corp, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoBCAD99FC_u = UnitGroupCount(autoBCAD99FC_g, c_unitCountAll);
    for (;; autoBCAD99FC_u -= 1) {
        autoBCAD99FC_var = UnitGroupUnitFromEnd(autoBCAD99FC_g, autoBCAD99FC_u);
        if (autoBCAD99FC_var == null) { break; }
        lv_headquarters = UnitGetPosition(autoBCAD99FC_var);
    }
    if ((lv_headquarters == null)) {
        return null;
    }

    auto43CDCBA6_g = gv_allResources;
    auto43CDCBA6_u = UnitGroupCount(auto43CDCBA6_g, c_unitCountAll);
    for (;; auto43CDCBA6_u -= 1) {
        auto43CDCBA6_var = UnitGroupUnitFromEnd(auto43CDCBA6_g, auto43CDCBA6_u);
        if (auto43CDCBA6_var == null) { break; }
        if (((UnitGetCustomValue(auto43CDCBA6_var, 10) == 0.0) || ((libNtve_gf_PlayerIsEnemy(UnitGetOwner(auto43CDCBA6_var), lp_corp, libNtve_ge_PlayerRelation_Enemy) == true) && (UnitGetCustomValue(auto43CDCBA6_var, 10) != lp_corp) && (libNtve_gf_PlayerIsEnemy(FixedToInt(UnitGetCustomValue(auto43CDCBA6_var, 0)), lp_corp, libNtve_ge_PlayerRelation_Enemy) == true))) && (libNtve_gf_UnitInRegion(auto43CDCBA6_var, RegionFromId(64)) == false)) {
            if ((gf_GetExpansionCost(lp_corp, auto43CDCBA6_var) <= gv_cExpansionPot[lp_corp])) {
                UnitGroupAdd(lv_possibleUnits, auto43CDCBA6_var);
            }

        }

    }
    if ((UnitGroupCount(lv_possibleUnits, c_unitCountAlive) == 0)) {
        return null;
    }

    auto63829385_g = lv_possibleUnits;
    auto63829385_u = UnitGroupCount(auto63829385_g, c_unitCountAll);
    for (;; auto63829385_u -= 1) {
        auto63829385_var = UnitGroupUnitFromEnd(auto63829385_g, auto63829385_u);
        if (auto63829385_var == null) { break; }
        lv_currentValue = ((300 - FixedToInt(DistanceBetweenPoints(UnitGetPosition(auto63829385_var), lv_headquarters))) * libNtve_gf_ArithmeticIntClamp(gv_aggregatePrice[gf_GetResourceType(auto63829385_var)][4], 6, 400));
        lv_currentValue += FixedToInt(UnitGetCustomValue(auto63829385_var, (30 + lp_corp)));
        lv_currentValue -= FixedToInt(UnitGetCustomValue(auto63829385_var, 17));
        lv_currentValue *= RandomInt(5, 15);
        lv_currentValue /= 10;
        if ((UnitGetOwner(auto63829385_var) > 8)) {
            lv_currentValue /= 4;
        }

        if ((lv_currentValue > lv_bestValue)) {
            lv_bestValue = lv_currentValue;
            lv_bestValueUnit = auto63829385_var;
        }

    }
    return lv_bestValueUnit;
}

int gf_GetExpansionCost (int lp_corp, unit lp_resource) {
    // Variable Declarations
    int lv_cost;
    point lv_headquarters;
    int lv_bestValue;
    unit lv_bestValueUnit;
    int lv_currentValue;
    unitgroup lv_possibleUnits;

    // Automatic Variable Declarations
    unitgroup auto579A2826_g;
    int auto579A2826_u;
    unit auto579A2826_var;

    // Variable Initialization
    lv_cost = 1000000000;
    lv_possibleUnits = UnitGroupEmpty();

    // Implementation
    auto579A2826_g = UnitGroup("CorporateHeadquarters", lp_corp, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto579A2826_u = UnitGroupCount(auto579A2826_g, c_unitCountAll);
    for (;; auto579A2826_u -= 1) {
        auto579A2826_var = UnitGroupUnitFromEnd(auto579A2826_g, auto579A2826_u);
        if (auto579A2826_var == null) { break; }
        lv_headquarters = UnitGetPosition(auto579A2826_var);
    }
    if ((lv_headquarters == null)) {
        return lv_cost;
    }

    lv_cost = (FixedToInt(DistanceBetweenPoints(UnitGetPosition(lp_resource), lv_headquarters)) * 250);
    return lv_cost;
}

void gf_FreeFoodToFixBug () {
    // Automatic Variable Declarations
    // Implementation
}

void gf_CheckForBuyOutsorNationalizings () {
    // Variable Declarations
    bool lv_good;
    int lv_debtOwed;
    int lv_buyOutCost;
    int lv_player;
    int lv_corp;

    // Automatic Variable Declarations
    playergroup auto199623B4_g;
    int auto199623B4_var;
    const int autoC7B5794F_ae = 7;
    const int autoC7B5794F_ai = 1;
    const int auto342CCABA_ae = 7;
    const int auto342CCABA_ai = 1;
    unitgroup autoD837AC43_g;
    int autoD837AC43_u;
    unit autoD837AC43_var;
    playergroup auto028A142F_g;
    int auto028A142F_var;
    const int auto49412191_ae = 7;
    const int auto49412191_ai = 1;
    const int auto41611A94_ae = 7;
    const int auto41611A94_ai = 1;
    const int autoD933677A_ae = 7;
    const int autoD933677A_ai = 1;
    const int autoAA448F56_ae = 7;
    const int autoAA448F56_ai = 1;

    // Variable Initialization

    // Implementation
    auto199623B4_g = gv_users;
    auto199623B4_var = -1;
    while (true) {
        auto199623B4_var = PlayerGroupNextPlayer(auto199623B4_g, auto199623B4_var);
        if (auto199623B4_var < 0) { break; }
        lv_corp = 1;
        for ( ; ( (autoC7B5794F_ai >= 0 && lv_corp <= autoC7B5794F_ae) || (autoC7B5794F_ai < 0 && lv_corp >= autoC7B5794F_ae) ) ; lv_corp += autoC7B5794F_ai ) {
            if ((gv_buyOut[auto199623B4_var][lv_corp] == true) && (auto199623B4_var != lv_corp)) {
                lv_good = false;
                lv_buyOutCost = ((10000 - gv_stockOwned[auto199623B4_var][lv_corp]) * gv_stockPrice[lv_corp]);
                if ((PlayerGetPropertyInt(auto199623B4_var, c_playerPropMinerals) > lv_buyOutCost)) {
                    PlayerModifyPropertyInt(auto199623B4_var, c_playerPropMinerals, c_playerPropOperSubtract, lv_buyOutCost);
                    lv_good = true;
                }
                else {
                    lv_debtOwed = (lv_buyOutCost - PlayerGetPropertyInt(auto199623B4_var, c_playerPropMinerals));
                    if ((gf_TakeLoan(auto199623B4_var, lv_debtOwed) == true)) {
                        PlayerModifyPropertyInt(auto199623B4_var, c_playerPropMinerals, c_playerPropOperSetTo, 0);
                        lv_good = true;
                    }

                }
                if ((lv_good == true)) {
                    if ((gv_deadCorp[auto199623B4_var] == true)) {
                        gf_CreateCorporation(auto199623B4_var);
                    }

                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextWithColor((PlayerName(auto199623B4_var) + (StringExternal("Param/Value/7DE732B8") + (StringToText(gv_corpName[auto199623B4_var]) + (StringExternal("Param/Value/0C59DAE2") + (IntToText(lv_buyOutCost) + StringExternal("Param/Value/036E4346")))))), Color(100.00, 0.00, 0.00)));
                    lv_player = 1;
                    for ( ; ( (auto342CCABA_ai >= 0 && lv_player <= auto342CCABA_ae) || (auto342CCABA_ai < 0 && lv_player >= auto342CCABA_ae) ) ; lv_player += auto342CCABA_ai ) {
                        if ((lv_player == auto199623B4_var)) {
                            gv_corporateIncome[auto199623B4_var][2] += (gv_cAssetValue[lv_corp] / 3);
                            gv_cCredits[auto199623B4_var] += (gv_cAssetValue[lv_corp] / 3);
                            UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaSubtitle, ((StringExternal("Param/Value/7AD6DA81") + TextWithColor(gf_MakeUIPresentable((gv_cAssetValue[lv_corp] / 3)), Color(0.00, 100.00, 0.00))) + StringExternal("Param/Value/4FC7CCFF")));
                        }
                        else {
                            if ((gv_stockOwned[lv_player][lv_corp] > 0)) {
                                gv_deInvestmentIncome[lv_player][0] += (gv_stockOwned[lv_player][lv_corp] * gv_stockPrice[lv_corp]);
                                UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaSubtitle, ((StringExternal("Param/Value/D7BCFC80") + TextWithColor(gf_MakeUIPresentable(gv_deInvestmentIncome[lv_player][0]), Color(0.00, 100.00, 0.00))) + StringExternal("Param/Value/C4C74DDB")));
                                gv_stockOwned[lv_player][lv_corp] = 0;
                            }

                        }
                    }
                    autoD837AC43_g = gv_allResources;
                    autoD837AC43_u = UnitGroupCount(autoD837AC43_g, c_unitCountAll);
                    for (;; autoD837AC43_u -= 1) {
                        autoD837AC43_var = UnitGroupUnitFromEnd(autoD837AC43_g, autoD837AC43_u);
                        if (autoD837AC43_var == null) { break; }
                        if ((UnitGetCustomValue(autoD837AC43_var, 10) == lv_corp)) {
                            UnitSetCustomValue(autoD837AC43_var, 10, IntToFixed(auto199623B4_var));
                        }

                    }
                    gf_KillCorp(lv_corp);
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(auto199623B4_var), c_messageAreaSubtitle, StringExternal("Param/Value/32A3650C"));
                }
            }

        }
    }
    auto028A142F_g = gv_users;
    auto028A142F_var = -1;
    while (true) {
        auto028A142F_var = PlayerGroupNextPlayer(auto028A142F_g, auto028A142F_var);
        if (auto028A142F_var < 0) { break; }
        lv_good = false;
        if ((gv_nationalizitions[auto028A142F_var] == true)) {
            if ((gv_deadCorp[auto028A142F_var] == false)) {
                if ((gv_nationalized[auto028A142F_var] == false)) {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextWithColor((gf_NationOfPlayer(auto028A142F_var) + (StringExternal("Param/Value/46FCF6AF") + (StringToText(gv_corpName[auto028A142F_var]) + StringExternal("Param/Value/ACF24739")))), Color(100.00, 0.00, 0.00)));
                    gv_nationalized[auto028A142F_var] = true;
                    lv_player = 1;
                    for ( ; ( (auto49412191_ai >= 0 && lv_player <= auto49412191_ae) || (auto49412191_ai < 0 && lv_player >= auto49412191_ae) ) ; lv_player += auto49412191_ai ) {
                        gv_stockOwned[lv_player][auto028A142F_var] = 0;
                    }
                    gv_stockOwned[auto028A142F_var][auto028A142F_var] = 10000;
                    gv_cDebt[auto028A142F_var] = 0;
                    gv_cCredits[auto028A142F_var] /= RandomInt(3, 5);
                    UIDisplayMessage(PlayerGroupSingle(auto028A142F_var), c_messageAreaSubtitle, (StringExternal("Param/Value/FFB3CEDB") + (TextWithColor(IntToText(gv_cCredits[auto028A142F_var]), Color(0.00, 100.00, 0.00)) + StringExternal("Param/Value/F782FCAD"))));
                    gv_corporateIncome[auto028A142F_var][0] += gv_cCredits[auto028A142F_var];
                    gv_cCredits[auto028A142F_var] = 200;
                }
                else {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextWithColor((gf_NationOfPlayer(auto028A142F_var) + (StringExternal("Param/Value/BBCC9698") + (StringToText(gv_corpName[auto028A142F_var]) + StringExternal("Param/Value/EF0251F0")))), Color(0.00, 100.00, 0.00)));
                    gv_nationalized[auto028A142F_var] = false;
                    gv_stockOwned[auto028A142F_var][auto028A142F_var] = 0;
                    gv_cDebt[auto028A142F_var] = 0;
                    gv_cCredits[auto028A142F_var] += 1000;
                }
            }
            else {
                if ((PlayerGetPropertyInt(auto028A142F_var, c_playerPropMinerals) > 10000)) {
                    PlayerModifyPropertyInt(auto028A142F_var, c_playerPropMinerals, c_playerPropOperSubtract, 10000);
                    gv_deadCorp[auto028A142F_var] = false;
                    gv_cCredits[auto028A142F_var] = 45000;
                    gf_CreateCorporation(auto028A142F_var);
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(auto028A142F_var), c_messageAreaSubtitle, StringExternal("Param/Value/08785C44"));
                }
            }
        }

        if ((gv_buyOut[auto028A142F_var][auto028A142F_var] == true)) {
            lv_buyOutCost = ((10000 - gv_stockOwned[auto028A142F_var][auto028A142F_var]) * gv_stockPrice[auto028A142F_var]);
            if ((PlayerGetPropertyInt(auto028A142F_var, c_playerPropMinerals) > lv_buyOutCost)) {
                PlayerModifyPropertyInt(auto028A142F_var, c_playerPropMinerals, c_playerPropOperSubtract, lv_buyOutCost);
                lv_good = true;
            }
            else {
                lv_debtOwed = (lv_buyOutCost - PlayerGetPropertyInt(auto028A142F_var, c_playerPropMinerals));
                if ((gf_TakeLoan(auto028A142F_var, lv_debtOwed) == true)) {
                    PlayerModifyPropertyInt(auto028A142F_var, c_playerPropMinerals, c_playerPropOperSetTo, 0);
                    lv_good = true;
                }

            }
            if ((lv_good == true)) {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextWithColor((PlayerName(auto028A142F_var) + (StringExternal("Param/Value/7114F213") + (StringToText(gv_corpName[auto028A142F_var]) + (StringExternal("Param/Value/F3F518AD") + (IntToText(lv_buyOutCost) + StringExternal("Param/Value/B453EED2")))))), Color(100.00, 0.00, 0.00)));
                gv_nationalized[auto028A142F_var] = true;
                lv_player = 1;
                for ( ; ( (auto41611A94_ai >= 0 && lv_player <= auto41611A94_ae) || (auto41611A94_ai < 0 && lv_player >= auto41611A94_ae) ) ; lv_player += auto41611A94_ai ) {
                    if ((lv_player == auto028A142F_var)) {
                    }
                    else {
                        gv_deInvestmentIncome[lv_player][0] += (gv_stockOwned[lv_player][auto028A142F_var] * gv_stockPrice[auto028A142F_var]);
                        UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaSubtitle, ((StringExternal("Param/Value/535C0354") + TextWithColor(IntToText(gv_deInvestmentIncome[lv_player][0]), Color(0.00, 100.00, 0.00))) + StringExternal("Param/Value/3638364B")));
                        gv_stockOwned[lv_player][auto028A142F_var] = 0;
                    }
                }
                gv_stockOwned[auto028A142F_var][auto028A142F_var] = 10000;
                gv_cDebt[auto028A142F_var] = 0;
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(auto028A142F_var), c_messageAreaSubtitle, StringExternal("Param/Value/2E63E80D"));
            }
        }

    }
    lv_player = 1;
    for ( ; ( (autoD933677A_ai >= 0 && lv_player <= autoD933677A_ae) || (autoD933677A_ai < 0 && lv_player >= autoD933677A_ae) ) ; lv_player += autoD933677A_ai ) {
        gv_nationalizitions[lv_player] = false;
        lv_corp = 1;
        for ( ; ( (autoAA448F56_ai >= 0 && lv_corp <= autoAA448F56_ae) || (autoAA448F56_ai < 0 && lv_corp >= autoAA448F56_ae) ) ; lv_corp += autoAA448F56_ai ) {
            gv_buyOut[lv_player][lv_corp] = false;
        }
    }
}

point gf_FindNewHeadquarters (int lp_player) {
    // Variable Declarations
    unitgroup lv_consideredArea;
    unitgroup lv_reallyConsidered;

    // Automatic Variable Declarations
    unitgroup autoBB131135_g;
    int autoBB131135_u;
    unit autoBB131135_var;

    // Variable Initialization
    lv_consideredArea = UnitGroupEmpty();
    lv_reallyConsidered = UnitGroupEmpty();

    // Implementation
    if ((RandomInt(0, 100) < 20)) {
    }
    else {
        return null;
    }
    autoBB131135_g = UnitGroup(null, lp_player, RegionEntireMap(), UnitFilter((1 << c_targetFilterPsionic) | (1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoBB131135_u = UnitGroupCount(autoBB131135_g, c_unitCountAll);
    for (;; autoBB131135_u -= 1) {
        autoBB131135_var = UnitGroupUnitFromEnd(autoBB131135_g, autoBB131135_u);
        if (autoBB131135_var == null) { break; }
        if ((DistanceBetweenPoints(UnitGetPosition(autoBB131135_var), UnitGetPosition(UnitGroupClosestToPoint(UnitGroupAlliance(lp_player, c_unitAllianceEnemy, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(autoBB131135_var)))) > 10.0)) {
            if ((UnitGetType(autoBB131135_var) == "Capital") && (RandomInt(0, 100) < 50)) {
                return RegionRandomPoint(RegionCircle(UnitGetPosition(autoBB131135_var), 16.0));
            }

            if ((UnitGetType(autoBB131135_var) == "DataCore") && (RandomInt(0, 100) < 75)) {
                UnitGroupAdd(lv_reallyConsidered, autoBB131135_var);
            }

            UnitGroupAdd(lv_consideredArea, autoBB131135_var);
        }

    }
    if ((UnitGroupCount(lv_reallyConsidered, c_unitCountAlive) > 2)) {
        return RegionRandomPoint(RegionCircle(UnitGetPosition(UnitGroupRandomUnit(lv_reallyConsidered, c_unitCountAlive)), 8.0));
    }
    else {
        if ((UnitGroupCount(lv_consideredArea, c_unitCountAlive) > 5)) {
            return RegionRandomPoint(RegionCircle(UnitGetPosition(UnitGroupRandomUnit(lv_consideredArea, c_unitCountAlive)), 4.0));
        }

    }
    return null;
}

string gf_CorporationNoun (int lp_player) {
    // Variable Declarations
    int lv_random;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((TechTreeUpgradeCount(lp_player, "Communism", c_techCountCompleteOnly) == 1) || (TechTreeUpgradeCount(lp_player, "SocialistRepublic", c_techCountCompleteOnly) == 1))) {
        lv_random = RandomInt(1, 7);
        if ((lv_random == 1)) {
            return "Commune";
        }

        if ((lv_random == 2)) {
            return "Union";
        }

        if ((lv_random == 3)) {
            return "Syndicate";
        }

        if ((lv_random == 4)) {
            return "Workers";
        }

        if ((lv_random == 6)) {
            return "Association";
        }

        if ((lv_random == 7)) {
            return "Club";
        }

    }

    if (((TechTreeUpgradeCount(lp_player, "GrandEmpire", c_techCountCompleteOnly) == 1) || (TechTreeUpgradeCount(lp_player, "Neofascism", c_techCountCompleteOnly) == 1))) {
        lv_random = RandomInt(1, 3);
        if ((lv_random == 1)) {
            return "Standard";
        }

        if ((lv_random == 2)) {
            return "State";
        }

        if ((lv_random == 3)) {
            return "Chartered";
        }

    }

    if (((TechTreeUpgradeCount(lp_player, "DirectDemocracy", c_techCountCompleteOnly) == 1) || (TechTreeUpgradeCount(lp_player, "FauxDemocracy", c_techCountCompleteOnly) == 1) || (TechTreeUpgradeCount(lp_player, "NeoFederation", c_techCountCompleteOnly) == 1) || (TechTreeUpgradeCount(lp_player, "Corporatocracy", c_techCountCompleteOnly) == 1))) {
        return gf_GetPersonNameFromCultureGroup(lp_player);
    }

    return "Incorporated";
}

string gf_ResourceNoun (int lp_player) {
    // Variable Declarations
    int lv_random;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_random = RandomInt(1, 8);
    if ((lv_random == 1)) {
        return "Goods";
    }

    if ((lv_random == 2)) {
        return "Supplies";
    }

    if ((lv_random == 3)) {
        return "Materials";
    }

    if ((lv_random == 4)) {
        return "Equipment";
    }

    if ((lv_random == 5)) {
        return "Resources";
    }

    if ((lv_random == 6)) {
        return "Cargo";
    }

    if ((lv_random == 7)) {
        return "Stock";
    }

    if ((lv_random == 8)) {
        return "Company";
    }

    return "ResourceError";
}

bool gf_CTakeLoan (int lp_corp, int lp_ammount) {
    // Automatic Variable Declarations
    // Implementation
    if (((gv_cDebt[lp_corp] + lp_ammount) >= (gv_cAssetValue[lp_corp] / 2))) {
        gv_cDebt[lp_corp] += lp_ammount;
        if ((RandomInt(0, 100) < 20) && (gv_deadCorp[lp_corp] == false)) {
            UIDisplayMessage(PlayerGroupSingle(lp_corp), c_messageAreaSubtitle, StringExternal("Param/Value/0F60FEE9"));
        }

        return true;
    }
    else {
        return false;
    }
}

void gf_CBankrupt (int lp_corp) {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_deadCorp[lp_corp] == true)) {
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(StringToText(gv_corpName[lp_corp]), Color(100.00, 0.00, 0.00)) + StringExternal("Param/Value/A1F83F73")));
        gv_economyHealth -= libNtve_gf_ArithmeticIntClamp(gv_stockPrice[lp_corp], 20, 200);
        gf_KillCorp(lp_corp);
    }
}

void gf_KillCorp (int lp_corp) {
    // Variable Declarations
    int lv_rNA;
    int lv_player;
    int lv_corp;

    // Automatic Variable Declarations
    const int auto7AFED7D3_ae = 7;
    const int auto7AFED7D3_ai = 1;
    unitgroup auto2884E34A_g;
    int auto2884E34A_u;
    unit auto2884E34A_var;
    unitgroup autoC99F9687_g;
    int autoC99F9687_u;
    unit autoC99F9687_var;
    unitgroup autoA70D87B7_g;
    int autoA70D87B7_u;
    unit autoA70D87B7_var;

    // Variable Initialization
    lv_corp = lp_corp;

    // Implementation
    gv_deadCorp[lp_corp] = true;
    gv_cExportIncome[lv_corp][1][lv_rNA] = 0;
    gv_cExportIncome[lv_corp][2][lv_rNA] = 0;
    gv_cExportIncome[lv_corp][3][lv_rNA] = 0;
    gv_cGrantsIncome[lv_corp][lv_rNA] = 0;
    gv_cTotalIncome[lv_corp][lv_rNA] = 0;
    gv_cUpkeepExpenses[lv_corp][lv_rNA] = 0;
    gv_cImportExpenses[lv_corp][1][lv_rNA] = 0;
    gv_cImportExpenses[lv_corp][2][lv_rNA] = 0;
    gv_cImportExpenses[lv_corp][3][lv_rNA] = 0;
    gv_cInterestExpenses[lv_corp][lv_rNA] = 0;
    gv_cTaxExpenses[lv_corp][lv_rNA] = 0;
    gv_cDividendExpenses[lv_corp][lv_rNA] = 0;
    gv_cTotalExpenses[lv_corp][lv_rNA] = 0;
    gv_cTotalRevenue[lv_corp][lv_rNA] = 0;
    gv_cRDobsolete[lv_corp][lv_rNA] = 0;
    gv_cRevenue[lv_corp][lv_rNA] = 0;
    gv_cDebt[lv_corp] = 0;
    gv_cCredits[lv_corp] = 0;
    gv_aggregateResourcePrice[lv_corp][0] = 0;
    gv_cDebt[lv_corp] = 0;
    gv_corpTicker[lv_corp] = "";
    gv_corpName[lv_corp] = "";
    gv_nationalized[lv_corp] = false;
    lv_player = 1;
    for ( ; ( (auto7AFED7D3_ai >= 0 && lv_player <= auto7AFED7D3_ae) || (auto7AFED7D3_ai < 0 && lv_player >= auto7AFED7D3_ae) ) ; lv_player += auto7AFED7D3_ai ) {
        if ((gv_selectedCorporation[lv_player] == lp_corp)) {
            gv_selectedCorporation[lv_player] = 0;
        }

        gv_stockOwned[lv_player][lp_corp] = 0;
        gv_stockTarget[lv_player][lp_corp] = 0;
        gv_stockPrice[lv_player] = 0;
    }
    auto2884E34A_g = gv_allResources;
    auto2884E34A_u = UnitGroupCount(auto2884E34A_g, c_unitCountAll);
    for (;; auto2884E34A_u -= 1) {
        auto2884E34A_var = UnitGroupUnitFromEnd(auto2884E34A_g, auto2884E34A_u);
        if (auto2884E34A_var == null) { break; }
        if ((UnitGetCustomValue(auto2884E34A_var, 10) == lp_corp)) {
            gf_WipeUnitCustomValues(auto2884E34A_var, 1, 64);
        }

    }
    autoC99F9687_g = UnitGroup("CorporateHeadquarters", lp_corp, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC99F9687_u = UnitGroupCount(autoC99F9687_g, c_unitCountAll);
    for (;; autoC99F9687_u -= 1) {
        autoC99F9687_var = UnitGroupUnitFromEnd(autoC99F9687_g, autoC99F9687_u);
        if (autoC99F9687_var == null) { break; }
        UnitKill(autoC99F9687_var);
    }
    autoA70D87B7_g = UnitGroup("ParamilitaryForces", lp_corp, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA70D87B7_u = UnitGroupCount(autoA70D87B7_g, c_unitCountAll);
    for (;; autoA70D87B7_u -= 1) {
        autoA70D87B7_var = UnitGroupUnitFromEnd(autoA70D87B7_g, autoA70D87B7_u);
        if (autoA70D87B7_var == null) { break; }
        UnitKill(autoA70D87B7_var);
    }
}

int gf_CollectTariffs (int lp_exporter, int lp_importer, int lp_price, int lp_quantity) {
    // Variable Declarations
    int lv_importIncome;
    int lv_exportIncome;
    int lv_newCost;
    int lv_tariff;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((lp_exporter > 7) || (lp_importer > 7) || (lp_exporter == lp_importer))) {
        return 0;
    }
    else {
        lv_importIncome = ((gv_importTariff[lp_importer][lp_exporter] * lp_price) / 100);
        lv_exportIncome = ((gv_exportTariff[lp_exporter][lp_importer] * lp_price) / 100);
        lv_importIncome = (lp_quantity * lv_importIncome);
        lv_exportIncome = (lp_quantity * lv_exportIncome);
        gv_tariffIncome[lp_importer][0] += gv_importTariff[lp_importer][lp_exporter];
        gv_tariffIncome[lp_exporter][0] += gv_importTariff[lp_exporter][lp_importer];
        return (lv_importIncome + lv_exportIncome);
    }
}

void gf_CollectTariffSell (int lp_exporter, int lp_importer, int lp_price, int lp_quantity) {
    // Variable Declarations
    int lv_importIncome;
    int lv_exportIncome;
    int lv_newCost;
    int lv_tariff;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((lp_exporter > 7) || (lp_importer > 7) || (lp_exporter == lp_importer))) {
    }
    else {
        lv_importIncome = ((gv_importTariff[lp_importer][lp_exporter] * lp_price) / 100);
        lv_importIncome = (lp_quantity * lv_importIncome);
        gv_tariffIncome[lp_importer][0] += gv_importTariff[lp_importer][lp_exporter];
    }
}

int gf_CalculateCostWithTariffs (int lp_exporter, int lp_importer, int lp_price) {
    // Variable Declarations
    int lv_importIncome;
    int lv_exportIncome;
    int lv_newCost;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((lp_exporter > 7) || (lp_importer > 7) || (lp_exporter == lp_importer))) {
        return lp_price;
    }
    else {
        lv_importIncome = ((gv_importTariff[lp_importer][lp_exporter] * lp_price) / 100);
        lv_exportIncome = ((gv_exportTariff[lp_exporter][lp_importer] * lp_price) / 100);
        lv_newCost = ((lv_importIncome + lv_exportIncome) + lp_price);
        return lv_newCost;
    }
}

int gf_CalculateCostWithTariffsCountingAsLoss (int lp_exporter, int lp_importer, int lp_price) {
    // Variable Declarations
    int lv_importIncome;
    int lv_exportIncome;
    int lv_newCost;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((lp_exporter > 7) || (lp_importer > 7) || (lp_exporter == lp_importer))) {
        return lp_price;
    }
    else {
        lv_importIncome = ((gv_importTariff[lp_importer][lp_exporter] * lp_price) / -100);
        lv_exportIncome = ((gv_exportTariff[lp_exporter][lp_importer] * lp_price) / -100);
        lv_newCost = ((lv_importIncome + lv_exportIncome) + lp_price);
        return lv_newCost;
    }
}

int gf_CalculateTariffsSellResources (int lp_exporter, int lp_importer, int lp_price) {
    // Variable Declarations
    int lv_importIncome;
    int lv_exportIncome;
    int lv_lostToTariffs;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((lp_exporter > 7) || (lp_importer > 7) || (lp_exporter == lp_importer))) {
        return 0;
    }
    else {
        lv_importIncome = ((gv_importTariff[lp_importer][lp_exporter] * lp_price) / 100);
        lv_lostToTariffs = ((lv_importIncome - 0) + 0);
        return lv_lostToTariffs;
    }
}

void gf_RefreshResourceActualDemand (unit lp_resource, bool lp_phaseOutCivilianDemand) {
    // Variable Declarations
    int lv_calculatedDemand;
    int lv_oldDemand;
    int lv_newDemand;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_oldDemand = gf_GetUnitCustomValue(lp_resource, 13);
    if ((lp_phaseOutCivilianDemand == true)) {
        lv_newDemand = (gf_GetAggregateCivilianDemand(lp_resource) + gf_GetUnitCustomValue(lp_resource, 30));
    }
    else {
        lv_newDemand = (lv_oldDemand + gf_GetUnitCustomValue(lp_resource, 30));
    }
    lv_calculatedDemand = (((lv_oldDemand * 9) + (lv_newDemand * 1)) / 10);
    gf_SetUnitCustomValue(lp_resource, 13, lv_calculatedDemand);
}

void gf_WipeResourceAdditionalDemand (unit lp_resource) {
    // Automatic Variable Declarations
    // Implementation
    gf_WipeUnitCustomValues(lp_resource, 21, 30);
}

int gf_GetAggregateCivilianDemand (unit lp_resource) {
    // Variable Declarations
    int lv_aggregateDemand;
    int lv_range;

    // Automatic Variable Declarations
    const int autoB2D74221_ae = 27;
    const int autoB2D74221_ai = 1;

    // Variable Initialization

    // Implementation
    lv_range = 21;
    for ( ; ( (autoB2D74221_ai >= 0 && lv_range <= autoB2D74221_ae) || (autoB2D74221_ai < 0 && lv_range >= autoB2D74221_ae) ) ; lv_range += autoB2D74221_ai ) {
        lv_aggregateDemand += gf_GetUnitCustomValue(lp_resource, lv_range);
    }
    return lv_aggregateDemand;
}

void gf_WipeUnitCustomValues (unit lp_unit, int lp_startRange, int lp_endRange) {
    // Variable Declarations
    int lv_range;

    // Automatic Variable Declarations
    int auto83B7C36E_ae;
    const int auto83B7C36E_ai = 1;

    // Variable Initialization

    // Implementation
    auto83B7C36E_ae = lp_endRange;
    lv_range = lp_startRange;
    for ( ; ( (auto83B7C36E_ai >= 0 && lv_range <= auto83B7C36E_ae) || (auto83B7C36E_ai < 0 && lv_range >= auto83B7C36E_ae) ) ; lv_range += auto83B7C36E_ai ) {
        if ((lv_range == 91)) {
        }
        else {
            UnitSetCustomValue(lp_unit, lv_range, 0.0);
        }
    }
}

void gf_NoNegativeCustomValues (unit lp_unit, int lp_startRange, int lp_endRange) {
    // Variable Declarations
    int lv_range;

    // Automatic Variable Declarations
    int auto05F92B2B_ae;
    const int auto05F92B2B_ai = 1;

    // Variable Initialization

    // Implementation
    auto05F92B2B_ae = lp_endRange;
    lv_range = lp_startRange;
    for ( ; ( (auto05F92B2B_ai >= 0 && lv_range <= auto05F92B2B_ae) || (auto05F92B2B_ai < 0 && lv_range >= auto05F92B2B_ae) ) ; lv_range += auto05F92B2B_ai ) {
        if ((UnitGetCustomValue(lp_unit, lv_range) < 0.0)) {
            UnitSetCustomValue(lp_unit, lv_range, 0.0);
        }

    }
}

int gf_GetResourceType (unit lp_resource) {
    // Automatic Variable Declarations
    // Implementation
    if (((UnitGetType(lp_resource) == "CorporateHeadquarters") || (UnitGetType(lp_resource) == "FarmI") || (UnitGetType(lp_resource) == "FarmII") || (UnitGetType(lp_resource) == "FarmIII") || (UnitGetType(lp_resource) == "FarmIV") || (UnitGetType(lp_resource) == "FarmV") || (UnitGetType(lp_resource) == "HydrofarmI") || (UnitGetType(lp_resource) == "HydrofarmII") || (UnitGetType(lp_resource) == "HydrofarmIII") || (UnitGetType(lp_resource) == "HydrofarmIV") || (UnitGetType(lp_resource) == "HydrofarmV"))) {
        return 1;
    }

    if (((UnitGetType(lp_resource) == "Metal") || (UnitGetType(lp_resource) == "MineI") || (UnitGetType(lp_resource) == "MineII") || (UnitGetType(lp_resource) == "MineIII") || (UnitGetType(lp_resource) == "MineIV") || (UnitGetType(lp_resource) == "MineV") || (UnitGetType(lp_resource) == "BoreholeI") || (UnitGetType(lp_resource) == "BoreholeII") || (UnitGetType(lp_resource) == "BoreholeIII") || (UnitGetType(lp_resource) == "BoreholeIV") || (UnitGetType(lp_resource) == "BoreholeV"))) {
        return 2;
    }

    if (((UnitGetType(lp_resource) == "Oil") || (UnitGetType(lp_resource) == "OilWellI") || (UnitGetType(lp_resource) == "OilWellII") || (UnitGetType(lp_resource) == "SMGenericMaleOfficer022"))) {
        return 3;
    }

    return 0;
}

void gf_SetLocalResourcePrice (unit lp_resource) {
    // Variable Declarations
    int lv_oldPrice;
    int lv_meanGDP;
    int lv_demand;
    int lv_supply;
    int lv_newPrice;
    fixed lv_targetPrice;
    int lv_ticksCheaper;
    const int lv_tICKS_CHEAPER_BEFORE_ACTUAL_PRICE_CHANGE = 3;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((UnitGetOwner(lp_resource) > 7) || (UnitGetOwner(lp_resource) == 0))) {
    }
    else {
        lv_meanGDP = FixedToInt(UnitGetCustomValue(lp_resource, 28));
        lv_demand = gf_GetUnitCustomValue(lp_resource, 13);
        lv_supply = gf_GetUnitCustomValue(lp_resource, 12);
        lv_oldPrice = FixedToInt(UnitGetCustomValue(lp_resource, 14));
        lv_targetPrice = gf_GetEquilibriumPrice(lv_demand, lv_supply, lv_meanGDP, gf_GetResourceType(lp_resource));
        lv_newPrice = FixedToInt(((((UnitGetCustomValue(lp_resource, 14) * 1.0) + gv_aggregateResourcePrice[FixedToInt(UnitGetCustomValue(lp_resource, 10))][gf_GetResourceType(lp_resource)]) + lv_targetPrice) / 3.0));
        lv_newPrice = libNtve_gf_ArithmeticIntClamp(lv_newPrice, 1, 9999);
        lv_ticksCheaper = FixedToInt(UnitGetCustomValue(lp_resource, 45));
        UnitSetCustomValue(lp_resource, 46, IntToFixed(lv_newPrice));
        if ((lv_newPrice < lv_oldPrice) && (lv_ticksCheaper < lv_tICKS_CHEAPER_BEFORE_ACTUAL_PRICE_CHANGE)) {
            UnitSetCustomValue(lp_resource, 45, IntToFixed((lv_ticksCheaper + 1)));
        }
        else {
            UnitSetCustomValue(lp_resource, 45, 0.0);
            UnitSetCustomValue(lp_resource, 14, IntToFixed(lv_newPrice));
        }
        UnitSetCustomValue(lp_resource, 44, lv_oldPrice);
    }
}

fixed gf_GetEquilibriumPrice (int lp_demand, int lp_quantitySupplied, fixed lp_gDPCapita, int lp_como) {
    // Variable Declarations
    fixed lv_end;
    fixed lv_top;
    fixed lv_bottom;
    fixed lv_elasticity;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_como == 1)) {
        lv_elasticity = 0.2;
    }
    else {
        if ((lp_como == 2)) {
            lv_elasticity = 0.03;
        }
        else {
            if ((lp_como == 3)) {
                lv_elasticity = 0.03;
            }

        }
    }
    lv_top = ((lp_gDPCapita * 5.0) + (lp_demand * 1));
    lv_bottom = ((4.9505 * (lv_elasticity * lp_quantitySupplied)) + (5.0 * lv_elasticity));
    if ((lv_bottom < 1.0) && (lv_bottom > -0.5)) {
        lv_bottom += 1.5;
    }

    lv_end = (lv_top / lv_bottom);
    if ((lv_end < 0.0)) {
        lv_end = (lv_end * -1.0);
    }

    if ((lp_como == 1) && (gv_year < 2330)) {
        lv_end = libNtve_gf_ArithmeticRealClamp(lv_end, 0.0, IntToFixed(libNtve_gf_ArithmeticIntClamp(((gv_year - 2305) * 3), 2, 10)));
    }
    else {
        if ((lp_como == 1)) {
            lv_end = libNtve_gf_ArithmeticRealClamp(lv_end, 0.0, IntToFixed(libNtve_gf_ArithmeticIntClamp(((gv_year - 2305) * 5), 10, 20)));
        }

    }
    if ((lp_como == 2) && (gv_year < 2330)) {
        lv_end = libNtve_gf_ArithmeticRealClamp(lv_end, 0.0, IntToFixed(libNtve_gf_ArithmeticIntClamp(((gv_year - 2305) * 10), 10, 9999)));
    }
    else {
        if ((lp_como == 2)) {
            lv_end = libNtve_gf_ArithmeticRealClamp(lv_end, 0.0, IntToFixed(libNtve_gf_ArithmeticIntClamp(((gv_year - 2305) * 15), 50, 9999)));
        }

    }
    if ((lp_como == 3) && (gv_year < 2330)) {
        lv_end = libNtve_gf_ArithmeticRealClamp(lv_end, 0.0, IntToFixed(libNtve_gf_ArithmeticIntClamp(((gv_year - 2305) * 10), 10, 9999)));
    }
    else {
        if ((lp_como == 3)) {
            lv_end = libNtve_gf_ArithmeticRealClamp(lv_end, 0.0, IntToFixed(libNtve_gf_ArithmeticIntClamp(((gv_year - 2305) * 15), 50, 9999)));
        }

    }
    return lv_end;
}

int gf_GetEquilibriumQuantity (int lp_demand, int lp_quantitySupplied, fixed lp_gDPCapita, int lp_como) {
    // Variable Declarations
    fixed lv_quantityDemanded;
    fixed lv_elasticity;
    int lv_equilibriumQuantity;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_equilibriumQuantity = (FixedToInt((gf_GetEquilibriumPrice(lp_demand, lp_quantitySupplied, lp_gDPCapita, lp_como) * 5.0)) + (FixedToInt((lp_gDPCapita * 5.0)) + lp_demand));
    return lv_equilibriumQuantity;
}

void gf_PushDownVariables (int lp_player, bool lp_start) {
    // Variable Declarations
    int lv_rNA;
    int lv_ram;

    // Automatic Variable Declarations
    const int auto962E95E4_ae = 1;
    const int auto962E95E4_ai = -1;

    // Variable Initialization

    // Implementation
    if ((lp_start == true)) {
        lv_rNA = 12;
        for ( ; ( (auto962E95E4_ai >= 0 && lv_rNA <= auto962E95E4_ae) || (auto962E95E4_ai < 0 && lv_rNA >= auto962E95E4_ae) ) ; lv_rNA += auto962E95E4_ai ) {
            gv_civilianIncome[lp_player][lv_rNA] = gv_civilianIncome[lp_player][(lv_rNA - 1)];
            gv_lDIncome[lp_player][lv_rNA] = gv_lDIncome[lp_player][(lv_rNA - 1)];
            gv_mDIncome[lp_player][lv_rNA] = gv_mDIncome[lp_player][(lv_rNA - 1)];
            gv_hDIncome[lp_player][lv_rNA] = gv_hDIncome[lp_player][(lv_rNA - 1)];
            gv_vHDIncome[lp_player][lv_rNA] = gv_vHDIncome[lp_player][(lv_rNA - 1)];
            gv_corporateIncome[lp_player][lv_rNA] = gv_corporateIncome[lp_player][(lv_rNA - 1)];
            gv_exportIncome[lp_player][lv_rNA] = gv_exportIncome[lp_player][(lv_rNA - 1)];
            gv_investmentIncome[lp_player][lv_rNA] = gv_investmentIncome[lp_player][(lv_rNA - 1)];
            gv_tariffIncome[lp_player][lv_rNA] = gv_tariffIncome[lp_player][(lv_rNA - 1)];
            gv_deInvestmentIncome[lp_player][lv_rNA] = gv_deInvestmentIncome[lp_player][(lv_rNA - 1)];
            gv_subjectIncome[lp_player][lv_rNA] = gv_subjectIncome[lp_player][(lv_rNA - 1)];
            gv_totalIncome[lp_player][lv_rNA] = gv_totalIncome[lp_player][(lv_rNA - 1)];
            gv_buildingExpenses[lp_player][lv_rNA] = gv_buildingExpenses[lp_player][(lv_rNA - 1)];
            gv_buildingFoodExpenses[lp_player][lv_rNA] = gv_buildingFoodExpenses[lp_player][(lv_rNA - 1)];
            gv_buildingElectricityExpenses[lp_player][lv_rNA] = gv_buildingElectricityExpenses[lp_player][(lv_rNA - 1)];
            gv_buildingOtherExpenses[lp_player][lv_rNA] = gv_buildingOtherExpenses[lp_player][(lv_rNA - 1)];
            gv_importExpenses[lp_player][lv_rNA][0] = gv_importExpenses[lp_player][(lv_rNA - 1)][0];
            gv_importExpenses[lp_player][lv_rNA][1] = gv_importExpenses[lp_player][(lv_rNA - 1)][1];
            gv_importExpenses[lp_player][lv_rNA][2] = gv_importExpenses[lp_player][(lv_rNA - 1)][2];
            gv_importExpenses[lp_player][lv_rNA][3] = gv_importExpenses[lp_player][(lv_rNA - 1)][3];
            gv_interestExpenses[lp_player][lv_rNA] = gv_interestExpenses[lp_player][(lv_rNA - 1)];
            gv_repaymentExpenses[lp_player][lv_rNA] = gv_repaymentExpenses[lp_player][(lv_rNA - 1)];
            gv_overlordExpenses[lp_player][lv_rNA] = gv_overlordExpenses[lp_player][(lv_rNA - 1)];
            gv_militaryExpenses[lp_player][lv_rNA] = gv_militaryExpenses[lp_player][(lv_rNA - 1)];
            gv_researchExpenses[lp_player][lv_rNA] = gv_researchExpenses[lp_player][(lv_rNA - 1)];
            gv_subsidiesExpenses[lp_player][lv_rNA] = gv_subsidiesExpenses[lp_player][(lv_rNA - 1)];
            gv_investmentExpenses[lp_player][lv_rNA] = gv_investmentExpenses[lp_player][(lv_rNA - 1)];
            gv_totalExpenses[lp_player][lv_rNA] = gv_totalExpenses[lp_player][(lv_rNA - 1)];
            gv_totalBalance[lp_player][lv_rNA] = gv_totalBalance[lp_player][(lv_rNA - 1)];
            gv_foodConsumption[lp_player][lv_rNA] = gv_foodConsumption[lp_player][(lv_rNA - 1)];
            gv_foodIncome[lp_player][lv_rNA] = gv_foodIncome[lp_player][(lv_rNA - 1)];
            gv_electricityConsumption[lp_player][lv_rNA] = gv_electricityConsumption[lp_player][(lv_rNA - 1)];
            gv_electricityIncome[lp_player][lv_rNA] = gv_electricityIncome[lp_player][(lv_rNA - 1)];
            gv_metalIncome[lp_player][lv_rNA] = gv_metalIncome[lp_player][(lv_rNA - 1)];
            gv_metalConsumption[lp_player][lv_rNA] = gv_metalConsumption[lp_player][(lv_rNA - 1)];
            gv_oilConsumption[lp_player][lv_rNA] = gv_oilConsumption[lp_player][(lv_rNA - 1)];
            gv_oilIncome[lp_player][lv_rNA] = gv_oilIncome[lp_player][(lv_rNA - 1)];
        }
    }
    else {
        gv_civilianIncome[lp_player][lv_rNA] = 0;
        gv_lDIncome[lp_player][lv_rNA] = 0;
        gv_mDIncome[lp_player][lv_rNA] = 0;
        gv_hDIncome[lp_player][lv_rNA] = 0;
        gv_vHDIncome[lp_player][lv_rNA] = 0;
        gv_corporateIncome[lp_player][lv_rNA] = 0;
        gv_exportIncome[lp_player][lv_rNA] = 0;
        gv_investmentIncome[lp_player][lv_rNA] = 0;
        gv_tariffIncome[lp_player][lv_rNA] = 0;
        gv_deInvestmentIncome[lp_player][0] = 0;
        gv_subjectIncome[lp_player][lv_rNA] = 0;
        gv_totalIncome[lp_player][lv_rNA] = 0;
        gv_buildingExpenses[lp_player][lv_rNA] = 0;
        gv_buildingFoodExpenses[lp_player][lv_rNA] = 0;
        gv_buildingElectricityExpenses[lp_player][lv_rNA] = 0;
        gv_buildingOtherExpenses[lp_player][lv_rNA] = 0;
        gv_importExpenses[lp_player][lv_rNA][0] = 0;
        gv_importExpenses[lp_player][lv_rNA][1] = 0;
        gv_importExpenses[lp_player][lv_rNA][2] = 0;
        gv_importExpenses[lp_player][lv_rNA][3] = 0;
        gv_interestExpenses[lp_player][lv_rNA] = 0;
        gv_repaymentExpenses[lp_player][lv_rNA] = 0;
        gv_overlordExpenses[lp_player][lv_rNA] = 0;
        gv_militaryExpenses[lp_player][lv_rNA] = 0;
        gv_researchExpenses[lp_player][lv_rNA] = 0;
        gv_subsidiesExpenses[lp_player][lv_rNA] = 0;
        gv_investmentExpenses[lp_player][lv_rNA] = 0;
        gv_totalExpenses[lp_player][lv_rNA] = 0;
        gv_totalBalance[lp_player][lv_rNA] = 0;
        gv_foodConsumption[lp_player][lv_rNA] = 0;
        gv_foodIncome[lp_player][lv_rNA] = 10;
        gv_electricityConsumption[lp_player][lv_rNA] = 0;
        gv_electricityIncome[lp_player][lv_rNA] = 0;
        gv_metalIncome[lp_player][lv_rNA] = 0;
        gv_metalConsumption[lp_player][lv_rNA] = 0;
        gv_oilConsumption[lp_player][lv_rNA] = 0;
        gv_oilIncome[lp_player][lv_rNA] = 0;
        gv_foodFromMarkert[lp_player] = 0;
    }
}

void gf_EUTaxSubjectTax () {
    // Variable Declarations
    int lv_taxToPay;

    // Automatic Variable Declarations
    playergroup autoC7C1B23B_g;
    int autoC7C1B23B_var;
    playergroup auto489464E2_g;
    int auto489464E2_var;

    // Variable Initialization

    // Implementation
    if ((PlayerGroupCount(gv_theEuroCrew) > 1)) {
        autoC7C1B23B_g = gv_theEuroCrew;
        autoC7C1B23B_var = -1;
        while (true) {
            autoC7C1B23B_var = PlayerGroupNextPlayer(autoC7C1B23B_g, autoC7C1B23B_var);
            if (autoC7C1B23B_var < 0) { break; }
            if ((gv_eUTax > 0) && (gv_mrPresident != autoC7C1B23B_var)) {
                lv_taxToPay = ((gv_totalIncome[autoC7C1B23B_var][2] / 100) * gv_eUTax);
                gv_overlordExpenses[autoC7C1B23B_var][1] += lv_taxToPay;
                gv_subjectIncome[gv_mrPresident][1] += lv_taxToPay;
            }

        }
        if ((gv_eUTax < 0)) {
            lv_taxToPay = ((gv_totalIncome[gv_mrPresident][2] / 100) * 5);
            gv_overlordExpenses[gv_mrPresident][1] += lv_taxToPay;
            auto489464E2_g = gv_theEuroCrew;
            auto489464E2_var = -1;
            while (true) {
                auto489464E2_var = PlayerGroupNextPlayer(auto489464E2_g, auto489464E2_var);
                if (auto489464E2_var < 0) { break; }
                if ((gv_mrPresident != auto489464E2_var)) {
                    gv_subjectIncome[auto489464E2_var][1] += (lv_taxToPay / (PlayerGroupCount(gv_theEuroCrew) - 1));
                }

            }
        }

    }

}

void gf_SubjectIncomeGibReparations () {
    // Variable Declarations
    int lv_player;
    int lv_rep;

    // Automatic Variable Declarations
    playergroup autoA7063294_g;
    int autoA7063294_var;
    const int auto12FA45BC_ae = 7;
    const int auto12FA45BC_ai = 1;

    // Variable Initialization

    // Implementation
    autoA7063294_g = gv_users;
    autoA7063294_var = -1;
    while (true) {
        autoA7063294_var = PlayerGroupNextPlayer(autoA7063294_g, autoA7063294_var);
        if (autoA7063294_var < 0) { break; }
        lv_player = 1;
        for ( ; ( (auto12FA45BC_ai >= 0 && lv_player <= auto12FA45BC_ae) || (auto12FA45BC_ai < 0 && lv_player >= auto12FA45BC_ae) ) ; lv_player += auto12FA45BC_ai ) {
            if ((gv_reparations[autoA7063294_var][lv_player] > 0)) {
                lv_rep = FixedToInt((IntToFixed((gv_totalIncome[autoA7063294_var][2] / 10)) * 1.0));
                gv_reparations[autoA7063294_var][lv_player] -= lv_rep;
                gv_overlordExpenses[autoA7063294_var][1] += lv_rep;
                gv_subjectIncome[lv_player][1] += lv_rep;
            }

            if ((gv_subjugator[autoA7063294_var] == lv_player)) {
                lv_rep = FixedToInt((IntToFixed((gv_totalIncome[autoA7063294_var][2] / 10)) * 1.0));
                gv_overlordExpenses[autoA7063294_var][1] += lv_rep;
                gv_subjectIncome[lv_player][1] += lv_rep;
            }

        }
    }
}

void gf_GetIncomeComputeCivilianIncomeDeInvestment () {
    // Automatic Variable Declarations
    playergroup auto96503998_g;
    int auto96503998_var;

    // Implementation
    gf_GetCivilianIncomeUpgradeCivilianExpense();
    gf_ApplyCreditModifier();
    auto96503998_g = gv_users;
    auto96503998_var = -1;
    while (true) {
        auto96503998_var = PlayerGroupNextPlayer(auto96503998_g, auto96503998_var);
        if (auto96503998_var < 0) { break; }
        gv_civilianIncome[auto96503998_var][1] = (((gv_lDIncome[auto96503998_var][1] + gv_mDIncome[auto96503998_var][1]) + gv_hDIncome[auto96503998_var][1]) + gv_vHDIncome[auto96503998_var][1]);
        if ((gv_civilianIncome[auto96503998_var][1] > 10000)) {
            if ((gv_civilianIncome[auto96503998_var][1] > 100000)) {
                gv_civilianIncome[auto96503998_var][1] = ((gv_civilianIncome[auto96503998_var][1] / 1000) * gv_creditIncomeModifier[auto96503998_var]);
            }
            else {
                gv_civilianIncome[auto96503998_var][1] = ((gv_civilianIncome[auto96503998_var][1] / 100) * gv_creditIncomeModifier[auto96503998_var]);
                gv_civilianIncome[auto96503998_var][1] /= 10;
            }
        }
        else {
            gv_civilianIncome[auto96503998_var][1] = ((gv_civilianIncome[auto96503998_var][1] * gv_creditIncomeModifier[auto96503998_var]) / 1000);
        }
        gv_totalIncome[auto96503998_var][1] = ((((gv_civilianIncome[auto96503998_var][1] + gv_corporateIncome[auto96503998_var][1]) + gv_exportIncome[auto96503998_var][1]) + gv_investmentIncome[auto96503998_var][1]) + ((gv_deInvestmentIncome[auto96503998_var][1] + gv_subjectIncome[auto96503998_var][1]) + (gv_tariffIncome[auto96503998_var][1] + (gv_exportIncome[auto96503998_var][1] + 0))));
        gv_deInvestmentIncome[auto96503998_var][1] = gf_DeInvestmentSpending(auto96503998_var, FixedToInt(((gv_totalIncome[auto96503998_var][1] / 100) * FixedToInt(gv_deinvestment[auto96503998_var]))));
        gv_totalIncome[auto96503998_var][1] = ((((gv_civilianIncome[auto96503998_var][1] + gv_corporateIncome[auto96503998_var][1]) + gv_exportIncome[auto96503998_var][1]) + gv_investmentIncome[auto96503998_var][1]) + ((gv_deInvestmentIncome[auto96503998_var][1] + gv_subjectIncome[auto96503998_var][1]) + (gv_tariffIncome[auto96503998_var][1] + (gv_exportIncome[auto96503998_var][1] + 0))));
    }
}

void gf_GetCivilianIncomeUpgradeCivilianExpense () {
    int init_i;

    // Variable Declarations
    int[8] lv_electricPop;
    unitgroup[8] lv_lD;
    unitgroup[8] lv_mD;
    unitgroup[8] lv_hD;
    unitgroup[8] lv_vHD;

    // Automatic Variable Declarations
    unitgroup auto765A67F7_g;
    int auto765A67F7_u;
    unit auto765A67F7_var;
    playergroup auto2213A9F1_g;
    int auto2213A9F1_var;

    // Variable Initialization
    for (init_i = 0; init_i <= 7; init_i += 1) {
        lv_lD[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= 7; init_i += 1) {
        lv_mD[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= 7; init_i += 1) {
        lv_hD[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= 7; init_i += 1) {
        lv_vHD[init_i] = UnitGroupEmpty();
    }

    // Implementation
    auto765A67F7_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterPsionic) | (1 << c_targetFilterUser1), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto765A67F7_u = UnitGroupCount(auto765A67F7_g, c_unitCountAll);
    for (;; auto765A67F7_u -= 1) {
        auto765A67F7_var = UnitGroupUnitFromEnd(auto765A67F7_g, auto765A67F7_u);
        if (auto765A67F7_var == null) { break; }
        if ((UnitGetOwner(auto765A67F7_var) < 8) && (UnitGetOwner(auto765A67F7_var) != 0) && (UnitGetPropertyFixed(auto765A67F7_var, c_unitPropEnergy, c_unitPropCurrent) > 1.0)) {
            if (((UnitGetType(auto765A67F7_var) == "Cloudscraper") || (UnitGetType(auto765A67F7_var) == "Stratostower") || (UnitGetType(auto765A67F7_var) == "Ark") || (UnitGetType(auto765A67F7_var) == "Nimbuspillar"))) {
                UnitGroupAdd(lv_vHD[UnitGetOwner(auto765A67F7_var)], auto765A67F7_var);
                UnitGroupAdd(gv_unsuppliedHomes[UnitGetOwner(auto765A67F7_var)][4], auto765A67F7_var);
                gv_vHDIncome[UnitGetOwner(auto765A67F7_var)][1] += FixedToInt((UnitGetPropertyFixed(auto765A67F7_var, c_unitPropEnergy, c_unitPropCurrent) * UnitGetCustomValue(auto765A67F7_var, 0)));
                if ((UnitHasBehavior2(auto765A67F7_var, "RussianCity") == false)) {
                    if ((UnitHasBehavior2(auto765A67F7_var, "WellFeds") == false)) {
                        lv_electricPop[UnitGetOwner(auto765A67F7_var)] += FixedToInt((UnitGetPropertyFixed(auto765A67F7_var, c_unitPropEnergy, c_unitPropCurrent) * UnitGetCustomValue(auto765A67F7_var, 0)));
                    }
                    else {
                        gv_electricityConsumption[UnitGetOwner(auto765A67F7_var)][0] += FixedToInt((UnitGetPropertyFixed(auto765A67F7_var, c_unitPropEnergy, c_unitPropCurrent) / 2.0));
                        gv_foodFromMarkert[UnitGetOwner(auto765A67F7_var)] += FixedToInt((UnitGetPropertyFixed(auto765A67F7_var, c_unitPropEnergy, c_unitPropCurrent) * 1.0));
                    }
                }

                if ((UnitGetPropertyFixed(auto765A67F7_var, c_unitPropEnergyPercent, c_unitPropCurrent) > 95.0) && (UnitGetType(auto765A67F7_var) != "Nimbuspillar")) {
                    gf_UpgradeHome(auto765A67F7_var);
                }

            }
            else {
                if (((UnitGetType(auto765A67F7_var) == "Highrise") || (UnitGetType(auto765A67F7_var) == "Supertower") || (UnitGetType(auto765A67F7_var) == "Skyrise") || (UnitGetType(auto765A67F7_var) == "Skyscraper") || (UnitGetType(auto765A67F7_var) == "Skytower"))) {
                    UnitGroupAdd(lv_hD[UnitGetOwner(auto765A67F7_var)], auto765A67F7_var);
                    UnitGroupAdd(gv_unsuppliedHomes[UnitGetOwner(auto765A67F7_var)][3], auto765A67F7_var);
                    gv_hDIncome[UnitGetOwner(auto765A67F7_var)][1] += FixedToInt((UnitGetPropertyFixed(auto765A67F7_var, c_unitPropEnergy, c_unitPropCurrent) * UnitGetCustomValue(auto765A67F7_var, 0)));
                    if ((UnitHasBehavior2(auto765A67F7_var, "RussianCity") == false) && (UnitHasBehavior2(auto765A67F7_var, "WellFeds") == false)) {
                        if ((UnitHasBehavior2(auto765A67F7_var, "WellFeds") == false)) {
                            lv_electricPop[UnitGetOwner(auto765A67F7_var)] += FixedToInt((UnitGetPropertyFixed(auto765A67F7_var, c_unitPropEnergy, c_unitPropCurrent) * UnitGetCustomValue(auto765A67F7_var, 0)));
                        }
                        else {
                            gv_electricityConsumption[UnitGetOwner(auto765A67F7_var)][0] += FixedToInt((UnitGetPropertyFixed(auto765A67F7_var, c_unitPropEnergy, c_unitPropCurrent) / 2.0));
                            gv_foodFromMarkert[UnitGetOwner(auto765A67F7_var)] += FixedToInt((UnitGetPropertyFixed(auto765A67F7_var, c_unitPropEnergy, c_unitPropCurrent) * 1.0));
                        }
                    }

                    if ((UnitGetPropertyFixed(auto765A67F7_var, c_unitPropEnergyPercent, c_unitPropCurrent) > 95.0) && (UnitGetType(auto765A67F7_var) != "Skytower")) {
                        gf_UpgradeHome(auto765A67F7_var);
                    }

                }
                else {
                    if (((UnitGetType(auto765A67F7_var) == "Flats") || (UnitGetType(auto765A67F7_var) == "Block") || (UnitGetType(auto765A67F7_var) == "Tower") || (UnitGetType(auto765A67F7_var) == "Condo"))) {
                        UnitGroupAdd(lv_mD[UnitGetOwner(auto765A67F7_var)], auto765A67F7_var);
                        UnitGroupAdd(gv_unsuppliedHomes[UnitGetOwner(auto765A67F7_var)][2], auto765A67F7_var);
                        gv_mDIncome[UnitGetOwner(auto765A67F7_var)][1] += FixedToInt((UnitGetPropertyFixed(auto765A67F7_var, c_unitPropEnergy, c_unitPropCurrent) * UnitGetCustomValue(auto765A67F7_var, 0)));
                        if ((UnitHasBehavior2(auto765A67F7_var, "RussianCity") == false) && (UnitHasBehavior2(auto765A67F7_var, "WellFeds") == false)) {
                            gv_foodConsumption[UnitGetOwner(auto765A67F7_var)][1] += FixedToInt((UnitGetPropertyFixed(auto765A67F7_var, c_unitPropEnergy, c_unitPropCurrent) * 1.0));
                        }
                        else {
                            gv_foodFromMarkert[UnitGetOwner(auto765A67F7_var)] += FixedToInt((UnitGetPropertyFixed(auto765A67F7_var, c_unitPropEnergy, c_unitPropCurrent) * 1.0));
                        }
                        if ((UnitGetPropertyFixed(auto765A67F7_var, c_unitPropEnergyPercent, c_unitPropCurrent) > 95.0) && (UnitGetType(auto765A67F7_var) != "Condo")) {
                            gf_UpgradeHome(auto765A67F7_var);
                        }

                    }
                    else {
                        if (((UnitGetType(auto765A67F7_var) == "SmallHouse") || (UnitGetType(auto765A67F7_var) == "MediumHouse") || (UnitGetType(auto765A67F7_var) == "LargeHouse") || (UnitGetType(auto765A67F7_var) == "Manor"))) {
                            UnitGroupAdd(lv_lD[UnitGetOwner(auto765A67F7_var)], auto765A67F7_var);
                            UnitGroupAdd(gv_unsuppliedHomes[UnitGetOwner(auto765A67F7_var)][1], auto765A67F7_var);
                            gv_lDIncome[UnitGetOwner(auto765A67F7_var)][1] += FixedToInt((UnitGetPropertyFixed(auto765A67F7_var, c_unitPropEnergy, c_unitPropCurrent) * UnitGetCustomValue(auto765A67F7_var, 0)));
                            if ((UnitHasBehavior2(auto765A67F7_var, "RussianCity") == false) && (UnitHasBehavior2(auto765A67F7_var, "WellFeds") == false)) {
                                gv_foodConsumption[UnitGetOwner(auto765A67F7_var)][1] += FixedToInt((UnitGetPropertyFixed(auto765A67F7_var, c_unitPropEnergy, c_unitPropCurrent) * 1.0));
                            }
                            else {
                                gv_foodFromMarkert[UnitGetOwner(auto765A67F7_var)] += FixedToInt((UnitGetPropertyFixed(auto765A67F7_var, c_unitPropEnergy, c_unitPropCurrent) * 1.0));
                            }
                            if ((UnitGetPropertyFixed(auto765A67F7_var, c_unitPropEnergyPercent, c_unitPropCurrent) > 95.0) && (UnitGetType(auto765A67F7_var) != "Manor")) {
                                gf_UpgradeHome(auto765A67F7_var);
                            }

                        }

                    }
                }
            }
        }

    }
    auto2213A9F1_g = gv_users;
    auto2213A9F1_var = -1;
    while (true) {
        auto2213A9F1_var = PlayerGroupNextPlayer(auto2213A9F1_g, auto2213A9F1_var);
        if (auto2213A9F1_var < 0) { break; }
        gv_buildingTypesUrbanized[auto2213A9F1_var][0] = UnitGroupCount(lv_lD[auto2213A9F1_var], c_unitCountAlive);
        gv_buildingTypesUrbanized[auto2213A9F1_var][1] = UnitGroupCount(lv_mD[auto2213A9F1_var], c_unitCountAlive);
        gv_buildingTypesUrbanized[auto2213A9F1_var][2] = UnitGroupCount(lv_hD[auto2213A9F1_var], c_unitCountAlive);
        gv_buildingTypesUrbanized[auto2213A9F1_var][3] = UnitGroupCount(lv_vHD[auto2213A9F1_var], c_unitCountAlive);
        gv_foodConsumption[auto2213A9F1_var][1] += lv_electricPop[auto2213A9F1_var];
        gv_electricityConsumption[auto2213A9F1_var][1] += (lv_electricPop[auto2213A9F1_var] / 2);
        gv_lDIncome[auto2213A9F1_var][1] /= 2;
        gv_mDIncome[auto2213A9F1_var][1] /= 2;
        gv_hDIncome[auto2213A9F1_var][1] /= 2;
        gv_vHDIncome[auto2213A9F1_var][1] /= 2;
        gv_lDIncome[auto2213A9F1_var][1] *= 3;
        gv_mDIncome[auto2213A9F1_var][1] *= 3;
        gv_hDIncome[auto2213A9F1_var][1] *= 3;
        gv_vHDIncome[auto2213A9F1_var][1] *= 3;
    }
}

void gf_UpgradeHome (unit lp_upgradeUnit) {
    // Variable Declarations
    bool[16] lv_hasSchool;
    bool[16] lv_hasClinic;
    bool[16] lv_hasUni;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((UnitGetOwner(lp_upgradeUnit) > 7)) {
    }
    else {
        if ((UnitGetType(lp_upgradeUnit) == "Cloudscraper")) {
            gf_SetGlobalCoreCount(lp_upgradeUnit);
            libNtve_gf_ReplaceUnit(lp_upgradeUnit, "Stratostower", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
            gf_TransferCoresFromGlobal(libNtve_gf_LastReplacedUnit());
        }
        else {
            if ((UnitGetType(lp_upgradeUnit) == "Stratostower")) {
                gf_SetGlobalCoreCount(lp_upgradeUnit);
                libNtve_gf_ReplaceUnit(lp_upgradeUnit, "Ark", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                gf_TransferCoresFromGlobal(libNtve_gf_LastReplacedUnit());
            }
            else {
                if ((UnitGetType(lp_upgradeUnit) == "Ark")) {
                    gf_SetGlobalCoreCount(lp_upgradeUnit);
                    libNtve_gf_ReplaceUnit(lp_upgradeUnit, "Nimbuspillar", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                    gf_TransferCoresFromGlobal(libNtve_gf_LastReplacedUnit());
                }
                else {
                    if ((UnitGetType(lp_upgradeUnit) == "Highrise")) {
                        gf_SetGlobalCoreCount(lp_upgradeUnit);
                        libNtve_gf_ReplaceUnit(lp_upgradeUnit, "Supertower", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                        gf_TransferCoresFromGlobal(libNtve_gf_LastReplacedUnit());
                    }
                    else {
                        if ((UnitGetType(lp_upgradeUnit) == "Supertower")) {
                            gf_SetGlobalCoreCount(lp_upgradeUnit);
                            libNtve_gf_ReplaceUnit(lp_upgradeUnit, "Skyrise", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                            gf_TransferCoresFromGlobal(libNtve_gf_LastReplacedUnit());
                        }
                        else {
                            if ((UnitGetType(lp_upgradeUnit) == "Skyrise")) {
                                gf_SetGlobalCoreCount(lp_upgradeUnit);
                                libNtve_gf_ReplaceUnit(lp_upgradeUnit, "Skyscraper", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                                gf_TransferCoresFromGlobal(libNtve_gf_LastReplacedUnit());
                            }
                            else {
                                if ((UnitGetType(lp_upgradeUnit) == "Skyscraper")) {
                                    gf_SetGlobalCoreCount(lp_upgradeUnit);
                                    libNtve_gf_ReplaceUnit(lp_upgradeUnit, "Skytower", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                                    gf_TransferCoresFromGlobal(libNtve_gf_LastReplacedUnit());
                                }
                                else {
                                    if ((UnitGetType(lp_upgradeUnit) == "RussianSkyscraper")) {
                                        gf_SetGlobalCoreCount(lp_upgradeUnit);
                                        libNtve_gf_ReplaceUnit(lp_upgradeUnit, "Skytower", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                                        gf_TransferCoresFromGlobal(libNtve_gf_LastReplacedUnit());
                                    }
                                    else {
                                        if ((UnitGetType(lp_upgradeUnit) == "Flats")) {
                                            gf_SetGlobalCoreCount(lp_upgradeUnit);
                                            libNtve_gf_ReplaceUnit(lp_upgradeUnit, "Tower", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                                            gf_TransferCoresFromGlobal(libNtve_gf_LastReplacedUnit());
                                        }
                                        else {
                                            if ((UnitGetType(lp_upgradeUnit) == "Tower")) {
                                                gf_SetGlobalCoreCount(lp_upgradeUnit);
                                                libNtve_gf_ReplaceUnit(lp_upgradeUnit, "Condo", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                                                gf_TransferCoresFromGlobal(libNtve_gf_LastReplacedUnit());
                                            }
                                            else {
                                                if ((UnitGetType(lp_upgradeUnit) == "SmallHouse")) {
                                                    gf_SetGlobalCoreCount(lp_upgradeUnit);
                                                    libNtve_gf_ReplaceUnit(lp_upgradeUnit, "MediumHouse", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                                                    gf_TransferCoresFromGlobal(libNtve_gf_LastReplacedUnit());
                                                }
                                                else {
                                                    if ((UnitGetType(lp_upgradeUnit) == "MediumHouse")) {
                                                        gf_SetGlobalCoreCount(lp_upgradeUnit);
                                                        libNtve_gf_ReplaceUnit(lp_upgradeUnit, "LargeHouse", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                                                        gf_TransferCoresFromGlobal(libNtve_gf_LastReplacedUnit());
                                                    }
                                                    else {
                                                        if ((UnitGetType(lp_upgradeUnit) == "LargeHouse")) {
                                                            gf_SetGlobalCoreCount(lp_upgradeUnit);
                                                            libNtve_gf_ReplaceUnit(lp_upgradeUnit, "Manor", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                                                            gf_TransferCoresFromGlobal(libNtve_gf_LastReplacedUnit());
                                                        }

                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

void gf_ApplyCreditModifier () {
    // Automatic Variable Declarations
    playergroup autoB6843B5D_g;
    int autoB6843B5D_var;

    // Implementation
    autoB6843B5D_g = gv_users;
    autoB6843B5D_var = -1;
    while (true) {
        autoB6843B5D_var = PlayerGroupNextPlayer(autoB6843B5D_g, autoB6843B5D_var);
        if (autoB6843B5D_var < 0) { break; }
        gv_lDIncome[autoB6843B5D_var][1] = ((gv_lDIncome[autoB6843B5D_var][1] * gv_creditIncomeModifier[autoB6843B5D_var]) / 100);
        gv_mDIncome[autoB6843B5D_var][1] = ((gv_mDIncome[autoB6843B5D_var][1] * gv_creditIncomeModifier[autoB6843B5D_var]) / 100);
        gv_hDIncome[autoB6843B5D_var][1] = ((gv_hDIncome[autoB6843B5D_var][1] * gv_creditIncomeModifier[autoB6843B5D_var]) / 100);
        gv_vHDIncome[autoB6843B5D_var][1] = ((gv_vHDIncome[autoB6843B5D_var][1] * gv_creditIncomeModifier[autoB6843B5D_var]) / 100);
    }
}

void gf_GetMilitaryCompleteUpkeep () {
    // Variable Declarations
    int[10] lv_beforeOil;

    // Automatic Variable Declarations
    playergroup auto5FEF7568_g;
    int auto5FEF7568_var;
    unitgroup autoF70E602F_g;
    int autoF70E602F_u;
    unit autoF70E602F_var;
    unitgroup autoD43594CD_g;
    int autoD43594CD_u;
    unit autoD43594CD_var;
    unitgroup auto01741FC3_g;
    int auto01741FC3_u;
    unit auto01741FC3_var;
    unitgroup auto29E2A8BF_g;
    int auto29E2A8BF_u;
    unit auto29E2A8BF_var;
    unitgroup auto7AFD823C_g;
    int auto7AFD823C_u;
    unit auto7AFD823C_var;
    unitgroup auto29475A10_g;
    int auto29475A10_u;
    unit auto29475A10_var;
    unitgroup autoF370C9E5_g;
    int autoF370C9E5_u;
    unit autoF370C9E5_var;
    unitgroup auto935EDF52_g;
    int auto935EDF52_u;
    unit auto935EDF52_var;
    unitgroup auto4884A833_g;
    int auto4884A833_u;
    unit auto4884A833_var;
    unitgroup autoA52CCB53_g;
    int autoA52CCB53_u;
    unit autoA52CCB53_var;
    unitgroup autoCD5ADD55_g;
    int autoCD5ADD55_u;
    unit autoCD5ADD55_var;
    unitgroup auto855CEA3B_g;
    int auto855CEA3B_u;
    unit auto855CEA3B_var;
    unitgroup auto89BC95F0_g;
    int auto89BC95F0_u;
    unit auto89BC95F0_var;
    unitgroup autoC57D2F9E_g;
    int autoC57D2F9E_u;
    unit autoC57D2F9E_var;
    unitgroup autoE6FF475C_g;
    int autoE6FF475C_u;
    unit autoE6FF475C_var;
    unitgroup auto38DBE233_g;
    int auto38DBE233_u;
    unit auto38DBE233_var;
    unitgroup auto7894E6A9_g;
    int auto7894E6A9_u;
    unit auto7894E6A9_var;
    unitgroup auto2EB4A593_g;
    int auto2EB4A593_u;
    unit auto2EB4A593_var;
    unitgroup auto58AA3289_g;
    int auto58AA3289_u;
    unit auto58AA3289_var;
    unitgroup auto3B16074D_g;
    int auto3B16074D_u;
    unit auto3B16074D_var;
    unitgroup auto0679E136_g;
    int auto0679E136_u;
    unit auto0679E136_var;
    unitgroup auto0BD4A161_g;
    int auto0BD4A161_u;
    unit auto0BD4A161_var;
    unitgroup auto7E3634DE_g;
    int auto7E3634DE_u;
    unit auto7E3634DE_var;
    unitgroup auto54171FD0_g;
    int auto54171FD0_u;
    unit auto54171FD0_var;
    unitgroup auto0D057DC9_g;
    int auto0D057DC9_u;
    unit auto0D057DC9_var;
    unitgroup autoFED69778_g;
    int autoFED69778_u;
    unit autoFED69778_var;
    unitgroup auto9D320E64_g;
    int auto9D320E64_u;
    unit auto9D320E64_var;
    unitgroup auto6525B6EC_g;
    int auto6525B6EC_u;
    unit auto6525B6EC_var;
    unitgroup auto9962D6C2_g;
    int auto9962D6C2_u;
    unit auto9962D6C2_var;
    unitgroup auto9C94355A_g;
    int auto9C94355A_u;
    unit auto9C94355A_var;
    unitgroup autoAB3BD328_g;
    int autoAB3BD328_u;
    unit autoAB3BD328_var;
    unitgroup autoC4C646B7_g;
    int autoC4C646B7_u;
    unit autoC4C646B7_var;
    unitgroup auto3DF1C4BC_g;
    int auto3DF1C4BC_u;
    unit auto3DF1C4BC_var;
    unitgroup auto10EB00AD_g;
    int auto10EB00AD_u;
    unit auto10EB00AD_var;
    unitgroup autoD4A46D41_g;
    int autoD4A46D41_u;
    unit autoD4A46D41_var;
    unitgroup auto9D27A86F_g;
    int auto9D27A86F_u;
    unit auto9D27A86F_var;
    unitgroup auto72BC0173_g;
    int auto72BC0173_u;
    unit auto72BC0173_var;
    unitgroup autoEA7ADDDA_g;
    int autoEA7ADDDA_u;
    unit autoEA7ADDDA_var;
    unitgroup auto12855494_g;
    int auto12855494_u;
    unit auto12855494_var;
    unitgroup autoA434ED7E_g;
    int autoA434ED7E_u;
    unit autoA434ED7E_var;
    unitgroup auto3A556D26_g;
    int auto3A556D26_u;
    unit auto3A556D26_var;
    unitgroup auto486B21D6_g;
    int auto486B21D6_u;
    unit auto486B21D6_var;
    unitgroup auto725F8144_g;
    int auto725F8144_u;
    unit auto725F8144_var;
    unitgroup autoA4B5FBC4_g;
    int autoA4B5FBC4_u;
    unit autoA4B5FBC4_var;
    playergroup auto7427E780_g;
    int auto7427E780_var;

    // Variable Initialization

    // Implementation
    auto5FEF7568_g = gv_users;
    auto5FEF7568_var = -1;
    while (true) {
        auto5FEF7568_var = PlayerGroupNextPlayer(auto5FEF7568_g, auto5FEF7568_var);
        if (auto5FEF7568_var < 0) { break; }
        lv_beforeOil[auto5FEF7568_var] = gv_oilConsumption[auto5FEF7568_var][1];
    }
    autoF70E602F_g = UnitGroup("IgniterTurret", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF70E602F_u = UnitGroupCount(autoF70E602F_g, c_unitCountAll);
    for (;; autoF70E602F_u -= 1) {
        autoF70E602F_var = UnitGroupUnitFromEnd(autoF70E602F_g, autoF70E602F_u);
        if (autoF70E602F_var == null) { break; }
        gv_militaryExpenses[UnitGetOwner(autoF70E602F_var)][1] += 25;
    }
    autoD43594CD_g = UnitGroup("Lasturret", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD43594CD_u = UnitGroupCount(autoD43594CD_g, c_unitCountAll);
    for (;; autoD43594CD_u -= 1) {
        autoD43594CD_var = UnitGroupUnitFromEnd(autoD43594CD_g, autoD43594CD_u);
        if (autoD43594CD_var == null) { break; }
        gv_militaryExpenses[UnitGetOwner(autoD43594CD_var)][1] += 50;
    }
    auto01741FC3_g = UnitGroup("IgniterTurret", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto01741FC3_u = UnitGroupCount(auto01741FC3_g, c_unitCountAll);
    for (;; auto01741FC3_u -= 1) {
        auto01741FC3_var = UnitGroupUnitFromEnd(auto01741FC3_g, auto01741FC3_u);
        if (auto01741FC3_var == null) { break; }
        gv_militaryExpenses[UnitGetOwner(auto01741FC3_var)][1] += 100;
    }
    auto29E2A8BF_g = UnitGroup("Flakker", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto29E2A8BF_u = UnitGroupCount(auto29E2A8BF_g, c_unitCountAll);
    for (;; auto29E2A8BF_u -= 1) {
        auto29E2A8BF_var = UnitGroupUnitFromEnd(auto29E2A8BF_g, auto29E2A8BF_u);
        if (auto29E2A8BF_var == null) { break; }
        gv_militaryExpenses[UnitGetOwner(auto29E2A8BF_var)][1] += 50;
    }
    auto7AFD823C_g = UnitGroup("BaPulseCannon", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto7AFD823C_u = UnitGroupCount(auto7AFD823C_g, c_unitCountAll);
    for (;; auto7AFD823C_u -= 1) {
        auto7AFD823C_var = UnitGroupUnitFromEnd(auto7AFD823C_g, auto7AFD823C_u);
        if (auto7AFD823C_var == null) { break; }
        gv_militaryExpenses[UnitGetOwner(auto7AFD823C_var)][1] += 250;
    }
    auto29475A10_g = UnitGroup("Hypercannon", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto29475A10_u = UnitGroupCount(auto29475A10_g, c_unitCountAll);
    for (;; auto29475A10_u -= 1) {
        auto29475A10_var = UnitGroupUnitFromEnd(auto29475A10_g, auto29475A10_u);
        if (auto29475A10_var == null) { break; }
        gv_militaryExpenses[UnitGetOwner(auto29475A10_var)][1] += 500;
    }
    autoF370C9E5_g = UnitGroup("Expounder", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF370C9E5_u = UnitGroupCount(autoF370C9E5_g, c_unitCountAll);
    for (;; autoF370C9E5_u -= 1) {
        autoF370C9E5_var = UnitGroupUnitFromEnd(autoF370C9E5_g, autoF370C9E5_u);
        if (autoF370C9E5_var == null) { break; }
        gv_militaryExpenses[UnitGetOwner(autoF370C9E5_var)][1] += 1000;
    }
    auto935EDF52_g = UnitGroup("SAM", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto935EDF52_u = UnitGroupCount(auto935EDF52_g, c_unitCountAll);
    for (;; auto935EDF52_u -= 1) {
        auto935EDF52_var = UnitGroupUnitFromEnd(auto935EDF52_g, auto935EDF52_u);
        if (auto935EDF52_var == null) { break; }
        gv_militaryExpenses[UnitGetOwner(auto935EDF52_var)][1] += 100;
    }
    auto4884A833_g = UnitGroup("NaniteTower", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4884A833_u = UnitGroupCount(auto4884A833_g, c_unitCountAll);
    for (;; auto4884A833_u -= 1) {
        auto4884A833_var = UnitGroupUnitFromEnd(auto4884A833_g, auto4884A833_u);
        if (auto4884A833_var == null) { break; }
        gv_militaryExpenses[UnitGetOwner(auto4884A833_var)][1] += 250;
    }
    autoA52CCB53_g = UnitGroup("SupplyDepot2343", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA52CCB53_u = UnitGroupCount(autoA52CCB53_g, c_unitCountAll);
    for (;; autoA52CCB53_u -= 1) {
        autoA52CCB53_var = UnitGroupUnitFromEnd(autoA52CCB53_g, autoA52CCB53_u);
        if (autoA52CCB53_var == null) { break; }
        gv_militaryExpenses[UnitGetOwner(autoA52CCB53_var)][1] += 2000;
    }
    autoCD5ADD55_g = UnitGroup("SupplyDepot234223", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoCD5ADD55_u = UnitGroupCount(autoCD5ADD55_g, c_unitCountAll);
    for (;; autoCD5ADD55_u -= 1) {
        autoCD5ADD55_var = UnitGroupUnitFromEnd(autoCD5ADD55_g, autoCD5ADD55_u);
        if (autoCD5ADD55_var == null) { break; }
        gv_militaryExpenses[UnitGetOwner(autoCD5ADD55_var)][1] += 2500;
    }
    auto855CEA3B_g = UnitGroup("MissileTurret22", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto855CEA3B_u = UnitGroupCount(auto855CEA3B_g, c_unitCountAll);
    for (;; auto855CEA3B_u -= 1) {
        auto855CEA3B_var = UnitGroupUnitFromEnd(auto855CEA3B_g, auto855CEA3B_u);
        if (auto855CEA3B_var == null) { break; }
        gv_militaryExpenses[UnitGetOwner(auto855CEA3B_var)][1] += 500;
    }
    auto89BC95F0_g = UnitGroup("Bastion", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto89BC95F0_u = UnitGroupCount(auto89BC95F0_g, c_unitCountAll);
    for (;; auto89BC95F0_u -= 1) {
        auto89BC95F0_var = UnitGroupUnitFromEnd(auto89BC95F0_g, auto89BC95F0_u);
        if (auto89BC95F0_var == null) { break; }
        gv_militaryExpenses[UnitGetOwner(auto89BC95F0_var)][1] += 1000;
    }
    autoC57D2F9E_g = UnitGroup("Bunker", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC57D2F9E_u = UnitGroupCount(autoC57D2F9E_g, c_unitCountAll);
    for (;; autoC57D2F9E_u -= 1) {
        autoC57D2F9E_var = UnitGroupUnitFromEnd(autoC57D2F9E_g, autoC57D2F9E_u);
        if (autoC57D2F9E_var == null) { break; }
        gv_militaryExpenses[UnitGetOwner(autoC57D2F9E_var)][1] += 50;
    }
    autoE6FF475C_g = UnitGroup("SupplyDepot", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE6FF475C_u = UnitGroupCount(autoE6FF475C_g, c_unitCountAll);
    for (;; autoE6FF475C_u -= 1) {
        autoE6FF475C_var = UnitGroupUnitFromEnd(autoE6FF475C_g, autoE6FF475C_u);
        if (autoE6FF475C_var == null) { break; }
        gv_militaryExpenses[UnitGetOwner(autoE6FF475C_var)][1] += 5;
    }
    auto38DBE233_g = UnitGroup("SensorTower2", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto38DBE233_u = UnitGroupCount(auto38DBE233_g, c_unitCountAll);
    for (;; auto38DBE233_u -= 1) {
        auto38DBE233_var = UnitGroupUnitFromEnd(auto38DBE233_g, auto38DBE233_u);
        if (auto38DBE233_var == null) { break; }
        gv_militaryExpenses[UnitGetOwner(auto38DBE233_var)][1] += 150;
    }
    auto7894E6A9_g = UnitGroup("SensorTower22", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto7894E6A9_u = UnitGroupCount(auto7894E6A9_g, c_unitCountAll);
    for (;; auto7894E6A9_u -= 1) {
        auto7894E6A9_var = UnitGroupUnitFromEnd(auto7894E6A9_g, auto7894E6A9_u);
        if (auto7894E6A9_var == null) { break; }
        gv_militaryExpenses[UnitGetOwner(auto7894E6A9_var)][1] += 1000;
    }
    auto2EB4A593_g = UnitGroup("TrainingGround", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto2EB4A593_u = UnitGroupCount(auto2EB4A593_g, c_unitCountAll);
    for (;; auto2EB4A593_u -= 1) {
        auto2EB4A593_var = UnitGroupUnitFromEnd(auto2EB4A593_g, auto2EB4A593_u);
        if (auto2EB4A593_var == null) { break; }
        gv_militaryExpenses[UnitGetOwner(auto2EB4A593_var)][1] += 500;
    }
    auto58AA3289_g = UnitGroup("GroundFactory", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto58AA3289_u = UnitGroupCount(auto58AA3289_g, c_unitCountAll);
    for (;; auto58AA3289_u -= 1) {
        auto58AA3289_var = UnitGroupUnitFromEnd(auto58AA3289_g, auto58AA3289_u);
        if (auto58AA3289_var == null) { break; }
        gv_militaryExpenses[UnitGetOwner(auto58AA3289_var)][1] += 2000;
    }
    auto3B16074D_g = UnitGroup("AircraftFactory", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto3B16074D_u = UnitGroupCount(auto3B16074D_g, c_unitCountAll);
    for (;; auto3B16074D_u -= 1) {
        auto3B16074D_var = UnitGroupUnitFromEnd(auto3B16074D_g, auto3B16074D_u);
        if (auto3B16074D_var == null) { break; }
        gv_militaryExpenses[UnitGetOwner(auto3B16074D_var)][1] += 2500;
    }
    auto0679E136_g = UnitGroup("Conscript", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto0679E136_u = UnitGroupCount(auto0679E136_g, c_unitCountAll);
    for (;; auto0679E136_u -= 1) {
        auto0679E136_var = UnitGroupUnitFromEnd(auto0679E136_g, auto0679E136_u);
        if (auto0679E136_var == null) { break; }
        gv_militaryExpenses[UnitGetOwner(auto0679E136_var)][1] += 10;
    }
    auto0BD4A161_g = UnitGroup("Rifleman", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto0BD4A161_u = UnitGroupCount(auto0BD4A161_g, c_unitCountAll);
    for (;; auto0BD4A161_u -= 1) {
        auto0BD4A161_var = UnitGroupUnitFromEnd(auto0BD4A161_g, auto0BD4A161_u);
        if (auto0BD4A161_var == null) { break; }
        gv_militaryExpenses[UnitGetOwner(auto0BD4A161_var)][1] += 20;
    }
    auto7E3634DE_g = UnitGroup("Immolator", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto7E3634DE_u = UnitGroupCount(auto7E3634DE_g, c_unitCountAll);
    for (;; auto7E3634DE_u -= 1) {
        auto7E3634DE_var = UnitGroupUnitFromEnd(auto7E3634DE_g, auto7E3634DE_u);
        if (auto7E3634DE_var == null) { break; }
        gv_militaryExpenses[UnitGetOwner(auto7E3634DE_var)][1] += 30;
    }
    auto54171FD0_g = UnitGroup("Mortaliser", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto54171FD0_u = UnitGroupCount(auto54171FD0_g, c_unitCountAll);
    for (;; auto54171FD0_u -= 1) {
        auto54171FD0_var = UnitGroupUnitFromEnd(auto54171FD0_g, auto54171FD0_u);
        if (auto54171FD0_var == null) { break; }
        gv_militaryExpenses[UnitGetOwner(auto54171FD0_var)][1] += 30;
    }
    auto0D057DC9_g = UnitGroup("AlphaMarine", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto0D057DC9_u = UnitGroupCount(auto0D057DC9_g, c_unitCountAll);
    for (;; auto0D057DC9_u -= 1) {
        auto0D057DC9_var = UnitGroupUnitFromEnd(auto0D057DC9_g, auto0D057DC9_u);
        if (auto0D057DC9_var == null) { break; }
        gv_militaryExpenses[UnitGetOwner(auto0D057DC9_var)][1] += 100;
    }
    autoFED69778_g = UnitGroup("Knight", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoFED69778_u = UnitGroupCount(autoFED69778_g, c_unitCountAll);
    for (;; autoFED69778_u -= 1) {
        autoFED69778_var = UnitGroupUnitFromEnd(autoFED69778_g, autoFED69778_u);
        if (autoFED69778_var == null) { break; }
        gv_militaryExpenses[UnitGetOwner(autoFED69778_var)][1] += 150;
    }
    auto9D320E64_g = UnitGroup("StrikeTrooper", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9D320E64_u = UnitGroupCount(auto9D320E64_g, c_unitCountAll);
    for (;; auto9D320E64_u -= 1) {
        auto9D320E64_var = UnitGroupUnitFromEnd(auto9D320E64_g, auto9D320E64_u);
        if (auto9D320E64_var == null) { break; }
        gv_militaryExpenses[UnitGetOwner(auto9D320E64_var)][1] += 150;
    }
    auto6525B6EC_g = UnitGroup("Stormtrooper", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto6525B6EC_u = UnitGroupCount(auto6525B6EC_g, c_unitCountAll);
    for (;; auto6525B6EC_u -= 1) {
        auto6525B6EC_var = UnitGroupUnitFromEnd(auto6525B6EC_g, auto6525B6EC_u);
        if (auto6525B6EC_var == null) { break; }
        gv_militaryExpenses[UnitGetOwner(auto6525B6EC_var)][1] += 300;
    }
    auto9962D6C2_g = UnitGroup("Equaliser", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9962D6C2_u = UnitGroupCount(auto9962D6C2_g, c_unitCountAll);
    for (;; auto9962D6C2_u -= 1) {
        auto9962D6C2_var = UnitGroupUnitFromEnd(auto9962D6C2_g, auto9962D6C2_u);
        if (auto9962D6C2_var == null) { break; }
        gv_militaryExpenses[UnitGetOwner(auto9962D6C2_var)][1] += 500;
    }
    auto9C94355A_g = UnitGroup("Dart", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9C94355A_u = UnitGroupCount(auto9C94355A_g, c_unitCountAll);
    for (;; auto9C94355A_u -= 1) {
        auto9C94355A_var = UnitGroupUnitFromEnd(auto9C94355A_g, auto9C94355A_u);
        if (auto9C94355A_var == null) { break; }
        gv_oilConsumption[UnitGetOwner(auto9C94355A_var)][1] += 1;
        gv_militaryExpenses[UnitGetOwner(auto9C94355A_var)][1] += 50;
    }
    autoAB3BD328_g = UnitGroup("ArmadilloAPC", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoAB3BD328_u = UnitGroupCount(autoAB3BD328_g, c_unitCountAll);
    for (;; autoAB3BD328_u -= 1) {
        autoAB3BD328_var = UnitGroupUnitFromEnd(autoAB3BD328_g, autoAB3BD328_u);
        if (autoAB3BD328_var == null) { break; }
        gv_oilConsumption[UnitGetOwner(autoAB3BD328_var)][1] += 5;
        gv_militaryExpenses[UnitGetOwner(autoAB3BD328_var)][1] += 70;
    }
    autoC4C646B7_g = UnitGroup("BasiliskSPA2", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC4C646B7_u = UnitGroupCount(autoC4C646B7_g, c_unitCountAll);
    for (;; autoC4C646B7_u -= 1) {
        autoC4C646B7_var = UnitGroupUnitFromEnd(autoC4C646B7_g, autoC4C646B7_u);
        if (autoC4C646B7_var == null) { break; }
        gv_oilConsumption[UnitGetOwner(autoC4C646B7_var)][1] += 5;
        gv_militaryExpenses[UnitGetOwner(autoC4C646B7_var)][1] += 100;
    }
    auto3DF1C4BC_g = UnitGroup("StormIFV", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto3DF1C4BC_u = UnitGroupCount(auto3DF1C4BC_g, c_unitCountAll);
    for (;; auto3DF1C4BC_u -= 1) {
        auto3DF1C4BC_var = UnitGroupUnitFromEnd(auto3DF1C4BC_g, auto3DF1C4BC_u);
        if (auto3DF1C4BC_var == null) { break; }
        gv_oilConsumption[UnitGetOwner(auto3DF1C4BC_var)][1] += 4;
        gv_militaryExpenses[UnitGetOwner(auto3DF1C4BC_var)][1] += 150;
    }
    auto10EB00AD_g = UnitGroup("LancerMBT", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto10EB00AD_u = UnitGroupCount(auto10EB00AD_g, c_unitCountAll);
    for (;; auto10EB00AD_u -= 1) {
        auto10EB00AD_var = UnitGroupUnitFromEnd(auto10EB00AD_g, auto10EB00AD_u);
        if (auto10EB00AD_var == null) { break; }
        gv_oilConsumption[UnitGetOwner(auto10EB00AD_var)][1] += 8;
        gv_militaryExpenses[UnitGetOwner(auto10EB00AD_var)][1] += 300;
    }
    autoD4A46D41_g = UnitGroup("VanguardMBT", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD4A46D41_u = UnitGroupCount(autoD4A46D41_g, c_unitCountAll);
    for (;; autoD4A46D41_u -= 1) {
        autoD4A46D41_var = UnitGroupUnitFromEnd(autoD4A46D41_g, autoD4A46D41_u);
        if (autoD4A46D41_var == null) { break; }
        gv_oilConsumption[UnitGetOwner(autoD4A46D41_var)][1] += 14;
        gv_militaryExpenses[UnitGetOwner(autoD4A46D41_var)][1] += 1000;
    }
    auto9D27A86F_g = UnitGroup("Phenom", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9D27A86F_u = UnitGroupCount(auto9D27A86F_g, c_unitCountAll);
    for (;; auto9D27A86F_u -= 1) {
        auto9D27A86F_var = UnitGroupUnitFromEnd(auto9D27A86F_g, auto9D27A86F_u);
        if (auto9D27A86F_var == null) { break; }
        gv_oilConsumption[UnitGetOwner(auto9D27A86F_var)][1] += 10;
        gv_militaryExpenses[UnitGetOwner(auto9D27A86F_var)][1] += 400;
    }
    auto72BC0173_g = UnitGroup("CrusaderMBT", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto72BC0173_u = UnitGroupCount(auto72BC0173_g, c_unitCountAll);
    for (;; auto72BC0173_u -= 1) {
        auto72BC0173_var = UnitGroupUnitFromEnd(auto72BC0173_g, auto72BC0173_u);
        if (auto72BC0173_var == null) { break; }
        gv_oilConsumption[UnitGetOwner(auto72BC0173_var)][1] += 30;
        gv_militaryExpenses[UnitGetOwner(auto72BC0173_var)][1] += 5000;
    }
    autoEA7ADDDA_g = UnitGroup("StrikerAH", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoEA7ADDDA_u = UnitGroupCount(autoEA7ADDDA_g, c_unitCountAll);
    for (;; autoEA7ADDDA_u -= 1) {
        autoEA7ADDDA_var = UnitGroupUnitFromEnd(autoEA7ADDDA_g, autoEA7ADDDA_u);
        if (autoEA7ADDDA_var == null) { break; }
        gv_oilConsumption[UnitGetOwner(autoEA7ADDDA_var)][1] += 8;
        gv_militaryExpenses[UnitGetOwner(autoEA7ADDDA_var)][1] += 150;
    }
    auto12855494_g = UnitGroup("CourierTH", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto12855494_u = UnitGroupCount(auto12855494_g, c_unitCountAll);
    for (;; auto12855494_u -= 1) {
        auto12855494_var = UnitGroupUnitFromEnd(auto12855494_g, auto12855494_u);
        if (auto12855494_var == null) { break; }
        gv_oilConsumption[UnitGetOwner(auto12855494_var)][1] += 7;
        gv_militaryExpenses[UnitGetOwner(auto12855494_var)][1] += 100;
    }
    autoA434ED7E_g = UnitGroup("AstrosInterceptor", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA434ED7E_u = UnitGroupCount(autoA434ED7E_g, c_unitCountAll);
    for (;; autoA434ED7E_u -= 1) {
        autoA434ED7E_var = UnitGroupUnitFromEnd(autoA434ED7E_g, autoA434ED7E_u);
        if (autoA434ED7E_var == null) { break; }
        gv_oilConsumption[UnitGetOwner(autoA434ED7E_var)][1] += 16;
        gv_militaryExpenses[UnitGetOwner(autoA434ED7E_var)][1] += 250;
    }
    auto3A556D26_g = UnitGroup("ApolloBomber", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto3A556D26_u = UnitGroupCount(auto3A556D26_g, c_unitCountAll);
    for (;; auto3A556D26_u -= 1) {
        auto3A556D26_var = UnitGroupUnitFromEnd(auto3A556D26_g, auto3A556D26_u);
        if (auto3A556D26_var == null) { break; }
        gv_oilConsumption[UnitGetOwner(auto3A556D26_var)][1] += 16;
        gv_militaryExpenses[UnitGetOwner(auto3A556D26_var)][1] += 300;
    }
    auto486B21D6_g = UnitGroup("JavelinAH", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto486B21D6_u = UnitGroupCount(auto486B21D6_g, c_unitCountAll);
    for (;; auto486B21D6_u -= 1) {
        auto486B21D6_var = UnitGroupUnitFromEnd(auto486B21D6_g, auto486B21D6_u);
        if (auto486B21D6_var == null) { break; }
        gv_oilConsumption[UnitGetOwner(auto486B21D6_var)][1] += 20;
        gv_militaryExpenses[UnitGetOwner(auto486B21D6_var)][1] += 500;
    }
    auto725F8144_g = UnitGroup("ScorcherBomber", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto725F8144_u = UnitGroupCount(auto725F8144_g, c_unitCountAll);
    for (;; auto725F8144_u -= 1) {
        auto725F8144_var = UnitGroupUnitFromEnd(auto725F8144_g, auto725F8144_u);
        if (auto725F8144_var == null) { break; }
        gv_oilConsumption[UnitGetOwner(auto725F8144_var)][1] += 20;
        gv_militaryExpenses[UnitGetOwner(auto725F8144_var)][1] += 500;
    }
    autoA4B5FBC4_g = UnitGroup("ViperFighter", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA4B5FBC4_u = UnitGroupCount(autoA4B5FBC4_g, c_unitCountAll);
    for (;; autoA4B5FBC4_u -= 1) {
        autoA4B5FBC4_var = UnitGroupUnitFromEnd(autoA4B5FBC4_g, autoA4B5FBC4_u);
        if (autoA4B5FBC4_var == null) { break; }
        gv_oilConsumption[UnitGetOwner(autoA4B5FBC4_var)][1] += 30;
        gv_militaryExpenses[UnitGetOwner(autoA4B5FBC4_var)][1] += 1000;
    }
    auto7427E780_g = gv_users;
    auto7427E780_var = -1;
    while (true) {
        auto7427E780_var = PlayerGroupNextPlayer(auto7427E780_g, auto7427E780_var);
        if (auto7427E780_var < 0) { break; }
        gv_militaryExpenses[auto7427E780_var][1] /= 10;
        gv_oilConsumption[auto7427E780_var][1] /= 12;
        if ((TechTreeUpgradeCount(auto7427E780_var, "ElectricTanks", c_techCountCompleteOnly) == 1)) {
            if ((TechTreeUpgradeCount(auto7427E780_var, "SelfPoweredTanks", c_techCountCompleteOnly) == 1)) {
                gv_oilConsumption[auto7427E780_var][1] = lv_beforeOil[auto7427E780_var];
            }
            else {
                gv_electricityConsumption[auto7427E780_var][1] += (gv_oilConsumption[auto7427E780_var][1] * 4);
                gv_oilConsumption[auto7427E780_var][1] = lv_beforeOil[auto7427E780_var];
            }
        }

    }
}

void gf_GetElectricityBalanceComputePunish () {
    // Automatic Variable Declarations
    unitgroup auto5B21B7BE_g;
    int auto5B21B7BE_u;
    unit auto5B21B7BE_var;
    unitgroup auto105088A9_g;
    int auto105088A9_u;
    unit auto105088A9_var;
    unitgroup auto57931FE6_g;
    int auto57931FE6_u;
    unit auto57931FE6_var;
    unitgroup auto385754A1_g;
    int auto385754A1_u;
    unit auto385754A1_var;
    unitgroup autoD9CBEE24_g;
    int autoD9CBEE24_u;
    unit autoD9CBEE24_var;
    unitgroup auto1B211FA7_g;
    int auto1B211FA7_u;
    unit auto1B211FA7_var;
    unitgroup auto92461138_g;
    int auto92461138_u;
    unit auto92461138_var;
    unitgroup auto8909AFB6_g;
    int auto8909AFB6_u;
    unit auto8909AFB6_var;
    unitgroup autoD9704D77_g;
    int autoD9704D77_u;
    unit autoD9704D77_var;
    unitgroup auto754406CD_g;
    int auto754406CD_u;
    unit auto754406CD_var;
    unitgroup auto3B6E8A16_g;
    int auto3B6E8A16_u;
    unit auto3B6E8A16_var;
    unitgroup auto53051E2C_g;
    int auto53051E2C_u;
    unit auto53051E2C_var;
    unitgroup autoC37FA1B2_g;
    int autoC37FA1B2_u;
    unit autoC37FA1B2_var;
    unitgroup autoC9676E7C_g;
    int autoC9676E7C_u;
    unit autoC9676E7C_var;
    unitgroup auto843913BE_g;
    int auto843913BE_u;
    unit auto843913BE_var;
    unitgroup auto293030D1_g;
    int auto293030D1_u;
    unit auto293030D1_var;
    playergroup auto26CE04F2_g;
    int auto26CE04F2_var;
    playergroup autoDBC93B26_g;
    int autoDBC93B26_var;
    unitgroup autoCD209BAF_g;
    int autoCD209BAF_u;
    unit autoCD209BAF_var;
    unitgroup auto94AE216F_g;
    int auto94AE216F_u;
    unit auto94AE216F_var;
    unitgroup autoC947BD9C_g;
    int autoC947BD9C_u;
    unit autoC947BD9C_var;
    unitgroup auto22262795_g;
    int auto22262795_u;
    unit auto22262795_var;
    unitgroup auto817D5C6D_g;
    int auto817D5C6D_u;
    unit auto817D5C6D_var;

    // Implementation
    auto5B21B7BE_g = UnitGroup("WindTurbine", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto5B21B7BE_u = UnitGroupCount(auto5B21B7BE_g, c_unitCountAll);
    for (;; auto5B21B7BE_u -= 1) {
        auto5B21B7BE_var = UnitGroupUnitFromEnd(auto5B21B7BE_g, auto5B21B7BE_u);
        if (auto5B21B7BE_var == null) { break; }
        gv_electricityIncome[UnitGetOwner(auto5B21B7BE_var)][1] += FixedToInt((500.0 * UnitGetCustomValue(auto5B21B7BE_var, 0)));
        gv_buildingElectricityExpenses[UnitGetOwner(auto5B21B7BE_var)][1] += 500;
    }
    auto105088A9_g = UnitGroup("GeothermalPowerPlant", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto105088A9_u = UnitGroupCount(auto105088A9_g, c_unitCountAll);
    for (;; auto105088A9_u -= 1) {
        auto105088A9_var = UnitGroupUnitFromEnd(auto105088A9_g, auto105088A9_u);
        if (auto105088A9_var == null) { break; }
        gv_electricityIncome[UnitGetOwner(auto105088A9_var)][1] += FixedToInt((1000.0 * UnitGetCustomValue(auto105088A9_var, 0)));
        gv_buildingElectricityExpenses[UnitGetOwner(auto105088A9_var)][1] += 200;
    }
    auto57931FE6_g = UnitGroup("FissionPowerPlant", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto57931FE6_u = UnitGroupCount(auto57931FE6_g, c_unitCountAll);
    for (;; auto57931FE6_u -= 1) {
        auto57931FE6_var = UnitGroupUnitFromEnd(auto57931FE6_g, auto57931FE6_u);
        if (auto57931FE6_var == null) { break; }
        gv_electricityIncome[UnitGetOwner(auto57931FE6_var)][1] += FixedToInt((2000.0 * UnitGetCustomValue(auto57931FE6_var, 0)));
        gv_buildingElectricityExpenses[UnitGetOwner(auto57931FE6_var)][1] += 1000;
    }
    auto385754A1_g = UnitGroup("FusionReactor2", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto385754A1_u = UnitGroupCount(auto385754A1_g, c_unitCountAll);
    for (;; auto385754A1_u -= 1) {
        auto385754A1_var = UnitGroupUnitFromEnd(auto385754A1_g, auto385754A1_u);
        if (auto385754A1_var == null) { break; }
        gv_electricityIncome[UnitGetOwner(auto385754A1_var)][1] += FixedToInt((10000.0 * UnitGetCustomValue(auto385754A1_var, 0)));
        gv_buildingElectricityExpenses[UnitGetOwner(auto385754A1_var)][1] += 5000;
    }
    autoD9CBEE24_g = UnitGroup("OilPowerPlant", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD9CBEE24_u = UnitGroupCount(autoD9CBEE24_g, c_unitCountAll);
    for (;; autoD9CBEE24_u -= 1) {
        autoD9CBEE24_var = UnitGroupUnitFromEnd(autoD9CBEE24_g, autoD9CBEE24_u);
        if (autoD9CBEE24_var == null) { break; }
        gv_buildingElectricityExpenses[UnitGetOwner(autoD9CBEE24_var)][1] += 300;
        gv_oilConsumption[UnitGetOwner(autoD9CBEE24_var)][1] += (100 / 12);
        if ((gv_oilConsumption[UnitGetOwner(autoD9CBEE24_var)][1] <= gv_oil[UnitGetOwner(autoD9CBEE24_var)])) {
            gv_electricityIncome[UnitGetOwner(autoD9CBEE24_var)][1] += FixedToInt((1200.0 * UnitGetCustomValue(autoD9CBEE24_var, 0)));
        }

    }
    auto1B211FA7_g = UnitGroup("HydrofarmI", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto1B211FA7_u = UnitGroupCount(auto1B211FA7_g, c_unitCountAll);
    for (;; auto1B211FA7_u -= 1) {
        auto1B211FA7_var = UnitGroupUnitFromEnd(auto1B211FA7_g, auto1B211FA7_u);
        if (auto1B211FA7_var == null) { break; }
        gv_electricityConsumption[UnitGetOwner(auto1B211FA7_var)][1] += 100;
    }
    auto92461138_g = UnitGroup("HydrofarmII", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto92461138_u = UnitGroupCount(auto92461138_g, c_unitCountAll);
    for (;; auto92461138_u -= 1) {
        auto92461138_var = UnitGroupUnitFromEnd(auto92461138_g, auto92461138_u);
        if (auto92461138_var == null) { break; }
        gv_electricityConsumption[UnitGetOwner(auto92461138_var)][1] += 200;
    }
    auto8909AFB6_g = UnitGroup("HydrofarmIII", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto8909AFB6_u = UnitGroupCount(auto8909AFB6_g, c_unitCountAll);
    for (;; auto8909AFB6_u -= 1) {
        auto8909AFB6_var = UnitGroupUnitFromEnd(auto8909AFB6_g, auto8909AFB6_u);
        if (auto8909AFB6_var == null) { break; }
        gv_electricityConsumption[UnitGetOwner(auto8909AFB6_var)][1] += 300;
    }
    autoD9704D77_g = UnitGroup("HydrofarmIV", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD9704D77_u = UnitGroupCount(autoD9704D77_g, c_unitCountAll);
    for (;; autoD9704D77_u -= 1) {
        autoD9704D77_var = UnitGroupUnitFromEnd(autoD9704D77_g, autoD9704D77_u);
        if (autoD9704D77_var == null) { break; }
        gv_electricityConsumption[UnitGetOwner(autoD9704D77_var)][1] += 400;
    }
    auto754406CD_g = UnitGroup("HydrofarmV", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto754406CD_u = UnitGroupCount(auto754406CD_g, c_unitCountAll);
    for (;; auto754406CD_u -= 1) {
        auto754406CD_var = UnitGroupUnitFromEnd(auto754406CD_g, auto754406CD_u);
        if (auto754406CD_var == null) { break; }
        gv_electricityConsumption[UnitGetOwner(auto754406CD_var)][1] += 500;
    }
    auto3B6E8A16_g = UnitGroup("ShieldBatteryNerazim2", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto3B6E8A16_u = UnitGroupCount(auto3B6E8A16_g, c_unitCountAll);
    for (;; auto3B6E8A16_u -= 1) {
        auto3B6E8A16_var = UnitGroupUnitFromEnd(auto3B6E8A16_g, auto3B6E8A16_u);
        if (auto3B6E8A16_var == null) { break; }
        gv_electricityConsumption[UnitGetOwner(auto3B6E8A16_var)][1] += 12000;
    }
    auto53051E2C_g = UnitGroup("ResearchComplexI", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto53051E2C_u = UnitGroupCount(auto53051E2C_g, c_unitCountAll);
    for (;; auto53051E2C_u -= 1) {
        auto53051E2C_var = UnitGroupUnitFromEnd(auto53051E2C_g, auto53051E2C_u);
        if (auto53051E2C_var == null) { break; }
        gv_electricityConsumption[UnitGetOwner(auto53051E2C_var)][1] += 500;
    }
    autoC37FA1B2_g = UnitGroup("ResearchComplexII", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC37FA1B2_u = UnitGroupCount(autoC37FA1B2_g, c_unitCountAll);
    for (;; autoC37FA1B2_u -= 1) {
        autoC37FA1B2_var = UnitGroupUnitFromEnd(autoC37FA1B2_g, autoC37FA1B2_u);
        if (autoC37FA1B2_var == null) { break; }
        gv_electricityConsumption[UnitGetOwner(autoC37FA1B2_var)][1] += 1000;
    }
    autoC9676E7C_g = UnitGroup("ResearchComplexIII", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC9676E7C_u = UnitGroupCount(autoC9676E7C_g, c_unitCountAll);
    for (;; autoC9676E7C_u -= 1) {
        autoC9676E7C_var = UnitGroupUnitFromEnd(autoC9676E7C_g, autoC9676E7C_u);
        if (autoC9676E7C_var == null) { break; }
        gv_electricityConsumption[UnitGetOwner(autoC9676E7C_var)][1] += 1500;
    }
    auto843913BE_g = UnitGroup("ResearchComplexIV", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto843913BE_u = UnitGroupCount(auto843913BE_g, c_unitCountAll);
    for (;; auto843913BE_u -= 1) {
        auto843913BE_var = UnitGroupUnitFromEnd(auto843913BE_g, auto843913BE_u);
        if (auto843913BE_var == null) { break; }
        gv_electricityConsumption[UnitGetOwner(auto843913BE_var)][1] += 2000;
    }
    auto293030D1_g = UnitGroup("ResearchComplexV", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto293030D1_u = UnitGroupCount(auto293030D1_g, c_unitCountAll);
    for (;; auto293030D1_u -= 1) {
        auto293030D1_var = UnitGroupUnitFromEnd(auto293030D1_g, auto293030D1_u);
        if (auto293030D1_var == null) { break; }
        gv_electricityConsumption[UnitGetOwner(auto293030D1_var)][1] += 2500;
    }
    auto26CE04F2_g = gv_users;
    auto26CE04F2_var = -1;
    while (true) {
        auto26CE04F2_var = PlayerGroupNextPlayer(auto26CE04F2_g, auto26CE04F2_var);
        if (auto26CE04F2_var < 0) { break; }
        gv_electricityIncome[auto26CE04F2_var][1] = ((gv_electricityIncome[auto26CE04F2_var][1] / 100) * gv_electricityIncomeModifier[auto26CE04F2_var]);
    }
    autoDBC93B26_g = gv_users;
    autoDBC93B26_var = -1;
    while (true) {
        autoDBC93B26_var = PlayerGroupNextPlayer(autoDBC93B26_g, autoDBC93B26_var);
        if (autoDBC93B26_var < 0) { break; }
        if ((gv_electricityConsumption[autoDBC93B26_var][1] > gv_electricityIncome[autoDBC93B26_var][1])) {
            gf_CreateBanner(autoDBC93B26_var, 9);
            autoCD209BAF_g = UnitGroup("Cloudscraper", autoDBC93B26_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoCD209BAF_u = UnitGroupCount(autoCD209BAF_g, c_unitCountAll);
            for (;; autoCD209BAF_u -= 1) {
                autoCD209BAF_var = UnitGroupUnitFromEnd(autoCD209BAF_g, autoCD209BAF_u);
                if (autoCD209BAF_var == null) { break; }
                UnitSetPropertyFixed(autoCD209BAF_var, c_unitPropEnergyPercent, (UnitGetPropertyFixed(autoCD209BAF_var, c_unitPropEnergyPercent, c_unitPropCurrent) - 5.0));
            }
            auto94AE216F_g = UnitGroup("Stratostower", autoDBC93B26_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto94AE216F_u = UnitGroupCount(auto94AE216F_g, c_unitCountAll);
            for (;; auto94AE216F_u -= 1) {
                auto94AE216F_var = UnitGroupUnitFromEnd(auto94AE216F_g, auto94AE216F_u);
                if (auto94AE216F_var == null) { break; }
                UnitSetPropertyFixed(auto94AE216F_var, c_unitPropEnergyPercent, (UnitGetPropertyFixed(auto94AE216F_var, c_unitPropEnergyPercent, c_unitPropCurrent) - 5.0));
            }
            autoC947BD9C_g = UnitGroup("Ark", autoDBC93B26_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoC947BD9C_u = UnitGroupCount(autoC947BD9C_g, c_unitCountAll);
            for (;; autoC947BD9C_u -= 1) {
                autoC947BD9C_var = UnitGroupUnitFromEnd(autoC947BD9C_g, autoC947BD9C_u);
                if (autoC947BD9C_var == null) { break; }
                UnitSetPropertyFixed(autoC947BD9C_var, c_unitPropEnergyPercent, (UnitGetPropertyFixed(autoC947BD9C_var, c_unitPropEnergyPercent, c_unitPropCurrent) - 5.0));
            }
            auto22262795_g = UnitGroup("Nimbuspillar", autoDBC93B26_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto22262795_u = UnitGroupCount(auto22262795_g, c_unitCountAll);
            for (;; auto22262795_u -= 1) {
                auto22262795_var = UnitGroupUnitFromEnd(auto22262795_g, auto22262795_u);
                if (auto22262795_var == null) { break; }
                UnitSetPropertyFixed(auto22262795_var, c_unitPropEnergyPercent, (UnitGetPropertyFixed(auto22262795_var, c_unitPropEnergyPercent, c_unitPropCurrent) - 5.0));
            }
            auto817D5C6D_g = UnitGroup("ShieldBatteryNerazim2", autoDBC93B26_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto817D5C6D_u = UnitGroupCount(auto817D5C6D_g, c_unitCountAll);
            for (;; auto817D5C6D_u -= 1) {
                auto817D5C6D_var = UnitGroupUnitFromEnd(auto817D5C6D_g, auto817D5C6D_u);
                if (auto817D5C6D_var == null) { break; }
                UnitSetPropertyFixed(auto817D5C6D_var, c_unitPropShields, 0.0);
            }
        }
        else {
            gf_RemoveBanner(autoDBC93B26_var, 9);
        }
    }
}

void gf_FoodStuff () {
    int init_i;

    // Variable Declarations
    int lv_farmType;
    int[8] lv_privateFood;
    int[8] lv_farmCouunt;
    int[8] lv_averageCentralizationInverse;
    int lv_eUFood;
    int lv_corporateFood;
    region[10] lv_farmRegions;
    unitgroup[10] lv_farms;
    unitgroup lv_localFarms;
    int[10] lv_foodCollected;

    // Automatic Variable Declarations
    unitgroup auto7678CAF1_g;
    int auto7678CAF1_u;
    unit auto7678CAF1_var;
    unitgroup auto4ADD181F_g;
    int auto4ADD181F_u;
    unit auto4ADD181F_var;
    unitgroup autoC4473300_g;
    int autoC4473300_u;
    unit autoC4473300_var;
    unitgroup auto063BA793_g;
    int auto063BA793_u;
    unit auto063BA793_var;
    unitgroup autoCAE8D918_g;
    int autoCAE8D918_u;
    unit autoCAE8D918_var;
    unitgroup auto757018FC_g;
    int auto757018FC_u;
    unit auto757018FC_var;
    unitgroup auto3EEE4705_g;
    int auto3EEE4705_u;
    unit auto3EEE4705_var;
    unitgroup auto66505B83_g;
    int auto66505B83_u;
    unit auto66505B83_var;
    unitgroup autoBC9BF20C_g;
    int autoBC9BF20C_u;
    unit autoBC9BF20C_var;
    unitgroup auto1C7006A9_g;
    int auto1C7006A9_u;
    unit auto1C7006A9_var;
    playergroup auto73068352_g;
    int auto73068352_var;
    unitgroup auto8DE92844_g;
    int auto8DE92844_u;
    unit auto8DE92844_var;

    // Variable Initialization
    for (init_i = 0; init_i <= 9; init_i += 1) {
        lv_farms[init_i] = UnitGroupEmpty();
    }
    lv_localFarms = UnitGroupEmpty();

    // Implementation
    auto7678CAF1_g = UnitGroup("FarmI", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto7678CAF1_u = UnitGroupCount(auto7678CAF1_g, c_unitCountAll);
    for (;; auto7678CAF1_u -= 1) {
        auto7678CAF1_var = UnitGroupUnitFromEnd(auto7678CAF1_g, auto7678CAF1_u);
        if (auto7678CAF1_var == null) { break; }
        if ((UnitGetOwner(auto7678CAF1_var) < 8)) {
            UnitGroupAdd(lv_farms[UnitGetOwner(auto7678CAF1_var)], auto7678CAF1_var);
            gv_buildingFoodExpenses[UnitGetOwner(auto7678CAF1_var)][1] += 60;
        }

    }
    auto4ADD181F_g = UnitGroup("FarmII", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4ADD181F_u = UnitGroupCount(auto4ADD181F_g, c_unitCountAll);
    for (;; auto4ADD181F_u -= 1) {
        auto4ADD181F_var = UnitGroupUnitFromEnd(auto4ADD181F_g, auto4ADD181F_u);
        if (auto4ADD181F_var == null) { break; }
        if ((UnitGetOwner(auto4ADD181F_var) < 8)) {
            UnitGroupAdd(lv_farms[UnitGetOwner(auto4ADD181F_var)], auto4ADD181F_var);
            gv_buildingFoodExpenses[UnitGetOwner(auto4ADD181F_var)][1] += 120;
        }

    }
    autoC4473300_g = UnitGroup("FarmIII", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC4473300_u = UnitGroupCount(autoC4473300_g, c_unitCountAll);
    for (;; autoC4473300_u -= 1) {
        autoC4473300_var = UnitGroupUnitFromEnd(autoC4473300_g, autoC4473300_u);
        if (autoC4473300_var == null) { break; }
        if ((UnitGetOwner(autoC4473300_var) < 8)) {
            UnitGroupAdd(lv_farms[UnitGetOwner(autoC4473300_var)], autoC4473300_var);
            gv_buildingFoodExpenses[UnitGetOwner(autoC4473300_var)][1] += 180;
        }

    }
    auto063BA793_g = UnitGroup("FarmIV", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto063BA793_u = UnitGroupCount(auto063BA793_g, c_unitCountAll);
    for (;; auto063BA793_u -= 1) {
        auto063BA793_var = UnitGroupUnitFromEnd(auto063BA793_g, auto063BA793_u);
        if (auto063BA793_var == null) { break; }
        if ((UnitGetOwner(auto063BA793_var) < 8)) {
            UnitGroupAdd(lv_farms[UnitGetOwner(auto063BA793_var)], auto063BA793_var);
            gv_buildingFoodExpenses[UnitGetOwner(auto063BA793_var)][1] += 240;
        }

    }
    autoCAE8D918_g = UnitGroup("FarmV", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoCAE8D918_u = UnitGroupCount(autoCAE8D918_g, c_unitCountAll);
    for (;; autoCAE8D918_u -= 1) {
        autoCAE8D918_var = UnitGroupUnitFromEnd(autoCAE8D918_g, autoCAE8D918_u);
        if (autoCAE8D918_var == null) { break; }
        if ((UnitGetOwner(autoCAE8D918_var) < 8)) {
            UnitGroupAdd(lv_farms[UnitGetOwner(autoCAE8D918_var)], autoCAE8D918_var);
            gv_buildingFoodExpenses[UnitGetOwner(autoCAE8D918_var)][1] += 300;
        }

    }
    auto757018FC_g = UnitGroup("HydrofarmI", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto757018FC_u = UnitGroupCount(auto757018FC_g, c_unitCountAll);
    for (;; auto757018FC_u -= 1) {
        auto757018FC_var = UnitGroupUnitFromEnd(auto757018FC_g, auto757018FC_u);
        if (auto757018FC_var == null) { break; }
        if ((UnitGetOwner(auto757018FC_var) < 8)) {
            UnitGroupAdd(lv_farms[UnitGetOwner(auto757018FC_var)], auto757018FC_var);
            gv_buildingFoodExpenses[UnitGetOwner(auto757018FC_var)][1] += 600;
        }

    }
    auto3EEE4705_g = UnitGroup("HydrofarmII", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto3EEE4705_u = UnitGroupCount(auto3EEE4705_g, c_unitCountAll);
    for (;; auto3EEE4705_u -= 1) {
        auto3EEE4705_var = UnitGroupUnitFromEnd(auto3EEE4705_g, auto3EEE4705_u);
        if (auto3EEE4705_var == null) { break; }
        if ((UnitGetOwner(auto3EEE4705_var) < 8)) {
            UnitGroupAdd(lv_farms[UnitGetOwner(auto3EEE4705_var)], auto3EEE4705_var);
            gv_buildingFoodExpenses[UnitGetOwner(auto3EEE4705_var)][1] += 1200;
        }

    }
    auto66505B83_g = UnitGroup("HydrofarmIII", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto66505B83_u = UnitGroupCount(auto66505B83_g, c_unitCountAll);
    for (;; auto66505B83_u -= 1) {
        auto66505B83_var = UnitGroupUnitFromEnd(auto66505B83_g, auto66505B83_u);
        if (auto66505B83_var == null) { break; }
        if ((UnitGetOwner(auto66505B83_var) < 8)) {
            UnitGroupAdd(lv_farms[UnitGetOwner(auto66505B83_var)], auto66505B83_var);
            gv_buildingFoodExpenses[UnitGetOwner(auto66505B83_var)][1] += 1800;
        }

    }
    autoBC9BF20C_g = UnitGroup("HydrofarmIV", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoBC9BF20C_u = UnitGroupCount(autoBC9BF20C_g, c_unitCountAll);
    for (;; autoBC9BF20C_u -= 1) {
        autoBC9BF20C_var = UnitGroupUnitFromEnd(autoBC9BF20C_g, autoBC9BF20C_u);
        if (autoBC9BF20C_var == null) { break; }
        if ((UnitGetOwner(autoBC9BF20C_var) < 8)) {
            UnitGroupAdd(lv_farms[UnitGetOwner(autoBC9BF20C_var)], autoBC9BF20C_var);
            gv_buildingFoodExpenses[UnitGetOwner(autoBC9BF20C_var)][1] += 2400;
        }

    }
    auto1C7006A9_g = UnitGroup("HydrofarmV", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto1C7006A9_u = UnitGroupCount(auto1C7006A9_g, c_unitCountAll);
    for (;; auto1C7006A9_u -= 1) {
        auto1C7006A9_var = UnitGroupUnitFromEnd(auto1C7006A9_g, auto1C7006A9_u);
        if (auto1C7006A9_var == null) { break; }
        if ((UnitGetOwner(auto1C7006A9_var) < 8)) {
            UnitGroupAdd(lv_farms[UnitGetOwner(auto1C7006A9_var)], auto1C7006A9_var);
            gv_buildingFoodExpenses[UnitGetOwner(auto1C7006A9_var)][1] += 3000;
        }

    }
    auto73068352_g = gv_users;
    auto73068352_var = -1;
    while (true) {
        auto73068352_var = PlayerGroupNextPlayer(auto73068352_g, auto73068352_var);
        if (auto73068352_var < 0) { break; }
        auto8DE92844_g = lv_farms[auto73068352_var];
        auto8DE92844_u = UnitGroupCount(auto8DE92844_g, c_unitCountAll);
        for (;; auto8DE92844_u -= 1) {
            auto8DE92844_var = UnitGroupUnitFromEnd(auto8DE92844_g, auto8DE92844_u);
            if (auto8DE92844_var == null) { break; }
            lv_farmCouunt[UnitGetOwner(auto8DE92844_var)] += 1;
            gv_population[UnitGetOwner(auto8DE92844_var)] += (FixedToInt(UnitGetPropertyFixed(auto8DE92844_var, c_unitPropEnergy, c_unitPropCurrent)) / 2);
            lv_averageCentralizationInverse[UnitGetOwner(auto8DE92844_var)] += FixedToInt(((1.0 - UnitGetCustomValue(auto8DE92844_var, 0)) * 100.0));
            if ((UnitGetType(auto8DE92844_var) == "FarmV")) {
                lv_farmType = 5;
            }
            else {
                if ((UnitGetType(auto8DE92844_var) == "FarmIV")) {
                    lv_farmType = 4;
                }
                else {
                    if ((UnitGetType(auto8DE92844_var) == "FarmIII")) {
                        lv_farmType = 3;
                    }
                    else {
                        if ((UnitGetType(auto8DE92844_var) == "FarmII")) {
                            lv_farmType = 2;
                        }
                        else {
                            if ((UnitGetType(auto8DE92844_var) == "FarmI")) {
                                lv_farmType = 1;
                            }
                            else {
                                if ((gv_electricityConsumption[auto73068352_var][1] < gv_electricityIncome[auto73068352_var][1])) {
                                    if ((UnitGetType(auto8DE92844_var) == "HydrofarmI")) {
                                        lv_farmType = 10;
                                    }
                                    else {
                                        if ((UnitGetType(auto8DE92844_var) == "HydrofarmII")) {
                                            lv_farmType = 20;
                                        }
                                        else {
                                            if ((UnitGetType(auto8DE92844_var) == "HydrofarmIII")) {
                                                lv_farmType = 30;
                                            }
                                            else {
                                                if ((UnitGetType(auto8DE92844_var) == "HydrofarmIV")) {
                                                    lv_farmType = 40;
                                                }
                                                else {
                                                    if ((UnitGetType(auto8DE92844_var) == "HydrofarmV")) {
                                                        lv_farmType = 50;
                                                    }
                                                    else {
                                                        UnitGroupRemove(lv_localFarms, auto8DE92844_var);
                                                        UnitGroupRemove(lv_farms[auto73068352_var], auto8DE92844_var);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                else {
                                    UnitGroupRemove(lv_localFarms, auto8DE92844_var);
                                    UnitGroupRemove(lv_farms[auto73068352_var], auto8DE92844_var);
                                }
                            }
                        }
                    }
                }
            }
            if ((gf_HasBadFarmingTerrain(auto8DE92844_var) == true)) {
                lv_foodCollected[UnitGetOwner(auto8DE92844_var)] += FixedToInt(((gv_fOOD_PRODUCTION_BAD_TERRAIN * lv_farmType) * UnitGetCustomValue(auto8DE92844_var, 0)));
            }
            else {
                lv_foodCollected[UnitGetOwner(auto8DE92844_var)] += FixedToInt(((gv_fOOD_PRODUCTION_BASE * lv_farmType) * UnitGetCustomValue(auto8DE92844_var, 0)));
            }
        }
        if ((lv_foodCollected[auto73068352_var] < 20000)) {
            if ((lv_foodCollected[auto73068352_var] < 10)) {
                lv_foodCollected[auto73068352_var] = 10;
            }

            lv_foodCollected[auto73068352_var] *= gv_foodIncomeModifier[auto73068352_var];
            lv_foodCollected[auto73068352_var] /= 100;
        }
        else {
            lv_foodCollected[auto73068352_var] /= 100;
            lv_foodCollected[auto73068352_var] *= gv_foodIncomeModifier[auto73068352_var];
        }
        if ((lv_farmCouunt[auto73068352_var] < 1)) {
            lv_farmCouunt[auto73068352_var] = 1;
        }

        lv_averageCentralizationInverse[auto73068352_var] = (lv_averageCentralizationInverse[auto73068352_var] / lv_farmCouunt[auto73068352_var]);
        lv_privateFood[auto73068352_var] = (lv_averageCentralizationInverse[auto73068352_var] * (lv_foodCollected[auto73068352_var] / 100));
        gv_foodIncome[auto73068352_var][1] += lv_foodCollected[auto73068352_var];
    }
}

bool gf_HasBadFarmingTerrain (unit lp_givenUnit) {
    // Automatic Variable Declarations
    // Implementation
    if (((UnitHasBehavior2(lp_givenUnit, "MountainTerrain") == true) || (UnitHasBehavior2(lp_givenUnit, "SnowTerrain") == true) || (UnitHasBehavior2(lp_givenUnit, "DesertTerrain") == true) || (UnitHasBehavior2(lp_givenUnit, "HarshSnow") == true))) {
        return true;
    }
    else {
        return false;
    }
}

void gf_GetCivilianDemand () {
    int init_i;

    // Variable Declarations
    int lv_demandMultiplier;
    unit lv_pickedResourcePlace;
    unitgroup lv_localHomes;
    int lv_civilianGoodsDemand;
    unitgroup[10] lv_homes;

    // Automatic Variable Declarations
    unitgroup auto9F017D14_g;
    int auto9F017D14_u;
    unit auto9F017D14_var;
    playergroup auto9ADD5ECC_g;
    int auto9ADD5ECC_var;
    unitgroup auto1D126954_g;
    int auto1D126954_u;
    unit auto1D126954_var;

    // Variable Initialization
    lv_localHomes = UnitGroupEmpty();
    for (init_i = 0; init_i <= 9; init_i += 1) {
        lv_homes[init_i] = UnitGroupEmpty();
    }

    // Implementation
    auto9F017D14_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9F017D14_u = UnitGroupCount(auto9F017D14_g, c_unitCountAll);
    for (;; auto9F017D14_u -= 1) {
        auto9F017D14_var = UnitGroupUnitFromEnd(auto9F017D14_g, auto9F017D14_u);
        if (auto9F017D14_var == null) { break; }
        if ((UnitGetOwner(auto9F017D14_var) < 8) && (UnitTypeTestAttribute(UnitGetType(auto9F017D14_var), c_unitAttributeUser1) == true)) {
            UnitGroupAdd(lv_homes[UnitGetOwner(auto9F017D14_var)], auto9F017D14_var);
        }

    }
    auto9ADD5ECC_g = gv_users;
    auto9ADD5ECC_var = -1;
    while (true) {
        auto9ADD5ECC_var = PlayerGroupNextPlayer(auto9ADD5ECC_g, auto9ADD5ECC_var);
        if (auto9ADD5ECC_var < 0) { break; }
        if ((TechTreeUpgradeCount(auto9ADD5ECC_var, "Pacifist", c_techCountCompleteOnly) == 1)) {
            lv_demandMultiplier = 120;
        }
        else {
            if ((TechTreeUpgradeCount(auto9ADD5ECC_var, "DefensiveWar", c_techCountCompleteOnly) == 1)) {
                lv_demandMultiplier = 100;
            }
            else {
                if ((TechTreeUpgradeCount(auto9ADD5ECC_var, "LimitedWar", c_techCountCompleteOnly) == 1)) {
                    lv_demandMultiplier = 80;
                }
                else {
                    if ((TechTreeUpgradeCount(auto9ADD5ECC_var, "TotalWar", c_techCountCompleteOnly) == 1)) {
                        lv_demandMultiplier = 60;
                    }
                    else {
                        if ((TechTreeUpgradeCount(auto9ADD5ECC_var, "InhumaneWar", c_techCountCompleteOnly) == 1)) {
                            lv_demandMultiplier = 40;
                        }
                        else {
                            lv_demandMultiplier = 100;
                        }
                    }
                }
            }
        }
        if ((TechTreeUpgradeCount(auto9ADD5ECC_var, "DirectDemocracy", c_techCountCompleteOnly) == 1)) {
            lv_demandMultiplier += 10;
        }
        else {
            if ((TechTreeUpgradeCount(auto9ADD5ECC_var, "Corporatocracy", c_techCountCompleteOnly) == 1)) {
                lv_demandMultiplier += 25;
            }

        }
        lv_demandMultiplier -= 30;
        while ((UnitGroupCount(lv_homes[auto9ADD5ECC_var], c_unitCountAlive) > 0)) {
            lv_civilianGoodsDemand = 0;
            UnitGroupAddUnitGroup(lv_localHomes, UnitGroup(null, auto9ADD5ECC_var, RegionCircle(UnitGetPosition(UnitGroupRandomUnit(lv_homes[auto9ADD5ECC_var], c_unitCountAlive)), 2.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            auto1D126954_g = lv_localHomes;
            auto1D126954_u = UnitGroupCount(auto1D126954_g, c_unitCountAll);
            for (;; auto1D126954_u -= 1) {
                auto1D126954_var = UnitGroupUnitFromEnd(auto1D126954_g, auto1D126954_u);
                if (auto1D126954_var == null) { break; }
                lv_civilianGoodsDemand += FixedToInt(UnitGetPropertyFixed(auto1D126954_var, c_unitPropEnergy, c_unitPropCurrent));
            }
            if ((lv_civilianGoodsDemand < 10000)) {
                lv_civilianGoodsDemand *= lv_demandMultiplier;
                lv_civilianGoodsDemand /= 100;
            }
            else {
                lv_civilianGoodsDemand /= 100;
                lv_civilianGoodsDemand *= lv_demandMultiplier;
            }
            lv_pickedResourcePlace = gf_FindCheapestResource(UnitGetOwner(UnitGroupRandomUnit(lv_localHomes, c_unitCountAlive)), 1, UnitGetPosition(UnitGroupRandomUnit(lv_localHomes, c_unitCountAlive)), 500);
            if ((lv_pickedResourcePlace == null)) {
            }
            else {
                gf_ModifyUnitCustomValue(lv_pickedResourcePlace, (20 + auto9ADD5ECC_var), gf_GetEquilibriumQuantity(lv_civilianGoodsDemand, gf_GetUnitCustomValue(lv_pickedResourcePlace, 12), gv_gDPPerCapita[auto9ADD5ECC_var], 1));
                lv_pickedResourcePlace = null;
            }
            lv_pickedResourcePlace = gf_FindCheapestResource(UnitGetOwner(UnitGroupRandomUnit(lv_localHomes, c_unitCountAlive)), 2, UnitGetPosition(UnitGroupRandomUnit(lv_localHomes, c_unitCountAlive)), 500);
            if ((lv_pickedResourcePlace == null)) {
            }
            else {
                gf_ModifyUnitCustomValue(lv_pickedResourcePlace, (20 + auto9ADD5ECC_var), gf_GetEquilibriumQuantity(lv_civilianGoodsDemand, gf_GetUnitCustomValue(lv_pickedResourcePlace, 12), gv_gDPPerCapita[auto9ADD5ECC_var], 2));
                lv_pickedResourcePlace = null;
            }
            lv_pickedResourcePlace = gf_FindCheapestResource(UnitGetOwner(UnitGroupRandomUnit(lv_localHomes, c_unitCountAlive)), 3, UnitGetPosition(UnitGroupRandomUnit(lv_localHomes, c_unitCountAlive)), 500);
            if ((lv_pickedResourcePlace == null)) {
            }
            else {
                gf_ModifyUnitCustomValue(lv_pickedResourcePlace, (20 + auto9ADD5ECC_var), gf_GetEquilibriumQuantity(lv_civilianGoodsDemand, gf_GetUnitCustomValue(lv_pickedResourcePlace, 12), gv_gDPPerCapita[auto9ADD5ECC_var], 3));
                lv_pickedResourcePlace = null;
            }
            UnitGroupRemoveUnitGroup(lv_homes[auto9ADD5ECC_var], lv_localHomes);
            UnitGroupRemoveUnitGroup(lv_localHomes, lv_localHomes);
        }
    }
}

void gf_GetResearchSpeedUpkeep () {
    // Variable Declarations
    bool[16] lv_uNI;
    bool[16] lv_sCHOOL;

    // Automatic Variable Declarations
    playergroup auto264A8A7C_g;
    int auto264A8A7C_var;
    unitgroup autoAD7EDDCB_g;
    int autoAD7EDDCB_u;
    unit autoAD7EDDCB_var;
    unitgroup auto9B1F08CF_g;
    int auto9B1F08CF_u;
    unit auto9B1F08CF_var;
    unitgroup auto82BA502B_g;
    int auto82BA502B_u;
    unit auto82BA502B_var;
    unitgroup autoD122EAC6_g;
    int autoD122EAC6_u;
    unit autoD122EAC6_var;
    unitgroup auto271AF792_g;
    int auto271AF792_u;
    unit auto271AF792_var;
    unitgroup autoA44191E1_g;
    int autoA44191E1_u;
    unit autoA44191E1_var;
    unitgroup auto1BFA6064_g;
    int auto1BFA6064_u;
    unit auto1BFA6064_var;
    unitgroup autoA03C87FC_g;
    int autoA03C87FC_u;
    unit autoA03C87FC_var;
    unitgroup autoAAEAAE30_g;
    int autoAAEAAE30_u;
    unit autoAAEAAE30_var;
    unitgroup auto05715523_g;
    int auto05715523_u;
    unit auto05715523_var;
    unitgroup autoFE4EE1EF_g;
    int autoFE4EE1EF_u;
    unit autoFE4EE1EF_var;
    unitgroup auto5B61D2A1_g;
    int auto5B61D2A1_u;
    unit auto5B61D2A1_var;
    playergroup auto332EFE5F_g;
    int auto332EFE5F_var;

    // Variable Initialization

    // Implementation
    auto264A8A7C_g = gv_users;
    auto264A8A7C_var = -1;
    while (true) {
        auto264A8A7C_var = PlayerGroupNextPlayer(auto264A8A7C_g, auto264A8A7C_var);
        if (auto264A8A7C_var < 0) { break; }
        gv_researchSpeed[auto264A8A7C_var] = 0;
    }
    autoAD7EDDCB_g = UnitGroup("School", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoAD7EDDCB_u = UnitGroupCount(autoAD7EDDCB_g, c_unitCountAll);
    for (;; autoAD7EDDCB_u -= 1) {
        autoAD7EDDCB_var = UnitGroupUnitFromEnd(autoAD7EDDCB_g, autoAD7EDDCB_u);
        if (autoAD7EDDCB_var == null) { break; }
        lv_sCHOOL[UnitGetOwner(autoAD7EDDCB_var)] = true;
    }
    auto9B1F08CF_g = UnitGroup("University", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9B1F08CF_u = UnitGroupCount(auto9B1F08CF_g, c_unitCountAll);
    for (;; auto9B1F08CF_u -= 1) {
        auto9B1F08CF_var = UnitGroupUnitFromEnd(auto9B1F08CF_g, auto9B1F08CF_u);
        if (auto9B1F08CF_var == null) { break; }
        lv_uNI[UnitGetOwner(auto9B1F08CF_var)] = true;
    }
    auto82BA502B_g = UnitGroup("LaboratoryI", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto82BA502B_u = UnitGroupCount(auto82BA502B_g, c_unitCountAll);
    for (;; auto82BA502B_u -= 1) {
        auto82BA502B_var = UnitGroupUnitFromEnd(auto82BA502B_g, auto82BA502B_u);
        if (auto82BA502B_var == null) { break; }
        gv_researchSpeed[UnitGetOwner(auto82BA502B_var)] = 20;
        gv_buildingOtherExpenses[UnitGetOwner(auto82BA502B_var)][1] += 150;
    }
    autoD122EAC6_g = UnitGroup("LaboratoryII", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD122EAC6_u = UnitGroupCount(autoD122EAC6_g, c_unitCountAll);
    for (;; autoD122EAC6_u -= 1) {
        autoD122EAC6_var = UnitGroupUnitFromEnd(autoD122EAC6_g, autoD122EAC6_u);
        if (autoD122EAC6_var == null) { break; }
        gv_researchSpeed[UnitGetOwner(autoD122EAC6_var)] = 40;
        gv_buildingOtherExpenses[UnitGetOwner(autoD122EAC6_var)][1] += 300;
    }
    auto271AF792_g = UnitGroup("LaboratoryIII", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto271AF792_u = UnitGroupCount(auto271AF792_g, c_unitCountAll);
    for (;; auto271AF792_u -= 1) {
        auto271AF792_var = UnitGroupUnitFromEnd(auto271AF792_g, auto271AF792_u);
        if (auto271AF792_var == null) { break; }
        gv_researchSpeed[UnitGetOwner(auto271AF792_var)] = 60;
        gv_buildingOtherExpenses[UnitGetOwner(auto271AF792_var)][1] += 450;
    }
    autoA44191E1_g = UnitGroup("LaboratoryIV", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA44191E1_u = UnitGroupCount(autoA44191E1_g, c_unitCountAll);
    for (;; autoA44191E1_u -= 1) {
        autoA44191E1_var = UnitGroupUnitFromEnd(autoA44191E1_g, autoA44191E1_u);
        if (autoA44191E1_var == null) { break; }
        gv_researchSpeed[UnitGetOwner(autoA44191E1_var)] = 80;
        gv_buildingOtherExpenses[UnitGetOwner(autoA44191E1_var)][1] += 600;
    }
    auto1BFA6064_g = UnitGroup("LaboratoryV", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto1BFA6064_u = UnitGroupCount(auto1BFA6064_g, c_unitCountAll);
    for (;; auto1BFA6064_u -= 1) {
        auto1BFA6064_var = UnitGroupUnitFromEnd(auto1BFA6064_g, auto1BFA6064_u);
        if (auto1BFA6064_var == null) { break; }
        gv_researchSpeed[UnitGetOwner(auto1BFA6064_var)] = 100;
        gv_buildingOtherExpenses[UnitGetOwner(auto1BFA6064_var)][1] += 750;
    }
    autoA03C87FC_g = UnitGroup("ResearchComplexI", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA03C87FC_u = UnitGroupCount(autoA03C87FC_g, c_unitCountAll);
    for (;; autoA03C87FC_u -= 1) {
        autoA03C87FC_var = UnitGroupUnitFromEnd(autoA03C87FC_g, autoA03C87FC_u);
        if (autoA03C87FC_var == null) { break; }
        gv_buildingOtherExpenses[UnitGetOwner(autoA03C87FC_var)][1] += 1000;
        if ((gv_electricityConsumption[UnitGetOwner(autoA03C87FC_var)][1] < gv_electricityIncome[UnitGetOwner(autoA03C87FC_var)][1])) {
            gv_researchSpeed[UnitGetOwner(autoA03C87FC_var)] = 115;
        }
        else {
            gv_researchSpeed[UnitGetOwner(autoA03C87FC_var)] = 100;
        }
    }
    autoAAEAAE30_g = UnitGroup("ResearchComplexII", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoAAEAAE30_u = UnitGroupCount(autoAAEAAE30_g, c_unitCountAll);
    for (;; autoAAEAAE30_u -= 1) {
        autoAAEAAE30_var = UnitGroupUnitFromEnd(autoAAEAAE30_g, autoAAEAAE30_u);
        if (autoAAEAAE30_var == null) { break; }
        gv_buildingOtherExpenses[UnitGetOwner(autoAAEAAE30_var)][1] += 2000;
        if ((gv_electricityConsumption[UnitGetOwner(autoAAEAAE30_var)][1] < gv_electricityIncome[UnitGetOwner(autoAAEAAE30_var)][1])) {
            gv_researchSpeed[UnitGetOwner(autoAAEAAE30_var)] = 130;
        }
        else {
            gv_researchSpeed[UnitGetOwner(autoAAEAAE30_var)] = 100;
        }
    }
    auto05715523_g = UnitGroup("ResearchComplexIII", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto05715523_u = UnitGroupCount(auto05715523_g, c_unitCountAll);
    for (;; auto05715523_u -= 1) {
        auto05715523_var = UnitGroupUnitFromEnd(auto05715523_g, auto05715523_u);
        if (auto05715523_var == null) { break; }
        gv_buildingOtherExpenses[UnitGetOwner(auto05715523_var)][1] += 3000;
        if ((gv_electricityConsumption[UnitGetOwner(auto05715523_var)][1] < gv_electricityIncome[UnitGetOwner(auto05715523_var)][1])) {
            gv_researchSpeed[UnitGetOwner(auto05715523_var)] = 145;
        }
        else {
            gv_researchSpeed[UnitGetOwner(auto05715523_var)] = 100;
        }
    }
    autoFE4EE1EF_g = UnitGroup("ResearchComplexIV", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoFE4EE1EF_u = UnitGroupCount(autoFE4EE1EF_g, c_unitCountAll);
    for (;; autoFE4EE1EF_u -= 1) {
        autoFE4EE1EF_var = UnitGroupUnitFromEnd(autoFE4EE1EF_g, autoFE4EE1EF_u);
        if (autoFE4EE1EF_var == null) { break; }
        gv_buildingOtherExpenses[UnitGetOwner(autoFE4EE1EF_var)][1] += 4000;
        if ((gv_electricityConsumption[UnitGetOwner(autoFE4EE1EF_var)][1] < gv_electricityIncome[UnitGetOwner(autoFE4EE1EF_var)][1])) {
            gv_researchSpeed[UnitGetOwner(autoFE4EE1EF_var)] = 160;
        }
        else {
            gv_researchSpeed[UnitGetOwner(autoFE4EE1EF_var)] = 100;
        }
    }
    auto5B61D2A1_g = UnitGroup("ResearchComplexV", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto5B61D2A1_u = UnitGroupCount(auto5B61D2A1_g, c_unitCountAll);
    for (;; auto5B61D2A1_u -= 1) {
        auto5B61D2A1_var = UnitGroupUnitFromEnd(auto5B61D2A1_g, auto5B61D2A1_u);
        if (auto5B61D2A1_var == null) { break; }
        gv_buildingOtherExpenses[UnitGetOwner(auto5B61D2A1_var)][1] += 5000;
        if ((gv_electricityConsumption[UnitGetOwner(auto5B61D2A1_var)][1] < gv_electricityIncome[UnitGetOwner(auto5B61D2A1_var)][1])) {
            gv_researchSpeed[UnitGetOwner(auto5B61D2A1_var)] = 175;
        }
        else {
            gv_researchSpeed[UnitGetOwner(auto5B61D2A1_var)] = 100;
        }
    }
    auto332EFE5F_g = gv_users;
    auto332EFE5F_var = -1;
    while (true) {
        auto332EFE5F_var = PlayerGroupNextPlayer(auto332EFE5F_g, auto332EFE5F_var);
        if (auto332EFE5F_var < 0) { break; }
        if ((lv_sCHOOL[auto332EFE5F_var] == true)) {
            gv_researchSpeed[auto332EFE5F_var] += 5;
            gv_buildingOtherExpenses[auto332EFE5F_var][1] += 25;
        }

        if ((lv_uNI[auto332EFE5F_var] == true)) {
            gv_researchSpeed[auto332EFE5F_var] += 20;
            gv_buildingOtherExpenses[auto332EFE5F_var][1] += 50;
        }

        gv_researchSpeed[auto332EFE5F_var] += 15;
    }
}

void gf_RedistributeEUFood () {
    // Variable Declarations
    unit lv_parliment;
    fixed[10] lv_multiplier;
    int[10] lv_howNeedy;
    int[10] lv_foodneeded;
    int lv_totalFoodDemand;
    int[10] lv_percentRecieve;
    int[10] lv_aidGets;
    int lv_foodForStarvationRecieved;
    int[10] lv_totalFoodGets;

    // Automatic Variable Declarations
    unitgroup auto6FAF9B1E_g;
    int auto6FAF9B1E_u;
    unit auto6FAF9B1E_var;
    playergroup autoDB7D874E_g;
    int autoDB7D874E_var;
    playergroup auto33AB27EC_g;
    int auto33AB27EC_var;
    playergroup autoC1A50433_g;
    int autoC1A50433_var;
    playergroup auto6871D9D8_g;
    int auto6871D9D8_var;
    playergroup autoF158DA18_g;
    int autoF158DA18_var;

    // Variable Initialization

    // Implementation
    if ((PlayerGroupCount(gv_theEuroCrew) > 0)) {
        auto6FAF9B1E_g = UnitGroup("EuropeanParliment", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto6FAF9B1E_u = UnitGroupCount(auto6FAF9B1E_g, c_unitCountAll);
        for (;; auto6FAF9B1E_u -= 1) {
            auto6FAF9B1E_var = UnitGroupUnitFromEnd(auto6FAF9B1E_g, auto6FAF9B1E_u);
            if (auto6FAF9B1E_var == null) { break; }
            lv_parliment = auto6FAF9B1E_var;
        }
        autoDB7D874E_g = gv_theEuroCrew;
        autoDB7D874E_var = -1;
        while (true) {
            autoDB7D874E_var = PlayerGroupNextPlayer(autoDB7D874E_g, autoDB7D874E_var);
            if (autoDB7D874E_var < 0) { break; }
            lv_multiplier[autoDB7D874E_var] = (1.0 / ((IntToFixed(gv_foodConsumption[autoDB7D874E_var][1]) + 1000.0) / 10000.0));
            lv_multiplier[autoDB7D874E_var] = ((lv_multiplier[autoDB7D874E_var] + 4.0) / 5.0);
            lv_foodneeded[autoDB7D874E_var] = (gv_foodConsumption[autoDB7D874E_var][1] - gv_foodIncome[autoDB7D874E_var][1]);
            lv_howNeedy[autoDB7D874E_var] = FixedToInt((IntToFixed(lv_foodneeded[autoDB7D874E_var]) * lv_multiplier[autoDB7D874E_var]));
            lv_totalFoodDemand += lv_howNeedy[autoDB7D874E_var];
        }
        auto33AB27EC_g = gv_theEuroCrew;
        auto33AB27EC_var = -1;
        while (true) {
            auto33AB27EC_var = PlayerGroupNextPlayer(auto33AB27EC_g, auto33AB27EC_var);
            if (auto33AB27EC_var < 0) { break; }
            lv_percentRecieve[auto33AB27EC_var] = FixedToInt(((lv_foodneeded[auto33AB27EC_var] * 100.0) / (lv_totalFoodDemand + 1.0)));
            lv_aidGets[auto33AB27EC_var] = libNtve_gf_ArithmeticIntClamp(FixedToInt(((lv_percentRecieve[auto33AB27EC_var] * 0.01) * IntToFixed(gv_eURedistributeFoodStockpile))), 0, gv_foodConsumption[auto33AB27EC_var][1]);
        }
        autoC1A50433_g = gv_theEuroCrew;
        autoC1A50433_var = -1;
        while (true) {
            autoC1A50433_var = PlayerGroupNextPlayer(autoC1A50433_g, autoC1A50433_var);
            if (autoC1A50433_var < 0) { break; }
            gv_eURedistributeFoodStockpile -= lv_aidGets[autoC1A50433_var];
            lv_totalFoodGets[autoC1A50433_var] = lv_aidGets[autoC1A50433_var];
        }
        auto6871D9D8_g = gv_theEuroCrew;
        auto6871D9D8_var = -1;
        while (true) {
            auto6871D9D8_var = PlayerGroupNextPlayer(auto6871D9D8_g, auto6871D9D8_var);
            if (auto6871D9D8_var < 0) { break; }
            lv_totalFoodGets[auto6871D9D8_var] = (libNtve_gf_ArithmeticIntClamp(gv_eURedistributeFoodStockpile, 0, 100000000) / PlayerGroupCount(gv_theEuroCrew));
            lv_totalFoodGets[auto6871D9D8_var] += lv_aidGets[auto6871D9D8_var];
        }
        autoF158DA18_g = gv_theEuroCrew;
        autoF158DA18_var = -1;
        while (true) {
            autoF158DA18_var = PlayerGroupNextPlayer(autoF158DA18_g, autoF158DA18_var);
            if (autoF158DA18_var < 0) { break; }
            gf_CreateConvoy(UnitGetPosition(lv_parliment), gv_mrPresident, 1, lv_totalFoodGets[autoF158DA18_var], gv_mrPresident, autoF158DA18_var);
        }
    }

    gv_eURedistributeFoodStockpile = 0;
}

void gf_GetMostExpensesGibReparations () {
    // Variable Declarations
    int lv_q;
    int lv_player;
    int lv_rep;

    // Automatic Variable Declarations
    playergroup autoAA8928A2_g;
    int autoAA8928A2_var;
    const int autoD06AC683_ae = 7;
    const int autoD06AC683_ai = 1;
    playergroup auto7DDF0C32_g;
    int auto7DDF0C32_var;
    playergroup autoCFE0CB19_g;
    playergroup autoC4FBDA46_g;
    int autoC4FBDA46_var;

    // Variable Initialization

    // Implementation
    autoAA8928A2_g = gv_users;
    autoAA8928A2_var = -1;
    while (true) {
        autoAA8928A2_var = PlayerGroupNextPlayer(autoAA8928A2_g, autoAA8928A2_var);
        if (autoAA8928A2_var < 0) { break; }
        lv_player = 1;
        for ( ; ( (autoD06AC683_ai >= 0 && lv_player <= autoD06AC683_ae) || (autoD06AC683_ai < 0 && lv_player >= autoD06AC683_ae) ) ; lv_player += autoD06AC683_ai ) {
            if ((gv_reparations[autoAA8928A2_var][lv_player] > 0)) {
                lv_rep = FixedToInt((IntToFixed((gv_totalIncome[autoAA8928A2_var][2] / 10)) * 1.0));
                gv_reparations[autoAA8928A2_var][lv_player] -= lv_rep;
                gv_overlordExpenses[autoAA8928A2_var][1] += lv_rep;
                gv_subjectIncome[lv_player][1] += lv_rep;
            }

        }
    }
    auto7DDF0C32_g = gv_users;
    auto7DDF0C32_var = -1;
    while (true) {
        auto7DDF0C32_var = PlayerGroupNextPlayer(auto7DDF0C32_g, auto7DDF0C32_var);
        if (auto7DDF0C32_var < 0) { break; }
        autoCFE0CB19_g = gv_users;
        lv_player = -1;
        while (true) {
            lv_player = PlayerGroupNextPlayer(autoCFE0CB19_g, lv_player);
            if (lv_player < 0) { break; }
            lv_q = 0;
            if ((gv_nationalBankDebts[lv_player][auto7DDF0C32_var] > 50000)) {
                if ((gv_nationalBankDebts[lv_player][auto7DDF0C32_var] > 5000000)) {
                    lv_q = ((gv_nationalBankDebts[lv_player][auto7DDF0C32_var] / 100) * FixedToInt(gv_interestRate[auto7DDF0C32_var]));
                }
                else {
                    lv_q = FixedToInt((IntToFixed((gv_nationalBankDebts[lv_player][auto7DDF0C32_var] / 100)) * gv_interestRate[auto7DDF0C32_var]));
                }
            }
            else {
                lv_q = FixedToInt(((IntToFixed(gv_nationalBankDebts[lv_player][auto7DDF0C32_var]) * gv_interestRate[auto7DDF0C32_var]) / 100.0));
            }
            lv_q /= 12;
            gv_interestExpenses[auto7DDF0C32_var][1] += lv_q;
            gv_nationalBankCash[lv_player] += lv_q;
        }
    }
    gf_GetBuildingExpenses();
    gf_GetSliderExpenses();
    autoC4FBDA46_g = gv_users;
    autoC4FBDA46_var = -1;
    while (true) {
        autoC4FBDA46_var = PlayerGroupNextPlayer(autoC4FBDA46_g, autoC4FBDA46_var);
        if (autoC4FBDA46_var < 0) { break; }
        gv_totalExpenses[autoC4FBDA46_var][1] = ((((((gv_buildingExpenses[autoC4FBDA46_var][1] + gv_importExpenses[autoC4FBDA46_var][1][1]) + gv_interestExpenses[autoC4FBDA46_var][1]) + gv_overlordExpenses[autoC4FBDA46_var][1]) + gv_militaryExpenses[autoC4FBDA46_var][1]) + gv_researchExpenses[autoC4FBDA46_var][1]) + (gv_subsidiesExpenses[autoC4FBDA46_var][1] + (gv_investmentExpenses[autoC4FBDA46_var][1] + (gv_repaymentExpenses[autoC4FBDA46_var][1] + ((gv_importExpenses[autoC4FBDA46_var][1][2] + gv_importExpenses[autoC4FBDA46_var][1][3]) + 0)))));
    }
}

void gf_GetSliderExpenses () {
    // Variable Declarations
    int lv_year;
    int lv_averageIncome;
    int lv_debtToRepay;

    // Automatic Variable Declarations
    playergroup auto07CB4771_g;
    int auto07CB4771_var;
    const int auto27F44F17_ae = 12;
    const int auto27F44F17_ai = 1;

    // Variable Initialization

    // Implementation
    auto07CB4771_g = gv_users;
    auto07CB4771_var = -1;
    while (true) {
        auto07CB4771_var = PlayerGroupNextPlayer(auto07CB4771_g, auto07CB4771_var);
        if (auto07CB4771_var < 0) { break; }
        lv_averageIncome = 0;
        lv_year = 1;
        for ( ; ( (auto27F44F17_ai >= 0 && lv_year <= auto27F44F17_ae) || (auto27F44F17_ai < 0 && lv_year >= auto27F44F17_ae) ) ; lv_year += auto27F44F17_ai ) {
            lv_averageIncome += (gv_totalIncome[auto07CB4771_var][lv_year] / 12);
        }
        if ((gv_concurrentBankruptMonths[auto07CB4771_var] > 0)) {
            libNtve_gf_SetDialogItemColor(gv_economicInternalPolicyDialogItems[10], Color(100.00, 0.00, 0.00), PlayerGroupSingle(auto07CB4771_var));
            libNtve_gf_SetDialogItemColor(gv_economicInternalPolicyDialogItems[11], Color(100.00, 0.00, 0.00), PlayerGroupSingle(auto07CB4771_var));
            libNtve_gf_SetDialogItemColor(gv_economicInternalPolicyDialogItems[12], Color(100.00, 0.00, 0.00), PlayerGroupSingle(auto07CB4771_var));
            libNtve_gf_SetDialogItemColor(gv_economicInternalPolicyDialogItems[13], Color(100.00, 0.00, 0.00), PlayerGroupSingle(auto07CB4771_var));
        }
        else {
            libNtve_gf_SetDialogItemColor(gv_economicInternalPolicyDialogItems[10], Color(22*100/255,128*100/255,0), PlayerGroupSingle(auto07CB4771_var));
            libNtve_gf_SetDialogItemColor(gv_economicInternalPolicyDialogItems[11], Color(22*100/255,128*100/255,0), PlayerGroupSingle(auto07CB4771_var));
            libNtve_gf_SetDialogItemColor(gv_economicInternalPolicyDialogItems[12], Color(22*100/255,128*100/255,0), PlayerGroupSingle(auto07CB4771_var));
            libNtve_gf_SetDialogItemColor(gv_economicInternalPolicyDialogItems[13], Color(22*100/255,128*100/255,0), PlayerGroupSingle(auto07CB4771_var));
            gv_commitedResearchMonthly[auto07CB4771_var] = FixedToInt((IntToFixed((lv_averageIncome / 100)) * gv_research[auto07CB4771_var]));
            gv_researchExpenses[auto07CB4771_var][1] = gv_commitedResearchMonthly[auto07CB4771_var];
            gv_investmentExpenses[auto07CB4771_var][1] = gf_InvestmentSpending(auto07CB4771_var, ((lv_averageIncome / 100) * FixedToInt(gv_investment[auto07CB4771_var])));
            if ((gv_deadCorp[auto07CB4771_var] == false)) {
                gv_subsidiesExpenses[auto07CB4771_var][1] = FixedToInt((IntToFixed((lv_averageIncome / 100)) * gv_subsidies[auto07CB4771_var]));
                gv_cGrantsIncome[auto07CB4771_var][0] += gv_subsidiesExpenses[auto07CB4771_var][1];
            }

            lv_debtToRepay = libNtve_gf_ArithmeticIntClamp(FixedToInt((IntToFixed((lv_averageIncome / 100)) * gv_loanRepayment[auto07CB4771_var])), 0, gf_GetTotalDebt(auto07CB4771_var));
            gf_RepayLoans(auto07CB4771_var, lv_debtToRepay);
            gv_repaymentExpenses[auto07CB4771_var][1] += lv_debtToRepay;
        }
    }
}

int gf_InvestmentSpending (int lp_player, int lp_budget) {
    int init_i;

    // Variable Declarations
    int lv_corp;
    int lv_player;
    int lv_investmentSpent;
    int[8] lv_freeStock;
    int[8] lv_invest;
    int[8] lv_investValue;
    int lv_totalPossibleInvestValue;
    int[8] lv_normalizedInvestmentValue;
    int[8] lv_creditsToInvest;
    int lv_stocksBought;

    // Automatic Variable Declarations
    const int auto90A47C13_ae = 7;
    const int auto90A47C13_ai = 1;
    const int auto00736D0A_ae = 7;
    const int auto00736D0A_ai = 1;
    const int autoE3A5D44D_ae = 7;
    const int autoE3A5D44D_ai = 1;
    const int auto5CD033FA_ae = 7;
    const int auto5CD033FA_ai = 1;
    const int auto6C96F6F7_ae = 7;
    const int auto6C96F6F7_ai = 1;
    const int autoD8622BE0_ae = 7;
    const int autoD8622BE0_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= 7; init_i += 1) {
        lv_freeStock[init_i] = 10000;
    }

    // Implementation
    if ((lp_budget < 5)) {
        return 0;
    }

    lv_corp = 1;
    for ( ; ( (auto90A47C13_ai >= 0 && lv_corp <= auto90A47C13_ae) || (auto90A47C13_ai < 0 && lv_corp >= auto90A47C13_ae) ) ; lv_corp += auto90A47C13_ai ) {
        lv_player = 1;
        for ( ; ( (auto00736D0A_ai >= 0 && lv_player <= auto00736D0A_ae) || (auto00736D0A_ai < 0 && lv_player >= auto00736D0A_ae) ) ; lv_player += auto00736D0A_ai ) {
            lv_freeStock[lv_corp] -= gv_stockOwned[lv_player][lv_corp];
        }
    }
    lv_corp = 1;
    for ( ; ( (autoE3A5D44D_ai >= 0 && lv_corp <= autoE3A5D44D_ae) || (autoE3A5D44D_ai < 0 && lv_corp >= autoE3A5D44D_ae) ) ; lv_corp += autoE3A5D44D_ai ) {
        if (((gv_bannedForeignEquity[lv_corp] == false) || (lp_player == lv_corp)) && (gv_stockOwned[lp_player][lv_corp] < gv_stockTarget[lp_player][lv_corp]) && (gv_nationalized[lv_corp] == false) && (gv_deadCorp[lv_corp] == false) && (gv_stockPrice[lv_corp] > 3)) {
            lv_invest[lv_corp] = (gv_stockTarget[lp_player][lv_corp] - gv_stockOwned[lp_player][lv_corp]);
        }

    }
    lv_corp = 1;
    for ( ; ( (auto5CD033FA_ai >= 0 && lv_corp <= auto5CD033FA_ae) || (auto5CD033FA_ai < 0 && lv_corp >= auto5CD033FA_ae) ) ; lv_corp += auto5CD033FA_ai ) {
        if ((lv_invest[lv_corp] > 0)) {
            lv_investValue[lv_corp] = (lv_invest[lv_corp] * gv_stockPrice[lv_corp]);
            lv_totalPossibleInvestValue += lv_investValue[lv_corp];
        }

    }
    lv_totalPossibleInvestValue /= 100;
    lv_totalPossibleInvestValue += 1;
    if ((lv_totalPossibleInvestValue < 5)) {
        if ((RandomInt(0, 100) < 10)) {
            UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, StringExternal("Param/Value/490E4EAE"));
        }

        return 0;
    }

    lv_corp = 1;
    for ( ; ( (auto6C96F6F7_ai >= 0 && lv_corp <= auto6C96F6F7_ae) || (auto6C96F6F7_ai < 0 && lv_corp >= auto6C96F6F7_ae) ) ; lv_corp += auto6C96F6F7_ai ) {
        if ((gv_stockPrice[lv_corp] > 3)) {
            lv_normalizedInvestmentValue[lv_corp] = (lv_investValue[lv_corp] / lv_totalPossibleInvestValue);
            lv_creditsToInvest[lv_corp] = ((lp_budget * lv_normalizedInvestmentValue[lv_corp]) / 100);
        }

    }
    lv_corp = 1;
    for ( ; ( (autoD8622BE0_ai >= 0 && lv_corp <= autoD8622BE0_ae) || (autoD8622BE0_ai < 0 && lv_corp >= autoD8622BE0_ae) ) ; lv_corp += autoD8622BE0_ai ) {
        if ((gv_stockPrice[lv_corp] > 3)) {
            lv_stocksBought = FloorI((IntToFixed(lv_creditsToInvest[lv_corp]) / IntToFixed(gv_stockPrice[lv_corp])));
            lv_stocksBought = libNtve_gf_ArithmeticIntClamp(lv_stocksBought, 0, lv_freeStock[lv_corp]);
            lv_investmentSpent += (lv_stocksBought * gv_stockPrice[lv_corp]);
            gv_stockOwned[lp_player][lv_corp] += lv_stocksBought;
        }

    }
    return lv_investmentSpent;
}

int gf_DeInvestmentSpending (int lp_player, int lp_budget) {
    // Variable Declarations
    int lv_corp;
    int lv_player;
    int lv_investmentSpent;
    int[8] lv_freeStock;
    int[8] lv_invest;
    int[8] lv_investValue;
    int lv_totalPossibleInvestValue;
    int[8] lv_normalizedInvestmentValue;
    int[8] lv_creditsToInvest;
    int lv_stocksBought;

    // Automatic Variable Declarations
    const int autoEED6E84E_ae = 7;
    const int autoEED6E84E_ai = 1;
    const int autoCD5750B2_ae = 7;
    const int autoCD5750B2_ai = 1;
    const int autoCD2DDAA0_ae = 7;
    const int autoCD2DDAA0_ai = 1;
    const int auto16F152F5_ae = 7;
    const int auto16F152F5_ai = 1;
    const int auto48F019A5_ae = 7;
    const int auto48F019A5_ai = 1;
    const int auto58F5270F_ae = 7;
    const int auto58F5270F_ai = 1;
    const int autoB2B1FBD7_ae = 7;
    const int autoB2B1FBD7_ai = 1;

    // Variable Initialization

    // Implementation
    if ((lp_budget < 5)) {
        return 0;
    }

    lv_corp = 1;
    for ( ; ( (autoEED6E84E_ai >= 0 && lv_corp <= autoEED6E84E_ae) || (autoEED6E84E_ai < 0 && lv_corp >= autoEED6E84E_ae) ) ; lv_corp += autoEED6E84E_ai ) {
        lv_player = 1;
        for ( ; ( (autoCD5750B2_ai >= 0 && lv_player <= autoCD5750B2_ae) || (autoCD5750B2_ai < 0 && lv_player >= autoCD5750B2_ae) ) ; lv_player += autoCD5750B2_ai ) {
            if ((gv_nationalized[lv_corp] == false)) {
                lv_freeStock[lv_corp] += gv_stockOwned[lv_player][lv_corp];
            }

        }
    }
    lv_corp = 1;
    for ( ; ( (autoCD2DDAA0_ai >= 0 && lv_corp <= autoCD2DDAA0_ae) || (autoCD2DDAA0_ai < 0 && lv_corp >= autoCD2DDAA0_ae) ) ; lv_corp += autoCD2DDAA0_ai ) {
        if ((gv_stockOwned[lp_player][lv_corp] > gv_stockTarget[lp_player][lv_corp])) {
            lv_invest[lv_corp] = (gv_stockOwned[lp_player][lv_corp] - gv_stockTarget[lp_player][lv_corp]);
        }

    }
    lv_corp = 1;
    for ( ; ( (auto16F152F5_ai >= 0 && lv_corp <= auto16F152F5_ae) || (auto16F152F5_ai < 0 && lv_corp >= auto16F152F5_ae) ) ; lv_corp += auto16F152F5_ai ) {
        if ((lv_invest[lv_corp] > 0)) {
            lv_investValue[lv_corp] = (lv_invest[lv_corp] * gv_stockPrice[lv_corp]);
            lv_totalPossibleInvestValue += lv_investValue[lv_corp];
        }

    }
    lv_totalPossibleInvestValue /= 100;
    lv_totalPossibleInvestValue += 1;
    if ((lv_totalPossibleInvestValue < 5)) {
        return 0;
    }

    lv_corp = 1;
    for ( ; ( (auto48F019A5_ai >= 0 && lv_corp <= auto48F019A5_ae) || (auto48F019A5_ai < 0 && lv_corp >= auto48F019A5_ae) ) ; lv_corp += auto48F019A5_ai ) {
        lv_normalizedInvestmentValue[lv_corp] = (lv_investValue[lv_corp] / lv_totalPossibleInvestValue);
        lv_creditsToInvest[lv_corp] = ((lp_budget * lv_normalizedInvestmentValue[lv_corp]) / 100);
    }
    lv_corp = 1;
    for ( ; ( (auto58F5270F_ai >= 0 && lv_corp <= auto58F5270F_ae) || (auto58F5270F_ai < 0 && lv_corp >= auto58F5270F_ae) ) ; lv_corp += auto58F5270F_ai ) {
        if ((gv_stockPrice[lv_corp] > 5)) {
            lv_stocksBought = FloorI((IntToFixed(lv_creditsToInvest[lv_corp]) / IntToFixed(gv_stockPrice[lv_corp])));
            lv_investmentSpent += (lv_stocksBought * gv_stockPrice[lv_corp]);
            gv_stockOwned[lp_player][lv_corp] -= lv_stocksBought;
        }

    }
    lv_corp = 1;
    for ( ; ( (autoB2B1FBD7_ai >= 0 && lv_corp <= autoB2B1FBD7_ae) || (autoB2B1FBD7_ai < 0 && lv_corp >= autoB2B1FBD7_ae) ) ; lv_corp += autoB2B1FBD7_ai ) {
        if ((gv_stockOwned[lp_player][lv_corp] < 0)) {
            lv_stocksBought = (gv_stockOwned[lp_player][lv_corp] * -1);
            lv_investmentSpent -= (lv_stocksBought * gv_stockPrice[lv_corp]);
            gv_stockOwned[lp_player][lv_corp] -= lv_stocksBought;
            gv_stockOwned[lp_player][lv_corp] = 0;
        }

    }
    return lv_investmentSpent;
}

void gf_GetBuildingExpenses () {
    // Automatic Variable Declarations
    unitgroup auto46222123_g;
    int auto46222123_u;
    unit auto46222123_var;
    unitgroup auto661DF05B_g;
    int auto661DF05B_u;
    unit auto661DF05B_var;
    unitgroup auto5C96BC00_g;
    int auto5C96BC00_u;
    unit auto5C96BC00_var;
    unitgroup auto6EBD3231_g;
    int auto6EBD3231_u;
    unit auto6EBD3231_var;
    unitgroup auto5EB423A5_g;
    int auto5EB423A5_u;
    unit auto5EB423A5_var;
    playergroup auto4F75304B_g;
    int auto4F75304B_var;

    // Implementation
    auto46222123_g = UnitGroup("CPGI", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto46222123_u = UnitGroupCount(auto46222123_g, c_unitCountAll);
    for (;; auto46222123_u -= 1) {
        auto46222123_var = UnitGroupUnitFromEnd(auto46222123_g, auto46222123_u);
        if (auto46222123_var == null) { break; }
        gv_buildingOtherExpenses[UnitGetOwner(auto46222123_var)][1] += 200;
        gv_oilIncome[UnitGetOwner(auto46222123_var)][1] += 8;
    }
    auto661DF05B_g = UnitGroup("CPGII", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto661DF05B_u = UnitGroupCount(auto661DF05B_g, c_unitCountAll);
    for (;; auto661DF05B_u -= 1) {
        auto661DF05B_var = UnitGroupUnitFromEnd(auto661DF05B_g, auto661DF05B_u);
        if (auto661DF05B_var == null) { break; }
        gv_buildingOtherExpenses[UnitGetOwner(auto661DF05B_var)][1] += 400;
        gv_oilIncome[UnitGetOwner(auto661DF05B_var)][1] += 16;
    }
    auto5C96BC00_g = UnitGroup("CPGIII", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto5C96BC00_u = UnitGroupCount(auto5C96BC00_g, c_unitCountAll);
    for (;; auto5C96BC00_u -= 1) {
        auto5C96BC00_var = UnitGroupUnitFromEnd(auto5C96BC00_g, auto5C96BC00_u);
        if (auto5C96BC00_var == null) { break; }
        gv_buildingOtherExpenses[UnitGetOwner(auto5C96BC00_var)][1] += 600;
        gv_oilIncome[UnitGetOwner(auto5C96BC00_var)][1] += 24;
    }
    auto6EBD3231_g = UnitGroup("Clinic", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto6EBD3231_u = UnitGroupCount(auto6EBD3231_g, c_unitCountAll);
    for (;; auto6EBD3231_u -= 1) {
        auto6EBD3231_var = UnitGroupUnitFromEnd(auto6EBD3231_g, auto6EBD3231_u);
        if (auto6EBD3231_var == null) { break; }
        gv_buildingOtherExpenses[UnitGetOwner(auto6EBD3231_var)][1] += 30;
    }
    auto5EB423A5_g = UnitGroup("SupplyDepotLowered", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto5EB423A5_u = UnitGroupCount(auto5EB423A5_g, c_unitCountAll);
    for (;; auto5EB423A5_u -= 1) {
        auto5EB423A5_var = UnitGroupUnitFromEnd(auto5EB423A5_g, auto5EB423A5_u);
        if (auto5EB423A5_var == null) { break; }
        gv_buildingOtherExpenses[UnitGetOwner(auto5EB423A5_var)][1] += 50;
    }
    auto4F75304B_g = gv_users;
    auto4F75304B_var = -1;
    while (true) {
        auto4F75304B_var = PlayerGroupNextPlayer(auto4F75304B_g, auto4F75304B_var);
        if (auto4F75304B_var < 0) { break; }
        gv_buildingExpenses[auto4F75304B_var][1] = ((gv_buildingElectricityExpenses[auto4F75304B_var][1] + gv_buildingFoodExpenses[auto4F75304B_var][1]) + gv_buildingOtherExpenses[auto4F75304B_var][1]);
    }
}

void gf_GetBalanceAndBankrupt () {
    // Variable Declarations
    int lv_creditLeft;
    int lv_debtOwed;
    int lv_availableDebt;

    // Automatic Variable Declarations
    playergroup autoC86F0788_g;
    int autoC86F0788_var;

    // Variable Initialization

    // Implementation
    autoC86F0788_g = gv_users;
    autoC86F0788_var = -1;
    while (true) {
        autoC86F0788_var = PlayerGroupNextPlayer(autoC86F0788_g, autoC86F0788_var);
        if (autoC86F0788_var < 0) { break; }
        if ((PlayerGroupHasPlayer(PlayerGroupActive(), autoC86F0788_var) == false)) {
        }
        else {
            gv_totalBalance[autoC86F0788_var][1] = (gv_totalIncome[autoC86F0788_var][1] - gv_totalExpenses[autoC86F0788_var][1]);
            if ((gv_totalExpenses[autoC86F0788_var][1] > gv_totalIncome[autoC86F0788_var][1])) {
                lv_debtOwed = (gv_totalBalance[autoC86F0788_var][1] * -1);
                lv_availableDebt = gf_GetAllowedDebt(autoC86F0788_var);
                lv_creditLeft = (PlayerGetPropertyInt(autoC86F0788_var, c_playerPropMinerals) + lv_availableDebt);
                gv_yearsToBankruptcy[autoC86F0788_var] = (lv_creditLeft / ((lv_debtOwed + 1) + 0));
                lv_debtOwed = (gv_totalBalance[autoC86F0788_var][1] * -1);
                if ((PlayerGetPropertyInt(autoC86F0788_var, c_playerPropMinerals) > lv_debtOwed)) {
                    PlayerModifyPropertyInt(autoC86F0788_var, c_playerPropMinerals, c_playerPropOperSubtract, lv_debtOwed);
                }
                else {
                    lv_debtOwed -= PlayerGetPropertyInt(autoC86F0788_var, c_playerPropMinerals);
                    PlayerModifyPropertyInt(autoC86F0788_var, c_playerPropMinerals, c_playerPropOperSetTo, 0);
                    if ((gf_TakeLoan(autoC86F0788_var, lv_debtOwed) == true)) {
                        PlayerModifyPropertyInt(autoC86F0788_var, c_playerPropMinerals, c_playerPropOperSubtract, lv_debtOwed);
                        gv_concurrentBankruptMonths[autoC86F0788_var] = 0;
                    }
                    else {
                        gf_PlayerBankrupt(autoC86F0788_var);
                    }
                }
            }
            else {
                gv_yearsToBankruptcy[autoC86F0788_var] = 0;
                gv_concurrentBankruptMonths[autoC86F0788_var] = 0;
                PlayerModifyPropertyInt(autoC86F0788_var, c_playerPropMinerals, c_playerPropOperAdd, gv_totalBalance[autoC86F0788_var][1]);
            }
        }
    }
}

void gf_PlayerBankrupt (int lp_player) {
    // Variable Declarations
    unit lv_randomUnit;
    int lv_debt;
    unitgroup lv_forSale;

    // Automatic Variable Declarations
    playergroup auto777A1ECC_g;
    int auto777A1ECC_var;
    unitgroup auto551BD65C_g;
    int auto551BD65C_u;
    unit auto551BD65C_var;
    unitgroup autoCAC58B6D_g;
    int autoCAC58B6D_u;
    unit autoCAC58B6D_var;
    unitgroup auto2C6C25EB_g;
    int auto2C6C25EB_u;
    unit auto2C6C25EB_var;

    // Variable Initialization
    lv_debt = ((gv_totalDebt[lp_player] + 10000) - (gv_cRevenue[lp_player][2] * 6));
    lv_forSale = UnitGroupEmpty();

    // Implementation
    auto777A1ECC_g = gv_users;
    auto777A1ECC_var = -1;
    while (true) {
        auto777A1ECC_var = PlayerGroupNextPlayer(auto777A1ECC_g, auto777A1ECC_var);
        if (auto777A1ECC_var < 0) { break; }
        gv_nationalBankDebts[auto777A1ECC_var][lp_player] = 0;
        gv_nationalBankDebts[lp_player][auto777A1ECC_var] = 0;
    }
    gv_concurrentBankruptMonths[lp_player] += 1;
    PlayerModifyPropertyInt(lp_player, c_playerPropMinerals, c_playerPropOperSetTo, 0);
    gv_research[lp_player] = 0;
    gv_subsidies[lp_player] = 0;
    gv_loanRepayment[lp_player] = 0;
    gv_investment[lp_player] = 0;
    if ((gv_concurrentBankruptMonths[lp_player] < 6)) {
        UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, StringExternal("Param/Value/2FEF0CEE"));
        auto2C6C25EB_g = UnitGroup(null, lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto2C6C25EB_u = UnitGroupCount(auto2C6C25EB_g, c_unitCountAll);
        for (;; auto2C6C25EB_u -= 1) {
            auto2C6C25EB_var = UnitGroupUnitFromEnd(auto2C6C25EB_g, auto2C6C25EB_u);
            if (auto2C6C25EB_var == null) { break; }
            if ((UnitGetType(auto2C6C25EB_var) != "Convoy")) {
                UnitBehaviorAdd(auto2C6C25EB_var, "Bankrupt", auto2C6C25EB_var, 1);
            }

            gv_creditRatingValue[lp_player] -= 10;
        }
        gv_economyHealth -= (gv_gDPPercent[lp_player] / 2);
    }
    else {
        gv_economyHealth -= (gv_gDPPercent[lp_player] * 5);
        gv_yearsSinceLastBankruptcy[lp_player] = 0;
        gv_creditRatingValue[lp_player] = 0;
        gv_totalDebt[lp_player] = 0;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(gf_NationOfPlayer(lp_player), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_player, false))) + StringExternal("Param/Value/2E0A84D9")));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/1572F7C8"));
        auto551BD65C_g = UnitGroup(null, lp_player, RegionEntireMap(), UnitFilter((1 << c_targetFilterPsionic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto551BD65C_u = UnitGroupCount(auto551BD65C_g, c_unitCountAll);
        for (;; auto551BD65C_u -= 1) {
            auto551BD65C_var = UnitGroupUnitFromEnd(auto551BD65C_g, auto551BD65C_u);
            if (auto551BD65C_var == null) { break; }
            if ((UnitGetType(auto551BD65C_var) != "School") && (UnitGetType(auto551BD65C_var) != "Clinic") && (UnitGetType(auto551BD65C_var) != "University")) {
                UnitGroupAdd(lv_forSale, auto551BD65C_var);
            }

        }
        while (((UnitGroupCount(lv_forSale, c_unitCountAlive) > 0) || (lv_debt > 0))) {
            lv_randomUnit = UnitGroupRandomUnit(lv_forSale, c_unitCountAlive);
            lv_debt -= UnitTypeGetCost(UnitGetType(lv_randomUnit), c_unitCostMinerals);
            lv_debt -= (UnitTypeGetCost(UnitGetType(lv_randomUnit), c_unitCostTerrazine) * (gv_aggregatePrice[2][4] / 2));
            UnitKill(lv_randomUnit);
            UnitGroupRemove(lv_forSale, lv_randomUnit);
            if ((lv_randomUnit == null)) {
                break;
            }

        }
        autoCAC58B6D_g = UnitGroup(null, lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoCAC58B6D_u = UnitGroupCount(autoCAC58B6D_g, c_unitCountAll);
        for (;; autoCAC58B6D_u -= 1) {
            autoCAC58B6D_var = UnitGroupUnitFromEnd(autoCAC58B6D_g, autoCAC58B6D_u);
            if (autoCAC58B6D_var == null) { break; }
            if ((UnitGetType(autoCAC58B6D_var) != "Convoy")) {
                UnitBehaviorAdd(autoCAC58B6D_var, "Bankrupt", autoCAC58B6D_var, 1);
            }

        }
        PlayerModifyPropertyInt(lp_player, c_playerPropMinerals, c_playerPropOperSetTo, (gv_totalExpenses[lp_player][1] * 16));
        PlayerModifyPropertyInt(lp_player, c_playerPropMinerals, c_playerPropOperAdd, 10000);
        if ((gv_nationalized[lp_player] == true)) {
            if ((gv_cCredits[lp_player] < 100)) {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(StringToText(gv_corpName[lp_player]), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_player, false))) + StringExternal("Param/Value/948DDA04")));
                gf_KillCorp(lp_player);
            }
            else {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(StringToText(gv_corpName[lp_player]), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_player, false))) + StringExternal("Param/Value/5E896D5D")));
                gv_nationalized[lp_player] = false;
            }
        }

    }
}

void gf_FinalizeResourceValuesEUFoodRedistribution () {
    // Variable Declarations
    int lv_redistribute;

    // Automatic Variable Declarations
    playergroup auto718DE0D4_g;
    int auto718DE0D4_var;
    playergroup autoB04615E7_g;
    int autoB04615E7_var;

    // Variable Initialization

    // Implementation
    if ((gv_redistribution > 0) && (gv_redistribution < 100)) {
        auto718DE0D4_g = gv_theEuroCrew;
        auto718DE0D4_var = -1;
        while (true) {
            auto718DE0D4_var = PlayerGroupNextPlayer(auto718DE0D4_g, auto718DE0D4_var);
            if (auto718DE0D4_var < 0) { break; }
            lv_redistribute = ((gv_foodIncome[auto718DE0D4_var][1] / 100) * gv_redistribution);
            gv_foodIncome[auto718DE0D4_var][1] -= lv_redistribute;
            gv_eURedistributeFoodStockpile += lv_redistribute;
        }
    }

    autoB04615E7_g = gv_users;
    autoB04615E7_var = -1;
    while (true) {
        autoB04615E7_var = PlayerGroupNextPlayer(autoB04615E7_g, autoB04615E7_var);
        if (autoB04615E7_var < 0) { break; }
        gv_techIncome[autoB04615E7_var] = ((gv_techIncome[autoB04615E7_var] * gv_techIncomeModifier[autoB04615E7_var]) / 100);
        PlayerModifyPropertyInt(autoB04615E7_var, c_playerPropTerrazine, c_playerPropOperAdd, gv_metalIncome[autoB04615E7_var][1]);
        gv_oil[autoB04615E7_var] += (gv_oilIncome[autoB04615E7_var][1] * 1);
        gv_oil[autoB04615E7_var] -= gv_oilConsumption[autoB04615E7_var][1];
        gv_food[autoB04615E7_var] += gv_foodIncome[autoB04615E7_var][1];
        gv_techIncome[autoB04615E7_var] = ((gv_techIncome[autoB04615E7_var] * gv_techIncomeModifier[autoB04615E7_var]) / 100);
    }
}

void gf_FoodConsumptionStarvationPopulationCountNoOilMaxSupplyFoodDecay () {
    // Variable Declarations
    int lv_toDecay;
    unit lv_pickedPop;
    unitgroup lv_pop;

    // Automatic Variable Declarations
    playergroup autoBB7A0EA1_g;
    int autoBB7A0EA1_var;
    unitgroup autoFF219ECF_g;
    int autoFF219ECF_u;
    unit autoFF219ECF_var;
    unitgroup auto538C0BF7_g;
    int auto538C0BF7_u;
    unit auto538C0BF7_var;
    playergroup autoBB1C0387_g;
    int autoBB1C0387_var;
    playergroup auto6925B54F_g;
    int auto6925B54F_var;

    // Variable Initialization
    lv_pop = UnitGroupEmpty();

    // Implementation
    autoBB7A0EA1_g = gv_users;
    autoBB7A0EA1_var = -1;
    while (true) {
        autoBB7A0EA1_var = PlayerGroupNextPlayer(autoBB7A0EA1_g, autoBB7A0EA1_var);
        if (autoBB7A0EA1_var < 0) { break; }
        gv_population[autoBB7A0EA1_var] = 0;
        if (((gv_oil[autoBB7A0EA1_var] > 0) || ((TechTreeUpgradeCount(autoBB7A0EA1_var, "ElectricTanks", c_techCountCompleteOnly) == 1) && (gv_electricityIncome[autoBB7A0EA1_var][1] > gv_electricityConsumption[autoBB7A0EA1_var][1])))) {
        }
        else {
            gv_oil[autoBB7A0EA1_var] = 0;
            autoFF219ECF_g = UnitGroup(null, autoBB7A0EA1_var, RegionEntireMap(), UnitFilter((1 << c_targetFilterMechanical), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoFF219ECF_u = UnitGroupCount(autoFF219ECF_g, c_unitCountAll);
            for (;; autoFF219ECF_u -= 1) {
                autoFF219ECF_var = UnitGroupUnitFromEnd(autoFF219ECF_g, autoFF219ECF_u);
                if (autoFF219ECF_var == null) { break; }
                if ((PlayerGroupHasPlayer(gv_users, UnitGetOwner(autoFF219ECF_var)) == true)) {
                    UnitBehaviorAdd(autoFF219ECF_var, "NoOil", autoFF219ECF_var, 1);
                }

            }
        }
    }
    auto538C0BF7_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterUser1), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto538C0BF7_u = UnitGroupCount(auto538C0BF7_g, c_unitCountAll);
    for (;; auto538C0BF7_u -= 1) {
        auto538C0BF7_var = UnitGroupUnitFromEnd(auto538C0BF7_g, auto538C0BF7_u);
        if (auto538C0BF7_var == null) { break; }
        if ((PlayerGroupHasPlayer(gv_users, UnitGetOwner(auto538C0BF7_var)) == true)) {
            UnitGroupAdd(lv_pop, auto538C0BF7_var);
        }

    }
    while ((UnitGroupCount(lv_pop, c_unitCountAlive) > 0)) {
        lv_pickedPop = UnitGroupRandomUnit(lv_pop, c_unitCountAlive);
        gv_population[UnitGetOwner(lv_pickedPop)] += FixedToInt(UnitGetPropertyFixed(lv_pickedPop, c_unitPropEnergy, c_unitPropCurrent));
        if ((UnitHasBehavior2(lv_pickedPop, "WellFeds") == false) && (UnitGetType(lv_pickedPop) != "Shelter") && (UnitHasBehavior2(lv_pickedPop, "RussianCity") == false)) {
            gv_food[UnitGetOwner(lv_pickedPop)] -= FixedToInt(UnitGetPropertyFixed(lv_pickedPop, c_unitPropEnergy, c_unitPropCurrent));
            if ((gv_food[UnitGetOwner(lv_pickedPop)] < 0)) {
                gv_food[UnitGetOwner(lv_pickedPop)] = 0;
                UnitBehaviorAdd(lv_pickedPop, "Starving", lv_pickedPop, 1);
                UnitGroupAdd(gv_starvingHomes[UnitGetOwner(lv_pickedPop)], lv_pickedPop);
            }

        }

        UnitGroupRemove(lv_pop, lv_pickedPop);
    }
    autoBB1C0387_g = gv_users;
    autoBB1C0387_var = -1;
    while (true) {
        autoBB1C0387_var = PlayerGroupNextPlayer(autoBB1C0387_g, autoBB1C0387_var);
        if (autoBB1C0387_var < 0) { break; }
        if ((gv_food[autoBB1C0387_var] > 100)) {
            if ((PlayerGroupHasPlayer(gv_theEuroCrew, autoBB1C0387_var) == true)) {
                lv_toDecay = libNtve_gf_ArithmeticIntClamp((gv_food[autoBB1C0387_var] - (gv_foodFromMarkert[autoBB1C0387_var] - (gv_foodIncome[autoBB1C0387_var][1] - (gv_eURedistributeFoodStockpile / PlayerGroupCount(gv_theEuroCrew))))), 0, 1000000000);
            }
            else {
                lv_toDecay = libNtve_gf_ArithmeticIntClamp((gv_food[autoBB1C0387_var] - (gv_foodFromMarkert[autoBB1C0387_var] - (gv_foodIncome[autoBB1C0387_var][1] - 0))), 0, 1000000000);
            }
            if ((gv_food[autoBB1C0387_var] > 1000000)) {
                gv_foodDecayed[autoBB1C0387_var] = (gv_food[autoBB1C0387_var] / 10);
                gv_foodDecayed[autoBB1C0387_var] *= 2;
            }
            else {
                gv_foodDecayed[autoBB1C0387_var] = (gv_food[autoBB1C0387_var] * 2);
                gv_foodDecayed[autoBB1C0387_var] /= 10;
            }
            gv_food[autoBB1C0387_var] -= gv_foodDecayed[autoBB1C0387_var];
        }
        else {
            gv_foodDecayed[autoBB1C0387_var] = 0;
        }
    }
    auto6925B54F_g = gv_users;
    auto6925B54F_var = -1;
    while (true) {
        auto6925B54F_var = PlayerGroupNextPlayer(auto6925B54F_g, auto6925B54F_var);
        if (auto6925B54F_var < 0) { break; }
        PlayerModifyPropertyInt(auto6925B54F_var, c_playerPropSuppliesMade, c_playerPropOperSetTo, libNtve_gf_ArithmeticIntClamp((gv_population[auto6925B54F_var] / 10), 15, 1000));
    }
}

void gf_CalculateGDPPerCapitaEconomyHealthEffectCapitolHealthAutofundCorpNationalBank () {
    // Variable Declarations
    int lv_totalBuildings;
    int lv_capitalHealth;
    int[8] lv_newGDP;
    int lv_gDPChange;

    // Automatic Variable Declarations
    playergroup auto505F5CB4_g;
    int auto505F5CB4_var;
    playergroup autoCBCFA9B7_g;
    int autoCBCFA9B7_var;
    playergroup autoCB392133_g;
    int autoCB392133_var;
    unitgroup auto63689FF0_g;
    int auto63689FF0_u;
    unit auto63689FF0_var;

    // Variable Initialization

    // Implementation
    gv_totalGDP = 0;
    auto505F5CB4_g = gv_users;
    auto505F5CB4_var = -1;
    while (true) {
        auto505F5CB4_var = PlayerGroupNextPlayer(auto505F5CB4_g, auto505F5CB4_var);
        if (auto505F5CB4_var < 0) { break; }
        gv_urbanScore[auto505F5CB4_var] = 4.0;
        gv_urbanScore[auto505F5CB4_var] += (IntToFixed(gv_buildingTypesUrbanized[auto505F5CB4_var][0]) * 1.0);
        gv_urbanScore[auto505F5CB4_var] += (IntToFixed(gv_buildingTypesUrbanized[auto505F5CB4_var][1]) * 2.0);
        gv_urbanScore[auto505F5CB4_var] += (IntToFixed(gv_buildingTypesUrbanized[auto505F5CB4_var][2]) * 3.0);
        gv_urbanScore[auto505F5CB4_var] += (IntToFixed(gv_buildingTypesUrbanized[auto505F5CB4_var][3]) * 4.0);
        lv_totalBuildings = 0;
        lv_totalBuildings += (gv_buildingTypesUrbanized[auto505F5CB4_var][0] + ((gv_buildingTypesUrbanized[auto505F5CB4_var][1] + gv_buildingTypesUrbanized[auto505F5CB4_var][2]) + gv_buildingTypesUrbanized[auto505F5CB4_var][3]));
        lv_totalBuildings += 1;
        gv_urbanScore[auto505F5CB4_var] = (gv_urbanScore[auto505F5CB4_var] / IntToFixed(lv_totalBuildings));
        gv_urbanScore[auto505F5CB4_var] *= 25.0;
        lv_newGDP[auto505F5CB4_var] += FixedToInt((IntToFixed((gv_population[auto505F5CB4_var] / 20)) * gv_urbanScore[auto505F5CB4_var]));
        lv_newGDP[auto505F5CB4_var] += ((gv_foodIncome[auto505F5CB4_var][2] / 3) * libNtve_gf_ArithmeticIntClamp(gv_aggregatePrice[1][4], 4, 40));
        lv_newGDP[auto505F5CB4_var] += (gv_metalIncome[auto505F5CB4_var][2] * libNtve_gf_ArithmeticIntClamp(gv_aggregatePrice[2][4], 10, 150));
        lv_newGDP[auto505F5CB4_var] += (gv_oilIncome[auto505F5CB4_var][2] * libNtve_gf_ArithmeticIntClamp(gv_aggregatePrice[3][4], 10, 150));
        lv_newGDP[auto505F5CB4_var] += (gv_electricityIncome[auto505F5CB4_var][2] * 10);
        lv_newGDP[auto505F5CB4_var] += (gv_techIncome[auto505F5CB4_var] * 50);
        lv_newGDP[auto505F5CB4_var] += (gv_subsidiesExpenses[auto505F5CB4_var][2] / 2);
        lv_newGDP[auto505F5CB4_var] /= 100;
        lv_newGDP[auto505F5CB4_var] *= (100 + (gv_economyHealth / 75));
        lv_newGDP[auto505F5CB4_var] += (gv_stockPrice[auto505F5CB4_var] * 10);
        if ((lv_newGDP[auto505F5CB4_var] < 10)) {
            lv_newGDP[auto505F5CB4_var] = 10;
        }

        gv_totalGDP += lv_newGDP[auto505F5CB4_var];
    }
    autoCBCFA9B7_g = gv_users;
    autoCBCFA9B7_var = -1;
    while (true) {
        autoCBCFA9B7_var = PlayerGroupNextPlayer(autoCBCFA9B7_g, autoCBCFA9B7_var);
        if (autoCBCFA9B7_var < 0) { break; }
        gv_economyHealth += 2;
        gv_gDPPercent[autoCBCFA9B7_var] = ((lv_newGDP[autoCBCFA9B7_var] * 100) / (gv_totalGDP + 1));
        gv_gDPPercent[autoCBCFA9B7_var] += 1;
        lv_gDPChange = ((lv_newGDP[autoCBCFA9B7_var] * 100) / (gv_gDP[autoCBCFA9B7_var] + 1));
        lv_gDPChange -= 100;
        lv_gDPChange = ((lv_gDPChange * gv_gDPPercent[autoCBCFA9B7_var]) / 100);
        if ((lv_gDPChange > 0)) {
            gv_economyHealth += libNtve_gf_ArithmeticIntClamp(lv_gDPChange, 1, 10);
        }
        else {
            lv_gDPChange *= -1;
            gv_economyHealth -= libNtve_gf_ArithmeticIntClamp(lv_gDPChange, 1, 8);
        }
    }
    autoCB392133_g = gv_users;
    autoCB392133_var = -1;
    while (true) {
        autoCB392133_var = PlayerGroupNextPlayer(autoCB392133_g, autoCB392133_var);
        if (autoCB392133_var < 0) { break; }
        gv_gDP[autoCB392133_var] = lv_newGDP[autoCB392133_var];
        gv_gDPPerCapita[autoCB392133_var] = (gv_gDP[autoCB392133_var] / (gv_population[autoCB392133_var] + 1.0));
        gv_nationalBankCash[autoCB392133_var] += (((gv_economyHealth / 600) * gv_gDP[autoCB392133_var]) / 10);
        if ((RandomInt(0, (100 / PlayerGroupCount(gv_users))) > gv_gDPPercent[autoCB392133_var]) && (gf_GetCapitolLocation(autoCB392133_var) != null) && (PlayerGroupHasPlayer(PlayerGroupActive(), autoCB392133_var) == true) && (gv_deadCorp[autoCB392133_var] == true)) {
            gf_CreateCorporation(autoCB392133_var);
        }

    }
    auto63689FF0_g = UnitGroup("Capital", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto63689FF0_u = UnitGroupCount(auto63689FF0_g, c_unitCountAll);
    for (;; auto63689FF0_u -= 1) {
        auto63689FF0_var = UnitGroupUnitFromEnd(auto63689FF0_g, auto63689FF0_u);
        if (auto63689FF0_var == null) { break; }
        lv_capitalHealth = gv_gDP[UnitGetOwner(auto63689FF0_var)];
        UnitSetPropertyFixed(auto63689FF0_var, c_unitPropLifeMax, libNtve_gf_ArithmeticIntClamp(lv_capitalHealth, 3000, 50000));
    }
}

void gf_SetAllowedDebtCreditRating () {
    // Variable Declarations
    int lv_allowedDebtBase;
    int lv_debtModifier;

    // Automatic Variable Declarations
    playergroup auto3A2FDCDF_g;
    int auto3A2FDCDF_var;

    // Variable Initialization

    // Implementation
    auto3A2FDCDF_g = gv_users;
    auto3A2FDCDF_var = -1;
    while (true) {
        auto3A2FDCDF_var = PlayerGroupNextPlayer(auto3A2FDCDF_g, auto3A2FDCDF_var);
        if (auto3A2FDCDF_var < 0) { break; }
        gv_creditRatingValue[auto3A2FDCDF_var] += libNtve_gf_ArithmeticIntClamp((gv_gDPPercent[auto3A2FDCDF_var] / 5), 1, 10);
        gv_allowedSelfDebt[auto3A2FDCDF_var] = gf_GetAllowedDebt(auto3A2FDCDF_var);
    }
}

void gf_UpdateUIGetMonthlyAveragesLedgerFigures () {
    // Variable Declarations
    int lv_averageCivilianIncome;
    int lv_averageCorporateIncome;
    int lv_averageExportIncome;
    int lv_averageInvestmentIncome;
    int lv_averageTariffIncome;
    int lv_averageDeInvestmentIncome;
    int lv_averageSubjectsIncome;
    int lv_averageTotalIncome;
    int lv_averageBuildingsExpenses;
    int[4] lv_averageImportsExpenses;
    int lv_averageInterestExpenses;
    int lv_averageRepaymentExpenses;
    int lv_averageOverlordExpenses;
    int lv_averageMilitaryExpenses;
    int lv_averageResearchExpenses;
    int lv_averageSubsidiesExpenses;
    int lv_averageInvestmentExpenses;
    int lv_averageExpenses;
    int lv_averageRevenue;
    int lv_player;
    int lv_integer;
    int lv_aLD;
    int lv_aMD;
    int lv_aHD;
    int lv_aVHD;
    int lv_aFE;
    int lv_aEE;
    int lv_aOE;
    text lv_nationalBankTooltip;
    text lv_debtLimitTooltip;

    // Automatic Variable Declarations
    const int auto42DFAE12_ae = 7;
    const int auto42DFAE12_ai = 1;
    playergroup auto7F25BD85_g;
    int auto7F25BD85_var;
    playergroup autoB4923AA9_g;
    const int auto44A873D5_ae = 12;
    const int auto44A873D5_ai = 1;

    // Variable Initialization

    // Implementation
    lv_player = 1;
    for ( ; ( (auto42DFAE12_ai >= 0 && lv_player <= auto42DFAE12_ae) || (auto42DFAE12_ai < 0 && lv_player >= auto42DFAE12_ae) ) ; lv_player += auto42DFAE12_ai ) {
        if ((PlayerGroupHasPlayer(PlayerGroupActive(), lv_player) == true)) {
            libNtve_gf_SetDialogItemText(gv_ledgerNames[lv_player], (StringToText("") + TextWithColor(gf_NationOfPlayer(lv_player), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_player, false)))), PlayerGroupAll());
            libNtve_gf_SetDialogItemTooltip(gv_ledgerNames[lv_player], PlayerName(lv_player), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(gv_ledgerGDP[lv_player], (StringToText("") + gf_MakeUIPresentable((gv_gDP[lv_player] * 100))), PlayerGroupAll());
            libNtve_gf_SetDialogItemTooltip(gv_ledgerGDP[lv_player], (StringExternal("Param/Value/71C171ED") + (FixedToText(gv_gDPPerCapita[lv_player], c_fixedPrecisionAny) + (StringExternal("Param/Value/3477682F") + (FixedToText(((gv_urbanScore[lv_player] * 2.5) - 25.0), 2) + StringExternal("Param/Value/ABE6139B"))))), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(gv_ledgerLosses[lv_player], (StringToText("") + gf_MakeUIPresentable((gf_GetTotalPeopleDead(lv_player, 0) * 100))), PlayerGroupAll());
            libNtve_gf_SetDialogItemTooltip(gv_ledgerLosses[lv_player], gf_GetTotalPeopleDeadToolTip(lv_player, 0), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(gv_ledgerLosses[(lv_player + 7)], (StringToText("") + gf_MakeUIPresentable((gf_GetTotalPeopleDead(lv_player, 1) * 100))), PlayerGroupAll());
            libNtve_gf_SetDialogItemTooltip(gv_ledgerLosses[(lv_player + 7)], gf_GetTotalPeopleDeadToolTip(lv_player, 1), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(gv_ledgerPop[lv_player], (StringToText("") + gf_MakeUIPresentable((gv_population[lv_player] * 100))), PlayerGroupAll());
        }
        else {
            DialogControlSetVisible(gv_ledgerGDP[lv_player], PlayerGroupAll(), false);
            DialogControlSetVisible(gv_ledgerEU[lv_player], PlayerGroupAll(), false);
            DialogControlSetVisible(gv_ledgerNames[lv_player], PlayerGroupAll(), false);
            DialogControlSetVisible(gv_ledgerWarpolicy[lv_player], PlayerGroupAll(), false);
            DialogControlSetVisible(gv_ledgerGovernment[lv_player], PlayerGroupAll(), false);
            DialogControlSetVisible(gv_ledgerLosses[lv_player], PlayerGroupAll(), false);
            DialogControlSetVisible(gv_ledgerLosses[(lv_player + 7)], PlayerGroupAll(), false);
            DialogControlSetVisible(gv_ledgerPop[lv_player], PlayerGroupAll(), false);
        }
    }
    auto7F25BD85_g = gv_users;
    auto7F25BD85_var = -1;
    while (true) {
        auto7F25BD85_var = PlayerGroupNextPlayer(auto7F25BD85_g, auto7F25BD85_var);
        if (auto7F25BD85_var < 0) { break; }
        libNtve_gf_SetDialogItemText(gv_dialolgItems[0], (StringExternal("Param/Value/3E403834") + gf_MakeUIPresentable((gv_population[auto7F25BD85_var] * 100))), PlayerGroupSingle(auto7F25BD85_var));
        if ((PlayerGroupHasPlayer(gv_theEuroCrew, auto7F25BD85_var) == true)) {
            libNtve_gf_SetDialogItemText(gv_dialolgItems[1], (StringExternal("Param/Value/BC456D94") + gf_MakeUIPresentable((((gv_eURedistributeFoodStockpile / PlayerGroupCount(gv_theEuroCrew)) + (gv_foodIncome[auto7F25BD85_var][1] + gv_fOOD_PURCHASED[auto7F25BD85_var])) - (gv_foodConsumption[auto7F25BD85_var][1] + (0 + gv_foodDecayed[auto7F25BD85_var]))))), PlayerGroupSingle(auto7F25BD85_var));
            libNtve_gf_SetDialogItemTooltip(gv_dialolgItems[1], (((StringExternal("Param/Value/B66CFC73") + gf_MakeUIPresentable(gv_foodIncome[auto7F25BD85_var][1])) + (StringExternal("Param/Value/8E93E5C4") + gf_MakeUIPresentable(gv_foodFromMarkert[auto7F25BD85_var]))) + (((StringExternal("Param/Value/CF12085E") + gf_MakeUIPresentable(gv_fOOD_PURCHASED[auto7F25BD85_var])) + StringExternal("Param/Value/CDAB86DF")) + (gf_MakeUIPresentable((gv_eURedistributeFoodStockpile / PlayerGroupCount(gv_theEuroCrew))) + (StringExternal("Param/Value/C7D637E2") + (gf_MakeUIPresentable((gv_foodConsumption[auto7F25BD85_var][1] + gv_foodFromMarkert[auto7F25BD85_var])) + (StringExternal("Param/Value/72D74931") + gf_MakeUIPresentable(gv_foodDecayed[auto7F25BD85_var]))))))), PlayerGroupSingle(auto7F25BD85_var));
        }
        else {
            libNtve_gf_SetDialogItemText(gv_dialolgItems[1], (StringExternal("Param/Value/8DDE72B3") + gf_MakeUIPresentable(((0 + (gv_foodIncome[auto7F25BD85_var][1] + gv_fOOD_PURCHASED[auto7F25BD85_var])) - (gv_foodConsumption[auto7F25BD85_var][1] + (0 + gv_foodDecayed[auto7F25BD85_var]))))), PlayerGroupSingle(auto7F25BD85_var));
            libNtve_gf_SetDialogItemTooltip(gv_dialolgItems[1], (((StringExternal("Param/Value/73ADBDAE") + gf_MakeUIPresentable(gv_foodIncome[auto7F25BD85_var][1])) + (StringExternal("Param/Value/26D715F2") + gf_MakeUIPresentable(gv_foodFromMarkert[auto7F25BD85_var]))) + (((StringExternal("Param/Value/F1835544") + gf_MakeUIPresentable(gv_fOOD_PURCHASED[auto7F25BD85_var])) + StringToText("")) + (StringToText("") + (StringExternal("Param/Value/DD637E68") + (gf_MakeUIPresentable((gv_foodConsumption[auto7F25BD85_var][1] + gv_foodFromMarkert[auto7F25BD85_var])) + (StringExternal("Param/Value/B6FAEDCE") + gf_MakeUIPresentable(gv_foodDecayed[auto7F25BD85_var]))))))), PlayerGroupSingle(auto7F25BD85_var));
        }
        libNtve_gf_SetDialogItemText(gv_dialolgItems[2], (StringExternal("Param/Value/5EAB1783") + gf_MakeUIPresentable(gv_food[auto7F25BD85_var])), PlayerGroupSingle(auto7F25BD85_var));
        libNtve_gf_SetDialogItemText(gv_dialolgItems[3], (StringExternal("Param/Value/ABFB3DCA") + gf_MakeUIPresentable(gv_totalBalance[auto7F25BD85_var][1])), PlayerGroupSingle(auto7F25BD85_var));
        libNtve_gf_SetDialogItemText(gv_dialolgItems[4], (StringExternal("Param/Value/2267FEBA") + gf_MakeUIPresentable(PlayerGetPropertyInt(auto7F25BD85_var, c_playerPropMinerals))), PlayerGroupSingle(auto7F25BD85_var));
        libNtve_gf_SetDialogItemText(gv_dialolgItems[5], (StringExternal("Param/Value/3B75CB26") + gf_MakeUIPresentable(gv_metalIncome[auto7F25BD85_var][1])), PlayerGroupSingle(auto7F25BD85_var));
        libNtve_gf_SetDialogItemText(gv_dialolgItems[6], (StringExternal("Param/Value/07A13496") + gf_MakeUIPresentable(gv_techIncome[auto7F25BD85_var])), PlayerGroupSingle(auto7F25BD85_var));
        libNtve_gf_SetDialogItemText(gv_dialolgItems[7], (StringExternal("Param/Value/D85D88BE") + gf_MakeUIPresentable((gv_electricityIncome[auto7F25BD85_var][1] - gv_electricityConsumption[auto7F25BD85_var][1]))), PlayerGroupSingle(auto7F25BD85_var));
        libNtve_gf_SetDialogItemText(gv_dialolgItems[8], (StringExternal("Param/Value/9E1E65FB") + gf_MakeUIPresentable(gv_oil[auto7F25BD85_var])), PlayerGroupSingle(auto7F25BD85_var));
        libNtve_gf_SetDialogItemText(gv_dialolgItems[9], (StringExternal("Param/Value/E3F9841A") + gf_MakeUIPresentable((gv_oilIncome[auto7F25BD85_var][1] - gv_oilConsumption[auto7F25BD85_var][1]))), PlayerGroupSingle(auto7F25BD85_var));
        libNtve_gf_SetDialogItemText(gv_dialolgItems[10], (StringExternal("Param/Value/E384C300") + gf_MakeUIPresentable(gv_interestExpenses[auto7F25BD85_var][1])), PlayerGroupSingle(auto7F25BD85_var));
        libNtve_gf_SetDialogItemText(gv_dialolgItems[11], (StringExternal("Param/Value/63727797") + gf_MakeUIPresentable(gf_GetTotalDebt(auto7F25BD85_var))), PlayerGroupSingle(auto7F25BD85_var));
        libNtve_gf_SetDialogItemText(gv_economicDebtPolicyDialogItems[2], (StringToText("") + gf_MakeUIPresentable(gf_GetAllowedDebt(auto7F25BD85_var))), PlayerGroupSingle(auto7F25BD85_var));
        libNtve_gf_SetDialogItemText(gv_economicDebtPolicyDialogItems[9], (StringToText("") + gf_MakeUIPresentable(gv_nationalBankCash[auto7F25BD85_var])), PlayerGroupSingle(auto7F25BD85_var));
        libNtve_gf_SetDialogItemTooltip(gv_economicDebtPolicyDialogItems[10], ((StringExternal("Param/Value/27D0B714") + IntToText(gv_gDPPercent[auto7F25BD85_var])) + StringExternal("Param/Value/BCDC63A2")), PlayerGroupSingle(auto7F25BD85_var));
        lv_nationalBankTooltip = StringExternal("Param/Value/78CCC60E");
        autoB4923AA9_g = gv_users;
        lv_player = -1;
        while (true) {
            lv_player = PlayerGroupNextPlayer(autoB4923AA9_g, lv_player);
            if (lv_player < 0) { break; }
            lv_nationalBankTooltip = ((lv_nationalBankTooltip + StringExternal("Param/Value/19E89C42")) + (TextWithColor(gf_NationOfPlayer(lv_player), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_player, false))) + (StringExternal("Param/Value/29B25592") + gf_MakeUIPresentable(gv_nationalBankDebts[auto7F25BD85_var][lv_player]))));
        }
        libNtve_gf_SetDialogItemTooltip(gv_economicDebtPolicyDialogItems[9], lv_nationalBankTooltip, PlayerGroupSingle(auto7F25BD85_var));
        lv_averageBuildingsExpenses = 0;
        lv_averageCivilianIncome = 0;
        lv_averageCorporateIncome = 0;
        lv_averageExpenses = 0;
        lv_averageExportIncome = 0;
        lv_averageImportsExpenses[1] = 0;
        lv_averageImportsExpenses[2] = 0;
        lv_averageImportsExpenses[3] = 0;
        lv_averageInterestExpenses = 0;
        lv_averageRepaymentExpenses = 0;
        lv_averageInvestmentIncome = 0;
        lv_averageTariffIncome = 0;
        lv_averageDeInvestmentIncome = 0;
        lv_averageMilitaryExpenses = 0;
        lv_averageOverlordExpenses = 0;
        lv_averageResearchExpenses = 0;
        lv_averageRevenue = 0;
        lv_averageSubjectsIncome = 0;
        lv_averageSubsidiesExpenses = 0;
        lv_averageInvestmentExpenses = 0;
        lv_averageTotalIncome = 0;
        lv_integer = 1;
        for ( ; ( (auto44A873D5_ai >= 0 && lv_integer <= auto44A873D5_ae) || (auto44A873D5_ai < 0 && lv_integer >= auto44A873D5_ae) ) ; lv_integer += auto44A873D5_ai ) {
            lv_averageCivilianIncome += gv_civilianIncome[auto7F25BD85_var][lv_integer];
            lv_averageCorporateIncome += gv_corporateIncome[auto7F25BD85_var][lv_integer];
            lv_averageExportIncome += gv_exportIncome[auto7F25BD85_var][lv_integer];
            lv_averageInvestmentIncome += gv_investmentIncome[auto7F25BD85_var][lv_integer];
            lv_averageTariffIncome += gv_tariffIncome[auto7F25BD85_var][lv_integer];
            lv_averageDeInvestmentIncome += gv_deInvestmentIncome[auto7F25BD85_var][lv_integer];
            lv_averageSubjectsIncome += gv_subjectIncome[auto7F25BD85_var][lv_integer];
            lv_averageTotalIncome += gv_totalIncome[auto7F25BD85_var][lv_integer];
            lv_averageBuildingsExpenses += gv_buildingExpenses[auto7F25BD85_var][lv_integer];
            lv_averageImportsExpenses[1] += gv_importExpenses[auto7F25BD85_var][lv_integer][1];
            lv_averageImportsExpenses[2] += gv_importExpenses[auto7F25BD85_var][lv_integer][2];
            lv_averageImportsExpenses[3] += gv_importExpenses[auto7F25BD85_var][lv_integer][3];
            lv_averageInterestExpenses += gv_interestExpenses[auto7F25BD85_var][lv_integer];
            lv_averageRepaymentExpenses += gv_repaymentExpenses[auto7F25BD85_var][lv_integer];
            lv_averageOverlordExpenses += gv_overlordExpenses[auto7F25BD85_var][lv_integer];
            lv_averageMilitaryExpenses += gv_militaryExpenses[auto7F25BD85_var][lv_integer];
            lv_averageResearchExpenses += gv_researchExpenses[auto7F25BD85_var][lv_integer];
            lv_averageSubsidiesExpenses += gv_subsidiesExpenses[auto7F25BD85_var][lv_integer];
            lv_averageInvestmentExpenses += gv_investmentExpenses[auto7F25BD85_var][lv_integer];
            lv_averageExpenses += gv_totalExpenses[auto7F25BD85_var][lv_integer];
            lv_aLD += gv_lDIncome[auto7F25BD85_var][lv_integer];
            lv_aMD += gv_mDIncome[auto7F25BD85_var][lv_integer];
            lv_aLD += gv_lDIncome[auto7F25BD85_var][lv_integer];
            lv_aVHD += gv_vHDIncome[auto7F25BD85_var][lv_integer];
            lv_aFE += gv_buildingFoodExpenses[auto7F25BD85_var][lv_integer];
            lv_aEE += gv_buildingElectricityExpenses[auto7F25BD85_var][lv_integer];
            lv_aOE += gv_buildingOtherExpenses[auto7F25BD85_var][lv_integer];
        }
        if ((lv_aLD < 20000)) {
            lv_aLD *= gv_creditIncomeModifier[auto7F25BD85_var];
            lv_aLD /= 1000;
        }
        else {
            lv_aLD /= 1000;
            lv_aLD *= gv_creditIncomeModifier[auto7F25BD85_var];
        }
        if ((lv_aMD < 20000)) {
            lv_aMD *= gv_creditIncomeModifier[auto7F25BD85_var];
            lv_aMD /= 1000;
        }
        else {
            lv_aMD /= 1000;
            lv_aMD *= gv_creditIncomeModifier[auto7F25BD85_var];
        }
        if ((lv_aMD < 20000)) {
            lv_aHD *= gv_creditIncomeModifier[auto7F25BD85_var];
            lv_aHD /= 1000;
        }
        else {
            lv_aHD /= 1000;
            lv_aHD *= gv_creditIncomeModifier[auto7F25BD85_var];
        }
        if ((lv_aMD < 20000)) {
            lv_aVHD *= gv_creditIncomeModifier[auto7F25BD85_var];
            lv_aVHD /= 1000;
        }
        else {
            lv_aVHD /= 1000;
            lv_aVHD *= gv_creditIncomeModifier[auto7F25BD85_var];
        }
        lv_aLD /= 2;
        lv_aMD /= 2;
        lv_aHD /= 2;
        lv_aVHD /= 2;
        lv_averageRevenue = (lv_averageTotalIncome - lv_averageExpenses);
        libNtve_gf_SetDialogItemText(gv_economicPolicyDialogItems[1], (StringToText("") + gf_MakeUIPresentable(lv_averageCivilianIncome)), PlayerGroupSingle(auto7F25BD85_var));
        libNtve_gf_SetDialogItemTooltip(gv_economicPolicyDialogItems[1], (((((StringExternal("Param/Value/CBC92212") + gf_MakeUIPresentable(lv_aLD)) + StringExternal("Param/Value/3C38B760")) + gf_MakeUIPresentable(lv_aMD)) + StringExternal("Param/Value/BC522597")) + (gf_MakeUIPresentable(lv_aHD) + (StringExternal("Param/Value/0F856746") + gf_MakeUIPresentable(lv_aVHD)))), PlayerGroupSingle(auto7F25BD85_var));
        libNtve_gf_SetDialogItemText(gv_economicPolicyDialogItems[2], (StringToText("") + gf_MakeUIPresentable(lv_averageCorporateIncome)), PlayerGroupSingle(auto7F25BD85_var));
        libNtve_gf_SetDialogItemText(gv_economicPolicyDialogItems[3], (StringToText("") + gf_MakeUIPresentable((lv_averageExportIncome + lv_averageTariffIncome))), PlayerGroupSingle(auto7F25BD85_var));
        libNtve_gf_SetDialogItemTooltip(gv_economicPolicyDialogItems[3], (((StringExternal("Param/Value/0E28384A") + IntToText(lv_averageExportIncome)) + StringExternal("Param/Value/2C20DE57")) + IntToText(lv_averageTariffIncome)), PlayerGroupSingle(auto7F25BD85_var));
        libNtve_gf_SetDialogItemText(gv_economicPolicyDialogItems[4], (StringToText("") + gf_MakeUIPresentable((lv_averageInvestmentIncome + lv_averageDeInvestmentIncome))), PlayerGroupSingle(auto7F25BD85_var));
        libNtve_gf_SetDialogItemTooltip(gv_economicPolicyDialogItems[4], (((StringExternal("Param/Value/83C2C264") + IntToText(lv_averageInvestmentIncome)) + StringExternal("Param/Value/18772434")) + IntToText(lv_averageDeInvestmentIncome)), PlayerGroupSingle(auto7F25BD85_var));
        libNtve_gf_SetDialogItemText(gv_economicPolicyDialogItems[5], (StringToText("") + gf_MakeUIPresentable(lv_averageSubjectsIncome)), PlayerGroupSingle(auto7F25BD85_var));
        libNtve_gf_SetDialogItemText(gv_economicPolicyDialogItems[6], (StringToText("") + gf_MakeUIPresentable(lv_averageTotalIncome)), PlayerGroupSingle(auto7F25BD85_var));
        libNtve_gf_SetDialogItemText(gv_economicPolicyDialogItems[7], (StringToText("") + gf_MakeUIPresentable(lv_averageBuildingsExpenses)), PlayerGroupSingle(auto7F25BD85_var));
        libNtve_gf_SetDialogItemTooltip(gv_economicPolicyDialogItems[7], (((((StringExternal("Param/Value/13DADECE") + gf_MakeUIPresentable(lv_aFE)) + StringExternal("Param/Value/CEEB108B")) + gf_MakeUIPresentable(lv_aEE)) + StringExternal("Param/Value/F8BBE2C0")) + (gf_MakeUIPresentable(lv_aOE) + StringToText(""))), PlayerGroupSingle(auto7F25BD85_var));
        libNtve_gf_SetDialogItemText(gv_economicPolicyDialogItems[8], (StringToText("") + gf_MakeUIPresentable(((lv_averageImportsExpenses[1] + lv_averageImportsExpenses[2]) + lv_averageImportsExpenses[3]))), PlayerGroupSingle(auto7F25BD85_var));
        libNtve_gf_SetDialogItemTooltip(gv_economicPolicyDialogItems[8], (((((StringExternal("Param/Value/5E718F8D") + gf_MakeUIPresentable(lv_averageImportsExpenses[1])) + StringExternal("Param/Value/0244CA71")) + gf_MakeUIPresentable(lv_averageImportsExpenses[2])) + StringExternal("Param/Value/215A994A")) + (gf_MakeUIPresentable(lv_averageImportsExpenses[3]) + StringToText(""))), PlayerGroupSingle(auto7F25BD85_var));
        libNtve_gf_SetDialogItemText(gv_economicPolicyDialogItems[9], (StringToText("") + gf_MakeUIPresentable((lv_averageInterestExpenses + lv_averageRepaymentExpenses))), PlayerGroupSingle(auto7F25BD85_var));
        libNtve_gf_SetDialogItemTooltip(gv_economicPolicyDialogItems[9], (((((StringExternal("Param/Value/EF46CC64") + gf_MakeUIPresentable(lv_averageInterestExpenses)) + StringExternal("Param/Value/B0D54EA5")) + gf_MakeUIPresentable(lv_averageRepaymentExpenses)) + StringToText("")) + StringToText("")), PlayerGroupSingle(auto7F25BD85_var));
        libNtve_gf_SetDialogItemText(gv_economicPolicyDialogItems[10], (StringToText("") + gf_MakeUIPresentable(lv_averageOverlordExpenses)), PlayerGroupSingle(auto7F25BD85_var));
        libNtve_gf_SetDialogItemText(gv_economicPolicyDialogItems[11], (StringToText("") + gf_MakeUIPresentable(lv_averageMilitaryExpenses)), PlayerGroupSingle(auto7F25BD85_var));
        libNtve_gf_SetDialogItemText(gv_economicPolicyDialogItems[12], (StringToText("") + gf_MakeUIPresentable(lv_averageResearchExpenses)), PlayerGroupSingle(auto7F25BD85_var));
        libNtve_gf_SetDialogItemText(gv_economicPolicyDialogItems[13], (StringToText("") + gf_MakeUIPresentable((lv_averageSubsidiesExpenses + lv_averageInvestmentExpenses))), PlayerGroupSingle(auto7F25BD85_var));
        libNtve_gf_SetDialogItemTooltip(gv_economicPolicyDialogItems[13], (((StringExternal("Param/Value/5CB0A063") + IntToText(lv_averageSubsidiesExpenses)) + StringExternal("Param/Value/985A3743")) + IntToText(lv_averageInvestmentExpenses)), PlayerGroupSingle(auto7F25BD85_var));
        libNtve_gf_SetDialogItemText(gv_economicPolicyDialogItems[14], (StringToText("") + gf_MakeUIPresentable(lv_averageExpenses)), PlayerGroupSingle(auto7F25BD85_var));
        libNtve_gf_SetDialogItemText(gv_economicPolicyDialogItems[15], (StringToText("") + gf_MakeUIPresentable(lv_averageRevenue)), PlayerGroupSingle(auto7F25BD85_var));
        libNtve_gf_SetDialogItemStyle(gv_researchFundingDialogItems[0], "Void_BoldMedium1", PlayerGroupAll());
        libNtve_gf_SetDialogItemText(gv_researchFundingDialogItems[0], (StringExternal("Param/Value/772AAA22") + (gf_MakeUIPresentable((gv_commitedResearchMonthly[auto7F25BD85_var] * 12)) + StringExternal("Param/Value/90C47296"))), PlayerGroupSingle(auto7F25BD85_var));
    }
}

void gf_Erase0ArrayValues () {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    const int auto39BB6FE4_ae = 15;
    const int auto39BB6FE4_ai = 1;

    // Variable Initialization

    // Implementation
    lv_player = 1;
    for ( ; ( (auto39BB6FE4_ai >= 0 && lv_player <= auto39BB6FE4_ae) || (auto39BB6FE4_ai < 0 && lv_player >= auto39BB6FE4_ae) ) ; lv_player += auto39BB6FE4_ai ) {
        gf_PushDownVariables(lv_player, false);
    }
}

text gf_MakeUIPresentable (int lp_integer) {
    // Variable Declarations
    fixed lv_fixedNumber;
    text lv_fixedNumberText;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    return StringToText(gf_MakeUIPresentableString(lp_integer));
}

string gf_MakeUIPresentableString (int lp_integer) {
    // Variable Declarations
    fixed lv_fixedNumber;
    string lv_fixedNumberStrings;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_fixedNumberStrings = "";

    // Implementation
    if ((lp_integer > 10000)) {
        if ((lp_integer > 10000000)) {
            if ((lp_integer > 1000000000)) {
                lv_fixedNumber = IntToFixed((lp_integer / 1000000000));
                lv_fixedNumberStrings = (FixedToString(lv_fixedNumber, 1) + "b");
            }
            else {
                lv_fixedNumber = IntToFixed((lp_integer / 1000000));
                lv_fixedNumberStrings = (FixedToString(lv_fixedNumber, 1) + "m");
            }
        }
        else {
            lv_fixedNumber = IntToFixed((lp_integer / 1000));
            lv_fixedNumberStrings = (FixedToString(lv_fixedNumber, 1) + "k");
        }
    }
    else {
        if ((lp_integer < -10000)) {
            if ((lp_integer < -10000000)) {
                if ((lp_integer < -1000000000)) {
                    lv_fixedNumber = IntToFixed((lp_integer / 1000000000));
                    lv_fixedNumberStrings = (FixedToString(lv_fixedNumber, 1) + "b");
                }
                else {
                    lv_fixedNumber = IntToFixed((lp_integer / 1000000));
                    lv_fixedNumberStrings = (FixedToString(lv_fixedNumber, 1) + "m");
                }
            }
            else {
                lv_fixedNumber = IntToFixed((lp_integer / 1000));
                lv_fixedNumberStrings = (FixedToString(lv_fixedNumber, 1) + "k");
            }
        }
        else {
            lv_fixedNumberStrings = IntToString(lp_integer);
        }
    }
    return lv_fixedNumberStrings;
}

void gf_BuyResources (int lp_player, int lp_quantity, int lp_maxPerUnit, int lp_como, bool lp_automaticOrder) {
    // Variable Declarations
    int lv_purchaseFoodFromIndex;
    int lv_debtOwed;
    int lv_totalAbsoluteCost;
    int lv_absoluteCost;
    int lv_totalFilled;
    int lv_totalFuelCosts;
    int lv_totalLostToTariffs;
    int lv_totalResoureCosts;
    int lv_quantityToFill;
    int lv_quantityDemanded;
    point lv_capital;
    unit lv_cheapestResource;
    int lv_cheapestResourceCost;
    int lv_cheapestResourceFuelCost;
    int lv_maximumBudget;
    int lv_moneySpent;
    int lv_actualQuantity;
    int lv_foodPlayer;

    // Automatic Variable Declarations
    const int auto5E997F48_n = 99;
    int auto5E997F48_i;
    const int auto9D856394_ae = 7;
    const int auto9D856394_ai = 1;

    // Variable Initialization
    lv_absoluteCost = lp_quantity;
    lv_totalFilled = lp_quantity;
    lv_quantityToFill = lp_quantity;
    lv_actualQuantity = (lp_quantity - ModI(lp_quantity, 10));

    // Implementation
    lv_maximumBudget = (PlayerGetPropertyInt(lp_player, c_playerPropMinerals) + gf_GetAllowedDebt(lp_player));
    lv_capital = gf_GetCapitolLocation(lp_player);
    if ((lv_maximumBudget < 5)) {
        if ((lp_automaticOrder == true)) {
            gv_canAffordImports[lp_player] = true;
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, StringExternal("Param/Value/A44E2B5B"));
        }

    }

    if ((lv_capital == null)) {
        if ((lp_automaticOrder == true)) {
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, StringExternal("Param/Value/2B493C7D"));
        }

    }

    if ((lp_como == 1)) {
        if ((lp_player < 8) && (lp_player != 0)) {
            lv_totalFilled = 0;
            lv_purchaseFoodFromIndex = 1;
            for ( ; ( (auto9D856394_ai >= 0 && lv_purchaseFoodFromIndex <= auto9D856394_ae) || (auto9D856394_ai < 0 && lv_purchaseFoodFromIndex >= auto9D856394_ae) ) ; lv_purchaseFoodFromIndex += auto9D856394_ai ) {
                lv_foodPlayer = gv_cheapestFoodArrayPlayer[lp_player][lv_purchaseFoodFromIndex];
                lv_cheapestResourceCost = gv_cheapestFoodArrayPrice[lp_player][lv_purchaseFoodFromIndex];
                if ((lv_cheapestResourceFuelCost < 1000000000) && (lp_quantity > 0) && (gv_foodStockpile[lv_purchaseFoodFromIndex] > 0) && (lv_absoluteCost <= lv_maximumBudget)) {
                    lv_quantityToFill = libNtve_gf_ArithmeticIntClamp(lp_quantity, 0, gv_foodStockpile[lv_purchaseFoodFromIndex]);
                    lv_quantityToFill = libNtve_gf_ArithmeticIntClamp(lp_quantity, 0, FixedToInt(((IntToFixed(lv_quantityToFill) / IntToFixed(lv_cheapestResourceCost)) / 1000.0)));
                    lp_quantity -= lv_quantityToFill;
                    gv_foodStockpile[lv_purchaseFoodFromIndex] -= lv_quantityToFill;
                    lv_totalFilled += lv_quantityToFill;
                    lv_totalResoureCosts += (lv_quantityToFill * gv_foodPrice);
                    lv_totalLostToTariffs += gf_CollectTariffs(lv_foodPlayer, lp_player, gv_foodPrice, lv_quantityToFill);
                    lv_totalFuelCosts += gf_GetFuelCostsMonetary(lp_player, gf_GetCapitolLocation(lp_player), gf_GetCapitolLocation(lv_foodPlayer), true);
                    gf_CreateConvoy(gf_GetCapitolLocation(lp_player), lp_player, lp_como, lv_quantityToFill, lv_foodPlayer, lp_player);
                }

            }
            lv_absoluteCost = (lv_totalResoureCosts + (lv_totalFuelCosts + lv_totalLostToTariffs));
            gv_importExpenses[lp_player][2][lp_como] += lv_totalAbsoluteCost;
            gv_fOOD_PURCHASED[lp_player] += lv_totalFilled;
            if ((lp_automaticOrder == true)) {
            }
            else {
                if (((lv_absoluteCost > 500000) || (lv_totalFilled == 0))) {
                    UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, (((IntToText(lv_totalFilled) + StringExternal("Param/Value/C115E814")) + IntToText(lp_quantity)) + ((StringExternal("Param/Value/1DFA178F") + gf_MakeUIPresentable(lv_absoluteCost)) + (StringExternal("Param/Value/BA7499BD") + (gf_MakeUIPresentable(lv_totalLostToTariffs) + (StringExternal("Param/Value/9F8E5A7B") + (gf_MakeUIPresentable(lv_totalFuelCosts) + (StringExternal("Param/Value/7C8E78A4") + StringExternal("Param/Value/9E2872F0")))))))));
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, (((IntToText(lv_totalFilled) + StringExternal("Param/Value/8B22882F")) + IntToText(lp_quantity)) + ((StringExternal("Param/Value/67129EA9") + gf_MakeUIPresentable(lv_absoluteCost)) + (StringExternal("Param/Value/6085F8D4") + (gf_MakeUIPresentable(lv_totalLostToTariffs) + (StringExternal("Param/Value/8FF248CB") + (gf_MakeUIPresentable(lv_totalFuelCosts) + (StringExternal("Param/Value/A72E1853") + (FixedToText((IntToFixed(lv_absoluteCost) / IntToFixed(lv_totalFilled)), 1) + StringExternal("Param/Value/E1F0FE9B"))))))))));
                }
            }
            if ((PlayerGetPropertyInt(lp_player, c_playerPropMinerals) > lv_totalResoureCosts)) {
                PlayerModifyPropertyInt(lp_player, c_playerPropMinerals, c_playerPropOperSubtract, lv_totalResoureCosts);
            }
            else {
                lv_debtOwed = lv_totalResoureCosts;
                lv_debtOwed -= PlayerGetPropertyInt(lp_player, c_playerPropMinerals);
                PlayerModifyPropertyInt(lp_player, c_playerPropMinerals, c_playerPropOperSetTo, 0);
                if ((gf_TakeLoan(lp_player, lv_debtOwed) == true)) {
                }

            }
        }

    }
    else {
        for (auto5E997F48_i = 1; auto5E997F48_i <= auto5E997F48_n; auto5E997F48_i += 1) {
            lv_cheapestResource = gf_FindCheapestResource(lp_player, lp_como, lv_capital, lp_quantity);
            lv_cheapestResourceCost = (gf_CalculateCostWithTariffs(UnitGetOwner(lv_cheapestResource), lp_player, FixedToInt(UnitGetCustomValue(lv_cheapestResource, 14))) + 0);
            if ((lp_como == 3)) {
            }
            else {
                lv_cheapestResourceFuelCost = gf_GetFuelCostsMonetary(lp_player, UnitGetPosition(lv_cheapestResource), lv_capital, true);
            }
            if ((lv_cheapestResourceCost > lp_maxPerUnit)) {
                if ((lp_automaticOrder == true)) {
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, StringExternal("Param/Value/C9DDFF21"));
                }
                break;
            }

            if ((UnitGetCustomValue(lv_cheapestResource, 12) == 0.0)) {
                if ((lp_automaticOrder == true)) {
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, StringExternal("Param/Value/FE86E4F7"));
                }
                break;
            }

            if ((lp_quantity > 350)) {
                lv_quantityDemanded = (lv_cheapestResourceCost * libNtve_gf_ArithmeticIntClamp(gf_GetUnitCustomValue(lv_cheapestResource, 12), 0, libNtve_gf_ArithmeticIntClamp(lv_quantityToFill, 10, 10000)));
            }
            else {
                lv_quantityDemanded = (lv_cheapestResourceCost * libNtve_gf_ArithmeticIntClamp(gf_GetUnitCustomValue(lv_cheapestResource, 12), 0, libNtve_gf_ArithmeticIntClamp(lv_quantityToFill, 10, 100)));
            }
            lv_quantityDemanded = libNtve_gf_ArithmeticIntClamp(lv_quantityDemanded, 0, lv_quantityToFill);
            lv_quantityDemanded = libNtve_gf_ArithmeticIntClamp(lv_quantityDemanded, 0, gf_GetUnitCustomValue(lv_cheapestResource, 12));
            if (((lv_maximumBudget - (lv_totalResoureCosts - lv_totalFuelCosts)) < ((lv_quantityDemanded * lv_cheapestResourceCost) + lv_cheapestResourceFuelCost))) {
                if ((lp_automaticOrder == true)) {
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, StringExternal("Param/Value/3277F07C"));
                }
                break;
            }

            lv_totalResoureCosts += (lv_quantityDemanded * FixedToInt(UnitGetCustomValue(lv_cheapestResource, 14)));
            lv_totalFuelCosts += lv_cheapestResourceFuelCost;
            lv_totalLostToTariffs += gf_CollectTariffs(UnitGetOwner(lv_cheapestResource), lp_player, FixedToInt(UnitGetCustomValue(lv_cheapestResource, 14)), lv_quantityDemanded);
            lv_quantityToFill -= lv_quantityDemanded;
            gf_CreateConvoy(UnitGetPosition(lv_cheapestResource), lp_player, lp_como, lv_quantityDemanded, (FixedToInt(UnitGetCustomValue(lv_cheapestResource, 10)) + 7), lp_player);
            if ((gv_corpTicksStage == 0)) {
                gv_cExportIncome[FixedToInt(UnitGetCustomValue(lv_cheapestResource, 10))][lp_como][0] += (lv_quantityDemanded * FixedToInt(UnitGetCustomValue(lv_cheapestResource, 14)));
            }

            if ((gv_corpTicksStage == 1)) {
                gv_cExportIncome[FixedToInt(UnitGetCustomValue(lv_cheapestResource, 10))][lp_como][1] += (lv_quantityDemanded * FixedToInt(UnitGetCustomValue(lv_cheapestResource, 14)));
            }

            if ((gv_corpTicksStage == 2)) {
                gv_cExportIncome[FixedToInt(UnitGetCustomValue(lv_cheapestResource, 10))][lp_como][2] += (lv_quantityDemanded * FixedToInt(UnitGetCustomValue(lv_cheapestResource, 14)));
                gv_cCredits[FixedToInt(UnitGetCustomValue(lv_cheapestResource, 10))] += (lv_quantityDemanded * FixedToInt(UnitGetCustomValue(lv_cheapestResource, 14)));
            }

            lv_totalAbsoluteCost += (lv_quantityDemanded * lv_cheapestResourceCost);
            lv_totalAbsoluteCost += lv_cheapestResourceFuelCost;
            gf_ModifyUnitCustomValue(lv_cheapestResource, 12, (lv_quantityDemanded * -1));
            gf_ModifyUnitCustomValue(lv_cheapestResource, 30, (lv_quantityDemanded * 1));
            if ((lv_quantityToFill < 10)) {
                break;
            }

        }
        lv_totalFilled = (lp_quantity - lv_quantityToFill);
        lv_absoluteCost = (lv_totalResoureCosts + (lv_totalFuelCosts + lv_totalLostToTariffs));
        if ((lp_automaticOrder == true)) {
        }
        else {
            if (((lv_absoluteCost > 500000) || (lv_totalFilled == 0))) {
                UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, (((IntToText(lv_totalFilled) + StringExternal("Param/Value/1A2CC4AC")) + IntToText(lp_quantity)) + ((StringExternal("Param/Value/D9A0303D") + gf_MakeUIPresentable(lv_absoluteCost)) + (StringExternal("Param/Value/D29DE6A6") + (gf_MakeUIPresentable(lv_totalLostToTariffs) + (StringExternal("Param/Value/CA899A6D") + (gf_MakeUIPresentable(lv_totalFuelCosts) + (StringExternal("Param/Value/89E2305D") + StringExternal("Param/Value/D3A75E46")))))))));
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, (((IntToText(lv_totalFilled) + StringExternal("Param/Value/9F4BF79D")) + IntToText(lp_quantity)) + ((StringExternal("Param/Value/66352008") + gf_MakeUIPresentable(lv_absoluteCost)) + (StringExternal("Param/Value/843FFFB4") + (gf_MakeUIPresentable(lv_totalLostToTariffs) + (StringExternal("Param/Value/D096EB45") + (gf_MakeUIPresentable(lv_totalFuelCosts) + (StringExternal("Param/Value/95D8C671") + (FixedToText((IntToFixed(lv_absoluteCost) / IntToFixed(lv_totalFilled)), 1) + StringExternal("Param/Value/D33FB9D3"))))))))));
            }
            gv_importExpenses[lp_player][2][lp_como] += lv_totalAbsoluteCost;
            if ((PlayerGetPropertyInt(lp_player, c_playerPropMinerals) > lv_totalAbsoluteCost)) {
                PlayerModifyPropertyInt(lp_player, c_playerPropMinerals, c_playerPropOperSubtract, lv_totalAbsoluteCost);
            }
            else {
                lv_debtOwed = lv_totalAbsoluteCost;
                lv_debtOwed -= PlayerGetPropertyInt(lp_player, c_playerPropMinerals);
                PlayerModifyPropertyInt(lp_player, c_playerPropMinerals, c_playerPropOperSetTo, 0);
                if ((gf_TakeLoan(lp_player, lv_debtOwed) == true)) {
                }

            }
        }
    }
}

void gf_SellResources (int lp_player, int lp_quantity, int lp_minPerUnit, int lp_como, bool lp_automaticOrder, bool lp_displayItems) {
    // Variable Declarations
    int lv_thePlayer;
    bool lv_givemoney;
    int lv_corp;
    int lv_totalIncome;
    int lv_totalSold;
    int lv_leftToExport;
    int lv_tariffCost;
    int lv_actualQuantity;
    point lv_capital;
    int[8] lv_offerPrice;
    int lv_bestOfferPrice;
    int lv_bestOfferCorp;
    int lv_bestOfferQuantity;
    int lv_bestTariffCost;
    int lv_totalFuelCosts;
    int[8] lv_totalExportQuantity;

    // Automatic Variable Declarations
    const int auto8F24C7E5_n = 99;
    int auto8F24C7E5_i;
    playergroup auto816885DD_g;
    int auto816885DD_var;
    const int auto8068B78F_ae = 7;
    const int auto8068B78F_ai = 1;

    // Variable Initialization
    lv_thePlayer = lp_player;
    lv_givemoney = true;
    lv_actualQuantity = (lp_quantity - ModI(lp_quantity, 10));

    // Implementation
    gv_sELL_RESOURCE_DEBUG_VARIABLE = "Running Sell Resources";
    TriggerExecute(gt_SELL_RESROUCES_DEBUG, true, false);
    gv_sELL_RESOURCE_DEBUG_VARIABLE = "Getting player and quantity";
    if ((lp_player > 7)) {
        lv_thePlayer = (lp_player - 7);
        lv_givemoney = true;
    }
    else {
        if ((lp_como == 1)) {
            lv_actualQuantity = libNtve_gf_ArithmeticIntClamp(lv_actualQuantity, 0, gv_food[lv_thePlayer]);
        }

        if ((lp_como == 2)) {
            lv_actualQuantity = libNtve_gf_ArithmeticIntClamp(lv_actualQuantity, 0, PlayerGetPropertyInt(lv_thePlayer, c_playerPropTerrazine));
        }

        if ((lp_como == 3)) {
            lv_actualQuantity = libNtve_gf_ArithmeticIntClamp(lv_actualQuantity, 0, gv_oil[lv_thePlayer]);
        }

    }
    gv_sELL_RESOURCE_DEBUG_VARIABLE = "Finding capitol";
    lv_capital = gf_GetCapitolLocation(lv_thePlayer);
    gv_sELL_RESOURCE_DEBUG_VARIABLE = "Remove edge cases";
    if ((lv_actualQuantity < 10)) {
        if ((lp_displayItems == false)) {
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_thePlayer), c_messageAreaSubtitle, StringExternal("Param/Value/151AD5CD"));
        }

    }

    if ((lv_capital == null)) {
        if ((lp_displayItems == false)) {
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_thePlayer), c_messageAreaSubtitle, StringExternal("Param/Value/3DCDB4E1"));
        }

    }

    lv_leftToExport = lv_actualQuantity;
    gv_sELL_RESOURCE_DEBUG_VARIABLE = "Purchasing individually";
    if ((lp_como == 1)) {
        if ((lp_minPerUnit > gv_foodPrice)) {
            if ((lp_displayItems == true)) {
                UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, (((gf_MakeUIPresentable(0) + StringExternal("Param/Value/DF3187EB")) + IntToText(lp_quantity)) + ((StringExternal("Param/Value/F5107D23") + gf_MakeUIPresentable(lv_totalIncome)) + (StringExternal("Param/Value/6D1E2C1C") + StringExternal("Param/Value/A7EE9042")))));
            }

        }
        else {
            gv_foodStockpile[lv_thePlayer] += lv_leftToExport;
            if ((lv_givemoney == true)) {
                lv_totalIncome = (lv_leftToExport * gv_foodPrice);
                gv_exportIncome[lp_player][1] += lv_totalIncome;
                PlayerModifyPropertyInt(lp_player, c_playerPropMinerals, c_playerPropOperAdd, lv_totalIncome);
                gv_food[lp_player] -= lv_leftToExport;
                if ((lp_displayItems == true)) {
                    if (((lv_totalIncome > 500000))) {
                        UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, (((gf_MakeUIPresentable(lv_leftToExport) + StringExternal("Param/Value/1971AC87")) + IntToText(lp_quantity)) + ((StringExternal("Param/Value/656A5167") + gf_MakeUIPresentable(lv_totalIncome)) + (StringExternal("Param/Value/CE9A5BF8") + StringExternal("Param/Value/E1C51B04")))));
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, (((gf_MakeUIPresentable(lv_leftToExport) + StringExternal("Param/Value/E4B1742D")) + IntToText(lp_quantity)) + ((StringExternal("Param/Value/A79E5F10") + gf_MakeUIPresentable(lv_totalIncome)) + (StringExternal("Param/Value/6B282587") + (StringToText("") + (StringToText("") + (StringToText("") + (StringExternal("Param/Value/A57B6E80") + (IntToText(gv_foodPrice) + StringExternal("Param/Value/2423E2C4"))))))))));
                    }
                }

            }

        }
    }
    else {
        for (auto8F24C7E5_i = 1; auto8F24C7E5_i <= auto8F24C7E5_n; auto8F24C7E5_i += 1) {
            lv_bestOfferPrice = 0;
            lv_bestTariffCost = 0;
            lv_bestOfferCorp = 0;
            lv_bestOfferQuantity = 0;
            lv_tariffCost = 0;
            auto816885DD_g = gv_users;
            auto816885DD_var = -1;
            while (true) {
                auto816885DD_var = PlayerGroupNextPlayer(auto816885DD_g, auto816885DD_var);
                if (auto816885DD_var < 0) { break; }
                if ((gv_deadCorp[auto816885DD_var] == false)) {
                    lv_offerPrice[auto816885DD_var] = gv_aggregateResourcePrice[auto816885DD_var][lp_como];
                    lv_tariffCost = 0;
                    lv_tariffCost += gf_CalculateTariffsSellResources(lv_thePlayer, auto816885DD_var, lv_offerPrice[auto816885DD_var]);
                    lv_offerPrice[auto816885DD_var] += lv_tariffCost;
                    if ((gv_cImportsPot[auto816885DD_var][lp_como][0] > (lv_offerPrice[auto816885DD_var] * 10)) && (lv_offerPrice[auto816885DD_var] > 0)) {
                        lv_offerPrice[auto816885DD_var] -= lv_tariffCost;
                        lv_offerPrice[auto816885DD_var] -= lv_tariffCost;
                        if ((lv_offerPrice[auto816885DD_var] < 1)) {
                            lv_offerPrice[auto816885DD_var] = 1;
                        }

                        if ((lv_bestOfferPrice < lv_offerPrice[auto816885DD_var])) {
                            lv_bestOfferPrice = lv_offerPrice[auto816885DD_var];
                            lv_bestTariffCost = lv_tariffCost;
                            lv_bestOfferCorp = auto816885DD_var;
                            lv_offerPrice[auto816885DD_var] += lv_tariffCost;
                            lv_offerPrice[auto816885DD_var] += lv_tariffCost;
                            lv_bestOfferQuantity = (gv_cImportsPot[auto816885DD_var][lp_como][0] / lv_offerPrice[auto816885DD_var]);
                            lv_bestOfferQuantity = libNtve_gf_ArithmeticIntClamp(lv_bestOfferQuantity, 10, lv_leftToExport);
                            if ((lp_quantity > 10000)) {
                            }
                            else {
                                lv_bestOfferQuantity = libNtve_gf_ArithmeticIntClamp(lv_bestOfferQuantity, 10, 120);
                            }
                        }

                    }
                    else {
                        lv_offerPrice[auto816885DD_var] = 0;
                    }
                }

            }
            if ((lv_bestOfferQuantity <= 0)) {
                if ((lp_displayItems == false)) {
                }
                else {
                    if ((lv_totalSold > 0)) {
                        UIDisplayMessage(PlayerGroupSingle(lv_thePlayer), c_messageAreaSubtitle, StringExternal("Param/Value/4754A1EE"));
                    }
                    else {
                        if ((lp_como == 1)) {
                            UIDisplayMessage(PlayerGroupSingle(lv_thePlayer), c_messageAreaSubtitle, StringExternal("Param/Value/F5EF5CA0"));
                        }
                        else {
                            if ((lp_como == 2)) {
                                UIDisplayMessage(PlayerGroupSingle(lv_thePlayer), c_messageAreaSubtitle, StringExternal("Param/Value/319A6A43"));
                            }
                            else {
                                if ((lp_como == 3)) {
                                    UIDisplayMessage(PlayerGroupSingle(lv_thePlayer), c_messageAreaSubtitle, StringExternal("Param/Value/3C3A893D"));
                                }

                            }
                        }
                    }
                }
                break;
            }

            if ((lv_bestOfferPrice >= lp_minPerUnit)) {
                lv_totalIncome += (lv_bestOfferQuantity * lv_bestOfferPrice);
                lv_totalSold += (lv_bestOfferQuantity * 1);
                lv_leftToExport -= (lv_bestOfferQuantity * 1);
                gv_cImportsPot[lv_bestOfferCorp][lp_como][0] -= (lv_bestOfferQuantity * lv_bestOfferPrice);
                gv_cUnrealizedSupplyImports[lv_bestOfferCorp][lp_como] += (lv_bestOfferQuantity * 1);
                if ((gv_corpTicksStage == 0)) {
                    gv_cImportExpenses[lv_bestOfferCorp][lp_como][0] += (lv_bestOfferQuantity * lv_bestOfferPrice);
                    gv_cImportExpenses[lv_bestOfferCorp][lp_como][0] += (lv_bestTariffCost * 1);
                }

                if ((gv_corpTicksStage == 1)) {
                    gv_cImportExpenses[lv_bestOfferCorp][lp_como][1] += (lv_bestOfferQuantity * lv_bestOfferPrice);
                    gv_cImportExpenses[lv_bestOfferCorp][lp_como][1] += (lv_bestTariffCost * 1);
                }

                if ((gv_corpTicksStage == 2)) {
                    gv_cImportExpenses[lv_bestOfferCorp][lp_como][2] += (lv_bestOfferQuantity * lv_bestOfferPrice);
                    gv_cImportExpenses[lv_bestOfferCorp][lp_como][2] += (lv_bestTariffCost * 1);
                    gv_cCredits[lv_bestOfferCorp] -= (lv_bestOfferQuantity * lv_bestOfferPrice);
                    gv_cCredits[lv_bestOfferCorp] -= (lv_bestTariffCost * 1);
                }

                if ((lp_como == 3)) {
                }
                else {
                    gv_cImportExpenses[lv_bestOfferCorp][3][0] += gf_GetFuelCostsMonetary(lv_bestOfferCorp, gf_GetCorporateHeadquartersLocationMineOil(lv_thePlayer, lp_como, gf_GetCapitolLocation(lv_thePlayer)), gf_GetCapitolLocation(lv_thePlayer), true);
                }
                gf_CollectTariffSell(lp_player, lv_bestOfferCorp, lv_bestOfferPrice, lv_bestOfferQuantity);
                lv_totalExportQuantity[lv_bestOfferCorp] += (lv_bestOfferQuantity * 1);
            }
            else {
                if ((lp_displayItems == false)) {
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_thePlayer), c_messageAreaSubtitle, StringExternal("Param/Value/ECAAC389"));
                }
                break;
            }
            if ((lv_leftToExport < 10)) {
                break;
            }

        }
        gv_sELL_RESOURCE_DEBUG_VARIABLE = "Creating convoys";
        lv_corp = 1;
        for ( ; ( (auto8068B78F_ai >= 0 && lv_corp <= auto8068B78F_ae) || (auto8068B78F_ai < 0 && lv_corp >= auto8068B78F_ae) ) ; lv_corp += auto8068B78F_ai ) {
            if ((lv_totalExportQuantity[lv_corp] > 0)) {
                gf_CreateConvoy(lv_capital, lv_corp, lp_como, lv_totalExportQuantity[lv_corp], lp_player, (lv_corp + 7));
            }

        }
        gv_sELL_RESOURCE_DEBUG_VARIABLE = "Setting costs and text";
        if ((lv_givemoney == true)) {
            gv_exportIncome[lp_player][1] += lv_totalIncome;
            PlayerModifyPropertyInt(lp_player, c_playerPropMinerals, c_playerPropOperAdd, lv_totalIncome);
            if ((lp_displayItems == true)) {
                if (((lv_totalIncome > 500000))) {
                    UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, (((gf_MakeUIPresentable(lv_totalSold) + StringExternal("Param/Value/0CB09CD9")) + IntToText(lp_quantity)) + ((StringExternal("Param/Value/13177913") + gf_MakeUIPresentable(lv_totalIncome)) + (StringExternal("Param/Value/106BE344") + StringExternal("Param/Value/34E376CE")))));
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, (((gf_MakeUIPresentable(lv_totalSold) + StringExternal("Param/Value/7A97ED6F")) + IntToText(lp_quantity)) + ((StringExternal("Param/Value/82A0A573") + gf_MakeUIPresentable(lv_totalIncome)) + (StringExternal("Param/Value/01302CE1") + (StringToText("") + (StringToText("") + (StringToText("") + (StringExternal("Param/Value/2E4A9797") + (FixedToText((IntToFixed(lv_totalIncome) / IntToFixed(lv_totalSold)), 1) + StringExternal("Param/Value/5008754F"))))))))));
                }
                if ((lp_como == 1)) {
                    gv_food[lp_player] -= lv_totalSold;
                }

                if ((lp_como == 2)) {
                    PlayerModifyPropertyInt(lp_player, c_playerPropTerrazine, c_playerPropOperSubtract, lv_totalSold);
                }

                if ((lp_como == 3)) {
                    gv_oil[lp_player] -= lv_totalSold;
                }

            }

        }

        gv_sELL_RESOURCE_DEBUG_VARIABLE = "Finished selling resources";
    }
}

int gf_GetFuelCostsMonetary (int lp_player, point lp_start, point lp_end, bool lp_execute) {
    // Variable Declarations
    int lv_tariff;
    unit lv_cheapest;
    unit lv_totalCost;
    int lv_fuelRequired;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_fuelRequired = gf_GetFuelCostsOil(lp_player, lp_start, lp_end);
    lv_cheapest = gf_FindCheapestResource(lp_player, 3, lp_start, 100);
    if ((lv_cheapest == null)) {
        return 999;
    }

    if ((lp_execute == true)) {
        lv_tariff += gf_CollectTariffs(UnitGetOwner(lv_cheapest), lp_player, FixedToInt(UnitGetCustomValue(lv_cheapest, 14)), lv_fuelRequired);
        if ((gv_corpTicksStage == 0)) {
            gv_cExportIncome[FixedToInt(UnitGetCustomValue(lv_cheapest, 10))][3][0] += (lv_fuelRequired * FixedToInt(UnitGetCustomValue(lv_cheapest, 14)));
        }

        if ((gv_corpTicksStage == 1)) {
            gv_cExportIncome[FixedToInt(UnitGetCustomValue(lv_cheapest, 10))][3][1] += (lv_fuelRequired * FixedToInt(UnitGetCustomValue(lv_cheapest, 14)));
        }

        if ((gv_corpTicksStage == 2)) {
            gv_cExportIncome[FixedToInt(UnitGetCustomValue(lv_cheapest, 10))][3][2] += (lv_fuelRequired * FixedToInt(UnitGetCustomValue(lv_cheapest, 14)));
            gv_cCredits[FixedToInt(UnitGetCustomValue(lv_cheapest, 10))] += (lv_fuelRequired * FixedToInt(UnitGetCustomValue(lv_cheapest, 14)));
        }

        gf_ModifyUnitCustomValue(lv_cheapest, 12, (lv_fuelRequired * -1));
        gf_ModifyUnitCustomValue(lv_cheapest, 30, (lv_fuelRequired * 1));
    }

    return (FixedToInt(UnitGetCustomValue(gf_FindCheapestResource(lp_player, 3, lp_start, 100), 14)) * lv_fuelRequired);
}

int gf_GetFuelCostsOil (int lp_player, point lp_start, point lp_end) {
    // Variable Declarations
    int lv_fuelRequired;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_fuelRequired = (FixedToInt(DistanceBetweenPoints(lp_start, lp_end)) / 15);
    if ((TechTreeUpgradeCount(lp_player, "SelfPoweredTanks", c_techCountCompleteOnly) == 1)) {
        lv_fuelRequired /= 2;
    }
    else {
        if ((TechTreeUpgradeCount(lp_player, "ElectricTanks", c_techCountCompleteOnly) == 1)) {
            lv_fuelRequired /= 2;
        }

    }
    return lv_fuelRequired;
}

void gf_CreateConvoy (point lp_location, int lp_owner, int lp_como, int lp_inventory, int lp_sender, int lp_destination) {
    // Variable Declarations
    unit lv_pickedPop;
    int lv_pricePerUnit;
    int lv_seller;

    // Automatic Variable Declarations
    const int auto1A7DFE60_n = 999;
    int auto1A7DFE60_i;

    // Variable Initialization

    // Implementation
    lv_pricePerUnit = gv_aggregateResourcePrice[lp_sender][lp_como];
    if ((lp_inventory > 1)) {
        if ((lp_destination == 0)) {
        }
        else {
            if ((lp_destination < 8)) {
                if ((lp_como == 1)) {
                    if ((gv_incomeTicksStage == 0)) {
                        gv_foodIncome[lp_destination][0] += lp_inventory;
                    }
                    else {
                        gv_foodIncome[lp_destination][2] += lp_inventory;
                        gv_food[lp_destination] += lp_inventory;
                    }
                }

                if ((lp_como == 2)) {
                    if ((gv_incomeTicksStage == 0)) {
                        gv_metalIncome[lp_destination][0] += lp_inventory;
                    }
                    else {
                        gv_metalIncome[lp_destination][2] += lp_inventory;
                        PlayerModifyPropertyInt(lp_destination, c_playerPropTerrazine, c_playerPropOperAdd, lp_inventory);
                    }
                }

                if ((lp_como == 3)) {
                    if ((gv_incomeTicksStage == 0)) {
                        gv_oilIncome[lp_destination][0] += lp_inventory;
                    }
                    else {
                        gv_oilIncome[lp_destination][2] += lp_inventory;
                        gv_oil[lp_destination] += lp_inventory;
                    }
                }

            }
            else {
                if ((lp_destination < 15)) {
                    gv_cImportExpenses[(lp_destination - 7)][lp_como][0] += (lp_inventory * lv_pricePerUnit);
                    if ((lp_sender > 0)) {
                        gv_cExportIncome[lp_sender][lp_como][0] += (lp_inventory * lv_pricePerUnit);
                    }

                    gf_ModifyUnitCustomValue(gf_GetCorporateHeadquartersLocationMineOilUnit(lp_destination, lp_como, lp_location), 12, lp_inventory);
                }
                else {
                    if ((lp_destination == 15)) {
                    }
                    else {
                        if ((lp_destination == 16)) {
                            gv_eURedistributeFoodStockpile += lp_inventory;
                        }
                        else {
                            if ((lp_destination > 20)) {
                                for (auto1A7DFE60_i = 1; auto1A7DFE60_i <= auto1A7DFE60_n; auto1A7DFE60_i += 1) {
                                    if ((lp_inventory <= 10)) {
                                        break;
                                    }

                                    lv_pickedPop = null;
                                    if ((lp_como == 1)) {
                                        lv_pickedPop = gf_GetCivilianDemandingFood(lp_destination);
                                        if ((lv_pickedPop == null)) {
                                            break;
                                        }
                                        else {
                                            UnitBehaviorRemove(lv_pickedPop, "Starving", 1);
                                            UnitBehaviorAdd(lv_pickedPop, "WellFeds", lv_pickedPop, 1);
                                        }
                                        lp_inventory -= FixedToInt(UnitGetPropertyFixed(lv_pickedPop, c_unitPropEnergy, c_unitPropCurrent));
                                    }
                                    else {
                                        lv_pickedPop = gf_GetCivilianDemandingResources(lp_destination);
                                        if ((lv_pickedPop == null)) {
                                            break;
                                        }
                                        else {
                                            UnitBehaviorAdd(lv_pickedPop, "WellSupplied", lv_pickedPop, 1);
                                        }
                                        lp_inventory -= FixedToInt(UnitGetPropertyFixed(lv_pickedPop, c_unitPropEnergy, c_unitPropCurrent));
                                    }
                                }
                            }

                        }
                    }
                }
            }
        }
    }

}

void gf_IntraCorpConvoy (point lp_startingMine, point lp_endingMine, int lp_owner, int lp_como, int lp_inventory) {
    // Variable Declarations
    int lv_quantityDemanded;
    text lv_senderTranslated;
    text lv_recieverTranslated;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_inventory > 1)) {
        gf_ModifyUnitCustomValue(UnitGroupClosestToPoint(gv_allResources, lp_endingMine), 12, lp_inventory);
    }

}

unit gf_GetCivilianDemandingFood (int lp_owner) {
    // Variable Declarations
    unit lv_pickedPop;
    unitgroup lv_starvingUnits;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_starvingUnits = UnitGroupEmpty();

    // Implementation
    if ((gv_subjugated[lp_owner] == true)) {
        return gf_GetCivilianDemandingRecursion(gv_subjugator[lp_owner], 1, true);
    }
    else {
        return gf_GetCivilianDemandingRecursion(lp_owner, 1, true);
    }
}

unit gf_GetCivilianDemandingResources (int lp_owner) {
    // Variable Declarations
    unit lv_pickedPop;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((gv_subjugated[lp_owner] == true)) {
        return gf_GetCivilianDemandingRecursion(gv_subjugator[lp_owner], 2, true);
    }
    else {
        return gf_GetCivilianDemandingRecursion(lp_owner, 2, true);
    }
}

unit gf_GetCivilianDemandingRecursion (int lp_player, int lp_resource, bool lp_first) {
    // Variable Declarations
    unit lv_returnHome;
    fixed lv_highestGDPValue;
    int lv_highestGDPPlayer;
    unitgroup lv_unitgroup;

    // Automatic Variable Declarations
    unitgroup auto3C451527_g;
    int auto3C451527_u;
    unit auto3C451527_var;
    unitgroup autoC4B687C9_g;
    int autoC4B687C9_u;
    unit autoC4B687C9_var;
    playergroup auto47E0E3BE_g;
    int auto47E0E3BE_var;
    playergroup auto7E101FE9_g;
    int auto7E101FE9_var;

    // Variable Initialization
    lv_unitgroup = UnitGroupEmpty();

    // Implementation
    gv_convoyRecursion += 1;
    if ((lp_resource == 1)) {
        lv_unitgroup = gv_starvingHomes[lp_player];
        if ((UnitGroupCount(lv_unitgroup, c_unitCountAlive) == 0)) {
            autoC4B687C9_g = UnitGroup(null, lp_player, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoC4B687C9_u = UnitGroupCount(autoC4B687C9_g, c_unitCountAll);
            for (;; autoC4B687C9_u -= 1) {
                autoC4B687C9_var = UnitGroupUnitFromEnd(autoC4B687C9_g, autoC4B687C9_u);
                if (autoC4B687C9_var == null) { break; }
                if ((UnitHasBehavior2(autoC4B687C9_var, "WellFeds") == false)) {
                    UnitGroupAdd(lv_unitgroup, autoC4B687C9_var);
                }

            }
        }

    }
    else {
        lv_unitgroup = gv_unsuppliedHomes[lp_player][4];
        UnitGroupAddUnitGroup(lv_unitgroup, gv_unsuppliedHomes[lp_player][3]);
        UnitGroupAddUnitGroup(lv_unitgroup, gv_unsuppliedHomes[lp_player][2]);
        UnitGroupAddUnitGroup(lv_unitgroup, gv_unsuppliedHomes[lp_player][1]);
        if ((UnitGroupCount(lv_unitgroup, c_unitCountAlive) == 0)) {
            auto3C451527_g = UnitGroup(null, lp_player, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto3C451527_u = UnitGroupCount(auto3C451527_g, c_unitCountAll);
            for (;; auto3C451527_u -= 1) {
                auto3C451527_var = UnitGroupUnitFromEnd(auto3C451527_g, auto3C451527_u);
                if (auto3C451527_var == null) { break; }
                if ((UnitHasBehavior2(auto3C451527_var, "WellSupplied") == false)) {
                    UnitGroupAdd(lv_unitgroup, auto3C451527_var);
                }

            }
        }

    }
    if ((UnitGroupCount(lv_unitgroup, c_unitCountAlive) == 0)) {
        if ((lp_first == true)) {
            auto7E101FE9_g = gv_users;
            auto7E101FE9_var = -1;
            while (true) {
                auto7E101FE9_var = PlayerGroupNextPlayer(auto7E101FE9_g, auto7E101FE9_var);
                if (auto7E101FE9_var < 0) { break; }
                if ((gv_gDPPerCapita[auto7E101FE9_var] >= lv_highestGDPValue) && (auto7E101FE9_var != lp_player)) {
                    lv_highestGDPPlayer = auto7E101FE9_var;
                    lv_highestGDPValue = gv_gDPPerCapita[auto7E101FE9_var];
                }

            }
        }
        else {
            auto47E0E3BE_g = gv_users;
            auto47E0E3BE_var = -1;
            while (true) {
                auto47E0E3BE_var = PlayerGroupNextPlayer(auto47E0E3BE_g, auto47E0E3BE_var);
                if (auto47E0E3BE_var < 0) { break; }
                if ((gv_gDPPerCapita[auto47E0E3BE_var] >= lv_highestGDPValue) && (gv_gDPPerCapita[auto47E0E3BE_var] < gv_gDPPerCapita[lp_player]) && (auto47E0E3BE_var != lp_player)) {
                    lv_highestGDPPlayer = auto47E0E3BE_var;
                    lv_highestGDPValue = gv_gDPPerCapita[auto47E0E3BE_var];
                }

            }
        }
        if (((lv_highestGDPValue == 0.0) || (lv_highestGDPPlayer == 0))) {
            return gf_FindNeutralCapitol(lp_player, lp_player);
        }
        else {
            return gf_GetCivilianDemandingRecursion(lv_highestGDPPlayer, lp_resource, false);
        }
    }
    else {
        lv_returnHome = UnitGroupRandomUnit(lv_unitgroup, c_unitCountAlive);
        if ((lp_resource == 1)) {
            UnitGroupRemove(gv_starvingHomes[UnitGetOwner(lv_returnHome)], lv_returnHome);
        }
        else {
            UnitGroupRemove(gv_unsuppliedHomes[UnitGetOwner(lv_returnHome)][1], lv_returnHome);
            UnitGroupRemove(gv_unsuppliedHomes[UnitGetOwner(lv_returnHome)][2], lv_returnHome);
            UnitGroupRemove(gv_unsuppliedHomes[UnitGetOwner(lv_returnHome)][3], lv_returnHome);
            UnitGroupRemove(gv_unsuppliedHomes[UnitGetOwner(lv_returnHome)][4], lv_returnHome);
        }
        return lv_returnHome;
    }
}

point gf_GetCapitolLocation (int lp_player) {
    // Automatic Variable Declarations
    unitgroup auto370B98DC_g;
    int auto370B98DC_u;
    unit auto370B98DC_var;

    // Implementation
    auto370B98DC_g = UnitGroup("Capital", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto370B98DC_u = UnitGroupCount(auto370B98DC_g, c_unitCountAll);
    for (;; auto370B98DC_u -= 1) {
        auto370B98DC_var = UnitGroupUnitFromEnd(auto370B98DC_g, auto370B98DC_u);
        if (auto370B98DC_var == null) { break; }
        return UnitGetPosition(auto370B98DC_var);
    }
    return PointFromId(143);
}

point gf_GetCorporateHeadquartersLocationMineOil (int lp_player, int lp_como, point lp_origin) {
    // Variable Declarations
    int lv_resourceType;
    unitgroup lv_possibleDestinations;

    // Automatic Variable Declarations
    unitgroup auto02660FE9_g;
    int auto02660FE9_u;
    unit auto02660FE9_var;
    unitgroup auto9632AAE5_g;
    int auto9632AAE5_u;
    unit auto9632AAE5_var;
    unitgroup autoF77D1723_g;
    int autoF77D1723_u;
    unit autoF77D1723_var;
    unitgroup auto62F3F6BC_g;
    int auto62F3F6BC_u;
    unit auto62F3F6BC_var;

    // Variable Initialization
    lv_possibleDestinations = UnitGroupEmpty();

    // Implementation
    if ((lp_como == 1)) {
        auto02660FE9_g = UnitGroup("CorporateHeadquarters", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto02660FE9_u = UnitGroupCount(auto02660FE9_g, c_unitCountAll);
        for (;; auto02660FE9_u -= 1) {
            auto02660FE9_var = UnitGroupUnitFromEnd(auto02660FE9_g, auto02660FE9_u);
            if (auto02660FE9_var == null) { break; }
            return UnitGetPosition(auto02660FE9_var);
        }
        auto9632AAE5_g = UnitGroup("Capital", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto9632AAE5_u = UnitGroupCount(auto9632AAE5_g, c_unitCountAll);
        for (;; auto9632AAE5_u -= 1) {
            auto9632AAE5_var = UnitGroupUnitFromEnd(auto9632AAE5_g, auto9632AAE5_u);
            if (auto9632AAE5_var == null) { break; }
            return UnitGetPosition(auto9632AAE5_var);
        }
    }

    if ((lp_como == 2)) {
        autoF77D1723_g = gv_allResources;
        autoF77D1723_u = UnitGroupCount(autoF77D1723_g, c_unitCountAll);
        for (;; autoF77D1723_u -= 1) {
            autoF77D1723_var = UnitGroupUnitFromEnd(autoF77D1723_g, autoF77D1723_u);
            if (autoF77D1723_var == null) { break; }
            if ((UnitGetCustomValue(autoF77D1723_var, 10) == IntToFixed(lp_player))) {
                if ((UnitGetType(autoF77D1723_var) != "Metal")) {
                    lv_resourceType = gf_GetResourceType(autoF77D1723_var);
                    if ((gf_GetResourceType(autoF77D1723_var) == 2)) {
                        UnitGroupAdd(lv_possibleDestinations, autoF77D1723_var);
                    }

                }

            }

        }
        if ((UnitGroupCount(lv_possibleDestinations, c_unitCountAlive) == 0)) {
            return PointFromId(143);
        }

        return UnitGetPosition(UnitGroupClosestToPoint(lv_possibleDestinations, lp_origin));
    }

    if ((lp_como == 3)) {
        auto62F3F6BC_g = gv_allResources;
        auto62F3F6BC_u = UnitGroupCount(auto62F3F6BC_g, c_unitCountAll);
        for (;; auto62F3F6BC_u -= 1) {
            auto62F3F6BC_var = UnitGroupUnitFromEnd(auto62F3F6BC_g, auto62F3F6BC_u);
            if (auto62F3F6BC_var == null) { break; }
            if (((UnitGetType(UnitGroupLoopCurrentDeprecated()) == "OilWellI") || (UnitGetType(auto62F3F6BC_var) == "OilWellII")) && (UnitGetOwner(auto62F3F6BC_var) == lp_player)) {
                UnitGroupAdd(lv_possibleDestinations, auto62F3F6BC_var);
            }

        }
        if ((UnitGroupCount(lv_possibleDestinations, c_unitCountAlive) == 0)) {
            return PointFromId(143);
        }

        return UnitGetPosition(UnitGroupClosestToPoint(lv_possibleDestinations, lp_origin));
    }

    return PointFromId(143);
}

unit gf_GetCorporateHeadquartersLocationMineOilUnit (int lp_player, int lp_como, point lp_origin) {
    // Variable Declarations
    unitgroup lv_possibleDestinations;

    // Automatic Variable Declarations
    unitgroup autoE0B1C0EF_g;
    int autoE0B1C0EF_u;
    unit autoE0B1C0EF_var;
    unitgroup autoE3168061_g;
    int autoE3168061_u;
    unit autoE3168061_var;
    unitgroup auto8CC004CA_g;
    int auto8CC004CA_u;
    unit auto8CC004CA_var;
    unitgroup autoB70AB72D_g;
    int autoB70AB72D_u;
    unit autoB70AB72D_var;
    unitgroup auto82056728_g;
    int auto82056728_u;
    unit auto82056728_var;
    unitgroup auto43AD2E8D_g;
    int auto43AD2E8D_u;
    unit auto43AD2E8D_var;
    unitgroup auto289F630B_g;
    int auto289F630B_u;
    unit auto289F630B_var;

    // Variable Initialization
    lv_possibleDestinations = UnitGroupEmpty();

    // Implementation
    if ((lp_como == 1)) {
        autoE0B1C0EF_g = UnitGroup("CorporateHeadquarters", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoE0B1C0EF_u = UnitGroupCount(autoE0B1C0EF_g, c_unitCountAll);
        for (;; autoE0B1C0EF_u -= 1) {
            autoE0B1C0EF_var = UnitGroupUnitFromEnd(autoE0B1C0EF_g, autoE0B1C0EF_u);
            if (autoE0B1C0EF_var == null) { break; }
            return autoE0B1C0EF_var;
        }
        autoE3168061_g = UnitGroup("Capital", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoE3168061_u = UnitGroupCount(autoE3168061_g, c_unitCountAll);
        for (;; autoE3168061_u -= 1) {
            autoE3168061_var = UnitGroupUnitFromEnd(autoE3168061_g, autoE3168061_u);
            if (autoE3168061_var == null) { break; }
            return autoE3168061_var;
        }
    }

    if ((lp_como == 2)) {
        auto8CC004CA_g = gv_allResources;
        auto8CC004CA_u = UnitGroupCount(auto8CC004CA_g, c_unitCountAll);
        for (;; auto8CC004CA_u -= 1) {
            auto8CC004CA_var = UnitGroupUnitFromEnd(auto8CC004CA_g, auto8CC004CA_u);
            if (auto8CC004CA_var == null) { break; }
            if ((UnitGetCustomValue(auto8CC004CA_var, 10) == IntToFixed(lp_player)) && (gf_GetResourceType(auto8CC004CA_var) == 2) && (UnitGetType(UnitGroupLoopCurrentDeprecated()) != "Metal")) {
                UnitGroupAdd(lv_possibleDestinations, auto8CC004CA_var);
            }

        }
        if ((UnitGroupCount(lv_possibleDestinations, c_unitCountAlive) > 0)) {
            return UnitGroupClosestToPoint(lv_possibleDestinations, lp_origin);
        }

    }

    if ((lp_como == 3)) {
        autoB70AB72D_g = gv_allResources;
        autoB70AB72D_u = UnitGroupCount(autoB70AB72D_g, c_unitCountAll);
        for (;; autoB70AB72D_u -= 1) {
            autoB70AB72D_var = UnitGroupUnitFromEnd(autoB70AB72D_g, autoB70AB72D_u);
            if (autoB70AB72D_var == null) { break; }
            if (((UnitGetType(autoB70AB72D_var) == "OilWellI") || (UnitGetType(autoB70AB72D_var) == "OilWellII")) && (UnitGetOwner(autoB70AB72D_var) == lp_player)) {
                UnitGroupAdd(lv_possibleDestinations, autoB70AB72D_var);
            }

        }
        if ((UnitGroupCount(lv_possibleDestinations, c_unitCountAlive) > 0)) {
            return UnitGroupClosestToPoint(lv_possibleDestinations, lp_origin);
        }

    }

    if ((lp_como == 1)) {
        auto82056728_g = UnitGroup("CorporateHeadquarters", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto82056728_u = UnitGroupCount(auto82056728_g, c_unitCountAll);
        for (;; auto82056728_u -= 1) {
            auto82056728_var = UnitGroupUnitFromEnd(auto82056728_g, auto82056728_u);
            if (auto82056728_var == null) { break; }
            UnitGroupAdd(lv_possibleDestinations, auto82056728_var);
        }
    }

    if ((lp_como == 2)) {
        auto43AD2E8D_g = gv_allResources;
        auto43AD2E8D_u = UnitGroupCount(auto43AD2E8D_g, c_unitCountAll);
        for (;; auto43AD2E8D_u -= 1) {
            auto43AD2E8D_var = UnitGroupUnitFromEnd(auto43AD2E8D_g, auto43AD2E8D_u);
            if (auto43AD2E8D_var == null) { break; }
            if ((UnitGetType(auto43AD2E8D_var) != "Metal") && (UnitGetType(auto43AD2E8D_var) != "Oil") && (UnitGetType(auto43AD2E8D_var) != "OilWellI") && (UnitGetType(auto43AD2E8D_var) != "OilWellII")) {
                UnitGroupAdd(lv_possibleDestinations, auto43AD2E8D_var);
            }

        }
    }

    if ((lp_como == 3)) {
        auto289F630B_g = gv_allResources;
        auto289F630B_u = UnitGroupCount(auto289F630B_g, c_unitCountAll);
        for (;; auto289F630B_u -= 1) {
            auto289F630B_var = UnitGroupUnitFromEnd(auto289F630B_g, auto289F630B_u);
            if (auto289F630B_var == null) { break; }
            if (((UnitGetType(auto289F630B_var) == "OilWellI") || (UnitGetType(auto289F630B_var) == "OilWellII"))) {
                UnitGroupAdd(lv_possibleDestinations, auto289F630B_var);
            }

        }
    }

    return UnitGroupClosestToPoint(lv_possibleDestinations, lp_origin);
}

point gf_GetEULocation () {
    // Automatic Variable Declarations
    unitgroup auto4691A571_g;
    int auto4691A571_u;
    unit auto4691A571_var;

    // Implementation
    auto4691A571_g = UnitGroup("EuropeanParliment", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4691A571_u = UnitGroupCount(auto4691A571_g, c_unitCountAll);
    for (;; auto4691A571_u -= 1) {
        auto4691A571_var = UnitGroupUnitFromEnd(auto4691A571_g, auto4691A571_u);
        if (auto4691A571_var == null) { break; }
        return UnitGetPosition(auto4691A571_var);
    }
    return PointFromId(143);
}

void gf_UpdateCapitals () {
    // Automatic Variable Declarations
    unitgroup auto3E94501E_g;
    int auto3E94501E_u;
    unit auto3E94501E_var;

    // Implementation
    auto3E94501E_g = UnitGroup("Capital", c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto3E94501E_u = UnitGroupCount(auto3E94501E_g, c_unitCountAll);
    for (;; auto3E94501E_u -= 1) {
        auto3E94501E_var = UnitGroupUnitFromEnd(auto3E94501E_g, auto3E94501E_u);
        if (auto3E94501E_var == null) { break; }
        gv_capitals[UnitGetOwner(auto3E94501E_var)] = auto3E94501E_var;
    }
}

void gf_UpdateRegionalCapitals () {
    // Automatic Variable Declarations
    unitgroup autoE5C4622C_g;
    int autoE5C4622C_u;
    unit autoE5C4622C_var;
    playergroup auto06415D17_g;
    int auto06415D17_var;

    // Implementation
    autoE5C4622C_g = UnitGroup("DataCore", c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE5C4622C_u = UnitGroupCount(autoE5C4622C_g, c_unitCountAll);
    for (;; autoE5C4622C_u -= 1) {
        autoE5C4622C_var = UnitGroupUnitFromEnd(autoE5C4622C_g, autoE5C4622C_u);
        if (autoE5C4622C_var == null) { break; }
        UnitGroupAdd(gv_regionalCapitals[UnitGetOwner(autoE5C4622C_var)], autoE5C4622C_var);
    }
    auto06415D17_g = gv_users;
    auto06415D17_var = -1;
    while (true) {
        auto06415D17_var = PlayerGroupNextPlayer(auto06415D17_g, auto06415D17_var);
        if (auto06415D17_var < 0) { break; }
        UnitGroupAdd(gv_regionalCapitals[auto06415D17_var], gv_capitals[auto06415D17_var]);
    }
}

void gf_UpdateHighways () {
    // Automatic Variable Declarations
    unitgroup autoDCA77820_g;
    int autoDCA77820_u;
    unit autoDCA77820_var;

    // Implementation
    autoDCA77820_g = UnitGroup("SupplyDepotLowered", c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoDCA77820_u = UnitGroupCount(autoDCA77820_g, c_unitCountAll);
    for (;; autoDCA77820_u -= 1) {
        autoDCA77820_var = UnitGroupUnitFromEnd(autoDCA77820_g, autoDCA77820_u);
        if (autoDCA77820_var == null) { break; }
        if ((UnitHasBehavior2(autoDCA77820_var, "AdministrativeHighway") == true)) {
            UnitGroupAdd(gv_highways[UnitGetOwner(autoDCA77820_var)], autoDCA77820_var);
        }

    }
}

void gf_GetUnitCentralization (unit lp_unit, unit lp_capitolGroup, unitgroup lp_colonyGroup, unitgroup lp_highwayGroup) {
    // Variable Declarations
    fixed lv_highwayCentralization;
    fixed lv_centralization;
    fixed lv_capitolDistance;
    fixed lv_colonyDistance;
    fixed lv_highwayDistance;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_capitolDistance = gf_GetDistanceOfClosestUnit(lp_unit, libNtve_gf_ConvertUnitToUnitGroup(lp_capitolGroup));
    lv_colonyDistance = gf_GetDistanceOfClosestUnit(lp_unit, lp_colonyGroup);
    lv_highwayDistance = gf_GetDistanceOfClosestUnit(lp_unit, lp_highwayGroup);

    // Implementation
    if ((UnitGroupHasUnit(gv_allResources, lp_unit) == true)) {
        UnitSetCustomValue(lp_unit, 0, 1.0);
    }
    else {
        if ((lp_capitolGroup == null)) {
            lv_capitolDistance = 255.0;
        }
        else {
            if ((lv_capitolDistance < 1)) {
                lv_capitolDistance = 1.0;
            }

        }
        if ((lv_colonyDistance < 1)) {
            lv_colonyDistance = 1.0;
        }

        if ((lv_highwayDistance < 1)) {
            lv_highwayDistance = 1.0;
        }

        lv_centralization = (((7.5 / lv_colonyDistance) + (7.5 / lv_capitolDistance)) + 0.0);
        lv_highwayCentralization = (((12.0 / lv_colonyDistance) + (12.0 / lv_capitolDistance)) - (lv_highwayDistance * 0.009));
        if ((lv_highwayCentralization > lv_centralization)) {
            lv_centralization = lv_highwayCentralization;
        }

        lv_centralization *= (IntToFixed(gv_centralization[UnitGetOwner(lp_unit)]) / 250.0);
        lv_centralization *= 0.85;
        UnitSetCustomValue(lp_unit, 0, libNtve_gf_ArithmeticRealClamp(lv_centralization, 0.01, 1.0));
    }
}

fixed gf_GetDistanceOfClosestUnit (unit lp_unit, unitgroup lp_unitGroup) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_unit == null) || (lp_unitGroup == null))) {
        return 10000.0;
    }
    else {
        return DistanceBetweenPoints(UnitGetPosition(lp_unit), UnitGetPosition(UnitGroupClosestToPoint(lp_unitGroup, UnitGetPosition(lp_unit))));
    }
}

bool gf_CloseToOtherCapitol (unit lp_givenCapitol) {
    // Automatic Variable Declarations
    unitgroup auto36BE2728_g;
    int auto36BE2728_u;
    unit auto36BE2728_var;

    // Implementation
    auto36BE2728_g = UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(lp_givenCapitol), 10.0), UnitFilter((1 << c_targetFilterStructure) | (1 << c_targetFilterUser1), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto36BE2728_u = UnitGroupCount(auto36BE2728_g, c_unitCountAll);
    for (;; auto36BE2728_u -= 1) {
        auto36BE2728_var = UnitGroupUnitFromEnd(auto36BE2728_g, auto36BE2728_u);
        if (auto36BE2728_var == null) { break; }
        if ((UnitGetOwner(lp_givenCapitol) != UnitGetOwner(auto36BE2728_var)) && (UnitGroupHasUnit(gv_allResources, auto36BE2728_var) == false)) {
            UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(lp_givenCapitol)), c_messageAreaSubtitle, StringExternal("Param/Value/D165484C"));
            return true;
        }

    }
    return false;
}

bool gf_NotEnoughSpace (unit lp_givenCapitol) {
    // Variable Declarations
    int lv_count;
    unitgroup lv_testUnits;

    // Automatic Variable Declarations
    unitgroup autoB77D46D3_g;
    int autoB77D46D3_u;
    unit autoB77D46D3_var;
    unitgroup auto36A91BAC_g;
    int auto36A91BAC_u;
    unit auto36A91BAC_var;

    // Variable Initialization
    lv_testUnits = UnitGroupEmpty();

    // Implementation
    libNtve_gf_CreateUnitsWithDefaultFacing(100, "SmallHouse", 0, UnitGetOwner(lp_givenCapitol), UnitGetPosition(lp_givenCapitol));
    UnitGroupAddUnitGroup(lv_testUnits, UnitLastCreatedGroup());
    Wait(0.05, c_timeGame);
    autoB77D46D3_g = UnitGroup(null, UnitGetOwner(lp_givenCapitol), RegionCircle(UnitGetPosition(lp_givenCapitol), 6.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB77D46D3_u = UnitGroupCount(autoB77D46D3_g, c_unitCountAll);
    for (;; autoB77D46D3_u -= 1) {
        autoB77D46D3_var = UnitGroupUnitFromEnd(autoB77D46D3_g, autoB77D46D3_u);
        if (autoB77D46D3_var == null) { break; }
        lv_count += 1;
    }
    auto36A91BAC_g = lv_testUnits;
    auto36A91BAC_u = UnitGroupCount(auto36A91BAC_g, c_unitCountAll);
    for (;; auto36A91BAC_u -= 1) {
        auto36A91BAC_var = UnitGroupUnitFromEnd(auto36A91BAC_g, auto36A91BAC_u);
        if (auto36A91BAC_var == null) { break; }
        UnitRemove(auto36A91BAC_var);
    }
    if ((lv_count < 50)) {
        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(lp_givenCapitol)), c_messageAreaSubtitle, StringExternal("Param/Value/FF077790"));
        return true;
    }

    return false;
}

void gf_UndoCapitol (unit lp_capitolUnit) {
    // Automatic Variable Declarations
    // Implementation
    UnitKill(lp_capitolUnit);
}

void gf_HighwayAdminstration (int lp_player) {
    // Variable Declarations
    bool lv_addedHighway;
    unit lv_highway;
    point lv_capitol;

    // Automatic Variable Declarations
    unitgroup auto5CAF3809_g;
    int auto5CAF3809_u;
    unit auto5CAF3809_var;
    unitgroup auto4E32ED4B_g;
    int auto4E32ED4B_u;
    unit auto4E32ED4B_var;
    unitgroup auto142744D3_g;
    int auto142744D3_u;
    unitgroup autoB7765226_g;
    int autoB7765226_u;
    const int autoD068893E_n = 99;
    int autoD068893E_i;
    unitgroup auto1571D5F3_g;
    int auto1571D5F3_u;
    unit auto1571D5F3_var;
    unitgroup auto7F846E39_g;
    int auto7F846E39_u;

    // Variable Initialization
    lv_capitol = gf_GetCapitolLocation(lp_player);

    // Implementation
    auto5CAF3809_g = UnitGroup("SupplyDepotLowered", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto5CAF3809_u = UnitGroupCount(auto5CAF3809_g, c_unitCountAll);
    for (;; auto5CAF3809_u -= 1) {
        auto5CAF3809_var = UnitGroupUnitFromEnd(auto5CAF3809_g, auto5CAF3809_u);
        if (auto5CAF3809_var == null) { break; }
        UnitBehaviorRemove(auto5CAF3809_var, "AdministrativeHighway", 1);
    }
    if ((lv_capitol == null)) {

    }
    else {
        auto4E32ED4B_g = UnitGroup("DataCore", lp_player, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto4E32ED4B_u = UnitGroupCount(auto4E32ED4B_g, c_unitCountAll);
        for (;; auto4E32ED4B_u -= 1) {
            auto4E32ED4B_var = UnitGroupUnitFromEnd(auto4E32ED4B_g, auto4E32ED4B_u);
            if (auto4E32ED4B_var == null) { break; }
            auto142744D3_g = UnitGroup("SupplyDepotLowered", lp_player, RegionCircle(UnitGetPosition(auto4E32ED4B_var), 4.2), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto142744D3_u = UnitGroupCount(auto142744D3_g, c_unitCountAll);
            for (;; auto142744D3_u -= 1) {
                lv_highway = UnitGroupUnitFromEnd(auto142744D3_g, auto142744D3_u);
                if (lv_highway == null) { break; }
                UnitBehaviorAdd(lv_highway, "AdministrativeHighway", auto4E32ED4B_var, 1);
            }
        }
        autoB7765226_g = UnitGroup("SupplyDepotLowered", lp_player, RegionCircle(lv_capitol, 4.2), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoB7765226_u = UnitGroupCount(autoB7765226_g, c_unitCountAll);
        for (;; autoB7765226_u -= 1) {
            lv_highway = UnitGroupUnitFromEnd(autoB7765226_g, autoB7765226_u);
            if (lv_highway == null) { break; }
            UnitBehaviorAdd(lv_highway, "AdministrativeHighway", lv_highway, 1);
        }
    }
    for (autoD068893E_i = 1; autoD068893E_i <= autoD068893E_n; autoD068893E_i += 1) {
        lv_addedHighway = false;
        auto1571D5F3_g = UnitGroup("SupplyDepotLowered", lp_player, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto1571D5F3_u = UnitGroupCount(auto1571D5F3_g, c_unitCountAll);
        for (;; auto1571D5F3_u -= 1) {
            auto1571D5F3_var = UnitGroupUnitFromEnd(auto1571D5F3_g, auto1571D5F3_u);
            if (auto1571D5F3_var == null) { break; }
            if ((UnitHasBehavior2(auto1571D5F3_var, "AdministrativeHighway") == true)) {
                auto7F846E39_g = UnitGroup("SupplyDepotLowered", lp_player, RegionCircle(UnitGetPosition(auto1571D5F3_var), 6.0), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                auto7F846E39_u = UnitGroupCount(auto7F846E39_g, c_unitCountAll);
                for (;; auto7F846E39_u -= 1) {
                    lv_highway = UnitGroupUnitFromEnd(auto7F846E39_g, auto7F846E39_u);
                    if (lv_highway == null) { break; }
                    if ((UnitHasBehavior2(lv_highway, "AdministrativeHighway") == false)) {
                        lv_addedHighway = true;
                        UnitBehaviorAdd(lv_highway, "AdministrativeHighway", auto1571D5F3_var, 1);
                    }

                }
            }

        }
        if ((lv_addedHighway == false)) {
            break;
        }

    }
}

void gf_TransferCustomValuesTake (unit lp_transferingUnit) {
    // Variable Declarations
    int lv_value;

    // Automatic Variable Declarations
    const int auto911DD65B_ae = 64;
    const int auto911DD65B_ai = 1;

    // Variable Initialization

    // Implementation
    lv_value = 1;
    for ( ; ( (auto911DD65B_ai >= 0 && lv_value <= auto911DD65B_ae) || (auto911DD65B_ai < 0 && lv_value >= auto911DD65B_ae) ) ; lv_value += auto911DD65B_ai ) {
        gv_storedCustomValues[lv_value] = UnitGetCustomValue(lp_transferingUnit, lv_value);
    }
}

void gf_TransferCustomValuesGive (unit lp_transferingUnit) {
    // Variable Declarations
    int lv_value;

    // Automatic Variable Declarations
    const int autoDD0C39C0_ae = 64;
    const int autoDD0C39C0_ai = 1;

    // Variable Initialization

    // Implementation
    lv_value = 1;
    for ( ; ( (autoDD0C39C0_ai >= 0 && lv_value <= autoDD0C39C0_ae) || (autoDD0C39C0_ai < 0 && lv_value >= autoDD0C39C0_ae) ) ; lv_value += autoDD0C39C0_ai ) {
        UnitSetCustomValue(lp_transferingUnit, lv_value, gv_storedCustomValues[lv_value]);
    }
}

void gf_TransferCores (unit lp_unit, int lp_coreCount0, int lp_coreCount1, int lp_coreCount2, int lp_coreCount3, int lp_coreCount4, int lp_coreCount5, int lp_coreCount6, int lp_coreCount7, int lp_coreCount8, int lp_coreCount9, int lp_coreCount10) {
    // Automatic Variable Declarations
    // Implementation
    UnitBehaviorAdd(lp_unit, "Occupation", lp_unit, lp_coreCount0);
    UnitBehaviorAdd(lp_unit, "Core1", lp_unit, lp_coreCount1);
    UnitBehaviorAdd(lp_unit, "Core1", lp_unit, lp_coreCount1);
    UnitBehaviorAdd(lp_unit, "Core2", lp_unit, lp_coreCount2);
    UnitBehaviorAdd(lp_unit, "CoreTerritoryPlayer13", lp_unit, lp_coreCount3);
    UnitBehaviorAdd(lp_unit, "CoreTerritoryPlayer14", lp_unit, lp_coreCount4);
    UnitBehaviorAdd(lp_unit, "CoreTerritoryPlayer15", lp_unit, lp_coreCount5);
    UnitBehaviorAdd(lp_unit, "CoreTerritoryPlayer16", lp_unit, lp_coreCount6);
    UnitBehaviorAdd(lp_unit, "CoreTerritoryPlayer17", lp_unit, lp_coreCount7);
    UnitBehaviorAdd(lp_unit, "CoreTerritoryPlayer18", lp_unit, lp_coreCount8);
    UnitBehaviorAdd(lp_unit, "CoreTerritoryPlayer19", lp_unit, lp_coreCount9);
    UnitBehaviorAdd(lp_unit, "Separatists", lp_unit, lp_coreCount10);
}

int gf_GetCoreCount (unit lp_unit, int lp_player) {
    // Variable Declarations
    int[10] lv_coreCount;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_coreCount[1] = UnitTechTreeBehaviorCount(lp_unit, "Core1", c_techCountCompleteOnly);
    if ((lp_player == 1)) {
        lv_coreCount[1] = UnitTechTreeBehaviorCount(lp_unit, "Core1", c_techCountCompleteOnly);
    }

    if ((lp_player == 2)) {
        lv_coreCount[2] = UnitTechTreeBehaviorCount(lp_unit, "Core2", c_techCountCompleteOnly);
    }

    if ((lp_player == 3)) {
        lv_coreCount[3] = UnitTechTreeBehaviorCount(lp_unit, "CoreTerritoryPlayer13", c_techCountCompleteOnly);
    }

    if ((lp_player == 4)) {
        lv_coreCount[4] = UnitTechTreeBehaviorCount(lp_unit, "CoreTerritoryPlayer14", c_techCountCompleteOnly);
    }

    if ((lp_player == 5)) {
        lv_coreCount[5] = UnitTechTreeBehaviorCount(lp_unit, "CoreTerritoryPlayer15", c_techCountCompleteOnly);
    }

    if ((lp_player == 6)) {
        lv_coreCount[6] = UnitTechTreeBehaviorCount(lp_unit, "CoreTerritoryPlayer16", c_techCountCompleteOnly);
    }

    if ((lp_player == 7)) {
        lv_coreCount[7] = UnitTechTreeBehaviorCount(lp_unit, "CoreTerritoryPlayer17", c_techCountCompleteOnly);
    }

    return lv_coreCount[lp_player];
}

void gf_TransferCoresFromGlobal (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    gf_TransferCustomValuesGive(lp_unit);
    UnitBehaviorAdd(lp_unit, "populationThinnerImmunity2", lp_unit, 1);
    UnitBehaviorAdd(lp_unit, "populationThinnerImmunity", lp_unit, 1);
    UnitBehaviorAdd(lp_unit, "Occupation", lp_unit, gv_coreTerritoryCount[0]);
    UnitBehaviorAdd(lp_unit, "Core1", lp_unit, gv_coreTerritoryCount[1]);
    UnitBehaviorAdd(lp_unit, "Core2", lp_unit, gv_coreTerritoryCount[2]);
    UnitBehaviorAdd(lp_unit, "CoreTerritoryPlayer13", lp_unit, gv_coreTerritoryCount[3]);
    UnitBehaviorAdd(lp_unit, "CoreTerritoryPlayer14", lp_unit, gv_coreTerritoryCount[4]);
    UnitBehaviorAdd(lp_unit, "CoreTerritoryPlayer15", lp_unit, gv_coreTerritoryCount[5]);
    UnitBehaviorAdd(lp_unit, "CoreTerritoryPlayer16", lp_unit, gv_coreTerritoryCount[6]);
    UnitBehaviorAdd(lp_unit, "CoreTerritoryPlayer17", lp_unit, gv_coreTerritoryCount[7]);
    UnitBehaviorAdd(lp_unit, "CoreTerritoryPlayer18", lp_unit, gv_coreTerritoryCount[8]);
    UnitBehaviorAdd(lp_unit, "CoreTerritoryPlayer19", lp_unit, gv_coreTerritoryCount[9]);
    UnitBehaviorAdd(lp_unit, "Separatists", lp_unit, gv_coreTerritoryCount[10]);
}

void gf_SetGlobalCoreCount (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    gf_TransferCustomValuesGive(lp_unit);
    gv_coreTerritoryCount[0] = UnitTechTreeBehaviorCount(lp_unit, "Occupation", c_techCountCompleteOnly);
    gv_coreTerritoryCount[1] = UnitTechTreeBehaviorCount(lp_unit, "Core1", c_techCountCompleteOnly);
    gv_coreTerritoryCount[2] = UnitTechTreeBehaviorCount(lp_unit, "Core2", c_techCountCompleteOnly);
    gv_coreTerritoryCount[3] = UnitTechTreeBehaviorCount(lp_unit, "CoreTerritoryPlayer13", c_techCountCompleteOnly);
    gv_coreTerritoryCount[4] = UnitTechTreeBehaviorCount(lp_unit, "CoreTerritoryPlayer14", c_techCountCompleteOnly);
    gv_coreTerritoryCount[5] = UnitTechTreeBehaviorCount(lp_unit, "CoreTerritoryPlayer15", c_techCountCompleteOnly);
    gv_coreTerritoryCount[6] = UnitTechTreeBehaviorCount(lp_unit, "CoreTerritoryPlayer16", c_techCountCompleteOnly);
    gv_coreTerritoryCount[7] = UnitTechTreeBehaviorCount(lp_unit, "CoreTerritoryPlayer17", c_techCountCompleteOnly);
    gv_coreTerritoryCount[8] = UnitTechTreeBehaviorCount(lp_unit, "CoreTerritoryPlayer18", c_techCountCompleteOnly);
    gv_coreTerritoryCount[9] = UnitTechTreeBehaviorCount(lp_unit, "CoreTerritoryPlayer19", c_techCountCompleteOnly);
    gv_coreTerritoryCount[10] = UnitTechTreeBehaviorCount(lp_unit, "Separatists", c_techCountCompleteOnly);
}

unit gf_GetRussianNukeLauncher () {
    // Automatic Variable Declarations
    // Implementation
    return UnitGroupRandomUnit(UnitGroup("SupplyDepot234223", 11, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
}

void gf_DoTheNuke () {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_rUNukes > 1) && (((RandomInt(0, (gv_russianDanger + (gv_arisAIDifficulty * 2))) > 1250) && (RandomInt(gv_rUNukes, 100) > 50)) || ((RandomInt(gv_rUNukes, 100) > 98)))) {
        gf_RUNuke();
    }

}

void gf_RUNuke () {
    // Variable Declarations
    playergroup lv_radarPlayerGroup;
    int lv_highestAppealNumber;
    int lv_highestAppealVariable;
    int lv_nukeVariable;
    int lv_nukeFindAppeal;
    point[1000] lv_nukeLocations;
    int[gv_numberOfRegions + 1] lv_nukeAppeal;

    // Automatic Variable Declarations
    playergroup auto2008A0F8_g;
    int auto2008A0F8_var;
    const int auto2D142624_ae = gv_numberOfRegions;
    const int auto2D142624_ai = 1;
    int auto4C4892FF_ae;
    const int auto4C4892FF_ai = 1;
    const int autoE4C469AD_ae = gv_numberOfRegions;
    const int autoE4C469AD_ai = 1;
    int autoD727C9E8_ae;
    const int autoD727C9E8_ai = 1;
    playergroup auto62D1094D_g;
    int auto62D1094D_var;
    int auto08EED76C_ae;
    const int auto08EED76C_ai = 1;
    playergroup auto9C70D1DD_g;
    int auto9C70D1DD_var;
    int auto83C3D815_ae;
    const int auto83C3D815_ai = 1;
    playergroup auto8D338EDB_g;
    int auto8D338EDB_var;

    // Variable Initialization
    lv_radarPlayerGroup = PlayerGroupEmpty();

    // Implementation
    if ((UnitGroupCount(UnitGroup("SupplyDepot234223", 11, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        gv_rUNuclearProgress = -10;
    }
    else {
        if ((gv_rUNukes < 1)) {
            gv_rUNukes = 1;
        }

        auto2008A0F8_g = gv_users;
        auto2008A0F8_var = -1;
        while (true) {
            auto2008A0F8_var = PlayerGroupNextPlayer(auto2008A0F8_g, auto2008A0F8_var);
            if (auto2008A0F8_var < 0) { break; }
            if ((TechTreeUpgradeCount(auto2008A0F8_var, "AdvancedRadarStation", c_techCountCompleteOnly) == 1)) {
                PlayerGroupAdd(lv_radarPlayerGroup, auto2008A0F8_var);
            }

        }
        lv_nukeVariable = 1;
        for ( ; ( (auto2D142624_ai >= 0 && lv_nukeVariable <= auto2D142624_ae) || (auto2D142624_ai < 0 && lv_nukeVariable >= auto2D142624_ae) ) ; lv_nukeVariable += auto2D142624_ai ) {
            lv_nukeAppeal[lv_nukeVariable] = gf_GetCountyPopulation(lv_nukeVariable);
            if ((UnitGroupCount(UnitGroup(null, 10, gv_countRegions[lv_nukeFindAppeal], UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
                lv_nukeAppeal[lv_nukeVariable] /= 4;
            }

        }
        lv_nukeAppeal[181] = 0;
        if ((gv_arisAIDifficulty > 70)) {
            lv_nukeAppeal[1] = 0;
            lv_nukeAppeal[2] = 0;
            lv_nukeAppeal[3] = 0;
            lv_nukeAppeal[4] = 0;
            lv_nukeAppeal[5] = 0;
            lv_nukeAppeal[6] = 0;
        }

        auto4C4892FF_ae = lv_nukeVariable;
        lv_nukeVariable = 1;
        for ( ; ( (auto4C4892FF_ai >= 0 && lv_nukeVariable <= auto4C4892FF_ae) || (auto4C4892FF_ai < 0 && lv_nukeVariable >= auto4C4892FF_ae) ) ; lv_nukeVariable += auto4C4892FF_ai ) {
            lv_highestAppealNumber = 0;
            lv_highestAppealVariable = 0;
            lv_nukeFindAppeal = 1;
            for ( ; ( (autoE4C469AD_ai >= 0 && lv_nukeFindAppeal <= autoE4C469AD_ae) || (autoE4C469AD_ai < 0 && lv_nukeFindAppeal >= autoE4C469AD_ae) ) ; lv_nukeFindAppeal += autoE4C469AD_ai ) {
                if ((lv_nukeAppeal[lv_nukeFindAppeal] > lv_highestAppealNumber) && ((UnitGroupCount(UnitGroup(null, 11, gv_countRegions[lv_nukeFindAppeal], UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) || (gv_arisAIDifficulty < 71))) {
                    lv_highestAppealNumber = lv_nukeAppeal[lv_nukeFindAppeal];
                    lv_highestAppealVariable = lv_nukeFindAppeal;
                }

            }
            lv_nukeAppeal[lv_highestAppealVariable] = (lv_nukeAppeal[lv_highestAppealVariable] / 2);
            lv_nukeLocations[lv_nukeVariable] = RegionRandomPoint(gv_countRegions[lv_highestAppealVariable]);
        }
        if ((gv_rUNuclearProgress < 9) && (gv_rUNuclearProgress > 2)) {
            SoundPlay(SoundLink("Tychus04BriefingAlarm", -1), PlayerGroupAll(), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextWithColor(((StringExternal("Param/Value/6829A372") + IntToText(libNtve_gf_ArithmeticIntClamp(FixedToInt((RandomFixed(0.9, 1.1) * IntToFixed(gv_rUNukes))), 1, 10000))) + StringExternal("Param/Value/B9749240")), Color(100.00, 0.00, 0.00)));
            autoD727C9E8_ae = gv_rUNukes;
            lv_nukeVariable = 1;
            for ( ; ( (autoD727C9E8_ai >= 0 && lv_nukeVariable <= autoD727C9E8_ae) || (autoD727C9E8_ai < 0 && lv_nukeVariable >= autoD727C9E8_ae) ) ; lv_nukeVariable += autoD727C9E8_ai ) {
                UnitCreateEffectPoint(UnitFromId(1711017736), "LaunchICBMSet2", lv_nukeLocations[lv_nukeVariable]);
                auto62D1094D_g = lv_radarPlayerGroup;
                auto62D1094D_var = -1;
                while (true) {
                    auto62D1094D_var = PlayerGroupNextPlayer(auto62D1094D_g, auto62D1094D_var);
                    if (auto62D1094D_var < 0) { break; }
                    MinimapPing(PlayerGroupSingle(auto62D1094D_var), lv_nukeLocations[lv_nukeVariable], 4.0, Color(100.00, 0.00, 0.00));
                }
            }
        }
        else {
            if ((gv_rUNuclearProgress < 15)) {
                SoundPlay(SoundLink("Tychus04BriefingAlarm", -1), PlayerGroupAll(), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextWithColor(((StringExternal("Param/Value/9C7C2316") + IntToText(libNtve_gf_ArithmeticIntClamp(FixedToInt((RandomFixed(0.9, 1.1) * IntToFixed(gv_rUNukes))), 1, 10000))) + StringExternal("Param/Value/CF76F8F3")), Color(100.00, 0.00, 0.00)));
                auto08EED76C_ae = gv_rUNukes;
                lv_nukeVariable = 1;
                for ( ; ( (auto08EED76C_ai >= 0 && lv_nukeVariable <= auto08EED76C_ae) || (auto08EED76C_ai < 0 && lv_nukeVariable >= auto08EED76C_ae) ) ; lv_nukeVariable += auto08EED76C_ai ) {
                    UnitCreateEffectPoint(UnitFromId(1711017736), "LaunchICBMSet22", lv_nukeLocations[lv_nukeVariable]);
                    auto9C70D1DD_g = lv_radarPlayerGroup;
                    auto9C70D1DD_var = -1;
                    while (true) {
                        auto9C70D1DD_var = PlayerGroupNextPlayer(auto9C70D1DD_g, auto9C70D1DD_var);
                        if (auto9C70D1DD_var < 0) { break; }
                        MinimapPing(PlayerGroupSingle(auto9C70D1DD_var), lv_nukeLocations[lv_nukeVariable], 4.0, Color(100.00, 0.00, 0.00));
                    }
                }
            }
            else {
                if ((gv_rUNuclearProgress > 15)) {
                    SoundPlay(SoundLink("Tychus04BriefingAlarm", -1), PlayerGroupAll(), 100.0, 0.0);
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextWithColor(((StringExternal("Param/Value/3E20E43C") + IntToText(libNtve_gf_ArithmeticIntClamp(FixedToInt((RandomFixed(0.9, 1.1) * IntToFixed(gv_rUNukes))), 1, 10000))) + StringExternal("Param/Value/1814C809")), Color(100.00, 0.00, 0.00)));
                    auto83C3D815_ae = gv_rUNukes;
                    lv_nukeVariable = 1;
                    for ( ; ( (auto83C3D815_ai >= 0 && lv_nukeVariable <= auto83C3D815_ae) || (auto83C3D815_ai < 0 && lv_nukeVariable >= auto83C3D815_ae) ) ; lv_nukeVariable += auto83C3D815_ai ) {
                        UnitCreateEffectPoint(UnitFromId(1711017736), "LaunchICBMSet23", lv_nukeLocations[lv_nukeVariable]);
                        auto8D338EDB_g = lv_radarPlayerGroup;
                        auto8D338EDB_var = -1;
                        while (true) {
                            auto8D338EDB_var = PlayerGroupNextPlayer(auto8D338EDB_g, auto8D338EDB_var);
                            if (auto8D338EDB_var < 0) { break; }
                            MinimapPing(PlayerGroupSingle(auto8D338EDB_var), lv_nukeLocations[lv_nukeVariable], 20.0, Color(100.00, 0.00, 0.00));
                        }
                    }
                }
                else {
                    TriggerStop(TriggerGetCurrent());
                }
            }
        }
    }
    gv_rUNukes = 0;
}

void gf_RUNuclearDevelopment () {
    // Variable Declarations
    playergroup lv_radarPlayerGroup;
    int lv_highestAppealNumber;
    int lv_highestAppealVariable;
    int lv_nukeVariable;
    int lv_nukeFindAppeal;
    point[1000] lv_nukeLocations;
    int[gv_numberOfRegions + 1] lv_nukeAppeal;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_radarPlayerGroup = PlayerGroupEmpty();

    // Implementation
    if ((UnitGroupCount(UnitGroup("SupplyDepot234223", 11, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) && (gv_rTechnology > 30000)) {
        if ((gv_rUNuclearProgress == -1)) {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/5F0B789F"));
            gv_rUNuclearProgress += 1;
        }
        else {
            if ((gv_rUNuclearProgress == 0)) {
                gv_rUNuclearProgress += 1;
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/DCE2BB26"));
            }
            else {
                if ((gv_rUNuclearProgress == 1)) {
                    gv_rUNuclearProgress += 1;
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/441BF2B3"));
                }
                else {
                    if ((gv_rUNuclearProgress == 2)) {
                        gv_rUNuclearProgress += 1;
                        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/B7EBE0F4"));
                        UnitCreateEffectPoint(gf_GetRussianNukeLauncher(), "LaunchICBMSet2", RegionRandomPoint(RegionFromId(195)));
                    }
                    else {
                        gv_rUNuclearProgress += 1;
                        if ((gv_rUNuclearProgress == 8)) {
                            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/02AD58E9"));
                            UnitCreateEffectPoint(gf_GetRussianNukeLauncher(), "LaunchICBMSet22", RegionRandomPoint(RegionFromId(139)));
                        }
                        else {
                            if ((gv_rUNuclearProgress == 15) && (gv_russianDifficulty > 250)) {
                                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/EEBF572A"));
                                UnitCreateEffectPoint(gf_GetRussianNukeLauncher(), "LaunchICBMSet22", RegionRandomPoint(RegionFromId(122)));
                            }

                        }
                    }
                }
            }
        }
    }

}

void gf_RussianRazeRebel (unit lp_city) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_ArithmeticIntClamp((gv_arisAIDifficulty / 10), 6, 50), gv_russianUnitTypes[1][1], 0, 11, UnitGetPosition(lp_city));
    Wait(RandomInt(4, 10), c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_ArithmeticIntClamp((gv_arisAIDifficulty / 20), 3, 20), gv_russianUnitTypes[6][1], 0, 11, UnitGetPosition(lp_city));
    Wait(RandomInt(4, 10), c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_ArithmeticIntClamp((gv_arisAIDifficulty / 10), 6, 50), gv_russianUnitTypes[1][1], 0, 11, UnitGetPosition(lp_city));
}

void gf_UpdateRussianDomainFrontier () {
    // Automatic Variable Declarations
    unitgroup auto5CFD0CD7_g;
    int auto5CFD0CD7_u;
    unit auto5CFD0CD7_var;

    // Implementation
    gv_russianDomain = RegionFromId(61);
    gv_russianFronter = RegionFromId(61);
    RegionAddCircle(gv_russianDomain, true, UnitGetPosition(gv_russianCities[1]), 24.0);
    RegionAddCircle(gv_russianDomain, true, UnitGetPosition(gv_russianCities[2]), 36.0);
    RegionAddCircle(gv_russianDomain, true, UnitGetPosition(gv_russianCities[3]), 36.0);
    auto5CFD0CD7_g = UnitGroup(null, 11, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto5CFD0CD7_u = UnitGroupCount(auto5CFD0CD7_g, c_unitCountAll);
    for (;; auto5CFD0CD7_u -= 1) {
        auto5CFD0CD7_var = UnitGroupUnitFromEnd(auto5CFD0CD7_g, auto5CFD0CD7_u);
        if (auto5CFD0CD7_var == null) { break; }
        if (((UnitGetType(auto5CFD0CD7_var) == "RussianResearchCenter") || (UnitGetType(auto5CFD0CD7_var) == "RussianBunker") || (UnitGetType(auto5CFD0CD7_var) == "RussianFactory"))) {
            RegionAddCircle(gv_russianDomain, true, UnitGetPosition(auto5CFD0CD7_var), 9.0);
        }

    }
    gv_russianFronter = RegionRect((PointGetX(RegionGetBoundsMin(gv_russianDomain)) - 6.0), (PointGetY(RegionGetBoundsMin(gv_russianDomain)) - 6.0), (PointGetX(RegionGetBoundsMax(gv_russianDomain)) + 6.0), (PointGetY(RegionGetBoundsMax(gv_russianDomain)) + 6.0));
}

void gf_RussianMultiplierUpdate () {
    // Automatic Variable Declarations
    unitgroup autoB1023E79_g;
    int autoB1023E79_u;
    unit autoB1023E79_var;
    unitgroup autoCEAED05A_g;
    int autoCEAED05A_u;
    unit autoCEAED05A_var;
    unitgroup autoF7908A05_g;
    int autoF7908A05_u;
    unit autoF7908A05_var;

    // Implementation
    gv_rProductionMultiplier = 5;
    gv_rTechnologyMultiplier = 5;
    autoB1023E79_g = UnitGroup("RussianResearchCenter", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB1023E79_u = UnitGroupCount(autoB1023E79_g, c_unitCountAll);
    for (;; autoB1023E79_u -= 1) {
        autoB1023E79_var = UnitGroupUnitFromEnd(autoB1023E79_g, autoB1023E79_u);
        if (autoB1023E79_var == null) { break; }
        gv_rTechnologyMultiplier += 20;
    }
    autoCEAED05A_g = UnitGroup("RussianFactory", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoCEAED05A_u = UnitGroupCount(autoCEAED05A_g, c_unitCountAll);
    for (;; autoCEAED05A_u -= 1) {
        autoCEAED05A_var = UnitGroupUnitFromEnd(autoCEAED05A_g, autoCEAED05A_u);
        if (autoCEAED05A_var == null) { break; }
        gv_rProductionMultiplier += 20;
    }
    autoF7908A05_g = UnitGroup("RussianBarracks", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF7908A05_u = UnitGroupCount(autoF7908A05_g, c_unitCountAll);
    for (;; autoF7908A05_u -= 1) {
        autoF7908A05_var = UnitGroupUnitFromEnd(autoF7908A05_g, autoF7908A05_u);
        if (autoF7908A05_var == null) { break; }
        gv_rProductionMultiplier += 5;
    }
    if ((gv_russianCitiesAlive[2] == false)) {
        gv_rTechnologyMultiplier = 0;
    }
    else {
        gv_rTechnologyMultiplier += 20;
    }
    gv_rProductionMultiplier = FixedToInt((((libNtve_gf_Log(IntToFixed(gv_rProductionMultiplier), 4.0) * IntToFixed(gv_arisAIDifficulty)) - Log2(IntToFixed(gv_rProductionMultiplier))) / 2.0));
    gv_rTechnologyMultiplier = FixedToInt((((libNtve_gf_Log(IntToFixed(gv_rTechnologyMultiplier), 4.0) * IntToFixed(gv_arisAIDifficulty)) - Log2(IntToFixed(gv_rTechnologyMultiplier))) / 2.0));
}

void gf_RussianResourceCalculate () {
    // Variable Declarations
    int lv_pop;

    // Automatic Variable Declarations
    unitgroup auto5B71276B_g;
    int auto5B71276B_u;
    unit auto5B71276B_var;
    unitgroup auto8F824776_g;
    int auto8F824776_u;
    unit auto8F824776_var;

    // Variable Initialization

    // Implementation
    auto5B71276B_g = UnitGroup(null, 11, RegionEntireMap(), UnitFilter((1 << c_targetFilterPsionic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto5B71276B_u = UnitGroupCount(auto5B71276B_g, c_unitCountAll);
    for (;; auto5B71276B_u -= 1) {
        auto5B71276B_var = UnitGroupUnitFromEnd(auto5B71276B_g, auto5B71276B_u);
        if (auto5B71276B_var == null) { break; }
        UnitSetPropertyFixed(auto5B71276B_var, c_unitPropEnergyPercent, (UnitGetPropertyFixed(auto5B71276B_var, c_unitPropEnergyPercent, c_unitPropCurrent) + 10.0));
        lv_pop += FixedToInt(UnitGetPropertyFixed(auto5B71276B_var, c_unitPropEnergy, c_unitPropCurrent));
    }
    auto8F824776_g = UnitGroup(null, 11, RegionEntireMap(), UnitFilter((1 << c_targetFilterMechanical) | (1 << c_targetFilterStructure), 0, (1 << c_targetFilterPsionic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto8F824776_u = UnitGroupCount(auto8F824776_g, c_unitCountAll);
    for (;; auto8F824776_u -= 1) {
        auto8F824776_var = UnitGroupUnitFromEnd(auto8F824776_g, auto8F824776_u);
        if (auto8F824776_var == null) { break; }
        lv_pop += FixedToInt(UnitGetPropertyFixed(auto8F824776_var, c_unitPropEnergy, c_unitPropCurrent));
    }
    gv_rTechnology += ((lv_pop / 10000) * gv_rTechnologyMultiplier);
    gv_rProduction += ((lv_pop / 250) * gv_rProductionMultiplier);
}

void gf_RussiaProductionDesignation () {
    // Automatic Variable Declarations
    // Implementation
    gv_accumulatedExpansionProduction = (gf_CreateUnits(((gv_rProduction / 3) * 2)) + ((gv_rProduction / 3) + gv_accumulatedExpansionProduction));
    gv_accumulatedExpansionProduction = gf_RussianExpansionsExpansionDefenseRussianNukes(gv_accumulatedExpansionProduction);
    gv_rProduction = 0;
}

void gf_RUForceLimit () {
    // Variable Declarations
    unitgroup lv_russianUnits;
    int lv_total;

    // Automatic Variable Declarations
    unitgroup autoF4C7B7AE_g;
    int autoF4C7B7AE_u;
    unit autoF4C7B7AE_var;

    // Variable Initialization
    lv_russianUnits = UnitGroupEmpty();

    // Implementation
    autoF4C7B7AE_g = UnitGroup(null, 11, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF4C7B7AE_u = UnitGroupCount(autoF4C7B7AE_g, c_unitCountAll);
    for (;; autoF4C7B7AE_u -= 1) {
        autoF4C7B7AE_var = UnitGroupUnitFromEnd(autoF4C7B7AE_g, autoF4C7B7AE_u);
        if (autoF4C7B7AE_var == null) { break; }
        if (((UnitGetType(autoF4C7B7AE_var) != "RussianGuerrilla") || (UnitGetType(autoF4C7B7AE_var) != "NewRussianFederationPeacekeeper"))) {
            lv_total += 1;
            UnitGroupAdd(lv_russianUnits, autoF4C7B7AE_var);
        }

    }
    if ((lv_total > gv_russianForceLimit)) {
        while ((lv_total > gv_russianForceLimit)) {
            UnitRemove(UnitGroupRandomUnit(lv_russianUnits, c_unitCountAlive));
            lv_total -= 1;
        }
    }

    gv_russianTroopCount = lv_total;
}

int gf_CreateUnits (int lp_production) {
    int init_i;

    // Variable Declarations
    int lv_max50;
    int lv_spentonDefense;
    int lv_defenseProductionTarget;
    int lv_unitType;
    int[6] lv_unitCount;
    int lv_composition;
    int lv_spareproduction;
    int[8][3] lv_unitCosts;
    int[8] lv_compositionProductionTarget;
    int lv_toGuerilla;
    unitgroup[6] lv_unitTypeGroup;

    // Automatic Variable Declarations
    const int auto00E366CE_ae = 3;
    int auto00E366CE_var;
    const int auto00937962_ae = 5;
    const int auto00937962_ai = 1;
    unitgroup auto814795A3_g;
    int auto814795A3_u;
    unit auto814795A3_var;
    const int auto591B91BA_ae = 5;
    const int auto591B91BA_ai = 1;
    int auto3AF48A43_n;
    int auto3AF48A43_i;

    // Variable Initialization
    lv_defenseProductionTarget = ((lp_production * gv_russianUnitProductionTargets[7]) / 100);
    lv_spareproduction = lp_production;
    for (init_i = 0; init_i <= 5; init_i += 1) {
        lv_unitTypeGroup[init_i] = UnitGroupEmpty();
    }

    // Implementation
    lv_unitCosts[1][1] = 100;
    lv_unitCosts[1][2] = 200;
    lv_unitCosts[2][1] = 200;
    lv_unitCosts[2][2] = 400;
    lv_unitCosts[3][1] = 500;
    lv_unitCosts[3][2] = 750;
    lv_unitCosts[4][1] = 1000;
    lv_unitCosts[4][1] = 2000;
    lv_unitCosts[5][1] = 200;
    lv_unitCosts[5][2] = 400;
    lv_unitCosts[7][1] = 600;
    if ((lv_spareproduction > 0)) {
        lv_toGuerilla = (lv_spareproduction * gv_russianUnitProductionTargets[6]);
        lv_toGuerilla /= 100;
        lv_spareproduction -= lv_toGuerilla;
        gv_guerillaProd += lv_toGuerilla;
    }

    gf_UpdatePossibleRussianSpawns();
    while ((lv_spareproduction > 0) && (lv_max50 < 50) && (lv_spentonDefense < lv_defenseProductionTarget) && (gf_RussianDefenseShortage() > 0)) {
        lv_max50 += 1;
        auto00E366CE_var = 1;
        for ( ; auto00E366CE_var <= auto00E366CE_ae; auto00E366CE_var += 1 ) {
            if ((gv_russianCitiesAlive[auto00E366CE_var] == true) && (RandomInt(0, 100) < 33)) {
                lv_spareproduction -= lv_unitCosts[7][1];
                lv_spentonDefense += lv_unitCosts[7][1];
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewRussianFederationPeacekeeper", 0, 11, UnitGetPosition(gv_russianCities[auto00E366CE_var]));
                UnitBehaviorAdd(UnitLastCreated(), "RussianDivision", UnitLastCreated(), 1);
                break;
            }

        }
    }
    lv_composition = 1;
    for ( ; ( (auto00937962_ai >= 0 && lv_composition <= auto00937962_ae) || (auto00937962_ai < 0 && lv_composition >= auto00937962_ae) ) ; lv_composition += auto00937962_ai ) {
        auto814795A3_g = UnitGroup(null, 11, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto814795A3_u = UnitGroupCount(auto814795A3_g, c_unitCountAll);
        for (;; auto814795A3_u -= 1) {
            auto814795A3_var = UnitGroupUnitFromEnd(auto814795A3_g, auto814795A3_u);
            if (auto814795A3_var == null) { break; }
            if (((UnitGetType(auto814795A3_var) == gv_russianUnitTypes[lv_composition][1]) || (UnitGetType(auto814795A3_var) == gv_russianUnitTypes[lv_composition][2]))) {
                lv_unitCount[lv_composition] += 1;
                UnitGroupAdd(lv_unitTypeGroup[lv_composition], auto814795A3_var);
            }

        }
        while ((gv_russianUnitProductionTargets[lv_composition] >= lv_unitCount[lv_composition]) && (lv_spareproduction > 0)) {
            if ((RandomInt(0, 100) < 25)) {
                lv_unitType = 2;
            }
            else {
                lv_unitType = 1;
            }
            lv_spareproduction -= lv_unitCosts[lv_composition][lv_unitType];
            UnitCreate(1, gv_russianUnitTypes[lv_composition][lv_unitType], 0, 11, UnitGetPosition(UnitGroupRandomUnit(gv_possibleRussianSpawns, c_unitCountAlive)), 270.0);
            UnitGroupAdd(lv_unitTypeGroup[lv_composition], UnitLastCreated());
            lv_unitCount[0] += 1;
        }
    }
    if ((lv_spareproduction > 0)) {
        lv_compositionProductionTarget[1] = (lv_spareproduction / 5);
        lv_compositionProductionTarget[2] = (lv_spareproduction / 5);
        lv_compositionProductionTarget[3] = (lv_spareproduction / 5);
        lv_compositionProductionTarget[4] = (lv_spareproduction / 5);
        lv_compositionProductionTarget[5] = (lv_spareproduction / 5);
        lv_composition = 1;
        for ( ; ( (auto591B91BA_ai >= 0 && lv_composition <= auto591B91BA_ae) || (auto591B91BA_ai < 0 && lv_composition >= auto591B91BA_ae) ) ; lv_composition += auto591B91BA_ai ) {
            auto3AF48A43_n = (gv_russianUnitProductionTargets[lv_composition] * 5);
            for (auto3AF48A43_i = 1; auto3AF48A43_i <= auto3AF48A43_n; auto3AF48A43_i += 1) {
                if ((lv_compositionProductionTarget[lv_composition] > 0)) {
                    UnitBehaviorAdd(UnitGroupRandomUnit(lv_unitTypeGroup[lv_composition], c_unitCountAlive), "RussianDivision", gv_russianCities[3], 1);
                    lv_compositionProductionTarget[lv_composition] -= lv_unitCosts[lv_composition][2];
                }
                else {
                    break;
                }
            }
        }
    }

    return libNtve_gf_ArithmeticIntClamp(((((lv_compositionProductionTarget[1] + lv_compositionProductionTarget[2]) + lv_compositionProductionTarget[3]) + lv_compositionProductionTarget[4]) + lv_compositionProductionTarget[5]), 0, 500000);
}

void gf_UpdatePossibleRussianSpawns () {
    // Automatic Variable Declarations
    unitgroup auto9C74E0DD_g;
    int auto9C74E0DD_u;
    unit auto9C74E0DD_var;

    // Implementation
    UnitGroupRemoveUnitGroup(gv_possibleRussianSpawns, gv_possibleRussianSpawns);
    auto9C74E0DD_g = UnitGroup(null, 11, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterPsionic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9C74E0DD_u = UnitGroupCount(auto9C74E0DD_g, c_unitCountAll);
    for (;; auto9C74E0DD_u -= 1) {
        auto9C74E0DD_var = UnitGroupUnitFromEnd(auto9C74E0DD_g, auto9C74E0DD_u);
        if (auto9C74E0DD_var == null) { break; }
        if (((UnitGetType(auto9C74E0DD_var) == "RussianBarracks") || (UnitGetType(auto9C74E0DD_var) == "RussianBunker") || (UnitGetType(auto9C74E0DD_var) == "RussianFactory"))) {
            UnitGroupAdd(gv_possibleRussianSpawns, auto9C74E0DD_var);
        }

    }
    if ((gv_russianCitiesAlive[1] == true)) {
        UnitGroupAdd(gv_possibleRussianSpawns, gv_russianCities[1]);
    }

    if ((gv_russianCitiesAlive[2] == true)) {
        UnitGroupAdd(gv_possibleRussianSpawns, gv_russianCities[2]);
    }

    if ((gv_russianCitiesAlive[3] == true)) {
        UnitGroupAdd(gv_possibleRussianSpawns, gv_russianCities[3]);
    }

}

int gf_RussianExpansionsExpansionDefenseRussianNukes (int lp_production) {
    // Variable Declarations
    int lv_max4;
    int lv_nuclearDevCost;
    int lv_skyscrapercost;
    int lv_expansionCost;
    int lv_defenseCost;
    int lv_expansionType;
    point lv_expansionLocation;
    int lv_spareproduction;
    int lv_guessNukeCount;
    fixed lv_nukeDeviation;

    // Automatic Variable Declarations
    unitgroup autoC2A88958_g;
    int autoC2A88958_u;
    unit autoC2A88958_var;
    unitgroup auto7CA5D2D3_g;
    int auto7CA5D2D3_u;
    unit auto7CA5D2D3_var;
    unitgroup auto214A3C59_g;
    int auto214A3C59_u;
    unit auto214A3C59_var;

    // Variable Initialization
    lv_max4 = 4;
    lv_nuclearDevCost = (5000 * gv_rUNuclearProgress);
    lv_skyscrapercost = 6000;
    lv_expansionCost = 20000;
    lv_defenseCost = 10000;
    lv_spareproduction = lp_production;

    // Implementation
    if ((gv_rUNuclearProgress >= 3)) {
        if ((RandomInt(0, 100) < 20)) {
            if ((gv_rUNuclearProgress < 5)) {
                gv_rUNukes += libNtve_gf_ArithmeticIntClamp((Log2I(gv_rUNuclearProgress) * 1), 1, 10);
            }

        }

        autoC2A88958_g = UnitGroup("SensorTower22", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoC2A88958_u = UnitGroupCount(autoC2A88958_g, c_unitCountAll);
        for (;; autoC2A88958_u -= 1) {
            autoC2A88958_var = UnitGroupUnitFromEnd(autoC2A88958_g, autoC2A88958_u);
            if (autoC2A88958_var == null) { break; }
            lv_guessNukeCount += 1;
        }
        if ((RandomInt(lv_guessNukeCount, 100) > 70)) {
            lv_nukeDeviation = (0.5 / Log2(libNtve_gf_ArithmeticIntClamp((lv_guessNukeCount + 2), 1, 100)));
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (((StringExternal("Param/Value/34651A17") + gf_MakeUIPresentable(lv_guessNukeCount)) + StringExternal("Param/Value/BA2B41C7")) + (TextWithColor(gf_MakeUIPresentable(FixedToInt((IntToFixed(gv_rUNukes) * RandomFixed(libNtve_gf_ArithmeticRealClamp((0.5 + lv_nukeDeviation), 0.5, 1.0), libNtve_gf_ArithmeticRealClamp((1.5 - lv_nukeDeviation), 1.0, 1.5))))), Color(100.00, 0.00, 0.00)) + StringExternal("Param/Value/E43CD939"))));
        }

    }

    if ((lv_spareproduction > lv_nuclearDevCost) && (RandomInt(0, gv_arisAIDifficulty) > 60) && (RandomInt(0, gv_arisAIDifficulty) > 60) && (gv_rTechnology > (gv_rUNuclearProgress * 14000))) {
        lv_spareproduction -= lv_nuclearDevCost;
        gf_RUNuclearDevelopment();
    }

    while ((lv_spareproduction > 0) && (lv_max4 > 0)) {
        if ((lv_spareproduction > lv_skyscrapercost) && (gf_RussianSkyscraperShortage() > 0)) {
            if ((RandomInt(0, 100) < 33) && (gv_russianCitiesAlive[2] == true)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Skyscraper", 0, 11, UnitGetPosition(gv_russianCities[2]));
                lv_spareproduction -= lv_skyscrapercost;
            }
            else {
                if ((RandomInt(0, 100) < 33) && (gv_russianCitiesAlive[3] == true)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Skyscraper", 0, 11, UnitGetPosition(gv_russianCities[3]));
                    lv_spareproduction -= lv_skyscrapercost;
                }
                else {
                    if ((RandomInt(0, 100) < 33) && (gv_russianCitiesAlive[1] == true)) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Skyscraper", 0, 11, UnitGetPosition(gv_russianCities[1]));
                        lv_spareproduction -= lv_skyscrapercost;
                    }

                }
            }
        }

        auto7CA5D2D3_g = gv_possibleRussianSpawns;
        auto7CA5D2D3_u = UnitGroupCount(auto7CA5D2D3_g, c_unitCountAll);
        for (;; auto7CA5D2D3_u -= 1) {
            auto7CA5D2D3_var = UnitGroupUnitFromEnd(auto7CA5D2D3_g, auto7CA5D2D3_u);
            if (auto7CA5D2D3_var == null) { break; }
            if ((RandomInt(0, 100) < 25) && (auto7CA5D2D3_var != gv_russianCities[1]) && (auto7CA5D2D3_var != gv_russianCities[2]) && (auto7CA5D2D3_var != gv_russianCities[3])) {
                if ((gf_GetRussianDefensesAroundBase(auto7CA5D2D3_var) < libNtve_gf_ArithmeticIntClamp((gv_arisAIDifficulty / 20), 1, 8)) && (lv_spareproduction > lv_defenseCost)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewRussianFederationPeacekeeper", 0, 11, UnitGetPosition(auto7CA5D2D3_var));
                    lv_spareproduction -= lv_defenseCost;
                }

            }

        }
        if ((lv_spareproduction > lv_expansionCost) && (gf_CreateExpansion() == true)) {
            lv_spareproduction -= lv_expansionCost;
        }

        auto214A3C59_g = gv_possibleRussianSpawns;
        auto214A3C59_u = UnitGroupCount(auto214A3C59_g, c_unitCountAll);
        for (;; auto214A3C59_u -= 1) {
            auto214A3C59_var = UnitGroupUnitFromEnd(auto214A3C59_g, auto214A3C59_u);
            if (auto214A3C59_var == null) { break; }
            if ((RandomInt(0, 100) < 25) && (auto214A3C59_var != gv_russianCities[1]) && (auto214A3C59_var != gv_russianCities[2]) && (auto214A3C59_var != gv_russianCities[3])) {
                if ((gf_GetRussianDefensesAroundBase(auto214A3C59_var) < libNtve_gf_ArithmeticIntClamp((gv_arisAIDifficulty / 20), 1, 8)) && (lv_spareproduction > lv_defenseCost)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewRussianFederationPeacekeeper", 0, 11, UnitGetPosition(auto214A3C59_var));
                    lv_spareproduction -= lv_defenseCost;
                }

            }

        }
        lv_max4 -= 1;
    }
    return lv_spareproduction;
}

bool gf_CreateExpansion () {
    // Variable Declarations
    string lv_expansionType;
    point lv_expansionLocation;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_expansionType = gf_GetNewExpansionType();
    lv_expansionLocation = gf_GetNewBaseLocation();

    // Implementation
    if (((lv_expansionType == "") || (lv_expansionLocation == null))) {
        return false;
    }
    else {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_expansionType, 0, 11, lv_expansionLocation);
        if ((RegionContainsPoint(gv_russianDomain, lv_expansionLocation) == true)) {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextWithColor((StringExternal("Param/Value/2B9F822A") + StringToText(gf_GetCountyName(gf_GetCountyID(UnitLastCreated())))), Color(100.00, 0.00, 0.00)));
        }
        else {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextWithColor((StringExternal("Param/Value/89C0EAED") + StringToText(gf_GetCountyName(gf_GetCountyID(UnitLastCreated())))), Color(100.00, 0.00, 0.00)));
        }
        MinimapPing(PlayerGroupAll(), UnitGetPosition(UnitLastCreated()), 2.0, Color(100.00, 0.00, 0.00));
        MinimapPing(PlayerGroupAll(), UnitGetPosition(UnitLastCreated()), 2.0, Color(100.00, 0.00, 0.00));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewRussianFederationPeacekeeper", 0, 11, lv_expansionLocation);
        return true;
    }
}

string gf_GetNewExpansionType () {
    int init_i;

    // Variable Declarations
    int[4] lv_unitTypeCapacity;
    int[4] lv_unitCounts;
    int[4] lv_unitDemands;

    // Automatic Variable Declarations
    unitgroup auto66E9B0D0_g;
    int auto66E9B0D0_u;
    unit auto66E9B0D0_var;

    // Variable Initialization
    for (init_i = 0; init_i <= 3; init_i += 1) {
        lv_unitTypeCapacity[init_i] = libNtve_gf_ArithmeticIntClamp((gv_arisAIDifficulty / 25), 3, 10);
    }

    // Implementation
    auto66E9B0D0_g = gv_possibleRussianSpawns;
    auto66E9B0D0_u = UnitGroupCount(auto66E9B0D0_g, c_unitCountAll);
    for (;; auto66E9B0D0_u -= 1) {
        auto66E9B0D0_var = UnitGroupUnitFromEnd(auto66E9B0D0_g, auto66E9B0D0_u);
        if (auto66E9B0D0_var == null) { break; }
        if ((UnitGetType(auto66E9B0D0_var) == "RussianBunker")) {
            lv_unitCounts[1] += 1;
        }
        else {
            if ((UnitGetType(auto66E9B0D0_var) == "RussianResearchCenter")) {
                lv_unitCounts[2] += 1;
            }
            else {
                if ((UnitGetType(auto66E9B0D0_var) == "RussianFactory")) {
                    lv_unitCounts[3] += 1;
                }

            }
        }
    }
    lv_unitDemands[1] = (gv_russianUnitProductionTargets[1] + gv_russianUnitProductionTargets[5]);
    lv_unitDemands[2] = (gv_russianUnitProductionTargets[3] + gv_russianUnitProductionTargets[4]);
    lv_unitDemands[3] = (gv_russianUnitProductionTargets[2] + gv_russianUnitProductionTargets[4]);
    lv_unitDemands[1] += 1000;
    lv_unitDemands[2] += 1000;
    lv_unitDemands[3] += 1000;
    lv_unitDemands[1] *= (lv_unitTypeCapacity[1] - lv_unitCounts[1]);
    lv_unitDemands[2] *= (lv_unitTypeCapacity[2] - lv_unitCounts[2]);
    lv_unitDemands[3] *= (lv_unitTypeCapacity[3] - lv_unitCounts[3]);
    if ((lv_unitDemands[1] == 0) && (lv_unitDemands[2] == 0) && (lv_unitDemands[3] == 0)) {
        return "";
    }
    else {
        if ((lv_unitDemands[3] > lv_unitDemands[1])) {
            if ((lv_unitDemands[3] > lv_unitDemands[2])) {
                return "RussianFactory";
            }
            else {
                return "RussianResearchCenter";
            }
        }
        else {
            if ((lv_unitDemands[2] > lv_unitDemands[1])) {
                return "RussianResearchCenter";
            }
            else {
                return "RussianBunker";
            }
        }
    }
}

point gf_GetNewBaseLocation () {
    // Variable Declarations
    point lv_possiblePoint;

    // Automatic Variable Declarations
    const int autoB3891137_n = 200;
    int autoB3891137_i;
    const int autoDDFC85AD_n = 100;
    int autoDDFC85AD_i;
    const int auto21201349_n = 100;
    int auto21201349_i;

    // Variable Initialization

    // Implementation
    for (autoB3891137_i = 1; autoB3891137_i <= autoB3891137_n; autoB3891137_i += 1) {
        lv_possiblePoint = RegionRandomPoint(gv_russianFronter);
        if ((CliffLevel(lv_possiblePoint) == 1) && (RegionContainsPoint(RegionEntireMap(), lv_possiblePoint) == true) && (RegionContainsPoint(gv_russianDomain, lv_possiblePoint) == false) && (DistanceBetweenPoints(lv_possiblePoint, UnitGetPosition(UnitGroupClosestToPoint(UnitGroupAlliance(11, c_unitAllianceEnemy, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), lv_possiblePoint))) > 9.0) && (DistanceBetweenPoints(lv_possiblePoint, UnitGetPosition(UnitGroupClosestToPoint(UnitGroupAlliance(11, c_unitAllianceAlly, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), lv_possiblePoint))) > 6.0)) {
            return lv_possiblePoint;
        }

    }
    for (autoDDFC85AD_i = 1; autoDDFC85AD_i <= autoDDFC85AD_n; autoDDFC85AD_i += 1) {
        lv_possiblePoint = RegionRandomPoint(gv_russianFronter);
        if ((CliffLevel(lv_possiblePoint) == 1) && (RegionContainsPoint(RegionEntireMap(), lv_possiblePoint) == true) && (DistanceBetweenPoints(lv_possiblePoint, UnitGetPosition(UnitGroupClosestToPoint(UnitGroupAlliance(11, c_unitAllianceEnemy, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), lv_possiblePoint))) > 8.0) && (DistanceBetweenPoints(lv_possiblePoint, UnitGetPosition(UnitGroupClosestToPoint(UnitGroupAlliance(11, c_unitAllianceAlly, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), lv_possiblePoint))) > 6.0)) {
            return lv_possiblePoint;
        }

    }
    for (auto21201349_i = 1; auto21201349_i <= auto21201349_n; auto21201349_i += 1) {
        lv_possiblePoint = RegionRandomPoint(gv_russianDomain);
        if ((CliffLevel(lv_possiblePoint) == 1) && (RegionContainsPoint(RegionEntireMap(), lv_possiblePoint) == true) && (DistanceBetweenPoints(lv_possiblePoint, UnitGetPosition(UnitGroupClosestToPoint(UnitGroupAlliance(11, c_unitAllianceEnemy, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), lv_possiblePoint))) > 7.0) && (DistanceBetweenPoints(lv_possiblePoint, UnitGetPosition(UnitGroupClosestToPoint(UnitGroupAlliance(11, c_unitAllianceAlly, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), lv_possiblePoint))) > 3.0)) {
            return lv_possiblePoint;
        }

    }
    return null;
}

void gf_RussiaUnbunker () {
    // Automatic Variable Declarations
    unitgroup auto85F2874B_g;
    int auto85F2874B_u;
    unit auto85F2874B_var;

    // Implementation
    auto85F2874B_g = UnitGroup(null, 11, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto85F2874B_u = UnitGroupCount(auto85F2874B_g, c_unitCountAll);
    for (;; auto85F2874B_u -= 1) {
        auto85F2874B_var = UnitGroupUnitFromEnd(auto85F2874B_g, auto85F2874B_u);
        if (auto85F2874B_var == null) { break; }
        UnitIssueOrder(auto85F2874B_var, Order(AbilityCommand("SkyScraperBunker", 1)), c_orderQueueReplace);
        UnitIssueOrder(auto85F2874B_var, Order(AbilityCommand("HouseBunker", 1)), c_orderQueueReplace);
        UnitIssueOrder(auto85F2874B_var, Order(AbilityCommand("SkyScraperBunker2", 1)), c_orderQueueReplace);
        UnitIssueOrder(auto85F2874B_var, Order(AbilityCommand("AppartmentBunker", 1)), c_orderQueueReplace);
    }
}

void gf_RussianSpotPlayerUnitsGetDanger () {
    // Variable Declarations
    int lv_vari;
    int[8] lv_newSpottedUnits;

    // Automatic Variable Declarations
    unitgroup auto1D525239_g;
    int auto1D525239_u;
    unit auto1D525239_var;
    const int auto6C816F59_ae = 7;
    const int auto6C816F59_ai = 1;

    // Variable Initialization

    // Implementation
    auto1D525239_g = UnitGroupAlliance(11, c_unitAllianceEnemy, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterPsionic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto1D525239_u = UnitGroupCount(auto1D525239_g, c_unitCountAll);
    for (;; auto1D525239_u -= 1) {
        auto1D525239_var = UnitGroupUnitFromEnd(auto1D525239_g, auto1D525239_u);
        if (auto1D525239_var == null) { break; }
        if ((VisIsVisibleForPlayer(11, UnitGetPosition(auto1D525239_var)) == true)) {
            if ((UnitTypeTestAttribute(UnitGetType(auto1D525239_var), c_unitAttributeStructure) == true)) {
                if ((UnitGetType(auto1D525239_var) == "IgniterTurret")) {
                    lv_newSpottedUnits[7] += 30;
                }
                else {
                    if ((UnitGetType(auto1D525239_var) == "Lasturret")) {
                        lv_newSpottedUnits[7] += 20;
                        lv_newSpottedUnits[5] += 6;
                        lv_newSpottedUnits[2] += 6;
                    }
                    else {
                        if ((UnitGetType(auto1D525239_var) == "ImprovedLasturret")) {
                            lv_newSpottedUnits[7] += 40;
                            lv_newSpottedUnits[5] += 20;
                            lv_newSpottedUnits[2] += 20;
                        }
                        else {
                            if ((UnitGetType(auto1D525239_var) == "Flakker")) {
                                lv_newSpottedUnits[7] += 30;
                            }
                            else {
                                if ((UnitGetType(auto1D525239_var) == "SAM")) {
                                    lv_newSpottedUnits[7] += 80;
                                }
                                else {
                                    if ((UnitGetType(auto1D525239_var) == "BaPulseCannon")) {
                                        lv_newSpottedUnits[7] += 60;
                                        lv_newSpottedUnits[2] += 30;
                                    }
                                    else {
                                        if ((UnitGetType(auto1D525239_var) == "Hypercannon")) {
                                            lv_newSpottedUnits[7] += 120;
                                            lv_newSpottedUnits[2] += 80;
                                        }
                                        else {
                                            if ((UnitGetType(auto1D525239_var) == "Expounder")) {
                                                lv_newSpottedUnits[7] += 300;
                                            }
                                            else {
                                                if ((UnitGetType(auto1D525239_var) == "Bunker")) {
                                                    lv_newSpottedUnits[7] += 50;
                                                }
                                                else {
                                                    if ((UnitGetType(auto1D525239_var) == "Bastion")) {
                                                        lv_newSpottedUnits[7] += 300;
                                                    }

                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            else {
                if ((libNtve_gf_UnitInRegion(auto1D525239_var, gv_russianDomain) == true)) {
                    gv_russianDanger += 20;
                }

                if ((UnitGetType(auto1D525239_var) == "Conscript")) {
                    lv_newSpottedUnits[1] += 1;
                }
                else {
                    if ((UnitGetType(auto1D525239_var) == "Rifleman")) {
                        lv_newSpottedUnits[1] += 2;
                    }
                    else {
                        if ((UnitGetType(auto1D525239_var) == "AlphaMarine")) {
                            lv_newSpottedUnits[1] += 4;
                        }
                        else {
                            if ((UnitGetType(auto1D525239_var) == "Stormtrooper")) {
                                lv_newSpottedUnits[1] += 8;
                            }
                            else {
                                if ((UnitGetType(auto1D525239_var) == "Immolator")) {
                                    lv_newSpottedUnits[2] += 4;
                                }
                                else {
                                    if ((UnitGetType(auto1D525239_var) == "Knight")) {
                                        lv_newSpottedUnits[2] += 4;
                                        lv_newSpottedUnits[4] += 1;
                                        lv_newSpottedUnits[1] += 1;
                                    }
                                    else {
                                        if ((libNtve_gf_UnitInRegion(auto1D525239_var, gv_russianDomain) == true)) {
                                            gv_russianDanger += 100;
                                        }

                                        if ((UnitGetType(auto1D525239_var) == "LancerMBT")) {
                                            lv_newSpottedUnits[2] += 36;
                                            lv_newSpottedUnits[4] += 36;
                                        }
                                        else {
                                            if ((UnitGetType(auto1D525239_var) == "Phenom")) {
                                                lv_newSpottedUnits[2] += 24;
                                                lv_newSpottedUnits[4] += 8;
                                            }
                                            else {
                                                if (((UnitGetType(auto1D525239_var) == "CourierTH") || (UnitGetType(auto1D525239_var) == "StrikerAH"))) {
                                                    lv_newSpottedUnits[3] += 4;
                                                }
                                                else {
                                                    if ((UnitGetType(auto1D525239_var) == "ApolloBomber")) {
                                                        lv_newSpottedUnits[3] += 24;
                                                        lv_newSpottedUnits[2] += 4;
                                                    }
                                                    else {
                                                        if ((UnitGetType(auto1D525239_var) == "AstrosInterceptor")) {
                                                            lv_newSpottedUnits[3] += 18;
                                                        }
                                                        else {
                                                            if ((UnitGetType(auto1D525239_var) == "ViperFighter")) {
                                                                lv_newSpottedUnits[3] += 50;
                                                                lv_newSpottedUnits[2] += 10;
                                                            }
                                                            else {
                                                                if ((UnitGetType(auto1D525239_var) == "JavelinAH")) {
                                                                    lv_newSpottedUnits[3] += 24;
                                                                    lv_newSpottedUnits[5] += 8;
                                                                }
                                                                else {
                                                                    if ((UnitGetType(auto1D525239_var) == "ScorcherBomber")) {
                                                                        lv_newSpottedUnits[3] += 40;
                                                                    }
                                                                    else {
                                                                        if ((UnitGetType(auto1D525239_var) == "Dart")) {
                                                                            lv_newSpottedUnits[4] += 4;
                                                                        }
                                                                        else {
                                                                            if ((UnitGetType(auto1D525239_var) == "StormIFV")) {
                                                                                lv_newSpottedUnits[4] += 20;
                                                                            }
                                                                            else {
                                                                                if ((UnitGetType(auto1D525239_var) == "VanguardMBT")) {
                                                                                    lv_newSpottedUnits[4] += 64;
                                                                                }
                                                                                else {
                                                                                    if ((UnitGetType(auto1D525239_var) == "CrusaderMBT")) {
                                                                                        lv_newSpottedUnits[4] += 200;
                                                                                    }
                                                                                    else {
                                                                                        if ((UnitGetType(auto1D525239_var) == "Mortaliser")) {
                                                                                            lv_newSpottedUnits[5] += 4;
                                                                                        }
                                                                                        else {
                                                                                            if (((UnitGetType(auto1D525239_var) == "BasiliskSPA2") || (UnitGetType(auto1D525239_var) == "BasiliskSPA"))) {
                                                                                                lv_newSpottedUnits[5] += 16;
                                                                                                lv_newSpottedUnits[4] += 4;
                                                                                            }
                                                                                            else {
                                                                                                if ((UnitGetType(auto1D525239_var) == "StrikeTrooper")) {
                                                                                                    lv_newSpottedUnits[5] += 8;
                                                                                                }

                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

    }
    gf_DecayRussianSpotandDanger();
    lv_vari = 1;
    for ( ; ( (auto6C816F59_ai >= 0 && lv_vari <= auto6C816F59_ae) || (auto6C816F59_ai < 0 && lv_vari >= auto6C816F59_ae) ) ; lv_vari += auto6C816F59_ai ) {
        gv_russianDanger += lv_newSpottedUnits[lv_vari];
        gv_spottedPlayerUnits[lv_vari] += lv_newSpottedUnits[lv_vari];
    }
}

void gf_RussianUnitDivisonTarget () {
    // Variable Declarations
    int lv_biggestFactorNumber;
    int lv_biggestFactor;
    int lv_totalNormalized;
    int[8] lv_normalizedValues;
    int[8] lv_targetValues;
    int lv_totalValue;

    // Automatic Variable Declarations
    unitgroup auto947C6C4C_g;
    int auto947C6C4C_u;
    unit auto947C6C4C_var;
    unitgroup autoADE63003_g;
    int autoADE63003_u;
    unit autoADE63003_var;
    unitgroup auto3DF27C29_g;
    int auto3DF27C29_u;
    unit auto3DF27C29_var;
    unitgroup autoAFAF01B1_g;
    int autoAFAF01B1_u;
    unit autoAFAF01B1_var;
    const int auto8521A09B_ae = 7;
    int auto8521A09B_var;
    const int auto7749D01F_ae = 7;
    int auto7749D01F_var;
    const int auto63A8D8CE_ae = 7;
    int auto63A8D8CE_var;
    const int autoBCBEA946_ae = 7;
    int autoBCBEA946_var;

    // Variable Initialization

    // Implementation
    if ((gv_russianCitiesAlive[3] == true)) {
        lv_targetValues[1] = ((gv_spottedPlayerUnits[1] / 3) + ((gv_spottedPlayerUnits[2] / 2) + ((gv_spottedPlayerUnits[3] / 4) - ((gv_spottedPlayerUnits[4] / 2) - ((gv_spottedPlayerUnits[5] / 10) - (gv_spottedPlayerUnits[7] / 10))))));
    }

    lv_targetValues[2] = ((gv_spottedPlayerUnits[1] / -5) + ((gv_spottedPlayerUnits[2] / 3) + ((gv_spottedPlayerUnits[3] / -8) + ((gv_spottedPlayerUnits[4] / 2) + ((gv_spottedPlayerUnits[5] / -10) + (gv_spottedPlayerUnits[7] / 3))))));
    lv_targetValues[3] = ((gv_spottedPlayerUnits[1] / 10) + ((gv_spottedPlayerUnits[2] / 2) + ((gv_spottedPlayerUnits[3] / 2) + ((gv_spottedPlayerUnits[4] / 8) + ((gv_spottedPlayerUnits[5] / 8) + (gv_spottedPlayerUnits[7] / -2))))));
    lv_targetValues[4] = ((gv_spottedPlayerUnits[1] / 3) + ((gv_spottedPlayerUnits[2] / -1) + ((gv_spottedPlayerUnits[3] / -2) + ((gv_spottedPlayerUnits[4] / 12) + ((gv_spottedPlayerUnits[5] / 6) + (gv_spottedPlayerUnits[7] / 6))))));
    auto947C6C4C_g = UnitGroup("RussianFactory", 11, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto947C6C4C_u = UnitGroupCount(auto947C6C4C_g, c_unitCountAll);
    for (;; auto947C6C4C_u -= 1) {
        auto947C6C4C_var = UnitGroupUnitFromEnd(auto947C6C4C_g, auto947C6C4C_u);
        if (auto947C6C4C_var == null) { break; }
        lv_targetValues[4] /= 2;
        lv_targetValues[4] *= 3;
    }
    autoADE63003_g = UnitGroup("RussianBarracks", 11, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoADE63003_u = UnitGroupCount(autoADE63003_g, c_unitCountAll);
    for (;; autoADE63003_u -= 1) {
        autoADE63003_var = UnitGroupUnitFromEnd(autoADE63003_g, autoADE63003_u);
        if (autoADE63003_var == null) { break; }
        lv_targetValues[1] /= 2;
        lv_targetValues[1] *= 3;
    }
    if ((gv_russianCitiesAlive[1] == true)) {
        autoAFAF01B1_g = UnitGroup("OilWellII", 11, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoAFAF01B1_u = UnitGroupCount(autoAFAF01B1_g, c_unitCountAll);
        for (;; autoAFAF01B1_u -= 1) {
            autoAFAF01B1_var = UnitGroupUnitFromEnd(autoAFAF01B1_g, autoAFAF01B1_u);
            if (autoAFAF01B1_var == null) { break; }
            lv_targetValues[4] /= 4;
            lv_targetValues[4] *= 5;
        }
    }
    else {
        lv_targetValues[4] /= 100;
        auto3DF27C29_g = UnitGroup("OilWellII", 11, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto3DF27C29_u = UnitGroupCount(auto3DF27C29_g, c_unitCountAll);
        for (;; auto3DF27C29_u -= 1) {
            auto3DF27C29_var = UnitGroupUnitFromEnd(auto3DF27C29_g, auto3DF27C29_u);
            if (auto3DF27C29_var == null) { break; }
            lv_targetValues[4] *= 20;
        }
    }
    lv_targetValues[5] = ((gv_spottedPlayerUnits[1] / 1) + ((gv_spottedPlayerUnits[2] / 20) + ((gv_spottedPlayerUnits[3] / -10) + ((gv_spottedPlayerUnits[4] / -2) + ((gv_spottedPlayerUnits[5] / 2) + (gv_spottedPlayerUnits[7] / -10))))));
    lv_targetValues[6] = (gv_russianDanger / 5);
    if ((gv_russianCitiesAlive[1] == false)) {
        lv_targetValues[6] *= 2;
    }

    if ((gv_russianCitiesAlive[2] == false)) {
        lv_targetValues[6] *= 2;
    }

    lv_targetValues[7] = ((gv_russianDanger / 20) * (gf_RussianDefenseShortage() / 10));
    auto8521A09B_var = 1;
    for ( ; auto8521A09B_var <= auto8521A09B_ae; auto8521A09B_var += 1 ) {
        lv_targetValues[auto8521A09B_var] = libNtve_gf_ArithmeticIntClamp(lv_targetValues[auto8521A09B_var], 100, 1000000);
        lv_totalValue += lv_targetValues[auto8521A09B_var];
    }
    lv_totalValue /= 100;
    auto7749D01F_var = 1;
    for ( ; auto7749D01F_var <= auto7749D01F_ae; auto7749D01F_var += 1 ) {
        if (((auto7749D01F_var == 7) || (auto7749D01F_var == 6))) {
            lv_normalizedValues[auto7749D01F_var] = libNtve_gf_ArithmeticIntClamp((lv_targetValues[auto7749D01F_var] / lv_totalValue), 5, 25);
        }
        else {
            lv_normalizedValues[auto7749D01F_var] = libNtve_gf_ArithmeticIntClamp((lv_targetValues[auto7749D01F_var] / lv_totalValue), 5, 65);
        }
        lv_totalNormalized += lv_normalizedValues[auto7749D01F_var];
    }
    while ((lv_totalNormalized > 100)) {
        lv_biggestFactorNumber = 0;
        auto63A8D8CE_var = 1;
        for ( ; auto63A8D8CE_var <= auto63A8D8CE_ae; auto63A8D8CE_var += 1 ) {
            if ((lv_targetValues[auto63A8D8CE_var] > lv_biggestFactorNumber)) {
                lv_biggestFactorNumber = lv_targetValues[auto63A8D8CE_var];
                lv_biggestFactor = auto63A8D8CE_var;
            }

        }
        lv_normalizedValues[lv_biggestFactor] -= 1;
        lv_totalNormalized -= 1;
    }
    autoBCBEA946_var = 1;
    for ( ; autoBCBEA946_var <= autoBCBEA946_ae; autoBCBEA946_var += 1 ) {
        gv_russianUnitProductionTargets[autoBCBEA946_var] = lv_normalizedValues[autoBCBEA946_var];
    }
}

void gf_DecayRussianSpotandDanger () {
    // Variable Declarations
    int lv_n;
    int lv_decayRate;

    // Automatic Variable Declarations
    const int autoB0455BD7_ae = 7;
    const int autoB0455BD7_ai = 1;

    // Variable Initialization
    lv_decayRate = 7;

    // Implementation
    lv_n = 1;
    for ( ; ( (autoB0455BD7_ai >= 0 && lv_n <= autoB0455BD7_ae) || (autoB0455BD7_ai < 0 && lv_n >= autoB0455BD7_ae) ) ; lv_n += autoB0455BD7_ai ) {
        gv_spottedPlayerUnits[lv_n] /= 10;
        gv_spottedPlayerUnits[lv_n] *= lv_decayRate;
    }
    gv_russianDanger /= 10;
    gv_russianDanger *= lv_decayRate;
}

void gf_UnitTypeUpdate () {
    // Automatic Variable Declarations
    // Implementation
    gv_russianUnitTypes[6][1] = "RussianGuerrilla";
    gv_russianUnitTypes[6][2] = "RussianGuerrilla";
    gv_russianUnitTypes[7][1] = "RussianRod";
    gv_russianUnitTypes[7][2] = "RussianHypercannon";
    gv_russianUnitTypes[1][1] = "Conscript";
    gv_russianUnitTypes[1][2] = "Rifleman";
    gv_russianUnitTypes[2][1] = "Conscript";
    gv_russianUnitTypes[2][2] = "Rifleman";
    gv_russianUnitTypes[3][1] = "Conscript";
    gv_russianUnitTypes[3][2] = "Rifleman";
    gv_russianUnitTypes[4][1] = "Conscript";
    gv_russianUnitTypes[4][2] = "Rifleman";
    gv_russianUnitTypes[5][1] = "Conscript";
    gv_russianUnitTypes[5][2] = "Rifleman";
    if ((gv_rTechnology > 10000)) {
        gv_russianUnitTypes[2][1] = "Mortaliser";
        gv_russianUnitTypes[2][2] = "Immolator";
    }

    if ((gv_rTechnology > 15000)) {
        gv_russianUnitTypes[3][1] = "StrikerAH";
        gv_russianUnitTypes[3][2] = "AstrosInterceptor";
    }

    if ((gv_rTechnology > 20000)) {
        gv_russianUnitTypes[4][1] = "Dart";
        gv_russianUnitTypes[4][2] = "StormIFV";
    }

    if ((gv_rTechnology > 25000)) {
        gv_russianUnitTypes[5][1] = "Immolator";
        gv_russianUnitTypes[5][2] = "StrikeTrooper";
    }

    if ((gv_rTechnology > 30000)) {
        gv_russianUnitTypes[1][1] = "Rifleman";
        gv_russianUnitTypes[1][2] = "AlphaMarine";
    }

    if ((gv_rTechnology > 35000)) {
        gv_russianUnitTypes[2][1] = "Immolator";
        gv_russianUnitTypes[2][2] = "Immolator";
    }

    if ((gv_rTechnology > 40000)) {
        gv_russianUnitTypes[3][1] = "ScorcherBomber";
        gv_russianUnitTypes[3][2] = "AstrosInterceptor";
    }

    if ((gv_rTechnology > 45000)) {
        gv_russianUnitTypes[4][1] = "StormIFV";
        gv_russianUnitTypes[4][2] = "LancerMBT";
    }

    if ((gv_rTechnology > 50000)) {
        gv_russianUnitTypes[5][1] = "StrikeTrooper";
        gv_russianUnitTypes[5][2] = "StrikeTrooper";
    }

    if ((gv_rTechnology > 55000)) {
        gv_russianUnitTypes[1][1] = "AlphaMarine";
        gv_russianUnitTypes[1][2] = "Stormtrooper";
    }

    if ((gv_rTechnology > 60000)) {
        gv_russianUnitTypes[2][1] = "Immolator";
        gv_russianUnitTypes[2][2] = "Equaliser";
    }

    if ((gv_rTechnology > 65000)) {
        gv_russianUnitTypes[3][1] = "ScorcherBomber";
        gv_russianUnitTypes[3][2] = "ViperFighter";
    }

    if ((gv_rTechnology > 70000)) {
        gv_russianUnitTypes[4][1] = "LancerMBT";
        gv_russianUnitTypes[4][2] = "VanguardMBT";
    }

    if ((gv_rTechnology > 75000)) {
        gv_russianUnitTypes[5][1] = "StrikeTrooper";
        gv_russianUnitTypes[5][2] = "Equaliser";
    }

    if ((gv_rTechnology > 80000)) {
        gv_russianUnitTypes[1][1] = "Stormtrooper";
        gv_russianUnitTypes[1][2] = "Stormtrooper";
    }

    if ((gv_rTechnology > 85000)) {
        gv_russianUnitTypes[2][1] = "Equaliser";
        gv_russianUnitTypes[2][2] = "LancerMBT";
    }

    if ((gv_rTechnology > 90000)) {
        gv_russianUnitTypes[3][1] = "ViperFighter";
        gv_russianUnitTypes[3][2] = "ScorcherBomber";
    }

    if ((gv_rTechnology > 95000)) {
        gv_russianUnitTypes[4][1] = "LancerMBT";
        gv_russianUnitTypes[4][2] = "CrusaderMBT";
    }

}

int gf_GetRussianDefensesAroundBase (unit lp_base) {
    // Variable Declarations
    int lv_unitcount;

    // Automatic Variable Declarations
    unitgroup autoD66E5444_g;
    int autoD66E5444_u;
    unit autoD66E5444_var;

    // Variable Initialization

    // Implementation
    autoD66E5444_g = UnitGroup("NewRussianFederationPeacekeeper", 11, RegionCircle(UnitGetPosition(lp_base), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD66E5444_u = UnitGroupCount(autoD66E5444_g, c_unitCountAll);
    for (;; autoD66E5444_u -= 1) {
        autoD66E5444_var = UnitGroupUnitFromEnd(autoD66E5444_g, autoD66E5444_u);
        if (autoD66E5444_var == null) { break; }
        lv_unitcount += 1;
    }
    return lv_unitcount;
}

void gf_RussianCapiutlate () {
    // Automatic Variable Declarations
    unitgroup autoB98D9EA6_g;
    int autoB98D9EA6_u;
    unit autoB98D9EA6_var;

    // Implementation
    gv_russiansCapitulate = true;
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/A58A7953"));
    autoB98D9EA6_g = UnitGroup(null, 11, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB98D9EA6_u = UnitGroupCount(autoB98D9EA6_g, c_unitCountAll);
    for (;; autoB98D9EA6_u -= 1) {
        autoB98D9EA6_var = UnitGroupUnitFromEnd(autoB98D9EA6_g, autoB98D9EA6_u);
        if (autoB98D9EA6_var == null) { break; }
        UnitRemove(EventUnit());
        Wait(0.1, c_timeGame);
    }
    SoundPlayForPlayer(SoundLink("Stukov_Ready", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    TriggerEnable(gt_RussianEconomy, false);
    SoundPlayForPlayer(SoundLink("Victory_Russia", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
}

int gf_RussianSkyscraperShortage () {
    // Variable Declarations
    int lv_currentskyscraper;

    // Automatic Variable Declarations
    unitgroup auto2D2B1B5C_g;
    int auto2D2B1B5C_u;
    unit auto2D2B1B5C_var;
    unitgroup auto21C976A2_g;
    int auto21C976A2_u;
    unit auto21C976A2_var;

    // Variable Initialization

    // Implementation
    auto2D2B1B5C_g = UnitGroup(null, 11, RegionEntireMap(), UnitFilter((1 << c_targetFilterPsionic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto2D2B1B5C_u = UnitGroupCount(auto2D2B1B5C_g, c_unitCountAll);
    for (;; auto2D2B1B5C_u -= 1) {
        auto2D2B1B5C_var = UnitGroupUnitFromEnd(auto2D2B1B5C_g, auto2D2B1B5C_u);
        if (auto2D2B1B5C_var == null) { break; }
        lv_currentskyscraper += 1;
    }
    auto21C976A2_g = UnitGroup("Ruins", 11, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto21C976A2_u = UnitGroupCount(auto21C976A2_g, c_unitCountAll);
    for (;; auto21C976A2_u -= 1) {
        auto21C976A2_var = UnitGroupUnitFromEnd(auto21C976A2_g, auto21C976A2_u);
        if (auto21C976A2_var == null) { break; }
        lv_currentskyscraper += 1;
    }
    return libNtve_gf_ArithmeticIntClamp((gv_baseRussianSkyscraper - lv_currentskyscraper), 0, 500);
}

int gf_RussianDefenseShortage () {
    // Variable Declarations
    int lv_totalShortage;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_totalShortage += gv_baseRussianDefenses[1];
    lv_totalShortage += gv_baseRussianDefenses[2];
    lv_totalShortage += gv_baseRussianDefenses[3];
    lv_totalShortage -= gf_GetRussianDefensesAroundBase(gv_russianCities[1]);
    lv_totalShortage -= gf_GetRussianDefensesAroundBase(gv_russianCities[2]);
    lv_totalShortage -= gf_GetRussianDefensesAroundBase(gv_russianCities[3]);
    return libNtve_gf_ArithmeticIntClamp(lv_totalShortage, 0, 500);
}

void gf_AmericansCapitulate () {
    // Automatic Variable Declarations
    unitgroup auto09AEFBA1_g;
    int auto09AEFBA1_u;
    unit auto09AEFBA1_var;

    // Implementation
    gv_americansCapitulate = true;
    TriggerEnable(gt_AmericanScript, false);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/7F3E4C55"));
    SoundPlayForPlayer(SoundLink("MarSaraidlesTychusTychus00002", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(4.0, c_timeGame);
    SoundPlayForPlayer(SoundLink("Victory_Russia", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    auto09AEFBA1_g = UnitGroup(null, 10, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto09AEFBA1_u = UnitGroupCount(auto09AEFBA1_g, c_unitCountAll);
    for (;; auto09AEFBA1_u -= 1) {
        auto09AEFBA1_var = UnitGroupUnitFromEnd(auto09AEFBA1_g, auto09AEFBA1_u);
        if (auto09AEFBA1_var == null) { break; }
        if ((UnitTypeTestAttribute(UnitGetType(auto09AEFBA1_var), c_unitAttributePsionic) == true)) {
            UnitSetOwner(auto09AEFBA1_var, UnitGetOwner(UnitGroupClosestToPoint(UnitGroupAlliance(10, c_unitAllianceEnemy, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(auto09AEFBA1_var))), true);
        }
        else {
            UnitRemove(auto09AEFBA1_var);
        }
        Wait(0.1, c_timeGame);
    }
    TriggerEnable(gt_KenedysLife, false);
}

int gf_CapitolSafety () {
    // Automatic Variable Declarations
    unitgroup auto05292F87_g;
    int auto05292F87_u;
    unit auto05292F87_var;
    unitgroup auto97FE82CA_g;
    int auto97FE82CA_u;
    unit auto97FE82CA_var;
    unitgroup autoCE08A15F_g;
    int autoCE08A15F_u;
    unit autoCE08A15F_var;
    unitgroup autoDEC7CCA5_g;
    int autoDEC7CCA5_u;
    unit autoDEC7CCA5_var;
    unitgroup auto5E56DCCF_g;
    int auto5E56DCCF_u;
    unit auto5E56DCCF_var;
    unitgroup auto260F6C33_g;
    int auto260F6C33_u;
    unit auto260F6C33_var;

    // Implementation
    if ((gv_newYorkAlive == false)) {
        return 2;
    }

    auto05292F87_g = UnitGroupAlliance(10, c_unitAllianceEnemy, RegionFromId(8), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto05292F87_u = UnitGroupCount(auto05292F87_g, c_unitCountAll);
    for (;; auto05292F87_u -= 1) {
        auto05292F87_var = UnitGroupUnitFromEnd(auto05292F87_g, auto05292F87_u);
        if (auto05292F87_var == null) { break; }
        return 1;
    }
    auto97FE82CA_g = UnitGroupAlliance(10, c_unitAllianceEnemy, RegionFromId(4), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto97FE82CA_u = UnitGroupCount(auto97FE82CA_g, c_unitCountAll);
    for (;; auto97FE82CA_u -= 1) {
        auto97FE82CA_var = UnitGroupUnitFromEnd(auto97FE82CA_g, auto97FE82CA_u);
        if (auto97FE82CA_var == null) { break; }
        return 1;
    }
    autoCE08A15F_g = UnitGroupAlliance(10, c_unitAllianceEnemy, RegionFromId(2), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoCE08A15F_u = UnitGroupCount(autoCE08A15F_g, c_unitCountAll);
    for (;; autoCE08A15F_u -= 1) {
        autoCE08A15F_var = UnitGroupUnitFromEnd(autoCE08A15F_g, autoCE08A15F_u);
        if (autoCE08A15F_var == null) { break; }
        return 1;
    }
    autoDEC7CCA5_g = UnitGroupAlliance(10, c_unitAllianceEnemy, RegionFromId(3), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoDEC7CCA5_u = UnitGroupCount(autoDEC7CCA5_g, c_unitCountAll);
    for (;; autoDEC7CCA5_u -= 1) {
        autoDEC7CCA5_var = UnitGroupUnitFromEnd(autoDEC7CCA5_g, autoDEC7CCA5_u);
        if (autoDEC7CCA5_var == null) { break; }
        return 1;
    }
    auto5E56DCCF_g = UnitGroupAlliance(10, c_unitAllianceEnemy, RegionFromId(7), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto5E56DCCF_u = UnitGroupCount(auto5E56DCCF_g, c_unitCountAll);
    for (;; auto5E56DCCF_u -= 1) {
        auto5E56DCCF_var = UnitGroupUnitFromEnd(auto5E56DCCF_g, auto5E56DCCF_u);
        if (auto5E56DCCF_var == null) { break; }
        return 1;
    }
    auto260F6C33_g = UnitGroupAlliance(10, c_unitAllianceEnemy, RegionFromId(6), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto260F6C33_u = UnitGroupCount(auto260F6C33_g, c_unitCountAll);
    for (;; auto260F6C33_u -= 1) {
        auto260F6C33_var = UnitGroupUnitFromEnd(auto260F6C33_g, auto260F6C33_u);
        if (auto260F6C33_var == null) { break; }
        return 1;
    }
    return 0;
}

int gf_GetNumberOfInvasions () {
    // Variable Declarations
    int lv_invasions;

    // Automatic Variable Declarations
    unitgroup autoB45D7F21_g;
    int autoB45D7F21_u;
    unit autoB45D7F21_var;
    unitgroup auto161E40A9_g;
    int auto161E40A9_u;
    unit auto161E40A9_var;

    // Variable Initialization

    // Implementation
    autoB45D7F21_g = UnitGroup("HerculesLanderFlying", 10, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB45D7F21_u = UnitGroupCount(autoB45D7F21_g, c_unitCountAll);
    for (;; autoB45D7F21_u -= 1) {
        autoB45D7F21_var = UnitGroupUnitFromEnd(autoB45D7F21_g, autoB45D7F21_u);
        if (autoB45D7F21_var == null) { break; }
        lv_invasions += 1;
    }
    auto161E40A9_g = UnitGroup("AmericanBarracks", 10, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto161E40A9_u = UnitGroupCount(auto161E40A9_g, c_unitCountAll);
    for (;; auto161E40A9_u -= 1) {
        auto161E40A9_var = UnitGroupUnitFromEnd(auto161E40A9_g, auto161E40A9_u);
        if (auto161E40A9_var == null) { break; }
        lv_invasions += 1;
    }
    return lv_invasions;
}

void gf_SendInvasion () {
    // Variable Declarations
    unit lv_invader;
    point lv_target;

    // Automatic Variable Declarations
    const int autoAEF7BF69_n = 2;
    int autoAEF7BF69_i;

    // Variable Initialization

    // Implementation
    if ((gf_GetNumberOfInvasions() <= libNtve_gf_ArithmeticIntClamp((gv_arisAIDifficulty / 25), 2, 10)) && (RandomInt(0, ((libNtve_gf_ArithmeticIntClamp((gv_arisAIDifficulty * 2), 80, 200) - (gf_GetNumberOfInvasions() * 5)) / 2)) > 34) && (RandomInt(0, 1) == 1)) {
        lv_target = gf_GetInvasionExpansionLocation();
        if ((lv_target == null)) {
        }
        else {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "HerculesLanderFlying", 0, 10, RegionRandomPoint(RegionFromId(63)));
            lv_invader = UnitLastCreated();
            UnitCargoCreate(UnitLastCreated(), "RaynorLab", ((gv_arisAIDifficulty / 5) + 1));
            libLbty_gf_OrderTransporttoUnloadAllthenDespawn(UnitLastCreated(), lv_target, RegionRandomPoint(RegionFromId(63)));
            Wait(5.0, c_timeGame);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/4B11D8C6"));
            MinimapPing(PlayerGroupAll(), UnitGetPosition(lv_invader), 2.0, Color(100.00, 0.00, 0.00));
            Wait(1.0, c_timeGame);
            MinimapPing(PlayerGroupAll(), UnitGetPosition(lv_invader), 2.0, Color(100.00, 0.00, 0.00));
            Wait(1.0, c_timeGame);
            MinimapPing(PlayerGroupAll(), UnitGetPosition(lv_invader), 2.0, Color(100.00, 0.00, 0.00));
            Wait(5.0, c_timeGame);
            if ((gv_uSNukes > 10) && (gv_modifiedAIDifficulty > 80)) {
                gf_USNuke();
            }
            else {
                gf_USDoTheNuke();
            }
            for (autoAEF7BF69_i = 1; autoAEF7BF69_i <= autoAEF7BF69_n; autoAEF7BF69_i += 1) {
                if ((UnitGroupCount(UnitGroup(null, 10, RegionCircle(lv_target, 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= UnitGroupCount(UnitGroupAlliance(10, c_unitAllianceEnemy, RegionCircle(lv_target, 6.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive))) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "AmericanBarracks", 0, 10, lv_target);
                    Wait(1.0, c_timeGame);
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MissileTurret22", 0, 10, lv_target);
                    break;
                }

                Wait(10.0, c_timeGame);
            }
        }
    }

}

void gf_RespawnAmericans () {
    // Variable Declarations
    int lv_uSCount;
    int lv_uSForcelimit;

    // Automatic Variable Declarations
    unitgroup auto475EC137_g;
    int auto475EC137_u;
    unit auto475EC137_var;
    unitgroup autoE6213F93_g;
    int autoE6213F93_u;
    unit autoE6213F93_var;
    int auto7B86C723_n;
    int auto7B86C723_i;
    unitgroup auto1D56020B_g;
    int auto1D56020B_u;
    unit auto1D56020B_var;

    // Variable Initialization
    lv_uSForcelimit = libNtve_gf_ArithmeticIntClamp((gv_arisAIDifficulty / 2), 20, 100);

    // Implementation
    auto475EC137_g = UnitGroup("RaynorCommando", 10, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto475EC137_u = UnitGroupCount(auto475EC137_g, c_unitCountAll);
    for (;; auto475EC137_u -= 1) {
        auto475EC137_var = UnitGroupUnitFromEnd(auto475EC137_g, auto475EC137_u);
        if (auto475EC137_var == null) { break; }
        lv_uSCount += 1;
    }
    autoE6213F93_g = UnitGroup("RaynorLab", 10, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE6213F93_u = UnitGroupCount(autoE6213F93_g, c_unitCountAll);
    for (;; autoE6213F93_u -= 1) {
        autoE6213F93_var = UnitGroupUnitFromEnd(autoE6213F93_g, autoE6213F93_u);
        if (autoE6213F93_var == null) { break; }
        lv_uSCount += 1;
    }
    if ((gf_GetNumberOfInvasions() > 0)) {
        auto7B86C723_n = libNtve_gf_ArithmeticIntClamp((lv_uSForcelimit - lv_uSCount), 0, 5);
        for (auto7B86C723_i = 1; auto7B86C723_i <= auto7B86C723_n; auto7B86C723_i += 1) {
            auto1D56020B_g = UnitGroup("AmericanBarracks", 10, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto1D56020B_u = UnitGroupCount(auto1D56020B_g, c_unitCountAll);
            for (;; auto1D56020B_u -= 1) {
                auto1D56020B_var = UnitGroupUnitFromEnd(auto1D56020B_g, auto1D56020B_u);
                if (auto1D56020B_var == null) { break; }
                if ((lv_uSCount <= lv_uSForcelimit)) {
                    if ((ModI(lv_uSCount, 5) == 0)) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "RaynorCommando", 0, 10, UnitGetPosition(auto1D56020B_var));
                    }
                    else {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "RaynorLab", 0, 10, UnitGetPosition(auto1D56020B_var));
                    }
                    lv_uSCount += 1;
                }

            }
        }
    }

}

point gf_GetInvasionExpansionLocation () {
    // Variable Declarations
    point lv_possiblePoint;

    // Automatic Variable Declarations
    const int auto7C95FFBD_n = 50;
    int auto7C95FFBD_i;

    // Variable Initialization

    // Implementation
    for (auto7C95FFBD_i = 1; auto7C95FFBD_i <= auto7C95FFBD_n; auto7C95FFBD_i += 1) {
        lv_possiblePoint = RegionRandomPoint(RegionFromId(5));
        if ((CliffLevel(lv_possiblePoint) == 1) && (RegionContainsPoint(RegionFromId(47), lv_possiblePoint) != true) && (RegionContainsPoint(RegionFromId(39), lv_possiblePoint) != true) && (RegionContainsPoint(RegionFromId(34), lv_possiblePoint) != true) && (RegionContainsPoint(RegionFromId(77), lv_possiblePoint) != true) && (RegionContainsPoint(RegionEntireMap(), lv_possiblePoint) == true) && (DistanceBetweenPoints(lv_possiblePoint, UnitGetPosition(UnitGroupClosestToPoint(UnitGroupAlliance(10, c_unitAllianceAlly, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), lv_possiblePoint))) > 6.0)) {
            return lv_possiblePoint;
        }

    }
    return null;
}

void gf_SafeCapitolScript () {
    // Automatic Variable Declarations
    // Implementation
    gf_RemoveAmericanGuerilla();
    gf_SendInvasion();
    gf_RespawnAmericans();
    if ((RandomInt(0, 1) == 1)) {
        gf_DevelopNukes();
    }

}

void gf_UnsafeCapitolScript () {
    // Automatic Variable Declarations
    // Implementation
    gf_RespawnAmericans();
    gf_RaiseGuerilla();
    gf_USNuke();
    if ((RandomInt(0, 1) == 1)) {
        gf_DevelopNukes();
    }

}

void gf_LostCapitolScript () {
    // Automatic Variable Declarations
    // Implementation
    gf_RaiseGuerilla();
    if ((gf_AmericanSurrender() == true)) {
        gf_AmericansCapitulate();
    }
    else {
        gf_USNuke();
    }
}

void gf_RemoveAmericanGuerilla () {
    // Automatic Variable Declarations
    unitgroup autoFE4E7A92_g;
    int autoFE4E7A92_u;
    unit autoFE4E7A92_var;

    // Implementation
    autoFE4E7A92_g = UnitGroup(null, 10, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoFE4E7A92_u = UnitGroupCount(autoFE4E7A92_g, c_unitCountAll);
    for (;; autoFE4E7A92_u -= 1) {
        autoFE4E7A92_var = UnitGroupUnitFromEnd(autoFE4E7A92_g, autoFE4E7A92_u);
        if (autoFE4E7A92_var == null) { break; }
        if ((UnitGetType(autoFE4E7A92_var) != "AmericanGuard") && (UnitGetType(autoFE4E7A92_var) != "RaynorLab") && (UnitGetType(autoFE4E7A92_var) != "ViperFighter") && (UnitGetType(autoFE4E7A92_var) != "RaynorCommando") && (UnitGetType(autoFE4E7A92_var) != "UASKenedyIV")) {
            UnitRemove(autoFE4E7A92_var);
        }

    }
}

void gf_RaiseGuerilla () {
    // Variable Declarations
    string lv_gotUnit;
    int lv_uSForcelimit;
    int lv_uSCount;
    int lv_gotGuards;

    // Automatic Variable Declarations
    unitgroup auto371CD005_g;
    int auto371CD005_u;
    unit auto371CD005_var;
    unitgroup auto47D8B36F_g;
    int auto47D8B36F_u;
    unit auto47D8B36F_var;

    // Variable Initialization
    lv_uSForcelimit = libNtve_gf_ArithmeticIntClamp(gv_arisAIDifficulty, 20, 100);

    // Implementation
    auto371CD005_g = UnitGroup(null, 10, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto371CD005_u = UnitGroupCount(auto371CD005_g, c_unitCountAll);
    for (;; auto371CD005_u -= 1) {
        auto371CD005_var = UnitGroupUnitFromEnd(auto371CD005_g, auto371CD005_u);
        if (auto371CD005_var == null) { break; }
        if (((UnitGetType(auto371CD005_var) == "RaynorLab") || (UnitGetType(auto371CD005_var) == "AmericanGuard") || (UnitGetType(auto371CD005_var) == "RaynorCommando"))) {
            if ((UnitGetType(auto371CD005_var) == "AmericanGuard")) {
                lv_gotGuards += 1;
            }

        }
        else {
            lv_uSCount += 1;
        }
    }
    auto47D8B36F_g = UnitGroup(null, 10, RegionEntireMap(), UnitFilter((1 << c_targetFilterPsionic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto47D8B36F_u = UnitGroupCount(auto47D8B36F_g, c_unitCountAll);
    for (;; auto47D8B36F_u -= 1) {
        auto47D8B36F_var = UnitGroupUnitFromEnd(auto47D8B36F_g, auto47D8B36F_u);
        if (auto47D8B36F_var == null) { break; }
        if ((lv_uSCount < lv_uSForcelimit)) {
            if ((ModI(lv_uSCount, 7) == 1)) {
                lv_gotUnit = "Equaliser";
            }
            else {
                if ((ModI(lv_uSCount, 7) == 2)) {
                    lv_gotUnit = "Stormtrooper";
                }
                else {
                    if ((ModI(lv_uSCount, 7) == 3)) {
                        lv_gotUnit = "StrikeTrooper";
                    }
                    else {
                        if ((ModI(lv_uSCount, 7) == 4)) {
                            lv_gotUnit = "Mortaliser";
                        }
                        else {
                            if ((ModI(lv_uSCount, 20) == 0) && (lv_gotGuards < gv_initialGuardCount)) {
                                lv_gotUnit = "AmericanGuard";
                            }
                            else {
                                lv_gotUnit = "AlphaMarine";
                            }
                        }
                    }
                }
            }
            libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_gotUnit, 0, 10, UnitGetPosition(auto47D8B36F_var));
            lv_uSCount += 1;
        }
        else {
            break;
        }
    }
}

bool gf_AmericanSurrender () {
    // Automatic Variable Declarations
    unitgroup autoE1B32A48_g;
    int autoE1B32A48_u;
    unit autoE1B32A48_var;

    // Implementation
    if ((RandomInt(0, ((gv_arisAIDifficulty / 10) + 50)) < 5)) {
        return true;
    }

    autoE1B32A48_g = UnitGroup(null, 10, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE1B32A48_u = UnitGroupCount(autoE1B32A48_g, c_unitCountAll);
    for (;; autoE1B32A48_u -= 1) {
        autoE1B32A48_var = UnitGroupUnitFromEnd(autoE1B32A48_g, autoE1B32A48_u);
        if (autoE1B32A48_var == null) { break; }
        return false;
    }
    return true;
}

void gf_DevelopNukes () {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_modifiedAIDifficulty < 40)) {
    }
    else {
        if ((gv_modifiedAIDifficulty < 60)) {
            if ((RandomInt(0, 6) < 2) && (gv_kenedyAlive == false)) {
                gv_uSNukes += 1;
            }

        }
        else {
            if ((gv_modifiedAIDifficulty < 90)) {
                if ((RandomInt(0, 6) < 3)) {
                    gv_uSNukes += 1;
                }

            }
            else {
                if ((gv_modifiedAIDifficulty < 120)) {
                    if ((RandomInt(0, 6) < 1)) {
                        gv_uSNukes += 2;
                    }
                    else {
                        gv_uSNukes += 1;
                    }
                }
                else {
                    if ((gv_modifiedAIDifficulty < 180)) {
                        gv_uSNukes += RandomInt(1, 2);
                    }
                    else {
                        gv_uSNukes += RandomInt(1, 3);
                    }
                }
            }
        }
    }
}

void gf_USDoTheNuke () {
    // Automatic Variable Declarations
    // Implementation
    if (((gv_newYorkAlive == false) || ((gv_uSNukes > 6) && (((RandomInt(0, (0 + (gv_arisAIDifficulty * 2))) > 100) && (RandomInt(gv_rUNukes, 100) > 50)) || ((RandomInt(gv_rUNukes, 100) > 98)))))) {
        gf_USNuke();
    }

}

void gf_USNuke () {
    // Variable Declarations
    int lv_highestAppealNumber;
    int lv_highestAppealVariable;
    point[1000] lv_nukeLocations;
    int lv_province;
    int[gv_numberOfRegions + 1] lv_nukeScore;
    int lv_nuke;
    int lv_nukesUsed;

    // Automatic Variable Declarations
    const int autoA93ED69E_ae = gv_numberOfRegions;
    const int autoA93ED69E_ai = 1;
    unitgroup auto3B41520D_g;
    int auto3B41520D_u;
    unit auto3B41520D_var;
    unitgroup auto92828187_g;
    int auto92828187_u;
    unit auto92828187_var;
    const int autoC1D2D7BA_ae = gv_numberOfRegions;
    const int autoC1D2D7BA_ai = 1;
    int autoB536F048_ae;
    const int autoB536F048_ai = 1;
    const int auto278A686B_ae = gv_numberOfRegions;
    const int auto278A686B_ai = 1;
    int auto3930C533_ae;
    const int auto3930C533_ai = 1;
    playergroup auto35DF0B56_g;
    int auto35DF0B56_var;

    // Variable Initialization

    // Implementation
    if (((gv_uSNukes <= 0) || (UnitGroupCount(gv_uSNukeLocations, c_unitCountAlive) == 0))) {
        UIDisplayMessage(gv_debugPlayers, c_messageAreaSubtitle, ((StringExternal("Param/Value/7DF316A8") + gf_MakeUIPresentable(lv_nukesUsed)) + (StringExternal("Param/Value/21AD0CA9") + gf_MakeUIPresentable(gv_uSNukes))));
    }
    else {
        if ((gf_CapitolSafety() < 2)) {
            lv_nukesUsed = RandomInt(1, gv_uSNukes);
        }
        else {
            lv_nukesUsed += 1;
            lv_nukesUsed = Log2I(gv_uSNukes);
            lv_nukesUsed *= 2;
        }
        lv_nukesUsed = libNtve_gf_ArithmeticIntClamp(lv_nukesUsed, 0, gv_uSNukes);
        if ((lv_nukesUsed <= 0)) {
            UIDisplayMessage(gv_debugPlayers, c_messageAreaSubtitle, ((StringExternal("Param/Value/FDDF7A18") + gf_MakeUIPresentable(lv_nukesUsed)) + (StringExternal("Param/Value/93DD1079") + gf_MakeUIPresentable(gv_uSNukes))));
        }
        else {
            UIDisplayMessage(gv_debugPlayers, c_messageAreaSubtitle, ((StringExternal("Param/Value/70BE01B0") + gf_MakeUIPresentable(lv_nukesUsed)) + (StringExternal("Param/Value/966AF6DB") + gf_MakeUIPresentable(gv_uSNukes))));
            lv_province = 1;
            for ( ; ( (autoA93ED69E_ai >= 0 && lv_province <= autoA93ED69E_ae) || (autoA93ED69E_ai < 0 && lv_province >= autoA93ED69E_ae) ) ; lv_province += autoA93ED69E_ai ) {
                lv_nukeScore[lv_province] += (UnitGroupCount(UnitGroup("SAM", c_playerAny, gv_countRegions[lv_province], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) * 30);
                lv_nukeScore[lv_province] += (UnitGroupCount(UnitGroup("Expounder", c_playerAny, gv_countRegions[lv_province], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) * 30);
                lv_nukeScore[lv_province] += (UnitGroupCount(UnitGroup("Bastion", c_playerAny, gv_countRegions[lv_province], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) * 20);
                lv_nukeScore[lv_province] += (UnitGroupCount(UnitGroup("Flakker", c_playerAny, gv_countRegions[lv_province], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) * 15);
                lv_nukeScore[lv_province] += (UnitGroupCount(UnitGroup("Hypercannon", c_playerAny, gv_countRegions[lv_province], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) * 15);
                lv_nukeScore[lv_province] += (UnitGroupCount(UnitGroup("BaPulseCannon", c_playerAny, gv_countRegions[lv_province], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) * 10);
                lv_nukeScore[lv_province] += (UnitGroupCount(UnitGroup("NaniteTower", c_playerAny, gv_countRegions[lv_province], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) * 10);
                lv_nukeScore[lv_province] += (UnitGroupCount(UnitGroup("IgniterTurret", c_playerAny, gv_countRegions[lv_province], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) * 5);
                lv_nukeScore[lv_province] += (UnitGroupCount(UnitGroup("Bunker", c_playerAny, gv_countRegions[lv_province], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) * 5);
                lv_nukeScore[lv_province] += (UnitGroupCount(UnitGroup("OilWellII", c_playerAny, gv_countRegions[lv_province], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) * 3);
                lv_nukeScore[lv_province] += (UnitGroupCount(UnitGroup("OilWellI", c_playerAny, gv_countRegions[lv_province], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) * 3);
                lv_nukeScore[lv_province] -= (UnitGroupCount(UnitGroup("MissileTurret22", c_playerAny, gv_countRegions[lv_province], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) * 50);
                auto3B41520D_g = UnitGroupAlliance(10, c_unitAllianceEnemy, gv_countRegions[lv_province], UnitFilter(0, 0, (1 << c_targetFilterBiological) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                auto3B41520D_u = UnitGroupCount(auto3B41520D_g, c_unitCountAll);
                for (;; auto3B41520D_u -= 1) {
                    auto3B41520D_var = UnitGroupUnitFromEnd(auto3B41520D_g, auto3B41520D_u);
                    if (auto3B41520D_var == null) { break; }
                    lv_nukeScore[lv_province] += 2;
                }
                auto92828187_g = UnitGroupAlliance(10, c_unitAllianceEnemy, gv_countRegions[lv_province], UnitFilter((1 << c_targetFilterBiological), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                auto92828187_u = UnitGroupCount(auto92828187_g, c_unitCountAll);
                for (;; auto92828187_u -= 1) {
                    auto92828187_var = UnitGroupUnitFromEnd(auto92828187_g, auto92828187_u);
                    if (auto92828187_var == null) { break; }
                    lv_nukeScore[lv_province] += 1;
                }
            }
            lv_province = 1;
            for ( ; ( (autoC1D2D7BA_ai >= 0 && lv_province <= autoC1D2D7BA_ae) || (autoC1D2D7BA_ai < 0 && lv_province >= autoC1D2D7BA_ae) ) ; lv_province += autoC1D2D7BA_ai ) {
                if ((PointGetX(RegionGetCenter(gv_countRegions[lv_province])) < 40.0) && (gf_CapitolSafety() < 1)) {
                    lv_nukeScore[lv_province] /= 4;
                }
                else {
                    if ((PointGetX(RegionGetCenter(gv_countRegions[lv_province])) < 90.0)) {
                        lv_nukeScore[lv_province] *= 5;
                    }
                    else {
                        if ((PointGetX(RegionGetCenter(gv_countRegions[lv_province])) < 100.0)) {
                            lv_nukeScore[lv_province] *= 4;
                        }
                        else {
                            if ((PointGetX(RegionGetCenter(gv_countRegions[lv_province])) < 110.0)) {
                                lv_nukeScore[lv_province] *= 2;
                            }
                            else {
                                if ((PointGetX(RegionGetCenter(gv_countRegions[lv_province])) > 150.0)) {
                                    lv_nukeScore[lv_province] /= 2;
                                }

                            }
                        }
                    }
                }
                if ((RandomInt(0, 1) == 1)) {
                    lv_nukeScore[lv_province] *= 2;
                }

            }
            autoB536F048_ae = lv_nukesUsed;
            lv_nuke = 1;
            for ( ; ( (autoB536F048_ai >= 0 && lv_nuke <= autoB536F048_ae) || (autoB536F048_ai < 0 && lv_nuke >= autoB536F048_ae) ) ; lv_nuke += autoB536F048_ai ) {
                lv_highestAppealNumber = 0;
                lv_highestAppealVariable = 0;
                lv_province = 1;
                for ( ; ( (auto278A686B_ai >= 0 && lv_province <= auto278A686B_ae) || (auto278A686B_ai < 0 && lv_province >= auto278A686B_ae) ) ; lv_province += auto278A686B_ai ) {
                    if ((lv_nukeScore[lv_province] > lv_highestAppealNumber)) {
                        lv_highestAppealNumber = lv_nukeScore[lv_province];
                        lv_highestAppealVariable = lv_province;
                    }

                }
                lv_nukeScore[lv_highestAppealVariable] = (lv_nukeScore[lv_highestAppealVariable] / 4);
                lv_nukeLocations[lv_nuke] = RegionRandomPoint(gv_countRegions[lv_highestAppealVariable]);
            }
            SoundPlay(SoundLink("Tychus04BriefingAlarm", -1), PlayerGroupAll(), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextWithColor(((StringExternal("Param/Value/9FA82304") + IntToText(libNtve_gf_ArithmeticIntClamp(FixedToInt((RandomFixed(0.9, 1.1) * IntToFixed(lv_nukesUsed))), 1, 999))) + StringExternal("Param/Value/8E089F2F")), Color(100.00, 0.00, 0.00)));
            gv_uSNukes -= lv_nukesUsed;
            auto3930C533_ae = lv_nukesUsed;
            lv_nuke = 1;
            for ( ; ( (auto3930C533_ai >= 0 && lv_nuke <= auto3930C533_ae) || (auto3930C533_ai < 0 && lv_nuke >= auto3930C533_ae) ) ; lv_nuke += auto3930C533_ai ) {
                UnitCreateEffectPoint(UnitGroupRandomUnit(gv_uSNukeLocations, c_unitCountAlive), "LaunchICBMSet2", lv_nukeLocations[lv_nuke]);
                auto35DF0B56_g = gv_users;
                auto35DF0B56_var = -1;
                while (true) {
                    auto35DF0B56_var = PlayerGroupNextPlayer(auto35DF0B56_g, auto35DF0B56_var);
                    if (auto35DF0B56_var < 0) { break; }
                    MinimapPing(PlayerGroupSingle(auto35DF0B56_var), lv_nukeLocations[lv_nuke], 20.0, Color(100.00, 0.00, 0.00));
                }
            }
        }
    }
}

void gf_CreateEscorts () {
    // Automatic Variable Declarations
    // Implementation
    while ((UnitGroupCount(gv_carrierEscorts, c_unitCountAlive) < 4)) {
        Wait(5.0, c_timeGame);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ViperFighter", 0, 10, UnitGetPosition(UnitFromId(1664029611)));
        UnitGroupAdd(gv_carrierEscorts, UnitLastCreated());
    }
}

void gf_A110Waves () {
    // Variable Declarations
    int lv_toMaxUnits;
    int lv_unitsToCreate;

    // Automatic Variable Declarations
    unitgroup auto129729F0_g;
    int auto129729F0_u;
    unit auto129729F0_var;

    // Variable Initialization
    lv_toMaxUnits = libNtve_gf_ArithmeticIntClamp((gv_arisAIDifficulty / 15), 5, 20);
    lv_unitsToCreate = libNtve_gf_ArithmeticIntClamp((gv_arisAIDifficulty / 50), 1, 4);

    // Implementation
    auto129729F0_g = UnitGroup("ViperFighter", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto129729F0_u = UnitGroupCount(auto129729F0_g, c_unitCountAll);
    for (;; auto129729F0_u -= 1) {
        auto129729F0_var = UnitGroupUnitFromEnd(auto129729F0_g, auto129729F0_u);
        if (auto129729F0_var == null) { break; }
        lv_toMaxUnits -= 1;
    }
    while ((lv_unitsToCreate > 0) && (lv_toMaxUnits > 0)) {
        Wait(1.0, c_timeGame);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ViperFighter", 0, 10, UnitGetPosition(UnitFromId(1664029611)));
        Wait(1.0, c_timeGame);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(63))), c_orderQueueReplace);
        lv_unitsToCreate -= 1;
        lv_toMaxUnits -= 1;
    }
}

void gf_AttackNearHostile (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitGetType(lp_unit) != "ViperFighter") && (UnitGetType(lp_unit) != "ApolloBomber") && (UnitGetType(lp_unit) != "AstrosInterceptor") && (UnitGetType(lp_unit) != "CourierTH") && (UnitGetType(lp_unit) != "JavelinAH") && (UnitGetType(lp_unit) != "ScorcherBomber") && (UnitGetType(lp_unit) != "StrikerAH")) {
        if ((UnitGetOwner(lp_unit) == 11)) {
            UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("attack2", 0), UnitGetPosition(UnitGroupClosestToPoint(gv_hOSTILES[1], UnitGetPosition(lp_unit)))), c_orderQueueReplace);
        }
        else {
            UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("attack2", 0), UnitGetPosition(UnitGroupClosestToPoint(gv_hOSTILES[0], UnitGetPosition(lp_unit)))), c_orderQueueReplace);
        }
    }
    else {
        UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("attack2", 0), UnitGetPosition(UnitGroupClosestToPoint(UnitGroupAlliance(UnitGetOwner(lp_unit), c_unitAllianceEnemy, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lp_unit)))), c_orderQueueReplace);
    }
}

void gf_UpgradeUnits () {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUpgradeAddLevel(11, "InfantryArmourUP", 1);
    TechTreeUpgradeAddLevel(11, "InfantryDamageUP", 1);
    if ((gv_aIDifficulty == 6)) {
        TechTreeUpgradeAddLevel(11, "InfantryArmourUP", 2);
        TechTreeUpgradeAddLevel(11, "InfantryDamageUP", 2);
    }
    else {
        if ((gv_aIDifficulty == 5)) {
            TechTreeUpgradeAddLevel(11, "InfantryArmourUP", 1);
            TechTreeUpgradeAddLevel(11, "InfantryDamageUP", 1);
        }

    }
}

void gf_CreateBanner (int lp_player, int lp_bannerID) {
    // Variable Declarations
    int lv_bannerLoop;

    // Automatic Variable Declarations
    const int auto272FD3F2_ae = 9;
    const int auto272FD3F2_ai = 1;

    // Variable Initialization
    lv_bannerLoop = 1;

    // Implementation
    if ((gv_showItAgain[lp_player][lp_bannerID] == true)) {
        lv_bannerLoop = 1;
        for ( ; ( (auto272FD3F2_ai >= 0 && lv_bannerLoop <= auto272FD3F2_ae) || (auto272FD3F2_ai < 0 && lv_bannerLoop >= auto272FD3F2_ae) ) ; lv_bannerLoop += auto272FD3F2_ai ) {
            if (((gv_bannerQueue[lp_player][lv_bannerLoop] == lp_bannerID) || (gv_bannerQueue[lp_player][1] == lp_bannerID) || (gv_bannerQueue[lp_player][2] == lp_bannerID) || (gv_bannerQueue[lp_player][3] == lp_bannerID) || (gv_bannerQueue[lp_player][4] == lp_bannerID) || (gv_bannerQueue[lp_player][5] == lp_bannerID) || (gv_bannerQueue[lp_player][6] == lp_bannerID) || (gv_bannerQueue[lp_player][7] == lp_bannerID) || (gv_bannerQueue[lp_player][8] == lp_bannerID) || (gv_bannerQueue[lp_player][9] == lp_bannerID))) {
                break;
            }

            if ((gv_bannerQueue[lp_player][lv_bannerLoop] == 0)) {
                gv_bannerQueue[lp_player][lv_bannerLoop] = lp_bannerID;
                break;
            }

        }
    }

}

void gf_RemoveBanner (int lp_player, int lp_bannerID) {
    // Variable Declarations
    int lv_bannerLoop;

    // Automatic Variable Declarations
    const int autoFA41F632_ae = 9;
    const int autoFA41F632_ai = 1;

    // Variable Initialization
    lv_bannerLoop = 1;

    // Implementation
    lv_bannerLoop = 1;
    for ( ; ( (autoFA41F632_ai >= 0 && lv_bannerLoop <= autoFA41F632_ae) || (autoFA41F632_ai < 0 && lv_bannerLoop >= autoFA41F632_ae) ) ; lv_bannerLoop += autoFA41F632_ai ) {
        if ((gv_bannerQueue[lp_player][lv_bannerLoop] == lp_bannerID)) {
            gv_bannerQueue[lp_player][lv_bannerLoop] = 0;
            break;
        }

    }
}

//--------------------------------------------------------------------------------------------------
// Trigger: Melee Initialization
//--------------------------------------------------------------------------------------------------
bool gt_MeleeInitialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto5E1B3D5F_g;
    int auto5E1B3D5F_var;
    playergroup autoBF652F6E_g;
    int autoBF652F6E_var;

    // Actions
    if (!runActions) {
        return true;
    }

    GameSetSpeedValue(c_gameSpeedFaster);
    MeleeInitResources();
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeAchievementMenuButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeHelpMenuButton, false);
    auto5E1B3D5F_g = PlayerGroupActive();
    auto5E1B3D5F_var = -1;
    while (true) {
        auto5E1B3D5F_var = PlayerGroupNextPlayer(auto5E1B3D5F_g, auto5E1B3D5F_var);
        if (auto5E1B3D5F_var < 0) { break; }
        if ((PlayerType(auto5E1B3D5F_var) == c_playerTypeUser)) {
            if ((PlayerType(auto5E1B3D5F_var) == c_playerTypeComputer)) {
                KickFromGame(PlayerGroupSingle(auto5E1B3D5F_var));
            }
            else {
                PlayerGroupAdd(gv_users, auto5E1B3D5F_var);
            }
            gv_playercount += 1;
            gv_selectedIconResearch[auto5E1B3D5F_var] = 1;
            CameraPan(auto5E1B3D5F_var, RegionGetCenter(RegionFromId(1)), 0.0, -1, 10.0, false);
            libNtve_gf_SetAlliance(12, auto5E1B3D5F_var, libNtve_ge_AllianceSetting_AllyWithSharedVision);
            libNtve_gf_SetAlliance(11, 15, libNtve_ge_AllianceSetting_Enemy);
            libNtve_gf_SetAlliance(10, 15, libNtve_ge_AllianceSetting_Enemy);
            libNtve_gf_SetAlliance(auto5E1B3D5F_var, 11, libNtve_ge_AllianceSetting_Enemy);
            PlayerOptionOverride(auto5E1B3D5F_var, "selectuncontrolable", "1");
            PlayerOptionOverride(auto5E1B3D5F_var, "simplecommandcard", "0");
        }

    }
    libNtve_gf_SetPlayerGroupAlliance(gv_users, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    libNtve_gf_SetAlliance(9, 15, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(10, 11, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(12, 0, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    libNtve_gf_SetAlliance(11, 0, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    autoBF652F6E_g = gv_users;
    autoBF652F6E_var = -1;
    while (true) {
        autoBF652F6E_var = PlayerGroupNextPlayer(autoBF652F6E_g, autoBF652F6E_var);
        if (autoBF652F6E_var < 0) { break; }
        libNtve_gf_SetAllianceOneWay(0, autoBF652F6E_var, libNtve_ge_AllianceSetting_Enemy);
        libNtve_gf_SetAllianceOneWay(autoBF652F6E_var, 0, libNtve_ge_AllianceSetting_Neutral);
        libNtve_gf_SetUpgradeLevelForPlayer(autoBF652F6E_var, "EnablePointDefense", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(autoBF652F6E_var, "DeadManHandOff", 1);
        gv_originalPlayerColor[autoBF652F6E_var] = PlayerGetColorIndex(autoBF652F6E_var, false);
        gv_selectedCorporation[autoBF652F6E_var] = autoBF652F6E_var;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MeleeInitialization_Init () {
    gt_MeleeInitialization = TriggerCreate("gt_MeleeInitialization_Func");
    TriggerAddEventMapInit(gt_MeleeInitialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MoveChat
//--------------------------------------------------------------------------------------------------
bool gt_MoveChat_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_chatBar;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_chatBar = c_invalidDialogControlId;

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/ChatDisplay");
    lv_chatBar = DialogControlLastCreated();
    DialogControlSetPosition(lv_chatBar, PlayerGroupAll(), c_anchorRight, 0, 0);
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/ChatBar");
    lv_chatBar = DialogControlLastCreated();
    DialogControlSetPosition(lv_chatBar, PlayerGroupAll(), c_anchorRight, 20, 215);
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/AlertPanel");
    lv_chatBar = DialogControlLastCreated();
    DialogControlSetPosition(lv_chatBar, PlayerGroupAll(), c_anchorTopLeft, 0, 560);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MoveChat_Init () {
    gt_MoveChat = TriggerCreate("gt_MoveChat_Func");
    TriggerAddEventMapInit(gt_MoveChat);
}

//--------------------------------------------------------------------------------------------------
// Trigger: FixHealthBug
//--------------------------------------------------------------------------------------------------
bool gt_FixHealthBug_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoA2610E4F_g;
    int autoA2610E4F_var;
    unitgroup autoA82D432B_g;
    int autoA82D432B_u;
    unit autoA82D432B_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoA2610E4F_g = gv_users;
    autoA2610E4F_var = -1;
    while (true) {
        autoA2610E4F_var = PlayerGroupNextPlayer(autoA2610E4F_g, autoA2610E4F_var);
        if (autoA2610E4F_var < 0) { break; }
        autoA82D432B_g = UnitGroup(null, autoA2610E4F_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoA82D432B_u = UnitGroupCount(autoA82D432B_g, c_unitCountAll);
        for (;; autoA82D432B_u -= 1) {
            autoA82D432B_var = UnitGroupUnitFromEnd(autoA82D432B_g, autoA82D432B_u);
            if (autoA82D432B_var == null) { break; }
            UnitBehaviorAdd(autoA82D432B_var, "TempHealthFixBug", autoA82D432B_var, 1);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FixHealthBug_Init () {
    gt_FixHealthBug = TriggerCreate("gt_FixHealthBug_Func");
    TriggerAddEventTimePeriodic(gt_FixHealthBug, 10.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UnitSelected
//--------------------------------------------------------------------------------------------------
bool gt_UnitSelected_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_givenBase;
    int lv_givenConsumption;
    int lv_centralisationModifier;
    unit lv_topUnit;
    int lv_selectedUnits;
    int lv_pickedSound;
    int lv_vol;

    // Automatic Variable Declarations
    unitgroup autoB51759BB_g;
    int autoB51759BB_u;
    unit autoB51759BB_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_selectedUnits = 0;
    lv_vol = 0;
    Wait(0.001, c_timeGame);
    autoB51759BB_g = UnitGroupSelected(EventPlayer());
    autoB51759BB_u = UnitGroupCount(autoB51759BB_g, c_unitCountAll);
    for (;; autoB51759BB_u -= 1) {
        autoB51759BB_var = UnitGroupUnitFromEnd(autoB51759BB_g, autoB51759BB_u);
        if (autoB51759BB_var == null) { break; }
        if ((UnitTypeTestAttribute(UnitGetType(autoB51759BB_var), c_unitAttributeBiological) == true)) {
            lv_selectedUnits += 1;
        }

    }
    if ((lv_selectedUnits == 0)) {
        lv_topUnit = UnitGroupUnit(UnitGroupSelected(EventPlayer()), 1);
        if ((UnitTypeTestAttribute(UnitGetType(lv_topUnit), c_unitAttributeUser1) == true)) {
            if ((UnitTypeTestAttribute(UnitGetType(lv_topUnit), c_unitAttributeArmored) == true)) {
                CatalogFieldValueSet(c_gameCatalogButton, "Housing", "Tooltip", EventPlayer(), ((("Base Tax Generated: " + gf_MakeUIPresentableString(FixedToInt((UnitGetPropertyFixed(lv_topUnit, c_unitPropEnergy, c_unitPropCurrent) * 3.0)))) + (" . Tax Modifiers: " + ((gf_MakeUIPresentableString(((gv_creditIncomeModifier[EventPlayer()] / 3) - 100)) + "") + ("% . Centralisation Modifier: -" + gf_MakeUIPresentableString(FixedToInt((100.0 - (UnitGetCustomValue(lv_topUnit, 0) * 100.0)))))))) + (("% . Final Tax Generated: " + gf_MakeUIPresentableString((FixedToInt(((IntToFixed(gv_creditIncomeModifier[EventPlayer()]) * UnitGetPropertyFixed(lv_topUnit, c_unitPropEnergy, c_unitPropCurrent)) * UnitGetCustomValue(lv_topUnit, 0))) / 100))) + ("   .  Food Consumed: " + (gf_MakeUIPresentableString(FixedToInt(UnitGetPropertyFixed(lv_topUnit, c_unitPropEnergy, c_unitPropCurrent))) + (" . Electricity Consumed: " + gf_MakeUIPresentableString((FixedToInt(UnitGetPropertyFixed(lv_topUnit, c_unitPropEnergy, c_unitPropCurrent)) / 2))))))));
            }
            else {
                CatalogFieldValueSet(c_gameCatalogButton, "Housing", "Tooltip", EventPlayer(), ((("Base Tax Generated: " + gf_MakeUIPresentableString(FixedToInt((UnitGetPropertyFixed(lv_topUnit, c_unitPropEnergy, c_unitPropCurrent) * 3.0)))) + (" . Tax Modifiers: " + ((gf_MakeUIPresentableString(((gv_creditIncomeModifier[EventPlayer()] / 3) - 100)) + "") + ("% . Centralisation Modifier: -" + gf_MakeUIPresentableString(FixedToInt((100.0 - (UnitGetCustomValue(lv_topUnit, 0) * 100.0)))))))) + (("% . Final Tax Generated: " + gf_MakeUIPresentableString((FixedToInt(((IntToFixed(gv_creditIncomeModifier[EventPlayer()]) * UnitGetPropertyFixed(lv_topUnit, c_unitPropEnergy, c_unitPropCurrent)) * UnitGetCustomValue(lv_topUnit, 0))) / 100))) + ("   .  Food Consumed: " + (gf_MakeUIPresentableString(FixedToInt(UnitGetPropertyFixed(lv_topUnit, c_unitPropEnergy, c_unitPropCurrent))) + "")))));
            }
        }
        else {
            if (((UnitGetType(lv_topUnit) == "WindTurbine") || (UnitGetType(lv_topUnit) == "OilPowerPlant") || (UnitGetType(lv_topUnit) == "FusionReactor2") || (UnitGetType(lv_topUnit) == "FissionPowerPlant") || (UnitGetType(lv_topUnit) == "GeothermalPowerPlant"))) {
                lv_givenBase = -1;
                if ((UnitGetType(lv_topUnit) == "WindTurbine")) {
                    lv_givenBase = 500;
                    lv_centralisationModifier = FixedToInt((100.0 - (UnitGetCustomValue(lv_topUnit, 0) * 100.0)));
                }
                else {
                    if ((UnitGetType(lv_topUnit) == "OilPowerPlant")) {
                        lv_givenBase = 3000;
                        lv_centralisationModifier = FixedToInt((100.0 - (UnitGetCustomValue(lv_topUnit, 0) * 100.0)));
                    }
                    else {
                        if ((UnitGetType(lv_topUnit) == "FissionPowerPlant")) {
                            lv_givenBase = 2000;
                            lv_centralisationModifier = FixedToInt((100.0 - (UnitGetCustomValue(lv_topUnit, 0) * 100.0)));
                        }
                        else {
                            if ((UnitGetType(lv_topUnit) == "FusionReactor2")) {
                                lv_givenBase = 8000;
                                lv_centralisationModifier = FixedToInt((100.0 - (UnitGetCustomValue(lv_topUnit, 0) * 100.0)));
                            }
                            else {
                                if ((UnitGetType(lv_topUnit) == "GeothermalPowerPlant")) {
                                    lv_givenBase = 1000;
                                    lv_centralisationModifier = 0;
                                }

                            }
                        }
                    }
                }
                CatalogFieldValueSet(c_gameCatalogButton, "Electricity", "Tooltip", EventPlayer(), ((("Base Electricity Generated: " + gf_MakeUIPresentableString(lv_givenBase)) + (" . Electricity Modifiers: " + ((gf_MakeUIPresentableString((gv_electricityIncomeModifier[EventPlayer()] - 100)) + "") + ("% . Centralisation Modifier: -" + gf_MakeUIPresentableString(lv_centralisationModifier))))) + (("% . Final Electricity Generated: " + gf_MakeUIPresentableString(((lv_givenBase * FixedToInt((IntToFixed(gv_electricityIncomeModifier[EventPlayer()]) * UnitGetCustomValue(lv_topUnit, 0)))) / 100))) + "")));
            }
            else {
                if (((UnitGetType(lv_topUnit) == "FarmI") || (UnitGetType(lv_topUnit) == "FarmII") || (UnitGetType(lv_topUnit) == "FarmIII") || (UnitGetType(lv_topUnit) == "FarmIV") || (UnitGetType(lv_topUnit) == "FarmV") || (UnitGetType(lv_topUnit) == "HydrofarmI") || (UnitGetType(lv_topUnit) == "HydrofarmII") || (UnitGetType(lv_topUnit) == "HydrofarmIII") || (UnitGetType(lv_topUnit) == "HydrofarmIV") || (UnitGetType(lv_topUnit) == "HydrofarmV"))) {
                    if ((UnitGetType(lv_topUnit) == "FarmI")) {
                        lv_givenBase = 1;
                    }
                    else {
                        if ((UnitGetType(lv_topUnit) == "FarmII")) {
                            lv_givenBase = 2;
                        }
                        else {
                            if ((UnitGetType(lv_topUnit) == "FarmIII")) {
                                lv_givenBase = 3;
                            }
                            else {
                                if ((UnitGetType(lv_topUnit) == "FarmIV")) {
                                    lv_givenBase = 4;
                                }
                                else {
                                    if ((UnitGetType(lv_topUnit) == "FarmV")) {
                                        lv_givenBase = 5;
                                    }
                                    else {
                                        if ((UnitGetType(lv_topUnit) == "HydrofarmI")) {
                                            lv_givenBase = 10;
                                            lv_givenConsumption = 100;
                                        }
                                        else {
                                            if ((UnitGetType(lv_topUnit) == "HydrofarmII")) {
                                                lv_givenBase = 20;
                                                lv_givenConsumption = 200;
                                            }
                                            else {
                                                if ((UnitGetType(lv_topUnit) == "HydrofarmIII")) {
                                                    lv_givenBase = 30;
                                                    lv_givenConsumption = 300;
                                                }
                                                else {
                                                    if ((UnitGetType(lv_topUnit) == "HydrofarmIV")) {
                                                        lv_givenBase = 40;
                                                        lv_givenConsumption = 400;
                                                    }
                                                    else {
                                                        if ((UnitGetType(lv_topUnit) == "HydrofarmV")) {
                                                            lv_givenBase = 50;
                                                            lv_givenConsumption = 500;
                                                        }

                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if ((gf_HasBadFarmingTerrain(lv_topUnit) == true)) {
                        lv_givenBase *= gv_fOOD_PRODUCTION_BAD_TERRAIN;
                    }
                    else {
                        lv_givenBase *= gv_fOOD_PRODUCTION_BASE;
                    }
                    if (((UnitGetType(lv_topUnit) == "HydrofarmI") || (UnitGetType(lv_topUnit) == "HydrofarmII") || (UnitGetType(lv_topUnit) == "HydrofarmIII") || (UnitGetType(lv_topUnit) == "HydrofarmIV") || (UnitGetType(lv_topUnit) == "HydrofarmV"))) {
                        CatalogFieldValueSet(c_gameCatalogButton, "Farming", "Tooltip", EventPlayer(), ((("Base Food Generated: " + gf_MakeUIPresentableString(lv_givenBase)) + (" . Food Modifiers: " + ((gf_MakeUIPresentableString((gv_foodIncomeModifier[EventPlayer()] - 100)) + "") + ("% . Centralisation Modifier: -" + gf_MakeUIPresentableString(lv_centralisationModifier))))) + (("% . Final Food Generated: " + gf_MakeUIPresentableString(((lv_givenBase * FixedToInt((UnitGetCustomValue(lv_topUnit, 0) * IntToFixed(gv_foodIncomeModifier[EventPlayer()])))) / 100))) + ("  .  Electricity consumed: " + gf_MakeUIPresentableString(lv_givenConsumption)))));
                    }
                    else {
                        CatalogFieldValueSet(c_gameCatalogButton, "Farming", "Tooltip", EventPlayer(), ((("Base Food Generated: " + gf_MakeUIPresentableString(lv_givenBase)) + (" . Food Modifiers: " + ((gf_MakeUIPresentableString((gv_foodIncomeModifier[EventPlayer()] - 100)) + "") + ("% . Centralisation Modifier: -" + gf_MakeUIPresentableString(lv_centralisationModifier))))) + (("% . Final Food Generated: " + gf_MakeUIPresentableString(((lv_givenBase * FixedToInt((UnitGetCustomValue(lv_topUnit, 0) * IntToFixed(gv_foodIncomeModifier[EventPlayer()])))) / 100))) + "")));
                    }
                }

            }
        }
    }
    else {
        if (((lv_selectedUnits >= 30) && (lv_selectedUnits <= 80))) {
            lv_vol = lv_selectedUnits;
        }
        else {
            if (((lv_selectedUnits >= 0) && (lv_selectedUnits <= 50))) {
                lv_vol = 30;
            }
            else {
                lv_vol = 80;
            }
        }
        if ((TechTreeUpgradeCount(EventPlayer(), "SocialistRepublic", c_techCountQueuedOrBetter) != 1) && (TechTreeUpgradeCount(EventPlayer(), "Communism", c_techCountQueuedOrBetter) != 1) && (lv_selectedUnits > 20)) {
            SoundChannelStop(PlayerGroupSingle(EventPlayer()), c_soundCategoryReady);
            SoundChannelStop(PlayerGroupSingle(EventPlayer()), c_soundCategoryVoice);
            lv_pickedSound = RandomInt(0, 100);
            Wait(0.1, c_timeGame);
            if ((lv_pickedSound > 14)) {
                if ((lv_pickedSound > 28)) {
                    if ((lv_pickedSound > 42)) {
                        if ((lv_pickedSound > 56)) {
                            if ((lv_pickedSound > 70)) {
                                if ((lv_pickedSound > 84)) {
                                    SoundPlayOnUnitForPlayer(SoundLink("FreeSelection", 6), c_maxPlayers, PlayerGroupSingle(EventPlayer()), EventUnit(), 0.0, lv_vol, 0.0);
                                }
                                else {
                                    SoundPlayOnUnitForPlayer(SoundLink("FreeSelection", 5), c_maxPlayers, PlayerGroupSingle(EventPlayer()), EventUnit(), 0.0, lv_vol, 0.0);
                                }
                            }
                            else {
                                SoundPlayOnUnitForPlayer(SoundLink("FreeSelection", 4), c_maxPlayers, PlayerGroupSingle(EventPlayer()), EventUnit(), 0.0, lv_vol, 0.0);
                            }
                        }
                        else {
                            SoundPlayOnUnitForPlayer(SoundLink("FreeSelection", 3), c_maxPlayers, PlayerGroupSingle(EventPlayer()), EventUnit(), 0.0, lv_vol, 0.0);
                        }
                    }
                    else {
                        SoundPlayOnUnitForPlayer(SoundLink("FreeSelection", 2), c_maxPlayers, PlayerGroupSingle(EventPlayer()), EventUnit(), 0.0, lv_vol, 0.0);
                    }
                }
                else {
                    SoundPlayOnUnitForPlayer(SoundLink("FreeSelection", 1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), EventUnit(), 0.0, lv_vol, 0.0);
                }
            }
            else {
                SoundPlayOnUnitForPlayer(SoundLink("FreeSelection", 0), c_maxPlayers, PlayerGroupSingle(EventPlayer()), EventUnit(), 0.0, lv_vol, 0.0);
            }
        }

        if ((lv_selectedUnits > 50) && ((TechTreeUpgradeCount(EventPlayer(), "SocialistRepublic", c_techCountQueuedOrBetter) == 1) || (TechTreeUpgradeCount(EventPlayer(), "Communism", c_techCountQueuedOrBetter) == 1))) {
            if ((lv_pickedSound < 49)) {
                SoundPlayOnUnitForPlayer(SoundLink("CommuneSelection", 0), c_maxPlayers, PlayerGroupSingle(EventPlayer()), EventUnit(), 0.0, lv_vol, 0.0);
            }
            else {
                SoundPlayOnUnitForPlayer(SoundLink("CommuneSelection", 1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), EventUnit(), 0.0, lv_vol, 0.0);
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitSelected_Init () {
    gt_UnitSelected = TriggerCreate("gt_UnitSelected_Func");
    TriggerAddEventUnitSelected(gt_UnitSelected, null, c_playerAny, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SettlerWarnings
//--------------------------------------------------------------------------------------------------
bool gt_SettlerWarnings_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto2D65FE84_n = 100;
    int auto2D65FE84_i;
    unitgroup autoCE1122D3_g;
    int autoCE1122D3_u;
    unit autoCE1122D3_var;

    // Actions
    if (!runActions) {
        return true;
    }

    for (auto2D65FE84_i = 1; auto2D65FE84_i <= auto2D65FE84_n; auto2D65FE84_i += 1) {
        autoCE1122D3_g = UnitGroup("Settler", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoCE1122D3_u = UnitGroupCount(autoCE1122D3_g, c_unitCountAll);
        for (;; autoCE1122D3_u -= 1) {
            autoCE1122D3_var = UnitGroupUnitFromEnd(autoCE1122D3_g, autoCE1122D3_u);
            if (autoCE1122D3_var == null) { break; }
            if (((libNtve_gf_UnitInRegion(autoCE1122D3_var, RegionFromId(123)) == true) || (libNtve_gf_UnitInRegion(autoCE1122D3_var, RegionFromId(117)) == true) || (libNtve_gf_UnitInRegion(autoCE1122D3_var, RegionFromId(198)) == true) || (libNtve_gf_UnitInRegion(autoCE1122D3_var, RegionFromId(122)) == true))) {
                UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(autoCE1122D3_var)), c_messageAreaSubtitle, StringExternal("Param/Value/7291C2E2"));
            }
            else {
                if ((gv_aIDifficulty > 0) && (DistanceBetweenPoints(UnitGetPosition(autoCE1122D3_var), UnitGetPosition(UnitGroupClosestToPoint(UnitGroup(null, 11, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(autoCE1122D3_var)))) <= 50.0)) {
                    UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(autoCE1122D3_var)), c_messageAreaSubtitle, StringExternal("Param/Value/0F14E9DE"));
                }
                else {
                    if ((gv_aIDifficulty > 0) && (DistanceBetweenPoints(UnitGetPosition(autoCE1122D3_var), UnitGetPosition(UnitGroupClosestToPoint(UnitGroup(null, 10, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(autoCE1122D3_var)))) <= 75.0)) {
                        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(autoCE1122D3_var)), c_messageAreaSubtitle, StringExternal("Param/Value/ED77BCB0"));
                    }
                    else {
                        if ((gf_HasBadFarmingTerrain(autoCE1122D3_var) == true)) {
                            UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(autoCE1122D3_var)), c_messageAreaSubtitle, StringExternal("Param/Value/969C2626"));
                        }
                        else {
                            UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(autoCE1122D3_var)), c_messageAreaSubtitle, StringExternal("Param/Value/3DA10E26"));
                        }
                    }
                }
            }
        }
        Wait(9.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SettlerWarnings_Init () {
    gt_SettlerWarnings = TriggerCreate("gt_SettlerWarnings_Func");
    TriggerAddEventTimeElapsed(gt_SettlerWarnings, 50.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Monthly Tick
//--------------------------------------------------------------------------------------------------
bool gt_MonthlyTick_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto160608F0_g;
    int auto160608F0_var;
    playergroup auto9BA1EB52_g;
    int auto9BA1EB52_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_month >= 12)) {
        gv_year += 1;
        gv_month = 1;
        gv_globalPopulation = 0;
        gv_eUPopulation = 0;
        auto160608F0_g = gv_users;
        auto160608F0_var = -1;
        while (true) {
            auto160608F0_var = PlayerGroupNextPlayer(auto160608F0_g, auto160608F0_var);
            if (auto160608F0_var < 0) { break; }
            gv_globalPopulation += gv_population[auto160608F0_var];
            gv_yearsSinceLastBankruptcy[auto160608F0_var] += 1;
        }
        auto9BA1EB52_g = gv_theEuroCrew;
        auto9BA1EB52_var = -1;
        while (true) {
            auto9BA1EB52_var = PlayerGroupNextPlayer(auto9BA1EB52_g, auto9BA1EB52_var);
            if (auto9BA1EB52_var < 0) { break; }
            gv_eUPopulation += gv_population[auto9BA1EB52_var];
        }
        gv_globalPopulation *= 100;
        if ((gv_victoryType == 2)) {
            TriggerExecute(gt_ReCVictory, true, false);
        }

        if ((PlayerGroupCount(gv_theEuroCrew) > 0)) {
            gv_yearsUntillVote -= 1;
        }

        libNtve_gf_SetDialogItemText(gv_nextElectionUI, (StringExternal("Param/Value/D0728C26") + IntToText((gv_year + (gv_yearsUntillVote + 1)))), PlayerGroupAll());
        if ((gv_elections == 4)) {
            gv_yearsUntillVote = 8;
            libNtve_gf_SetDialogItemText(gv_nextElectionUI, StringExternal("Param/Value/A42271C9"), PlayerGroupAll());
        }

        if ((gv_yearsUntillVote < 0)) {
            if (((gv_votingSystem == 0) || (gv_votingSystem == 1) || (gv_votingSystem == 2))) {
                gv_yearsUntillVote = 4;
                TriggerExecute(gt_BeginTheElection, true, false);
            }

            if ((gv_votingSystem == 3)) {
                gv_yearsUntillVote = 8;
                TriggerExecute(gt_BeginTheElection, true, false);
            }

        }

        gv_eUPopulation *= 100;
        TriggerExecute(gt_LetsRefreshVotes, true, false);
        if ((gv_globalPopulation > 10000)) {
            if ((gv_globalPopulation > 10000000)) {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/F054A049") + (IntToText((gv_globalPopulation / 1000000)) + StringExternal("Param/Value/153E1E7A"))));
            }
            else {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/49F31B5A") + (IntToText((gv_globalPopulation / 1000)) + StringExternal("Param/Value/07FBD5D6"))));
            }
        }
        else {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/D8982D26") + (IntToText(gv_globalPopulation) + StringExternal("Param/Value/FE8072B3"))));
        }
    }
    else {
        gv_month += 1;
    }
    libNtve_gf_SetDialogItemText(gv_timeUIItem, ((StringToText(gf_GetMonth(gv_month)) + StringExternal("Param/Value/B85F1B76")) + IntToText(gv_year)), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MonthlyTick_Init () {
    gt_MonthlyTick = TriggerCreate("gt_MonthlyTick_Func");
    TriggerAddEventTimePeriodic(gt_MonthlyTick, 10.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ShowTimeUI
//--------------------------------------------------------------------------------------------------
bool gt_ShowTimeUI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(gv_timeUI, PlayerGroupAll(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShowTimeUI_Init () {
    gt_ShowTimeUI = TriggerCreate("gt_ShowTimeUI_Func");
    TriggerAddEventTimeElapsed(gt_ShowTimeUI, 2.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Time UI
//--------------------------------------------------------------------------------------------------
bool gt_TimeUI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(155, 55, c_anchorTopLeft, 0, 145, true);
    gv_timeUI = DialogLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 155, 55, c_anchorLeft, 20, 18, StringExternal("Param/Value/944DA1A8"), ColorWithAlpha(0,0,0,0), true, 1.0);
    gv_timeUIItem = DialogControlLastCreated();
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_scrollbar_frame.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    DialogSetImage(gv_timeUI, "Assets\\Textures\\ui_scrollbar_frame.dds");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TimeUI_Init () {
    gt_TimeUI = TriggerCreate("gt_TimeUI_Func");
    TriggerAddEventTimeElapsed(gt_TimeUI, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Manage Unit Limit
//--------------------------------------------------------------------------------------------------
bool gt_ManageUnitLimit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_unitsAtPlay;
    int lv_structures;

    // Automatic Variable Declarations
    unitgroup auto0E1E4151_g;
    int auto0E1E4151_u;
    unit auto0E1E4151_var;
    unitgroup auto4255A2DB_g;
    int auto4255A2DB_u;
    unit auto4255A2DB_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_unitsAtPlay = 0;
    auto0E1E4151_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto0E1E4151_u = UnitGroupCount(auto0E1E4151_g, c_unitCountAll);
    for (;; auto0E1E4151_u -= 1) {
        auto0E1E4151_var = UnitGroupUnitFromEnd(auto0E1E4151_g, auto0E1E4151_u);
        if (auto0E1E4151_var == null) { break; }
        lv_unitsAtPlay += 1;
    }
    auto4255A2DB_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4255A2DB_u = UnitGroupCount(auto4255A2DB_g, c_unitCountAll);
    for (;; auto4255A2DB_u -= 1) {
        auto4255A2DB_var = UnitGroupUnitFromEnd(auto4255A2DB_g, auto4255A2DB_u);
        if (auto4255A2DB_var == null) { break; }
        lv_structures += 1;
    }
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/6BEBC037"));
    Wait(6.0, c_timeGame);
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/D6D0813D") + TextWithColor(IntToText(lv_unitsAtPlay), Color(100.00, 0.00, 0.00))));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/3713E251") + IntToText(lv_structures)));
    Wait(2.0, c_timeGame);
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/5A327A2D") + TextWithColor(IntToText(lv_unitsAtPlay), Color(100.00, 0.00, 0.00))));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/EF563E85") + IntToText(lv_structures)));
    Wait(2.0, c_timeGame);
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/1AE9A105") + TextWithColor(IntToText(lv_unitsAtPlay), Color(100.00, 0.00, 0.00))));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/16891F68") + IntToText(lv_structures)));
    Wait(2.0, c_timeGame);
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/10719A7B") + TextWithColor(IntToText(lv_unitsAtPlay), Color(100.00, 0.00, 0.00))));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/7E04C14E") + IntToText(lv_structures)));
    Wait(2.0, c_timeGame);
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/5C2CBE3A") + TextWithColor(IntToText(lv_unitsAtPlay), Color(100.00, 0.00, 0.00))));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/51F6DF6F") + IntToText(lv_structures)));
    libNtve_gf_RemoveDoodadsinRegion(RegionEntireMap(), null);
    Wait(60.0, c_timeGame);
    TriggerExecute(gt_MiddleEastConfederationLeave, false, false);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ManageUnitLimit_Init () {
    gt_ManageUnitLimit = TriggerCreate("gt_ManageUnitLimit_Func");
    TriggerAddEventChatMessage(gt_ManageUnitLimit, c_playerAny, "We have hit the unit limit", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Manage Unit Limit 2
//--------------------------------------------------------------------------------------------------
bool gt_ManageUnitLimit2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_unitsAtPlay;

    // Automatic Variable Declarations
    unitgroup auto2C525FE9_g;
    int auto2C525FE9_u;
    unit auto2C525FE9_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_unitsAtPlay = 0;
    auto2C525FE9_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto2C525FE9_u = UnitGroupCount(auto2C525FE9_g, c_unitCountAll);
    for (;; auto2C525FE9_u -= 1) {
        auto2C525FE9_var = UnitGroupUnitFromEnd(auto2C525FE9_g, auto2C525FE9_u);
        if (auto2C525FE9_var == null) { break; }
        lv_unitsAtPlay += 1;
    }
    if ((lv_unitsAtPlay > 2500)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/B71F5F56"));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ManageUnitLimit2_Init () {
    gt_ManageUnitLimit2 = TriggerCreate("gt_ManageUnitLimit2_Func");
    TriggerAddEventTimePeriodic(gt_ManageUnitLimit2, 140.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CollectDataYearly
//--------------------------------------------------------------------------------------------------
bool gt_CollectDataYearly_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_dataLine;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dataLine = 1;

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.1, c_timeGame);
    gf_DataLinePushBack();
    gf_CollectPopulationYearly(lv_dataLine);
    lv_dataLine += 1;
    gf_CollectTotalCasualtiesYearly(lv_dataLine);
    lv_dataLine += 1;
    gf_CollectGDPYearly(lv_dataLine);
    lv_dataLine += 1;
    gf_CollectGDPCapitYearly(lv_dataLine);
    lv_dataLine += 1;
    gf_CollectCreditsYearly(lv_dataLine);
    lv_dataLine += 1;
    gf_CollectDebtYearly(lv_dataLine);
    lv_dataLine += 1;
    gf_CollectCorporationValueYearly(lv_dataLine);
    lv_dataLine += 1;
    gf_CollectTechnologyYearly(lv_dataLine);
    lv_dataLine += 1;
    gf_CollectFoodYearly(lv_dataLine);
    lv_dataLine += 1;
    gf_CollectMetalYearly(lv_dataLine);
    lv_dataLine += 1;
    gf_CollectOilYearly(lv_dataLine);
    gv_yearsOfData += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CollectDataYearly_Init () {
    gt_CollectDataYearly = TriggerCreate("gt_CollectDataYearly_Func");
    TriggerAddEventTimePeriodic(gt_CollectDataYearly, gv_tIME_PER_YEAR, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CollectDataMonthly
//--------------------------------------------------------------------------------------------------
bool gt_CollectDataMonthly_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_timeline[0][0] = gv_economicState;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CollectDataMonthly_Init () {
    gt_CollectDataMonthly = TriggerCreate("gt_CollectDataMonthly_Func");
    TriggerAddEventTimePeriodic(gt_CollectDataMonthly, (gv_tIME_PER_YEAR / 12), c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DeselectData
//--------------------------------------------------------------------------------------------------
bool gt_DeselectData_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_graphSelection[30]) || (EventDialogControl() == gv_graphSelection[28]) || (EventDialogControl() == gv_graphSelection[26])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventDialogControl() == gv_graphSelection[26])) {
        gv_allSelectedData[EventPlayer()][1] = 0;
        gv_allSelectedDataTypes[EventPlayer()][1] = 0;
    }
    else {
        if ((EventDialogControl() == gv_graphSelection[28])) {
            gv_allSelectedData[EventPlayer()][2] = 0;
            gv_allSelectedDataTypes[EventPlayer()][2] = 0;
        }
        else {
            if ((EventDialogControl() == gv_graphSelection[30])) {
                gv_allSelectedData[EventPlayer()][3] = 0;
                gv_allSelectedDataTypes[EventPlayer()][3] = 0;
            }

        }
    }
    gf_RefreshKey(EventPlayer());
    gf_Grapher(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DeselectData_Init () {
    gt_DeselectData = TriggerCreate("gt_DeselectData_Func");
    TriggerAddEventDialogControl(gt_DeselectData, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SelectData
//--------------------------------------------------------------------------------------------------
bool gt_SelectData_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_incrementor;

    // Automatic Variable Declarations
    const int auto2FA30D1B_ae = 11;
    const int auto2FA30D1B_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_graphSelection[1]) || (EventDialogControl() == gv_graphSelection[2]) || (EventDialogControl() == gv_graphSelection[3]) || (EventDialogControl() == gv_graphSelection[4]) || (EventDialogControl() == gv_graphSelection[5]) || (EventDialogControl() == gv_graphSelection[6]) || (EventDialogControl() == gv_graphSelection[7]) || (EventDialogControl() == gv_graphSelection[8]) || (EventDialogControl() == gv_graphSelection[9]) || (EventDialogControl() == gv_graphSelection[10]) || (EventDialogControl() == gv_graphSelection[11])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_incrementor = 1;
    for ( ; ( (auto2FA30D1B_ai >= 0 && lv_incrementor <= auto2FA30D1B_ae) || (auto2FA30D1B_ai < 0 && lv_incrementor >= auto2FA30D1B_ae) ) ; lv_incrementor += auto2FA30D1B_ai ) {
        if ((EventDialogControl() == gv_graphSelection[lv_incrementor])) {
            gv_currentlySelectedData[EventPlayer()] = lv_incrementor;
            gf_SetCurrentSelectedData(EventPlayer());
            gv_currentSelectedDataType[EventPlayer()] = 0;
            gf_SetCurrentSelectedDataType(EventPlayer());
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SelectData_Init () {
    gt_SelectData = TriggerCreate("gt_SelectData_Func");
    TriggerAddEventDialogControl(gt_SelectData, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SelectDataType
//--------------------------------------------------------------------------------------------------
bool gt_SelectDataType_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_incrementor;

    // Automatic Variable Declarations
    int auto753ABD73_ae;
    const int auto753ABD73_ai = 1;
    const int auto8B1034A7_ae = 3;
    const int auto8B1034A7_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_graphSelection[14]) || (EventDialogControl() == gv_graphSelection[15]) || (EventDialogControl() == gv_graphSelection[16]) || (EventDialogControl() == gv_graphSelection[17]) || (EventDialogControl() == gv_graphSelection[18]) || (EventDialogControl() == gv_graphSelection[19]) || (EventDialogControl() == gv_graphSelection[20]) || (EventDialogControl() == gv_graphSelection[21]) || (EventDialogControl() == gv_graphSelection[22]) || (EventDialogControl() == gv_graphSelection[23]) || (EventDialogControl() == gv_graphSelection[24])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventDialogControl() == gv_graphSelection[14])) {
        gv_currentSelectedDataType[EventPlayer()] = 8;
        gf_SetCurrentSelectedDataType(EventPlayer());
    }
    else {
        auto753ABD73_ae = gv_playercount;
        lv_incrementor = 1;
        for ( ; ( (auto753ABD73_ai >= 0 && lv_incrementor <= auto753ABD73_ae) || (auto753ABD73_ai < 0 && lv_incrementor >= auto753ABD73_ae) ) ; lv_incrementor += auto753ABD73_ai ) {
            if ((EventDialogControl() == gv_graphSelection[(lv_incrementor + 14)])) {
                gv_currentSelectedDataType[EventPlayer()] = (lv_incrementor + 0);
                gf_SetCurrentSelectedDataType(EventPlayer());
                break;
            }

        }
    }
    lv_incrementor = 1;
    for ( ; ( (auto8B1034A7_ai >= 0 && lv_incrementor <= auto8B1034A7_ae) || (auto8B1034A7_ai < 0 && lv_incrementor >= auto8B1034A7_ae) ) ; lv_incrementor += auto8B1034A7_ai ) {
        if ((EventDialogControl() == gv_graphSelection[(lv_incrementor + 21)])) {
            gv_currentSelectedDataType[EventPlayer()] = lv_incrementor;
            gf_SetCurrentSelectedDataType(EventPlayer());
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SelectDataType_Init () {
    gt_SelectDataType = TriggerCreate("gt_SelectDataType_Func");
    TriggerAddEventDialogControl(gt_SelectDataType, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SubmitSelection
//--------------------------------------------------------------------------------------------------
bool gt_SubmitSelection_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_incrementor;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_graphSelection[13]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_AddDataMovment(EventPlayer());
    gv_allSelectedDataTypes[EventPlayer()][1] = gv_currentSelectedDataType[EventPlayer()];
    gv_allSelectedData[EventPlayer()][1] = gv_currentlySelectedData[EventPlayer()];
    gf_RefreshKey(EventPlayer());
    gf_Grapher(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SubmitSelection_Init () {
    gt_SubmitSelection = TriggerCreate("gt_SubmitSelection_Func");
    TriggerAddEventDialogControl(gt_SubmitSelection, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GraphBaseInitUI
//--------------------------------------------------------------------------------------------------
bool gt_GraphBaseInitUI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_incrementor;
    int lv_concurrentIncrementor;

    // Automatic Variable Declarations
    const int auto35C7E1F5_ae = gv_aLLOWED_CONCURRENT_ITEMS;
    const int auto35C7E1F5_ai = 1;
    const int autoE4DB6805_ae = gv_dATA_PER_GRAPH;
    const int autoE4DB6805_ai = 1;
    int auto79B4CA01_ae;
    const int auto79B4CA01_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(1000, 100, c_anchorTopLeft, 153, 62, true);
    gv_graphGUI[0] = DialogLastCreated();
    DialogSetImage(DialogLastCreated(), "Assets\\Textures\\ui_scrollbar_frame.dds");
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogCreate(1000, 500, c_anchorTopLeft, 153, 142, true);
    gv_graphGUI[1] = DialogLastCreated();
    DialogSetImage(DialogLastCreated(), "Assets\\Textures\\ui_scrollbar_frame.dds");
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_CreateDialogItemButton(gv_graphGUI[0], 220, 45, c_anchorTopLeft, 10, 10, StringToText(""), StringExternal("Param/Value/492CB2D3"), "");
    gv_graphSelection[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_graphGUI[0], 220, 45, c_anchorTopLeft, 10, 46, StringToText(""), StringExternal("Param/Value/4D0DC9DB"), "");
    gv_graphSelection[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_graphGUI[0], 220, 45, c_anchorTopLeft, 225, 10, StringToText(""), StringExternal("Param/Value/C0692352"), "");
    gv_graphSelection[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_graphGUI[0], 220, 45, c_anchorTopLeft, 225, 46, StringToText(""), StringExternal("Param/Value/9BA6072A"), "");
    gv_graphSelection[4] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_graphGUI[0], 220, 45, c_anchorTopLeft, 440, 10, StringToText(""), StringExternal("Param/Value/D32B5622"), "");
    gv_graphSelection[5] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_graphGUI[0], 220, 45, c_anchorTopLeft, 440, 46, StringToText(""), StringExternal("Param/Value/27FBB585"), "");
    gv_graphSelection[6] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_graphGUI[0], 220, 45, c_anchorTopLeft, 655, 10, StringToText(""), StringExternal("Param/Value/1FFE51C0"), "");
    gv_graphSelection[7] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_graphGUI[0], 220, 45, c_anchorTopLeft, 655, 46, StringToText(""), StringExternal("Param/Value/9CF0E38F"), "");
    gv_graphSelection[8] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_graphGUI[0], 115, 30, c_anchorTopLeft, 872, 10, StringToText(""), StringExternal("Param/Value/C61550A5"), "");
    gv_graphSelection[9] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_graphGUI[0], 115, 30, c_anchorTopLeft, 872, 35, StringToText(""), StringExternal("Param/Value/A1065D50"), "");
    gv_graphSelection[10] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_graphGUI[0], 115, 30, c_anchorTopLeft, 872, 60, StringToText(""), StringExternal("Param/Value/63A73860"), "");
    gv_graphSelection[11] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 815, 1, c_anchorTopLeft, 120, 38, StringToText(""), "Assets\\Declare War, Neutral, Peace\\GreyBox.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(gv_graphGUI[1], 100, 50, c_anchorTopLeft, 40, 30, StringExternal("Param/Value/6BC7A3BE"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_graphYAxis[0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 815, 1, c_anchorTopLeft, 120, 98, StringToText(""), "Assets\\Declare War, Neutral, Peace\\GreyBox.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(gv_graphGUI[1], 100, 50, c_anchorTopLeft, 40, 90, StringExternal("Param/Value/B8BC1176"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_graphYAxis[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 815, 1, c_anchorTopLeft, 120, 159, StringToText(""), "Assets\\Declare War, Neutral, Peace\\GreyBox.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(gv_graphGUI[1], 100, 50, c_anchorTopLeft, 40, 150, StringExternal("Param/Value/B762287E"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_graphYAxis[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 815, 1, c_anchorTopLeft, 120, 218, StringToText(""), "Assets\\Declare War, Neutral, Peace\\GreyBox.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(gv_graphGUI[1], 100, 50, c_anchorTopLeft, 40, 210, StringExternal("Param/Value/17CB20F5"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_graphYAxis[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 815, 1, c_anchorTopLeft, 120, 278, StringToText(""), "Assets\\Declare War, Neutral, Peace\\GreyBox.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(gv_graphGUI[1], 100, 50, c_anchorTopLeft, 40, 270, StringExternal("Param/Value/7EFC5CEB"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_graphYAxis[4] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 815, 1, c_anchorTopLeft, 120, 338, StringToText(""), "Assets\\Declare War, Neutral, Peace\\GreyBox.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(gv_graphGUI[1], 100, 50, c_anchorTopLeft, 40, 330, StringExternal("Param/Value/0794AE44"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_graphYAxis[5] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 815, 1, c_anchorTopLeft, 120, 398, StringToText(""), "Assets\\Declare War, Neutral, Peace\\GreyBox.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(gv_graphGUI[1], 100, 50, c_anchorTopLeft, 40, 390, StringExternal("Param/Value/9CC092E2"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_graphYAxis[6] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 1, 370, c_anchorTopLeft, 126, 38, StringToText(""), "Assets\\Declare War, Neutral, Peace\\GreyBox.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(gv_graphGUI[1], 100, 50, c_anchorTopLeft, 96, 407, StringExternal("Param/Value/EE65DC19"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_graphXAxis[0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 1, 370, c_anchorTopLeft, 226, 38, StringToText(""), "Assets\\Declare War, Neutral, Peace\\GreyBox.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(gv_graphGUI[1], 100, 50, c_anchorTopLeft, 196, 407, StringExternal("Param/Value/F9245DAE"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_graphXAxis[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 1, 370, c_anchorTopLeft, 335, 38, StringToText(""), "Assets\\Declare War, Neutral, Peace\\GreyBox.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(gv_graphGUI[1], 100, 50, c_anchorTopLeft, 304, 407, StringExternal("Param/Value/BBA4FAA2"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_graphXAxis[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 1, 370, c_anchorTopLeft, 435, 38, StringToText(""), "Assets\\Declare War, Neutral, Peace\\GreyBox.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(gv_graphGUI[1], 100, 50, c_anchorTopLeft, 404, 407, StringExternal("Param/Value/B6060346"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_graphXAxis[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 1, 370, c_anchorTopLeft, 535, 38, StringToText(""), "Assets\\Declare War, Neutral, Peace\\GreyBox.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(gv_graphGUI[1], 100, 50, c_anchorTopLeft, 504, 407, StringExternal("Param/Value/8AF2E025"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_graphXAxis[4] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 1, 370, c_anchorTopLeft, 635, 38, StringToText(""), "Assets\\Declare War, Neutral, Peace\\GreyBox.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(gv_graphGUI[1], 100, 50, c_anchorTopLeft, 604, 407, StringExternal("Param/Value/F8857070"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_graphXAxis[5] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 1, 370, c_anchorTopLeft, 735, 38, StringToText(""), "Assets\\Declare War, Neutral, Peace\\GreyBox.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(gv_graphGUI[1], 100, 50, c_anchorTopLeft, 704, 407, StringExternal("Param/Value/C8B610D4"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_graphXAxis[6] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 1, 370, c_anchorTopLeft, 835, 38, StringToText(""), "Assets\\Declare War, Neutral, Peace\\GreyBox.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(gv_graphGUI[1], 100, 50, c_anchorTopLeft, 804, 407, StringExternal("Param/Value/331A7078"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_graphXAxis[7] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 1, 370, c_anchorTopLeft, 935, 38, StringToText(""), "Assets\\Declare War, Neutral, Peace\\GreyBox.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(gv_graphGUI[1], 100, 50, c_anchorTopLeft, 904, 407, StringExternal("Param/Value/A8CA71E9"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_graphXAxis[8] = DialogControlLastCreated();
    lv_concurrentIncrementor = 1;
    for ( ; ( (auto35C7E1F5_ai >= 0 && lv_concurrentIncrementor <= auto35C7E1F5_ae) || (auto35C7E1F5_ai < 0 && lv_concurrentIncrementor >= auto35C7E1F5_ae) ) ; lv_concurrentIncrementor += auto35C7E1F5_ai ) {
        lv_incrementor = 0;
        for ( ; ( (autoE4DB6805_ai >= 0 && lv_incrementor <= autoE4DB6805_ae) || (autoE4DB6805_ai < 0 && lv_incrementor >= autoE4DB6805_ae) ) ; lv_incrementor += autoE4DB6805_ai ) {
            libNtve_gf_CreateDialogItemImage(gv_graphGUI[1], gv_gRAPH_X_WIDTH, gv_gRAPH_Y_HEIGHT, c_anchorTopLeft, 50, 50, StringToText(""), "Assets\\Textures\\Progress Bar\\YellowBox.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
            gv_graphItems[lv_incrementor][lv_concurrentIncrementor] = DialogControlLastCreated();
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        }
    }
    DialogCreate(250, 300, c_anchorTopLeft, 1130, 62, true);
    gv_graphGUI[2] = DialogLastCreated();
    DialogSetImage(DialogLastCreated(), "Assets\\Textures\\ui_scrollbar_frame.dds");
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, 25, 200, StringToText(""), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Void_RegularXSmall", PlayerGroupAll());
    gv_graphSelection[12] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 50, c_anchorTopLeft, 25, 230, StringToText(""), StringExternal("Param/Value/5E84545F"), "");
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
    gv_graphSelection[13] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 30, c_anchorTopLeft, 25, 10, StringToText(""), StringExternal("Param/Value/6B36372B"), "");
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Void_ShipSecondaryLabelSmall", PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(100,100,100), PlayerGroupAll());
    gv_graphSelection[14] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    auto79B4CA01_ae = PlayerGroupCount(gv_users);
    lv_incrementor = 1;
    for ( ; ( (auto79B4CA01_ai >= 0 && lv_incrementor <= auto79B4CA01_ae) || (auto79B4CA01_ai < 0 && lv_incrementor >= auto79B4CA01_ae) ) ; lv_incrementor += auto79B4CA01_ai ) {
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 30, c_anchorTopLeft, 25, (10 + (23 * lv_incrementor)), StringToText(""), gf_NationOfPlayer(lv_incrementor), "");
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Void_ShipSecondaryLabelSmall", PlayerGroupAll());
        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(100,100,100), PlayerGroupAll());
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        gv_graphSelection[(14 + lv_incrementor)] = DialogControlLastCreated();
    }
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 50, c_anchorTopLeft, 25, 30, StringToText(""), StringExternal("Param/Value/2D2E2694"), "");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    gv_graphSelection[22] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 50, c_anchorTopLeft, 25, 80, StringToText(""), StringExternal("Param/Value/CCA605F9"), "");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    gv_graphSelection[23] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 50, c_anchorTopLeft, 25, 130, StringToText(""), StringExternal("Param/Value/64F3A4F1"), "");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    gv_graphSelection[24] = DialogControlLastCreated();
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogCreate(250, 302, c_anchorTopLeft, 1130, 340, true);
    gv_graphGUI[3] = DialogLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, 110, 20, StringExternal("Param/Value/8BBAD8C3"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 10, 10, c_anchorTopLeft, 20, 65, StringToText(""), "Military\\MainUI\\bigtealbox.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 175, 50, c_anchorTopLeft, 40, 50, StringToText(""), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Void_RegularXSmall", PlayerGroupAll());
    gv_graphSelection[25] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 40, 40, c_anchorTopLeft, 200, 55, StringToText(""), StringExternal("Param/Value/390E2F48"), "");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Declare War, Neutral, Peace\\Transparent Box.tga", PlayerGroupAll());
    gv_graphSelection[26] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 10, 10, c_anchorTopLeft, 20, 115, StringToText(""), "Military\\Music\\GameScreens\\v2\\MainUI\\MainUI\\bigOrangebox.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 175, 50, c_anchorTopLeft, 40, 100, StringToText(""), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Void_RegularXSmall", PlayerGroupAll());
    gv_graphSelection[27] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 40, 40, c_anchorTopLeft, 200, 105, StringToText(""), StringExternal("Param/Value/0AFD101B"), "");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Declare War, Neutral, Peace\\Transparent Box.tga", PlayerGroupAll());
    gv_graphSelection[28] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 10, 10, c_anchorTopLeft, 20, 165, StringToText(""), "Assets\\Textures\\Progress Bar\\YellowBox.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 175, 50, c_anchorTopLeft, 40, 150, StringToText(""), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Void_RegularXSmall", PlayerGroupAll());
    gv_graphSelection[29] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 40, 40, c_anchorTopLeft, 200, 155, StringToText(""), StringExternal("Param/Value/F43BFBC1"), "");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Declare War, Neutral, Peace\\Transparent Box.tga", PlayerGroupAll());
    gv_graphSelection[30] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 10, 10, c_anchorTopLeft, 20, 215, StringToText(""), "Assets\\Textures\\green.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 175, 50, c_anchorTopLeft, 40, 195, StringExternal("Param/Value/954EDAB2"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Void_RegularXSmall", PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 10, 10, c_anchorTopLeft, 20, 250, StringToText(""), "Diplomatic Policies\\Progress Bar\\Red Box.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 175, 50, c_anchorTopLeft, 40, 230, StringExternal("Param/Value/54A704CF"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Void_RegularXSmall", PlayerGroupAll());
    DialogSetImage(DialogLastCreated(), "Assets\\Textures\\ui_scrollbar_frame.dds");
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogSetVisible(gv_graphGUI[0], PlayerGroupAll(), false);
    DialogSetVisible(gv_graphGUI[1], PlayerGroupAll(), false);
    DialogSetVisible(gv_graphGUI[2], PlayerGroupAll(), false);
    DialogSetVisible(gv_graphGUI[3], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GraphBaseInitUI_Init () {
    gt_GraphBaseInitUI = TriggerCreate("gt_GraphBaseInitUI_Func");
    TriggerAddEventMapInit(gt_GraphBaseInitUI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UnitDies
//--------------------------------------------------------------------------------------------------
bool gt_UnitDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) != "ParamilitaryForces"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_peopleDead[UnitGetOwner(EventUnit())][UnitGetOwner(EventUnitDamageSourceUnit())][0] += 5;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitDies_Init () {
    gt_UnitDies = TriggerCreate("gt_UnitDies_Func");
    TriggerAddEventUnitDied(gt_UnitDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MainUI
//--------------------------------------------------------------------------------------------------
bool gt_MainUI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(220, 220, c_anchorTopLeft, -12, -12, true);
    gv_mainUI[0] = DialogLastCreated();
    DialogSetImage(DialogLastCreated(), "Assets\\Declare War, Neutral, Peace\\Transparent Box.tga");
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 200, 200, c_anchorTopLeft, 5, 5, StringToText(""), "Assets\\Nations\\NonNation.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/DC6A8F6B"), PlayerGroupAll());
    gv_mainDialogItemsUI[0] = DialogControlLastCreated();
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogCreate(688, 200, c_anchorTopLeft, -12, -12, true);
    DialogSetImage(DialogLastCreated(), "Assets\\Declare War, Neutral, Peace\\Transparent Box.tga");
    gv_mainUI[1] = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 380, 91, c_anchorTopLeft, 168, 5, StringToText(""), "Military\\Music\\GameScreens\\v2\\MainUI\\3rdCompNonEU.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_mainDialogItemsUI[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 90, 72, c_anchorTopLeft, 180, 10, StringExternal("Param/Value/68310915"), StringToText(""), "");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Declare War, Neutral, Peace\\Transparent Box.tga", PlayerGroupAll());
    gv_mainDialogItemsUI[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 92, 72, c_anchorTopLeft, 268, 10, StringExternal("Param/Value/DF1656EF"), StringToText(""), "");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Declare War, Neutral, Peace\\Transparent Box.tga", PlayerGroupAll());
    gv_mainDialogItemsUI[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 96, 72, c_anchorTopLeft, 444, 10, StringExternal("Param/Value/A2FB636D"), StringToText(""), "");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Declare War, Neutral, Peace\\Transparent Box.tga", PlayerGroupAll());
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
    gv_mainDialogItemsUI[4] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 96, 72, c_anchorTopLeft, 356, 10, StringExternal("Param/Value/F8E1FC26"), StringToText(""), "");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Declare War, Neutral, Peace\\Transparent Box.tga", PlayerGroupAll());
    gv_mainDialogItemsUI[5] = DialogControlLastCreated();
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MainUI_Init () {
    gt_MainUI = TriggerCreate("gt_MainUI_Func");
    TriggerAddEventTimeElapsed(gt_MainUI, 0.01, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ResearchButton
//--------------------------------------------------------------------------------------------------
bool gt_ResearchButton_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_open;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_mainDialogItemsUI[2]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_openMenu[EventPlayer()] == 2)) {
        gf_OpenCloseResearchMenu(EventPlayer(), false);
        gv_openMenu[EventPlayer()] = 0;
    }
    else {
        gf_OpenCloseResearchMenu(EventPlayer(), true);
        gv_openMenu[EventPlayer()] = 2;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ResearchButton_Init () {
    gt_ResearchButton = TriggerCreate("gt_ResearchButton_Func");
    TriggerAddEventDialogControl(gt_ResearchButton, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: EconomicButton
//--------------------------------------------------------------------------------------------------
bool gt_EconomicButton_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_open;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_mainDialogItemsUI[3]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_openMenu[EventPlayer()] == 3)) {
        gv_openMenu[EventPlayer()] = 0;
        gf_OpenCloseEconomy(EventPlayer(), false);
    }
    else {
        gv_openMenu[EventPlayer()] = 3;
        gf_OpenCloseEconomy(EventPlayer(), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EconomicButton_Init () {
    gt_EconomicButton = TriggerCreate("gt_EconomicButton_Func");
    TriggerAddEventDialogControl(gt_EconomicButton, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: EUButton
//--------------------------------------------------------------------------------------------------
bool gt_EUButton_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_open;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_mainDialogItemsUI[4]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_openMenu[EventPlayer()] == 4)) {
        gv_openMenu[EventPlayer()] = 0;
        gf_OpenCloseEU(EventPlayer(), false);
    }
    else {
        gv_openMenu[EventPlayer()] = 4;
        gf_OpenCloseEU(EventPlayer(), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EUButton_Init () {
    gt_EUButton = TriggerCreate("gt_EUButton_Func");
    TriggerAddEventDialogControl(gt_EUButton, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GraphButton
//--------------------------------------------------------------------------------------------------
bool gt_GraphButton_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_open;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_mainDialogItemsUI[5]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_openMenu[EventPlayer()] == 5)) {
        gv_openMenu[EventPlayer()] = 0;
        gf_OpenCloseGraphs(EventPlayer(), false);
    }
    else {
        gv_openMenu[EventPlayer()] = 5;
        gf_OpenCloseGraphs(EventPlayer(), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GraphButton_Init () {
    gt_GraphButton = TriggerCreate("gt_GraphButton_Func");
    TriggerAddEventDialogControl(gt_GraphButton, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PlaugeGiver
//--------------------------------------------------------------------------------------------------
bool gt_PlaugeGiver_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto13D8378C_n;
    int auto13D8378C_i;

    // Actions
    if (!runActions) {
        return true;
    }

    auto13D8378C_n = libNtve_gf_ArithmeticIntClamp((gv_globalPopulation / 200000), RandomInt(0, 1), 20);
    for (auto13D8378C_i = 1; auto13D8378C_i <= auto13D8378C_n; auto13D8378C_i += 1) {
        gf_GivePlauge();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlaugeGiver_Init () {
    gt_PlaugeGiver = TriggerCreate("gt_PlaugeGiver_Func");
    TriggerAddEventTimePeriodic(gt_PlaugeGiver, 88.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI and Rebellion
//--------------------------------------------------------------------------------------------------
bool gt_AIandRebellion_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_aICount;
    int lv_rebellionCounter;

    // Automatic Variable Declarations
    unitgroup autoDA26FB5C_g;
    int autoDA26FB5C_u;
    unit autoDA26FB5C_var;
    playergroup autoA94C579E_g;
    int autoA94C579E_var;
    unitgroup auto29468C50_g;
    int auto29468C50_u;
    unit auto29468C50_var;
    unitgroup autoDA8D1987_g;
    int autoDA8D1987_u;
    unit autoDA8D1987_var;
    unitgroup auto3E5EAF49_g;
    int auto3E5EAF49_u;
    unit auto3E5EAF49_var;
    unitgroup auto5230FE7D_g;
    int auto5230FE7D_u;
    unit auto5230FE7D_var;
    unitgroup auto9D4EF83D_g;
    int auto9D4EF83D_u;
    unit auto9D4EF83D_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoDA26FB5C_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterMechanical), 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoDA26FB5C_u = UnitGroupCount(autoDA26FB5C_g, c_unitCountAll);
    for (;; autoDA26FB5C_u -= 1) {
        autoDA26FB5C_var = UnitGroupUnitFromEnd(autoDA26FB5C_g, autoDA26FB5C_u);
        if (autoDA26FB5C_var == null) { break; }
        UnitBehaviorRemove(autoDA26FB5C_var, "CollaborativeAINetwork", 1);
        UnitBehaviorRemove(autoDA26FB5C_var, "PredictiveAISystems", 1);
        UnitBehaviorRemove(autoDA26FB5C_var, "AITargettingSystems", 1);
        if ((PlayerGroupHasPlayer(gv_users, UnitGetOwner(autoDA26FB5C_var)) == true)) {
            if ((TechTreeUpgradeCount(UnitGetOwner(autoDA26FB5C_var), "AITargetingSystems", c_techCountCompleteOnly) == 1)) {
                if ((TechTreeUpgradeCount(UnitGetOwner(autoDA26FB5C_var), "PredictiveAISystems", c_techCountCompleteOnly) == 1)) {
                    if ((TechTreeUpgradeCount(UnitGetOwner(autoDA26FB5C_var), "CollaborativeAINetwork", c_techCountCompleteOnly) == 1)) {
                        UnitBehaviorAdd(autoDA26FB5C_var, "CollaborativeAINetwork", autoDA26FB5C_var, 1);
                        lv_rebellionCounter += 9;
                    }
                    else {
                        UnitBehaviorAdd(autoDA26FB5C_var, "PredictiveAISystems", autoDA26FB5C_var, 1);
                        lv_rebellionCounter += 6;
                    }
                }
                else {
                    UnitBehaviorAdd(autoDA26FB5C_var, "AITargettingSystems", autoDA26FB5C_var, 1);
                    lv_rebellionCounter += 3;
                }
            }

        }
        else {
            if ((UnitGetOwner(autoDA26FB5C_var) == 9)) {
                UnitBehaviorAdd(autoDA26FB5C_var, "CollaborativeAINetwork", autoDA26FB5C_var, 1);
                lv_aICount += 1;
            }
            else {
                if ((gv_russianDifficulty > 200)) {
                    if ((gv_russianDifficulty > 400)) {
                        if ((gv_russianDifficulty > 600)) {
                            UnitBehaviorAdd(autoDA26FB5C_var, "CollaborativeAINetwork", autoDA26FB5C_var, 1);
                        }
                        else {
                            UnitBehaviorAdd(autoDA26FB5C_var, "PredictiveAISystems", autoDA26FB5C_var, 1);
                        }
                    }
                    else {
                        UnitBehaviorAdd(autoDA26FB5C_var, "AITargettingSystems", autoDA26FB5C_var, 1);
                    }
                }

            }
        }
    }
    lv_rebellionCounter = FixedToInt((IntToFixed(lv_rebellionCounter) * RandomFixed(0.85, 1.15)));
    autoA94C579E_g = gv_users;
    autoA94C579E_var = -1;
    while (true) {
        autoA94C579E_var = PlayerGroupNextPlayer(autoA94C579E_g, autoA94C579E_var);
        if (autoA94C579E_var < 0) { break; }
        lv_rebellionCounter -= 15;
    }
    if ((RandomInt(-400, lv_rebellionCounter) > 400) && (lv_rebellionCounter > 400)) {
        TriggerEnable(gt_Player9AIRebellionAI, true);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/BC4710A4"));
        auto29468C50_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterMechanical), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto29468C50_u = UnitGroupCount(auto29468C50_g, c_unitCountAll);
        for (;; auto29468C50_u -= 1) {
            auto29468C50_var = UnitGroupUnitFromEnd(auto29468C50_g, auto29468C50_u);
            if (auto29468C50_var == null) { break; }
            if ((UnitGetOwner(auto29468C50_var) < 8) && ((TechTreeUpgradeCount(UnitGetOwner(auto29468C50_var), "AITargetingSystems", c_techCountCompleteOnly) == 1) || (TechTreeUpgradeCount(UnitGetOwner(auto29468C50_var), "PredictiveAISystems", c_techCountCompleteOnly) == 1) || (TechTreeUpgradeCount(UnitGetOwner(auto29468C50_var), "CollaborativeAINetwork", c_techCountCompleteOnly) == 1))) {
                UnitSetOwner(auto29468C50_var, 9, true);
            }

        }
        autoDA8D1987_g = UnitGroup("GroundFactory", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoDA8D1987_u = UnitGroupCount(autoDA8D1987_g, c_unitCountAll);
        for (;; autoDA8D1987_u -= 1) {
            autoDA8D1987_var = UnitGroupUnitFromEnd(autoDA8D1987_g, autoDA8D1987_u);
            if (autoDA8D1987_var == null) { break; }
            if ((UnitGetOwner(autoDA8D1987_var) < 8) && ((TechTreeUpgradeCount(UnitGetOwner(autoDA8D1987_var), "AITargetingSystems", c_techCountCompleteOnly) == 1) || (TechTreeUpgradeCount(UnitGetOwner(autoDA8D1987_var), "PredictiveAISystems", c_techCountCompleteOnly) == 1) || (TechTreeUpgradeCount(UnitGetOwner(autoDA8D1987_var), "CollaborativeAINetwork", c_techCountCompleteOnly) == 1))) {
                UnitSetOwner(autoDA8D1987_var, 9, true);
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "VanguardMBT", 0, 9, UnitGetPosition(autoDA8D1987_var));
            }

        }
        auto3E5EAF49_g = UnitGroup("AircraftFactory", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto3E5EAF49_u = UnitGroupCount(auto3E5EAF49_g, c_unitCountAll);
        for (;; auto3E5EAF49_u -= 1) {
            auto3E5EAF49_var = UnitGroupUnitFromEnd(auto3E5EAF49_g, auto3E5EAF49_u);
            if (auto3E5EAF49_var == null) { break; }
            if ((UnitGetOwner(auto3E5EAF49_var) < 8) && ((TechTreeUpgradeCount(UnitGetOwner(auto3E5EAF49_var), "AITargetingSystems", c_techCountCompleteOnly) == 1) || (TechTreeUpgradeCount(UnitGetOwner(auto3E5EAF49_var), "PredictiveAISystems", c_techCountCompleteOnly) == 1) || (TechTreeUpgradeCount(UnitGetOwner(auto3E5EAF49_var), "CollaborativeAINetwork", c_techCountCompleteOnly) == 1))) {
                UnitSetOwner(auto3E5EAF49_var, 9, true);
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "ApolloBomber", 0, 9, UnitGetPosition(auto3E5EAF49_var));
            }

        }
        auto5230FE7D_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterPsionic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto5230FE7D_u = UnitGroupCount(auto5230FE7D_g, c_unitCountAll);
        for (;; auto5230FE7D_u -= 1) {
            auto5230FE7D_var = UnitGroupUnitFromEnd(auto5230FE7D_g, auto5230FE7D_u);
            if (auto5230FE7D_var == null) { break; }
            if ((UnitGetOwner(auto5230FE7D_var) < 8) && (RandomInt(0, 100) < 8) && (TechTreeUpgradeCount(UnitGetOwner(auto5230FE7D_var), "FullyAutomatedEconomyProject", c_techCountCompleteOnly) == 1) && ((TechTreeUpgradeCount(UnitGetOwner(auto5230FE7D_var), "AITargetingSystems", c_techCountCompleteOnly) == 1) || (TechTreeUpgradeCount(UnitGetOwner(auto5230FE7D_var), "PredictiveAISystems", c_techCountCompleteOnly) == 1) || (TechTreeUpgradeCount(UnitGetOwner(auto5230FE7D_var), "CollaborativeAINetwork", c_techCountCompleteOnly) == 1))) {
                UnitSetOwner(auto5230FE7D_var, 9, true);
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Phenom", 0, 9, UnitGetPosition(auto5230FE7D_var));
                UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(auto5230FE7D_var)), c_messageAreaSubtitle, StringExternal("Param/Value/4DA10789"));
            }

        }
    }

    if ((lv_aICount > 400)) {
        auto9D4EF83D_g = UnitGroup(null, 9, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), (lv_aICount - 300));
        auto9D4EF83D_u = UnitGroupCount(auto9D4EF83D_g, c_unitCountAll);
        for (;; auto9D4EF83D_u -= 1) {
            auto9D4EF83D_var = UnitGroupUnitFromEnd(auto9D4EF83D_g, auto9D4EF83D_u);
            if (auto9D4EF83D_var == null) { break; }
            UnitRemove(auto9D4EF83D_var);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIandRebellion_Init () {
    gt_AIandRebellion = TriggerCreate("gt_AIandRebellion_Func");
    TriggerAddEventTimePeriodic(gt_AIandRebellion, 24.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player9(AIRebellion) AI
//--------------------------------------------------------------------------------------------------
bool gt_Player9AIRebellionAI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_initElectricity;
    int lv_initOil;
    int lv_initMetal;
    int lv_randomSpawner;
    bool lv_groundStructuresAlive;
    unitgroup lv_groundStructures;
    unitgroup lv_factoryStructures;
    unitgroup lv_starportStructures;
    int lv_factories;
    int lv_starports;
    int lv_oil;
    int lv_metal;
    int lv_electricity;
    int lv_groundCount;
    int lv_airCount;
    int lv_upkeep;
    int lv_resources;

    // Automatic Variable Declarations
    unitgroup autoFC3914AF_g;
    int autoFC3914AF_u;
    unit autoFC3914AF_var;
    unitgroup auto293B8DF0_g;
    int auto293B8DF0_u;
    unit auto293B8DF0_var;
    unitgroup autoD4528755_g;
    int autoD4528755_u;
    unit autoD4528755_var;
    unitgroup autoA99F9EEB_g;
    int autoA99F9EEB_u;
    unit autoA99F9EEB_var;
    unitgroup autoD5A0954A_g;
    int autoD5A0954A_u;
    unit autoD5A0954A_var;
    unitgroup autoF85EA5DF_g;
    int autoF85EA5DF_u;
    unit autoF85EA5DF_var;
    unitgroup auto08F71B9E_g;
    int auto08F71B9E_u;
    unit auto08F71B9E_var;
    unitgroup auto8FBD6911_g;
    int auto8FBD6911_u;
    unit auto8FBD6911_var;
    unitgroup autoC56DF9C7_g;
    int autoC56DF9C7_u;
    unit autoC56DF9C7_var;
    unitgroup autoEBDDF4E7_g;
    int autoEBDDF4E7_u;
    unit autoEBDDF4E7_var;
    unitgroup auto664BDB4B_g;
    int auto664BDB4B_u;
    unit auto664BDB4B_var;
    unitgroup auto0D238DDC_g;
    int auto0D238DDC_u;
    unit auto0D238DDC_var;
    unitgroup auto67AB211C_g;
    int auto67AB211C_u;
    unit auto67AB211C_var;
    unitgroup autoB2A19773_g;
    int autoB2A19773_u;
    unit autoB2A19773_var;
    unitgroup auto7864B94B_g;
    int auto7864B94B_u;
    unit auto7864B94B_var;
    unitgroup auto05D3CA97_g;
    int auto05D3CA97_u;
    unit auto05D3CA97_var;
    unitgroup auto200FA3AC_g;
    int auto200FA3AC_u;
    unit auto200FA3AC_var;
    unitgroup auto7C76AF67_g;
    int auto7C76AF67_u;
    unit auto7C76AF67_var;
    unitgroup autoE1168201_g;
    int autoE1168201_u;
    unit autoE1168201_var;
    unitgroup auto73BBD88D_g;
    int auto73BBD88D_u;
    unit auto73BBD88D_var;
    unitgroup auto3D217BAD_g;
    int auto3D217BAD_u;
    unit auto3D217BAD_var;
    unitgroup auto172DCFE2_g;
    int auto172DCFE2_u;
    unit auto172DCFE2_var;
    unitgroup auto68919597_g;
    int auto68919597_u;
    unit auto68919597_var;
    unitgroup autoF07FEAC6_g;
    int autoF07FEAC6_u;
    unit autoF07FEAC6_var;
    unitgroup auto5E938933_g;
    int auto5E938933_u;
    unit auto5E938933_var;
    unitgroup auto934D07BA_g;
    int auto934D07BA_u;
    unit auto934D07BA_var;
    unitgroup autoDF3A58EB_g;
    int autoDF3A58EB_u;
    unit autoDF3A58EB_var;
    unitgroup autoEFA83CFC_g;
    int autoEFA83CFC_u;
    unit autoEFA83CFC_var;
    unitgroup autoBE9A60B3_g;
    int autoBE9A60B3_u;
    unit autoBE9A60B3_var;
    unitgroup auto2EEDAC7F_g;
    int auto2EEDAC7F_u;
    unit auto2EEDAC7F_var;
    unitgroup auto20AD3467_g;
    int auto20AD3467_u;
    unit auto20AD3467_var;
    unitgroup auto36630FF9_g;
    int auto36630FF9_u;
    unit auto36630FF9_var;
    unitgroup autoFA8F5957_g;
    int autoFA8F5957_u;
    unit autoFA8F5957_var;
    unitgroup auto883A9E25_g;
    int auto883A9E25_u;
    unit auto883A9E25_var;
    unitgroup autoE7AC1769_g;
    int autoE7AC1769_u;
    unit autoE7AC1769_var;
    unitgroup autoECC1CD57_g;
    int autoECC1CD57_u;
    unit autoECC1CD57_var;
    unitgroup auto772C7565_g;
    int auto772C7565_u;
    unit auto772C7565_var;

    // Variable Initialization
    lv_groundStructuresAlive = true;
    lv_groundStructures = UnitGroupEmpty();
    lv_factoryStructures = UnitGroupEmpty();
    lv_starportStructures = UnitGroupEmpty();
    lv_oil = gv_previousOil;
    lv_metal = gv_previousMetal;

    // Actions
    if (!runActions) {
        return true;
    }

    autoFC3914AF_g = UnitGroup("GroundFactory", 9, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoFC3914AF_u = UnitGroupCount(autoFC3914AF_g, c_unitCountAll);
    for (;; autoFC3914AF_u -= 1) {
        autoFC3914AF_var = UnitGroupUnitFromEnd(autoFC3914AF_g, autoFC3914AF_u);
        if (autoFC3914AF_var == null) { break; }
        lv_factories += 1;
        UnitGroupAdd(lv_groundStructures, autoFC3914AF_var);
        UnitGroupAdd(lv_factoryStructures, autoFC3914AF_var);
    }
    auto293B8DF0_g = UnitGroup("AircraftFactory", 9, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto293B8DF0_u = UnitGroupCount(auto293B8DF0_g, c_unitCountAll);
    for (;; auto293B8DF0_u -= 1) {
        auto293B8DF0_var = UnitGroupUnitFromEnd(auto293B8DF0_g, auto293B8DF0_u);
        if (auto293B8DF0_var == null) { break; }
        lv_starports += 1;
        UnitGroupAdd(lv_groundStructures, auto293B8DF0_var);
        UnitGroupAdd(lv_starportStructures, auto293B8DF0_var);
    }
    autoD4528755_g = UnitGroup("GeothermalPowerPlant", 9, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD4528755_u = UnitGroupCount(autoD4528755_g, c_unitCountAll);
    for (;; autoD4528755_u -= 1) {
        autoD4528755_var = UnitGroupUnitFromEnd(autoD4528755_g, autoD4528755_u);
        if (autoD4528755_var == null) { break; }
        lv_electricity += 1000;
        UnitGroupAdd(lv_groundStructures, autoD4528755_var);
    }
    autoA99F9EEB_g = UnitGroup("FissionPowerPlant", 9, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA99F9EEB_u = UnitGroupCount(autoA99F9EEB_g, c_unitCountAll);
    for (;; autoA99F9EEB_u -= 1) {
        autoA99F9EEB_var = UnitGroupUnitFromEnd(autoA99F9EEB_g, autoA99F9EEB_u);
        if (autoA99F9EEB_var == null) { break; }
        lv_electricity += 2000;
        UnitGroupAdd(lv_groundStructures, autoA99F9EEB_var);
    }
    autoD5A0954A_g = UnitGroup("FusionReactor2", 9, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD5A0954A_u = UnitGroupCount(autoD5A0954A_g, c_unitCountAll);
    for (;; autoD5A0954A_u -= 1) {
        autoD5A0954A_var = UnitGroupUnitFromEnd(autoD5A0954A_g, autoD5A0954A_u);
        if (autoD5A0954A_var == null) { break; }
        lv_electricity += 10000;
        UnitGroupAdd(lv_groundStructures, autoD5A0954A_var);
    }
    autoF85EA5DF_g = UnitGroup("WindTurbine", 9, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF85EA5DF_u = UnitGroupCount(autoF85EA5DF_g, c_unitCountAll);
    for (;; autoF85EA5DF_u -= 1) {
        autoF85EA5DF_var = UnitGroupUnitFromEnd(autoF85EA5DF_g, autoF85EA5DF_u);
        if (autoF85EA5DF_var == null) { break; }
        lv_electricity += 500;
        UnitGroupAdd(lv_groundStructures, autoF85EA5DF_var);
    }
    auto08F71B9E_g = UnitGroup("MineI", 9, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto08F71B9E_u = UnitGroupCount(auto08F71B9E_g, c_unitCountAll);
    for (;; auto08F71B9E_u -= 1) {
        auto08F71B9E_var = UnitGroupUnitFromEnd(auto08F71B9E_g, auto08F71B9E_u);
        if (auto08F71B9E_var == null) { break; }
        lv_metal += 4;
        UnitGroupAdd(lv_groundStructures, auto08F71B9E_var);
    }
    auto8FBD6911_g = UnitGroup("MineII", 9, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto8FBD6911_u = UnitGroupCount(auto8FBD6911_g, c_unitCountAll);
    for (;; auto8FBD6911_u -= 1) {
        auto8FBD6911_var = UnitGroupUnitFromEnd(auto8FBD6911_g, auto8FBD6911_u);
        if (auto8FBD6911_var == null) { break; }
        lv_metal += 8;
        UnitGroupAdd(lv_groundStructures, auto8FBD6911_var);
    }
    autoC56DF9C7_g = UnitGroup("MineIII", 9, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC56DF9C7_u = UnitGroupCount(autoC56DF9C7_g, c_unitCountAll);
    for (;; autoC56DF9C7_u -= 1) {
        autoC56DF9C7_var = UnitGroupUnitFromEnd(autoC56DF9C7_g, autoC56DF9C7_u);
        if (autoC56DF9C7_var == null) { break; }
        lv_metal += 12;
        UnitGroupAdd(lv_groundStructures, autoC56DF9C7_var);
    }
    autoEBDDF4E7_g = UnitGroup("MineIV", 9, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoEBDDF4E7_u = UnitGroupCount(autoEBDDF4E7_g, c_unitCountAll);
    for (;; autoEBDDF4E7_u -= 1) {
        autoEBDDF4E7_var = UnitGroupUnitFromEnd(autoEBDDF4E7_g, autoEBDDF4E7_u);
        if (autoEBDDF4E7_var == null) { break; }
        lv_metal += 16;
        UnitGroupAdd(lv_groundStructures, autoEBDDF4E7_var);
    }
    auto664BDB4B_g = UnitGroup("MineV", 9, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto664BDB4B_u = UnitGroupCount(auto664BDB4B_g, c_unitCountAll);
    for (;; auto664BDB4B_u -= 1) {
        auto664BDB4B_var = UnitGroupUnitFromEnd(auto664BDB4B_g, auto664BDB4B_u);
        if (auto664BDB4B_var == null) { break; }
        lv_metal += 20;
        UnitGroupAdd(lv_groundStructures, auto664BDB4B_var);
    }
    auto0D238DDC_g = UnitGroup("BoreholeI", 9, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto0D238DDC_u = UnitGroupCount(auto0D238DDC_g, c_unitCountAll);
    for (;; auto0D238DDC_u -= 1) {
        auto0D238DDC_var = UnitGroupUnitFromEnd(auto0D238DDC_g, auto0D238DDC_u);
        if (auto0D238DDC_var == null) { break; }
        lv_metal += 40;
        lv_electricity -= 250;
        UnitGroupAdd(lv_groundStructures, auto0D238DDC_var);
    }
    auto67AB211C_g = UnitGroup("BoreholeII", 9, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto67AB211C_u = UnitGroupCount(auto67AB211C_g, c_unitCountAll);
    for (;; auto67AB211C_u -= 1) {
        auto67AB211C_var = UnitGroupUnitFromEnd(auto67AB211C_g, auto67AB211C_u);
        if (auto67AB211C_var == null) { break; }
        lv_metal += 80;
        lv_electricity -= 500;
        UnitGroupAdd(lv_groundStructures, auto67AB211C_var);
    }
    autoB2A19773_g = UnitGroup("BoreholeIII", 9, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB2A19773_u = UnitGroupCount(autoB2A19773_g, c_unitCountAll);
    for (;; autoB2A19773_u -= 1) {
        autoB2A19773_var = UnitGroupUnitFromEnd(autoB2A19773_g, autoB2A19773_u);
        if (autoB2A19773_var == null) { break; }
        lv_metal += 120;
        lv_electricity -= 750;
        UnitGroupAdd(lv_groundStructures, autoB2A19773_var);
    }
    auto7864B94B_g = UnitGroup("BoreholeIV", 9, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto7864B94B_u = UnitGroupCount(auto7864B94B_g, c_unitCountAll);
    for (;; auto7864B94B_u -= 1) {
        auto7864B94B_var = UnitGroupUnitFromEnd(auto7864B94B_g, auto7864B94B_u);
        if (auto7864B94B_var == null) { break; }
        lv_metal += 160;
        lv_electricity -= 1000;
        UnitGroupAdd(lv_groundStructures, auto7864B94B_var);
    }
    auto05D3CA97_g = UnitGroup("BoreholeV", 9, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto05D3CA97_u = UnitGroupCount(auto05D3CA97_g, c_unitCountAll);
    for (;; auto05D3CA97_u -= 1) {
        auto05D3CA97_var = UnitGroupUnitFromEnd(auto05D3CA97_g, auto05D3CA97_u);
        if (auto05D3CA97_var == null) { break; }
        lv_metal += 200;
        lv_electricity -= 1250;
        UnitGroupAdd(lv_groundStructures, auto05D3CA97_var);
    }
    auto200FA3AC_g = UnitGroup("OilWellI", 9, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto200FA3AC_u = UnitGroupCount(auto200FA3AC_g, c_unitCountAll);
    for (;; auto200FA3AC_u -= 1) {
        auto200FA3AC_var = UnitGroupUnitFromEnd(auto200FA3AC_g, auto200FA3AC_u);
        if (auto200FA3AC_var == null) { break; }
        if ((libNtve_gf_UnitInRegion(auto200FA3AC_var, RegionFromId(66)) == true)) {
            lv_oil += 300;
        }
        else {
            lv_oil += 30;
        }
        UnitGroupAdd(lv_groundStructures, auto200FA3AC_var);
    }
    auto7C76AF67_g = UnitGroup("OilWellII", 9, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto7C76AF67_u = UnitGroupCount(auto7C76AF67_g, c_unitCountAll);
    for (;; auto7C76AF67_u -= 1) {
        auto7C76AF67_var = UnitGroupUnitFromEnd(auto7C76AF67_g, auto7C76AF67_u);
        if (auto7C76AF67_var == null) { break; }
        if ((libNtve_gf_UnitInRegion(auto7C76AF67_var, RegionFromId(66)) == true)) {
            lv_oil += 600;
        }
        else {
            lv_oil += 60;
        }
        UnitGroupAdd(lv_groundStructures, auto7C76AF67_var);
    }
    autoE1168201_g = UnitGroup("CPGI", 9, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE1168201_u = UnitGroupCount(autoE1168201_g, c_unitCountAll);
    for (;; autoE1168201_u -= 1) {
        autoE1168201_var = UnitGroupUnitFromEnd(autoE1168201_g, autoE1168201_u);
        if (autoE1168201_var == null) { break; }
        lv_oil += 8;
        UnitGroupAdd(lv_groundStructures, autoE1168201_var);
    }
    auto73BBD88D_g = UnitGroup("CPGII", 9, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto73BBD88D_u = UnitGroupCount(auto73BBD88D_g, c_unitCountAll);
    for (;; auto73BBD88D_u -= 1) {
        auto73BBD88D_var = UnitGroupUnitFromEnd(auto73BBD88D_g, auto73BBD88D_u);
        if (auto73BBD88D_var == null) { break; }
        lv_oil += 16;
        UnitGroupAdd(lv_groundStructures, auto73BBD88D_var);
    }
    auto3D217BAD_g = UnitGroup("CPGIII", 9, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto3D217BAD_u = UnitGroupCount(auto3D217BAD_g, c_unitCountAll);
    for (;; auto3D217BAD_u -= 1) {
        auto3D217BAD_var = UnitGroupUnitFromEnd(auto3D217BAD_g, auto3D217BAD_u);
        if (auto3D217BAD_var == null) { break; }
        lv_oil += 24;
        UnitGroupAdd(lv_groundStructures, auto3D217BAD_var);
    }
    if ((UnitGroupCount(lv_groundStructures, c_unitCountAlive) == 0)) {
        lv_groundStructuresAlive = false;
    }

    auto172DCFE2_g = UnitGroup(null, 9, RegionEntireMap(), UnitFilter((1 << c_targetFilterAir), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto172DCFE2_u = UnitGroupCount(auto172DCFE2_g, c_unitCountAll);
    for (;; auto172DCFE2_u -= 1) {
        auto172DCFE2_var = UnitGroupUnitFromEnd(auto172DCFE2_g, auto172DCFE2_u);
        if (auto172DCFE2_var == null) { break; }
        lv_airCount += 1;
        UnitIssueOrder(auto172DCFE2_var, OrderTargetingPoint(AbilityCommand("attack2", 0), UnitGetPosition(UnitGroupClosestToPoint(UnitGroupAlliance(9, c_unitAllianceEnemy, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(auto172DCFE2_var)))), c_orderQueueReplace);
    }
    auto68919597_g = UnitGroup(null, 9, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto68919597_u = UnitGroupCount(auto68919597_g, c_unitCountAll);
    for (;; auto68919597_u -= 1) {
        auto68919597_var = UnitGroupUnitFromEnd(auto68919597_g, auto68919597_u);
        if (auto68919597_var == null) { break; }
        lv_groundCount += 1;
        if ((lv_groundStructuresAlive == false)) {
            UnitGroupAdd(lv_groundStructures, auto68919597_var);
        }

        UnitIssueOrder(auto68919597_var, OrderTargetingPoint(AbilityCommand("attack2", 0), UnitGetPosition(UnitGroupClosestToPoint(UnitGroupAlliance(9, c_unitAllianceEnemy, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(auto68919597_var)))), c_orderQueueReplace);
    }
    if ((UnitGroupCount(lv_groundStructures, c_unitCountAlive) == 0)) {
        UIDisplayMessage(gv_debugPlayers, c_messageAreaSubtitle, StringExternal("Param/Value/1F12E65E"));
        TriggerEnable(TriggerGetCurrent(), false);
    }

    lv_upkeep = ((lv_groundCount * 20) + (lv_airCount * 20));
    lv_initOil = lv_oil;
    lv_initMetal = lv_metal;
    lv_initElectricity = lv_electricity;
    Wait(1.0, c_timeGame);
    while ((lv_upkeep > 0)) {
        lv_metal -= 10;
        if ((lv_oil > lv_electricity)) {
            lv_oil -= 10;
        }
        else {
            lv_electricity -= 10;
        }
        lv_upkeep -= 10;
    }
    while ((lv_metal < 0) && (lv_electricity > 0)) {
        UIDisplayMessage(gv_debugPlayers, c_messageAreaSubtitle, StringExternal("Param/Value/D71E13AE"));
        autoF07FEAC6_g = UnitGroup("Metal", 9, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoF07FEAC6_u = UnitGroupCount(autoF07FEAC6_g, c_unitCountAll);
        for (;; autoF07FEAC6_u -= 1) {
            autoF07FEAC6_var = UnitGroupUnitFromEnd(autoF07FEAC6_g, autoF07FEAC6_u);
            if (autoF07FEAC6_var == null) { break; }
            UnitRemove(autoF07FEAC6_var);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "MineI", 0, 9, UnitGetPosition(autoF07FEAC6_var));
            lv_metal += 8;
            lv_electricity -= 80;
            UIDisplayMessage(gv_debugPlayers, c_messageAreaSubtitle, StringExternal("Param/Value/112A24DC"));
        }
        auto5E938933_g = UnitGroup("MineI", 9, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto5E938933_u = UnitGroupCount(auto5E938933_g, c_unitCountAll);
        for (;; auto5E938933_u -= 1) {
            auto5E938933_var = UnitGroupUnitFromEnd(auto5E938933_g, auto5E938933_u);
            if (auto5E938933_var == null) { break; }
            UnitRemove(auto5E938933_var);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "MineII", 0, 9, UnitGetPosition(auto5E938933_var));
            lv_metal += 16;
            lv_electricity -= 160;
            UIDisplayMessage(gv_debugPlayers, c_messageAreaSubtitle, StringExternal("Param/Value/07BE556A"));
        }
        auto934D07BA_g = UnitGroup("MineII", 9, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto934D07BA_u = UnitGroupCount(auto934D07BA_g, c_unitCountAll);
        for (;; auto934D07BA_u -= 1) {
            auto934D07BA_var = UnitGroupUnitFromEnd(auto934D07BA_g, auto934D07BA_u);
            if (auto934D07BA_var == null) { break; }
            UnitRemove(auto934D07BA_var);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "MineIII", 0, 9, UnitGetPosition(auto934D07BA_var));
            lv_metal += 24;
            lv_electricity -= 240;
            UIDisplayMessage(gv_debugPlayers, c_messageAreaSubtitle, StringExternal("Param/Value/5BCB4502"));
        }
        autoDF3A58EB_g = UnitGroup("MineIII", 9, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoDF3A58EB_u = UnitGroupCount(autoDF3A58EB_g, c_unitCountAll);
        for (;; autoDF3A58EB_u -= 1) {
            autoDF3A58EB_var = UnitGroupUnitFromEnd(autoDF3A58EB_g, autoDF3A58EB_u);
            if (autoDF3A58EB_var == null) { break; }
            UnitRemove(autoDF3A58EB_var);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "MineIV", 0, 9, UnitGetPosition(autoDF3A58EB_var));
            lv_metal += 32;
            lv_electricity -= 320;
            UIDisplayMessage(gv_debugPlayers, c_messageAreaSubtitle, StringExternal("Param/Value/2E701550"));
        }
        autoEFA83CFC_g = UnitGroup("MineIV", 9, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoEFA83CFC_u = UnitGroupCount(autoEFA83CFC_g, c_unitCountAll);
        for (;; autoEFA83CFC_u -= 1) {
            autoEFA83CFC_var = UnitGroupUnitFromEnd(autoEFA83CFC_g, autoEFA83CFC_u);
            if (autoEFA83CFC_var == null) { break; }
            UnitRemove(autoEFA83CFC_var);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "MineV", 0, 9, UnitGetPosition(autoEFA83CFC_var));
            lv_metal += 40;
            lv_electricity -= 400;
            UIDisplayMessage(gv_debugPlayers, c_messageAreaSubtitle, StringExternal("Param/Value/DC384359"));
        }
        autoBE9A60B3_g = UnitGroup("MineV", 9, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoBE9A60B3_u = UnitGroupCount(autoBE9A60B3_g, c_unitCountAll);
        for (;; autoBE9A60B3_u -= 1) {
            autoBE9A60B3_var = UnitGroupUnitFromEnd(autoBE9A60B3_g, autoBE9A60B3_u);
            if (autoBE9A60B3_var == null) { break; }
            UnitRemove(autoBE9A60B3_var);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "BoreholeI", 0, 9, UnitGetPosition(autoBE9A60B3_var));
            lv_metal += 160;
            lv_electricity -= 1600;
            UIDisplayMessage(gv_debugPlayers, c_messageAreaSubtitle, StringExternal("Param/Value/F0E1607C"));
        }
        auto2EEDAC7F_g = UnitGroup("BoreholeI", 9, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto2EEDAC7F_u = UnitGroupCount(auto2EEDAC7F_g, c_unitCountAll);
        for (;; auto2EEDAC7F_u -= 1) {
            auto2EEDAC7F_var = UnitGroupUnitFromEnd(auto2EEDAC7F_g, auto2EEDAC7F_u);
            if (auto2EEDAC7F_var == null) { break; }
            UnitRemove(auto2EEDAC7F_var);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "BoreholeII", 0, 9, UnitGetPosition(auto2EEDAC7F_var));
            lv_metal += 320;
            lv_electricity -= 3200;
            UIDisplayMessage(gv_debugPlayers, c_messageAreaSubtitle, StringExternal("Param/Value/929819DC"));
        }
        auto20AD3467_g = UnitGroup("BoreholeII", 9, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto20AD3467_u = UnitGroupCount(auto20AD3467_g, c_unitCountAll);
        for (;; auto20AD3467_u -= 1) {
            auto20AD3467_var = UnitGroupUnitFromEnd(auto20AD3467_g, auto20AD3467_u);
            if (auto20AD3467_var == null) { break; }
            UnitRemove(auto20AD3467_var);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "BoreholeIII", 0, 9, UnitGetPosition(auto20AD3467_var));
            lv_metal += 480;
            lv_electricity -= 4800;
            UIDisplayMessage(gv_debugPlayers, c_messageAreaSubtitle, StringExternal("Param/Value/775B4C3E"));
        }
        auto36630FF9_g = UnitGroup("BoreholeIII", 9, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto36630FF9_u = UnitGroupCount(auto36630FF9_g, c_unitCountAll);
        for (;; auto36630FF9_u -= 1) {
            auto36630FF9_var = UnitGroupUnitFromEnd(auto36630FF9_g, auto36630FF9_u);
            if (auto36630FF9_var == null) { break; }
            UnitRemove(auto36630FF9_var);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "BoreholeIV", 0, 9, UnitGetPosition(auto36630FF9_var));
            lv_metal += 600;
            lv_electricity -= 6000;
            UIDisplayMessage(gv_debugPlayers, c_messageAreaSubtitle, StringExternal("Param/Value/BF9F85F8"));
        }
        autoFA8F5957_g = UnitGroup("BoreholeIV", 9, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoFA8F5957_u = UnitGroupCount(autoFA8F5957_g, c_unitCountAll);
        for (;; autoFA8F5957_u -= 1) {
            autoFA8F5957_var = UnitGroupUnitFromEnd(autoFA8F5957_g, autoFA8F5957_u);
            if (autoFA8F5957_var == null) { break; }
            UnitRemove(autoFA8F5957_var);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "BoreholeV", 0, 9, UnitGetPosition(autoFA8F5957_var));
            lv_metal += 720;
            lv_electricity -= 7200;
            UIDisplayMessage(gv_debugPlayers, c_messageAreaSubtitle, StringExternal("Param/Value/73E01788"));
        }
        break;
    }
    Wait(1.0, c_timeGame);
    while ((lv_electricity < 0) && (lv_metal > 0)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "FissionPowerPlant", 0, 9, gf_AINewBuilding(lv_groundStructures));
        lv_metal -= 1000;
        lv_electricity += 1000;
        UIDisplayMessage(gv_debugPlayers, c_messageAreaSubtitle, StringExternal("Param/Value/94BBC8EF"));
    }
    Wait(1.0, c_timeGame);
    while ((lv_oil < 0) && (lv_metal > 0)) {
        UIDisplayMessage(gv_debugPlayers, c_messageAreaSubtitle, StringExternal("Param/Value/35D58A4E"));
        auto883A9E25_g = UnitGroup("Oil", 9, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto883A9E25_u = UnitGroupCount(auto883A9E25_g, c_unitCountAll);
        for (;; auto883A9E25_u -= 1) {
            auto883A9E25_var = UnitGroupUnitFromEnd(auto883A9E25_g, auto883A9E25_u);
            if (auto883A9E25_var == null) { break; }
            UnitRemove(auto883A9E25_var);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "OilWellI", 0, 9, UnitGetPosition(auto883A9E25_var));
            UIDisplayMessage(gv_debugPlayers, c_messageAreaSubtitle, StringExternal("Param/Value/66C17548"));
            lv_metal -= 250;
            lv_oil += 300;
        }
        autoE7AC1769_g = UnitGroup("OilWellI", 9, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoE7AC1769_u = UnitGroupCount(autoE7AC1769_g, c_unitCountAll);
        for (;; autoE7AC1769_u -= 1) {
            autoE7AC1769_var = UnitGroupUnitFromEnd(autoE7AC1769_g, autoE7AC1769_u);
            if (autoE7AC1769_var == null) { break; }
            UnitRemove(autoE7AC1769_var);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "OilWellII", 0, 9, UnitGetPosition(autoE7AC1769_var));
            lv_metal -= 250;
            lv_oil += 600;
            UIDisplayMessage(gv_debugPlayers, c_messageAreaSubtitle, StringExternal("Param/Value/EB389873"));
        }
        autoECC1CD57_g = UnitGroup("CPGII", 9, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoECC1CD57_u = UnitGroupCount(autoECC1CD57_g, c_unitCountAll);
        for (;; autoECC1CD57_u -= 1) {
            autoECC1CD57_var = UnitGroupUnitFromEnd(autoECC1CD57_g, autoECC1CD57_u);
            if (autoECC1CD57_var == null) { break; }
            UnitRemove(autoECC1CD57_var);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "CPGIII", 0, 9, UnitGetPosition(autoECC1CD57_var));
            lv_metal -= 300;
            lv_oil += 240;
            UIDisplayMessage(gv_debugPlayers, c_messageAreaSubtitle, StringExternal("Param/Value/C530B5E6"));
        }
        auto772C7565_g = UnitGroup("CPGI", 9, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto772C7565_u = UnitGroupCount(auto772C7565_g, c_unitCountAll);
        for (;; auto772C7565_u -= 1) {
            auto772C7565_var = UnitGroupUnitFromEnd(auto772C7565_g, auto772C7565_u);
            if (auto772C7565_var == null) { break; }
            UnitRemove(auto772C7565_var);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "CPGII", 0, 9, UnitGetPosition(auto772C7565_var));
            lv_metal -= 200;
            lv_oil += 160;
            UIDisplayMessage(gv_debugPlayers, c_messageAreaSubtitle, StringExternal("Param/Value/E56E3B56"));
        }
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "CPGI", 0, 9, gf_AINewBuilding(lv_groundStructures));
        UIDisplayMessage(gv_debugPlayers, c_messageAreaSubtitle, StringExternal("Param/Value/A5AF691C"));
        lv_metal -= 100;
        lv_oil += 80;
    }
    Wait(1.0, c_timeGame);
    if ((lv_oil > 0)) {
        lv_metal += (lv_oil * 2);
        UIDisplayMessage(gv_debugPlayers, c_messageAreaSubtitle, StringExternal("Param/Value/B8BDE1B5"));
    }

    Wait(1.0, c_timeGame);
    if ((lv_electricity > 0)) {
        UIDisplayMessage(gv_debugPlayers, c_messageAreaSubtitle, StringExternal("Param/Value/5F34857B"));
        lv_metal += (lv_electricity / 8);
    }

    while ((lv_metal > 0) && (lv_groundCount < (lv_factories * 6))) {
        lv_randomSpawner = RandomInt(1, 4);
        if ((lv_randomSpawner == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "LancerMBT", 0, 9, UnitGetPosition(UnitGroupRandomUnit(lv_factoryStructures, c_unitCountAlive)));
            lv_metal -= 1000;
            UIDisplayMessage(gv_debugPlayers, c_messageAreaSubtitle, StringExternal("Param/Value/571FDA5B"));
        }

        if ((lv_randomSpawner == 2)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "CrusaderMBT", 0, 9, UnitGetPosition(UnitGroupRandomUnit(lv_factoryStructures, c_unitCountAlive)));
            lv_metal -= 2500;
            UIDisplayMessage(gv_debugPlayers, c_messageAreaSubtitle, StringExternal("Param/Value/3FD23C44"));
        }

        if ((lv_randomSpawner == 3)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "VanguardMBT", 0, 9, UnitGetPosition(UnitGroupRandomUnit(lv_factoryStructures, c_unitCountAlive)));
            lv_metal -= 1000;
            UIDisplayMessage(gv_debugPlayers, c_messageAreaSubtitle, StringExternal("Param/Value/81D5429D"));
        }

        if ((lv_randomSpawner == 4)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Phenom", 0, 9, UnitGetPosition(UnitGroupRandomUnit(lv_factoryStructures, c_unitCountAlive)));
            lv_metal -= 500;
            UIDisplayMessage(gv_debugPlayers, c_messageAreaSubtitle, StringExternal("Param/Value/BBE27B95"));
        }

        lv_groundCount += 1;
    }
    while ((lv_metal > 0) && (lv_airCount < (lv_starports * 6))) {
        lv_randomSpawner = RandomInt(1, 4);
        if ((lv_randomSpawner == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ScorcherBomber", 0, 9, UnitGetPosition(UnitGroupRandomUnit(lv_starportStructures, c_unitCountAlive)));
            lv_metal -= 2000;
            UIDisplayMessage(gv_debugPlayers, c_messageAreaSubtitle, StringExternal("Param/Value/3AC00F6C"));
        }

        if ((lv_randomSpawner == 2)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ViperFighter", 0, 9, UnitGetPosition(UnitGroupRandomUnit(lv_starportStructures, c_unitCountAlive)));
            lv_metal -= 2500;
            UIDisplayMessage(gv_debugPlayers, c_messageAreaSubtitle, StringExternal("Param/Value/70FA6A84"));
        }

        if ((lv_randomSpawner == 3)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "AstrosInterceptor", 0, 9, UnitGetPosition(UnitGroupRandomUnit(lv_starportStructures, c_unitCountAlive)));
            lv_metal -= 1000;
            UIDisplayMessage(gv_debugPlayers, c_messageAreaSubtitle, StringExternal("Param/Value/1007FF45"));
        }

        if ((lv_randomSpawner == 4)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "JavelinAH", 0, 9, UnitGetPosition(UnitGroupRandomUnit(lv_starportStructures, c_unitCountAlive)));
            lv_metal -= 1500;
            UIDisplayMessage(gv_debugPlayers, c_messageAreaSubtitle, StringExternal("Param/Value/625AFE66"));
        }

        lv_airCount += 1;
    }
    Wait(1.0, c_timeGame);
    while ((lv_metal > 0)) {
        if ((lv_factories <= ((lv_starports * 150) / 100))) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "GroundFactory", 0, 9, gf_AINewBuilding(lv_groundStructures));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Hypercannon", 0, 9, UnitGetPosition(UnitLastCreated()));
            lv_metal -= 5000;
            lv_factories += 1;
            UIDisplayMessage(gv_debugPlayers, c_messageAreaSubtitle, StringExternal("Param/Value/49017B99"));
        }
        else {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "AircraftFactory", 0, 9, gf_AINewBuilding(lv_groundStructures));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Hypercannon", 0, 9, UnitGetPosition(UnitLastCreated()));
            lv_metal -= 5000;
            lv_starports += 1;
            UIDisplayMessage(gv_debugPlayers, c_messageAreaSubtitle, StringExternal("Param/Value/FDB5DA61"));
        }
    }
    if ((lv_metal < 0)) {
        lv_metal = (lv_metal / 2);
    }

    if ((lv_oil < 0)) {
        lv_metal = (lv_oil / 2);
    }

    if ((lv_electricity < 0)) {
        lv_metal = (lv_electricity / 2);
    }

    gv_previousMetal = lv_metal;
    gv_previousOil = lv_oil;
    Wait(1.0, c_timeGame);
    UIDisplayMessage(gv_debugPlayers, c_messageAreaSubtitle, (StringExternal("Param/Value/01D44827") + (((StringExternal("Param/Value/0DA34A12") + gf_MakeUIPresentable(lv_initMetal)) + ((StringExternal("Param/Value/8D52D38D") + gf_MakeUIPresentable(lv_oil)) + StringExternal("Param/Value/1187E4D5"))) + gf_MakeUIPresentable(lv_electricity))));
    Wait(1.0, c_timeGame);
    UIDisplayMessage(gv_debugPlayers, c_messageAreaSubtitle, (StringExternal("Param/Value/BE37C512") + gf_MakeUIPresentable(lv_upkeep)));
    UIDisplayMessage(gv_debugPlayers, c_messageAreaSubtitle, (StringExternal("Param/Value/7B8BBBF0") + gf_MakeUIPresentable(lv_metal)));
    UIDisplayMessage(gv_debugPlayers, c_messageAreaSubtitle, (StringExternal("Param/Value/50758C93") + gf_MakeUIPresentable(lv_oil)));
    UIDisplayMessage(gv_debugPlayers, c_messageAreaSubtitle, (StringExternal("Param/Value/D9DBD22A") + gf_MakeUIPresentable(lv_electricity)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Player9AIRebellionAI_Init () {
    gt_Player9AIRebellionAI = TriggerCreate("gt_Player9AIRebellionAI_Func");
    TriggerEnable(gt_Player9AIRebellionAI, false);
    TriggerAddEventTimePeriodic(gt_Player9AIRebellionAI, 12.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZombieConvertandPlauge
//--------------------------------------------------------------------------------------------------
bool gt_ZombieConvertandPlauge_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_rANDOME;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior2(EventUnit(), "PopulationThinnerCarrier2") == true)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/6423C556"));
        MinimapPing(PlayerGroupAll(), UnitGetPosition(EventUnit()), 2.0, Color(100.00, 0.00, 0.00));
        MinimapPing(PlayerGroupAll(), UnitGetPosition(EventUnit()), 2.0, Color(100.00, 0.00, 0.00));
    }

    if ((UnitHasBehavior2(EventUnit(), "PopulationThinnerCarrier") == true)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/C05860DD"));
        MinimapPing(PlayerGroupAll(), UnitGetPosition(EventUnit()), 2.0, Color(100.00, 0.00, 0.00));
    }

    if (((UnitGetType(libNtve_gf_KillingUnit()) == "InfestedCivilian2") || (UnitGetType(libNtve_gf_KillingUnit()) == "InfestedCivilian22") || (UnitGetType(libNtve_gf_KillingUnit()) == "InfestorTerran22") || (UnitGetType(libNtve_gf_KillingUnit()) == "InfestorTerran2")) && (UnitGetOwner(libNtve_gf_KillingUnit()) != UnitGetOwner(EventUnit())) && ((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributePsionic) == true) || (UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeBiological) == true))) {
        lv_rANDOME = RandomInt(0, 100);
        if ((UnitGetType(libNtve_gf_KillingUnit()) == "InfestedCivilian2") && (lv_rANDOME < 25)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestedCivilian2", 0, UnitGetOwner(libNtve_gf_KillingUnit()), UnitGetPosition(libNtve_gf_KillingUnit()));
            if ((lv_rANDOME < 10)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestedCivilian22", 0, UnitGetOwner(libNtve_gf_KillingUnit()), UnitGetPosition(libNtve_gf_KillingUnit()));
            }

        }

        if ((UnitGetType(libNtve_gf_KillingUnit()) == "InfestorTerran2") && (lv_rANDOME < 25)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestorTerran2", 0, UnitGetOwner(libNtve_gf_KillingUnit()), UnitGetPosition(libNtve_gf_KillingUnit()));
            if ((lv_rANDOME < 10)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestorTerran22", 0, UnitGetOwner(libNtve_gf_KillingUnit()), UnitGetPosition(libNtve_gf_KillingUnit()));
            }

        }

        if ((UnitGetType(libNtve_gf_KillingUnit()) == "InfestedCivilian22") && (lv_rANDOME < 25)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestedCivilian22", 0, UnitGetOwner(libNtve_gf_KillingUnit()), UnitGetPosition(libNtve_gf_KillingUnit()));
        }

        if ((UnitGetType(libNtve_gf_KillingUnit()) == "InfestorTerran22") && (lv_rANDOME < 25)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestorTerran22", 0, UnitGetOwner(libNtve_gf_KillingUnit()), UnitGetPosition(libNtve_gf_KillingUnit()));
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZombieConvertandPlauge_Init () {
    gt_ZombieConvertandPlauge = TriggerCreate("gt_ZombieConvertandPlauge_Func");
    TriggerAddEventUnitDied(gt_ZombieConvertandPlauge, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: RandomPlaugeFromArmies
//--------------------------------------------------------------------------------------------------
bool gt_RandomPlaugeFromArmies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_sadUnit;
    playergroup lv_breakout;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_breakout = PlayerGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((RandomInt(0, 100) < 30))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_AddPlayerGroupToPlayerGroup(gv_users, lv_breakout);
    lv_sadUnit = UnitGroupRandomUnit(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    if ((UnitGroupCount(UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(lv_sadUnit), 3.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 20) && (UnitGetType(EventUnit()) != "BioTrooper") && (UnitHasBehavior2(EventUnit(), "populationThinnerImmunity2") != true) && (UnitHasBehavior2(EventUnit(), "populationThinnerImmunity") != true)) {
        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(lv_sadUnit)), c_messageAreaSubtitle, StringExternal("Param/Value/280345F7"));
        PlayerGroupRemove(lv_breakout, UnitGetOwner(lv_sadUnit));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/3AA7AACA"));
        MinimapPing(PlayerGroupAll(), UnitGetPosition(lv_sadUnit), 4.0, Color(100.00, 0.00, 0.00));
        MinimapPing(PlayerGroupAll(), UnitGetPosition(lv_sadUnit), 4.0, Color(100.00, 0.00, 0.00));
        UnitBehaviorAdd(lv_sadUnit, "PopulationThinner", lv_sadUnit, 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RandomPlaugeFromArmies_Init () {
    gt_RandomPlaugeFromArmies = TriggerCreate("gt_RandomPlaugeFromArmies_Func");
    TriggerAddEventTimePeriodic(gt_RandomPlaugeFromArmies, 60.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Autonomous Zombies
//--------------------------------------------------------------------------------------------------
bool gt_AutonomousZombies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto611AE165_g;
    int auto611AE165_u;
    unit auto611AE165_var;
    unitgroup autoCD8C6105_g;
    int autoCD8C6105_u;
    unit autoCD8C6105_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto611AE165_g = UnitGroup("InfestorTerran2", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto611AE165_u = UnitGroupCount(auto611AE165_g, c_unitCountAll);
    for (;; auto611AE165_u -= 1) {
        auto611AE165_var = UnitGroupUnitFromEnd(auto611AE165_g, auto611AE165_u);
        if (auto611AE165_var == null) { break; }
        if ((RandomInt(0, 100) < 40)) {
            UnitIssueOrder(auto611AE165_var, OrderTargetingPoint(AbilityCommand("attack2", 0), UnitGetPosition(UnitGroupClosestToPoint(UnitGroupAlliance(UnitGetOwner(auto611AE165_var), c_unitAllianceEnemy, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(auto611AE165_var)))), c_orderQueueReplace);
        }
        else {
            UnitIssueOrder(auto611AE165_var, OrderTargetingPoint(AbilityCommand("attack2", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(auto611AE165_var), 50.0))), c_orderQueueReplace);
        }
    }
    autoCD8C6105_g = UnitGroup("InfestorTerran22", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoCD8C6105_u = UnitGroupCount(autoCD8C6105_g, c_unitCountAll);
    for (;; autoCD8C6105_u -= 1) {
        autoCD8C6105_var = UnitGroupUnitFromEnd(autoCD8C6105_g, autoCD8C6105_u);
        if (autoCD8C6105_var == null) { break; }
        if ((RandomInt(0, 100) < 40)) {
            UnitIssueOrder(autoCD8C6105_var, OrderTargetingPoint(AbilityCommand("attack2", 0), UnitGetPosition(UnitGroupClosestToPoint(UnitGroupAlliance(UnitGetOwner(autoCD8C6105_var), c_unitAllianceEnemy, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(autoCD8C6105_var)))), c_orderQueueReplace);
        }
        else {
            UnitIssueOrder(autoCD8C6105_var, OrderTargetingPoint(AbilityCommand("attack2", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(autoCD8C6105_var), 50.0))), c_orderQueueReplace);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AutonomousZombies_Init () {
    gt_AutonomousZombies = TriggerCreate("gt_AutonomousZombies_Func");
    TriggerAddEventTimePeriodic(gt_AutonomousZombies, 10.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Missile Defense Change Owner Neutral
//--------------------------------------------------------------------------------------------------
bool gt_MissileDefenseChangeOwnerNeutral_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetOwner(EventUnit(), 0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MissileDefenseChangeOwnerNeutral_Init () {
    gt_MissileDefenseChangeOwnerNeutral = TriggerCreate("gt_MissileDefenseChangeOwnerNeutral_Func");
    TriggerAddEventUnitAbility(gt_MissileDefenseChangeOwnerNeutral, null, AbilityCommand("FireonFriendlies", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MissileInShield
//--------------------------------------------------------------------------------------------------
bool gt_MissileInShield_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnit()) == "HunterSeekerWeapon22")) {
        UnitDamage(EventUnit(), "PulsegunD", UnitBehaviorEffectUnit(EventUnit(), "NukeInShield", c_effectUnitSource, 0), 10000.0);
    }
    else {
        if ((UnitGetType(EventUnit()) == "HunterSeekerWeapon23")) {
            UnitDamage(EventUnit(), "PulsegunD", UnitBehaviorEffectUnit(EventUnit(), "NukeInShield", c_effectUnitSource, 0), 20000.0);
        }
        else {
            if ((UnitGetType(EventUnit()) == "HunterSeekerWeapon2")) {
                UnitDamage(EventUnit(), "PulsegunD", UnitBehaviorEffectUnit(EventUnit(), "NukeInShield", c_effectUnitSource, 0), 30000.0);
            }
            else {
                if ((UnitGetType(EventUnit()) == "HunterSeekerWeapon222")) {
                    UnitDamage(EventUnit(), "PulsegunD", UnitBehaviorEffectUnit(EventUnit(), "NukeInShield", c_effectUnitSource, 0), 40000.0);
                }

            }
        }
    }
    UnitRemove(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MissileInShield_Init () {
    gt_MissileInShield = TriggerCreate("gt_MissileInShield_Func");
    TriggerAddEventUnitBehaviorChange(gt_MissileInShield, null, "NukeInShield", c_unitBehaviorChangeAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Set Target
//--------------------------------------------------------------------------------------------------
bool gt_SetTarget_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_targetVariable;

    // Automatic Variable Declarations
    const int autoE1EC4D48_ae = 99;
    const int autoE1EC4D48_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_targetVariable = 1;
    for ( ; ( (autoE1EC4D48_ai >= 0 && lv_targetVariable <= autoE1EC4D48_ae) || (autoE1EC4D48_ai < 0 && lv_targetVariable >= autoE1EC4D48_ae) ) ; lv_targetVariable += autoE1EC4D48_ai ) {
        if ((gv_nukeTargetOccupied[EventPlayer()][lv_targetVariable] == false)) {
            gv_nukeTargetOccupied[EventPlayer()][lv_targetVariable] = true;
            gv_nukeTargets[EventPlayer()][lv_targetVariable] = EventUnitTargetPoint();
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SetTarget_Init () {
    gt_SetTarget = TriggerCreate("gt_SetTarget_Func");
    TriggerAddEventUnitAbility(gt_SetTarget, null, AbilityCommand("SetTarget", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ClearTargets
//--------------------------------------------------------------------------------------------------
bool gt_ClearTargets_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_targetVariable;

    // Automatic Variable Declarations
    const int auto7D67E3FC_ae = 99;
    const int auto7D67E3FC_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_targetVariable = 1;
    for ( ; ( (auto7D67E3FC_ai >= 0 && lv_targetVariable <= auto7D67E3FC_ae) || (auto7D67E3FC_ai < 0 && lv_targetVariable >= auto7D67E3FC_ae) ) ; lv_targetVariable += auto7D67E3FC_ai ) {
        gv_nukeTargetOccupied[EventPlayer()][lv_targetVariable] = false;
        gv_nukeTargets[EventPlayer()][lv_targetVariable] = null;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ClearTargets_Init () {
    gt_ClearTargets = TriggerCreate("gt_ClearTargets_Func");
    TriggerAddEventUnitAbility(gt_ClearTargets, null, AbilityCommand("ClearTargets", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PingTargets
//--------------------------------------------------------------------------------------------------
bool gt_PingTargets_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_targetVariable;

    // Automatic Variable Declarations
    const int autoF1AFF8AB_ae = 99;
    const int autoF1AFF8AB_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_targetVariable = 1;
    for ( ; ( (autoF1AFF8AB_ai >= 0 && lv_targetVariable <= autoF1AFF8AB_ae) || (autoF1AFF8AB_ai < 0 && lv_targetVariable >= autoF1AFF8AB_ae) ) ; lv_targetVariable += autoF1AFF8AB_ai ) {
        if ((gv_nukeTargetOccupied[EventPlayer()][lv_targetVariable] == true)) {
            MinimapPing(PlayerGroupSingle(EventPlayer()), gv_nukeTargets[EventPlayer()][lv_targetVariable], 2.0, Color(100.00, 0.00, 0.00));
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PingTargets_Init () {
    gt_PingTargets = TriggerCreate("gt_PingTargets_Func");
    TriggerAddEventUnitAbility(gt_PingTargets, null, AbilityCommand("PingTargets", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: EnableDeadManHand
//--------------------------------------------------------------------------------------------------
bool gt_EnableDeadManHand_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (PlayerName(EventPlayer()) + StringExternal("Param/Value/C4A29162")));
    gv_deadmanshand[EventPlayer()] = true;
    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "DeadManHandOff", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "DeadManHandOn", 1);
    SoundPlayForPlayer(SoundLink("Battlecruiser_MissilePodUpgrade", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnableDeadManHand_Init () {
    gt_EnableDeadManHand = TriggerCreate("gt_EnableDeadManHand_Func");
    TriggerAddEventUnitAbility(gt_EnableDeadManHand, null, AbilityCommand("SetDeadManHand", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DisableDeadManHand
//--------------------------------------------------------------------------------------------------
bool gt_DisableDeadManHand_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (PlayerName(EventPlayer()) + StringExternal("Param/Value/C7CF9FFF")));
    gv_deadmanshand[EventPlayer()] = false;
    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "DeadManHandOff", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "DeadManHandOn", 0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DisableDeadManHand_Init () {
    gt_DisableDeadManHand = TriggerCreate("gt_DisableDeadManHand_Func");
    TriggerAddEventUnitAbility(gt_DisableDeadManHand, null, AbilityCommand("RemoveDeadMansHand", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DeadHandCoolDown
//--------------------------------------------------------------------------------------------------
bool gt_DeadHandCoolDown_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        if ((gv_globalDeadHand > 60)) {
            gv_globalDeadHand = 60;
        }
        else {
            if ((gv_globalDeadHand > 0)) {
                gv_globalDeadHand -= 1;
            }
            else {
                gv_globalDeadHand = 0;
            }
        }
        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DeadHandCoolDown_Init () {
    gt_DeadHandCoolDown = TriggerCreate("gt_DeadHandCoolDown_Func");
    TriggerAddEventTimeElapsed(gt_DeadHandCoolDown, 2.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AnyNuke Launch
//--------------------------------------------------------------------------------------------------
bool gt_AnyNukeLaunch_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_target;

    // Automatic Variable Declarations
    playergroup auto4FAFD6A7_g;
    int auto4FAFD6A7_var;
    const int auto660F7E9B_ae = 99;
    const int auto660F7E9B_ai = 1;
    unitgroup autoB9FFF557_g;
    int autoB9FFF557_u;
    unit autoB9FFF557_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/DF64A846"));
    MinimapPing(PlayerGroupAll(), UnitGetPosition(EventUnit()), 4.0, Color(100.00, 0.00, 0.00));
    if ((gv_globalDeadHand == 0)) {
        gv_globalDeadHand = 60;
        MinimapPing(PlayerGroupAll(), UnitGetPosition(EventUnit()), 4.0, Color(100.00, 0.00, 0.00));
        MinimapPing(PlayerGroupAll(), UnitGetPosition(EventUnit()), 4.0, Color(100.00, 0.00, 0.00));
        MinimapPing(PlayerGroupAll(), UnitGetPosition(EventUnit()), 4.0, Color(100.00, 0.00, 0.00));
        MinimapPing(PlayerGroupAll(), UnitGetPosition(EventUnit()), 4.0, Color(100.00, 0.00, 0.00));
        SoundPlay(SoundLink("UI_alarm_BattlecruiserHangar_stereo", -1), PlayerGroupAll(), 200.0, 0.0);
        Wait(3.0, c_timeGame);
        SoundPlay(SoundLink("UI_alarm_BattlecruiserHangar_stereo", -1), PlayerGroupAll(), 200.0, 0.0);
        auto4FAFD6A7_g = gv_users;
        auto4FAFD6A7_var = -1;
        while (true) {
            auto4FAFD6A7_var = PlayerGroupNextPlayer(auto4FAFD6A7_g, auto4FAFD6A7_var);
            if (auto4FAFD6A7_var < 0) { break; }
            if ((gv_deadmanshand[auto4FAFD6A7_var] == true)) {
                lv_target = 1;
                for ( ; ( (auto660F7E9B_ai >= 0 && lv_target <= auto660F7E9B_ae) || (auto660F7E9B_ai < 0 && lv_target >= auto660F7E9B_ae) ) ; lv_target += auto660F7E9B_ai ) {
                    if ((gv_nukeTargetOccupied[auto4FAFD6A7_var][lv_target] == true)) {
                        autoB9FFF557_g = UnitGroup("SupplyDepot234223", auto4FAFD6A7_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                        autoB9FFF557_u = UnitGroupCount(autoB9FFF557_g, c_unitCountAll);
                        for (;; autoB9FFF557_u -= 1) {
                            autoB9FFF557_var = UnitGroupUnitFromEnd(autoB9FFF557_g, autoB9FFF557_u);
                            if (autoB9FFF557_var == null) { break; }
                            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/6D528EAA"));
                            if ((UnitAbilityGetChargeUsed(autoB9FFF557_var, "VultureSpiderMines2222", "Abil/LokiYamato") < 0.0)) {
                                libNtve_gf_CreateUnitsAtPoint2(1, "HunterSeekerWeapon222", 0, auto4FAFD6A7_var, UnitGetPosition(autoB9FFF557_var));
                                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack2", 2), gv_nukeTargets[auto4FAFD6A7_var][lv_target]), c_orderQueueReplace);
                                break;
                            }
                            else {
                                if ((UnitAbilityGetChargeUsed(autoB9FFF557_var, "VultureSpiderMines222", "Abil/LurkerAspect") < 0.0)) {
                                    libNtve_gf_CreateUnitsAtPoint2(1, "HunterSeekerWeapon2", 0, auto4FAFD6A7_var, UnitGetPosition(autoB9FFF557_var));
                                    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack2", 2), gv_nukeTargets[auto4FAFD6A7_var][lv_target]), c_orderQueueReplace);
                                    break;
                                }
                                else {
                                    if ((UnitAbilityGetChargeUsed(autoB9FFF557_var, "VultureSpiderMines22", "Abil/LurkerAspectFromHydraliskBurrowed") < 0.0)) {
                                        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/02043D26"));
                                        libNtve_gf_CreateUnitsAtPoint2(1, "HunterSeekerWeapon23", 0, auto4FAFD6A7_var, UnitGetPosition(autoB9FFF557_var));
                                        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack2", 2), gv_nukeTargets[auto4FAFD6A7_var][lv_target]), c_orderQueueReplace);
                                        break;
                                    }

                                }
                            }
                        }
                    }

                }
            }

        }
    }
    else {
        SoundPlay(SoundLink("Tychus04BriefingAlarm", -1), PlayerGroupAll(), 100.0, 0.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AnyNukeLaunch_Init () {
    gt_AnyNukeLaunch = TriggerCreate("gt_AnyNukeLaunch_Func");
    TriggerAddEventPlayerEffectUsed(gt_AnyNukeLaunch, 1, "LaunchICBMSet2");
    TriggerAddEventPlayerEffectUsed(gt_AnyNukeLaunch, 2, "LaunchICBMSet2");
    TriggerAddEventPlayerEffectUsed(gt_AnyNukeLaunch, 3, "LaunchICBMSet2");
    TriggerAddEventPlayerEffectUsed(gt_AnyNukeLaunch, 4, "LaunchICBMSet2");
    TriggerAddEventPlayerEffectUsed(gt_AnyNukeLaunch, 5, "LaunchICBMSet2");
    TriggerAddEventPlayerEffectUsed(gt_AnyNukeLaunch, 6, "LaunchICBMSet2");
    TriggerAddEventPlayerEffectUsed(gt_AnyNukeLaunch, 7, "LaunchICBMSet2");
    TriggerAddEventPlayerEffectUsed(gt_AnyNukeLaunch, 8, "LaunchICBMSet2");
    TriggerAddEventPlayerEffectUsed(gt_AnyNukeLaunch, 9, "LaunchICBMSet2");
    TriggerAddEventPlayerEffectUsed(gt_AnyNukeLaunch, 1, "LaunchICBMSet22");
    TriggerAddEventPlayerEffectUsed(gt_AnyNukeLaunch, 2, "LaunchICBMSet22");
    TriggerAddEventPlayerEffectUsed(gt_AnyNukeLaunch, 3, "LaunchICBMSet22");
    TriggerAddEventPlayerEffectUsed(gt_AnyNukeLaunch, 4, "LaunchICBMSet22");
    TriggerAddEventPlayerEffectUsed(gt_AnyNukeLaunch, 5, "LaunchICBMSet22");
    TriggerAddEventPlayerEffectUsed(gt_AnyNukeLaunch, 6, "LaunchICBMSet22");
    TriggerAddEventPlayerEffectUsed(gt_AnyNukeLaunch, 7, "LaunchICBMSet22");
    TriggerAddEventPlayerEffectUsed(gt_AnyNukeLaunch, 8, "LaunchICBMSet22");
    TriggerAddEventPlayerEffectUsed(gt_AnyNukeLaunch, 9, "LaunchICBMSet22");
    TriggerAddEventPlayerEffectUsed(gt_AnyNukeLaunch, 1, "LaunchICBMSet23");
    TriggerAddEventPlayerEffectUsed(gt_AnyNukeLaunch, 2, "LaunchICBMSet23");
    TriggerAddEventPlayerEffectUsed(gt_AnyNukeLaunch, 3, "LaunchICBMSet23");
    TriggerAddEventPlayerEffectUsed(gt_AnyNukeLaunch, 4, "LaunchICBMSet23");
    TriggerAddEventPlayerEffectUsed(gt_AnyNukeLaunch, 5, "LaunchICBMSet23");
    TriggerAddEventPlayerEffectUsed(gt_AnyNukeLaunch, 6, "LaunchICBMSet23");
    TriggerAddEventPlayerEffectUsed(gt_AnyNukeLaunch, 7, "LaunchICBMSet23");
    TriggerAddEventPlayerEffectUsed(gt_AnyNukeLaunch, 8, "LaunchICBMSet23");
    TriggerAddEventPlayerEffectUsed(gt_AnyNukeLaunch, 9, "LaunchICBMSet23");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nuke Detonate
//--------------------------------------------------------------------------------------------------
bool gt_NukeDetonate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_local_P1;
    int lv_random;
    bool lv_did_revolt;

    // Automatic Variable Declarations
    playergroup auto8C8BE33C_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_KillUnitsOnCreep, true);
    gv_globalDeadHand = 60;
    libCamp_gf_DisplayCampaignMessage(PlayerGroupAll(), libCamp_ge_CampaignMessageType_Warning, (StringExternal("Param/Value/089A565A")), libCamp_ge_CampaignMessageFormatNotFormat_FormatMessage);
    SoundPlay(SoundLink("Ghost_NukeExplode", -1), PlayerGroupAll(), 100.0, 0.0);
    CreepModify(EventPlayerEffectUsedPoint(c_effectLocationTargetPoint), 2.0, true, false);
    Wait(0.5, c_timeGame);
    CreepModify(EventPlayerEffectUsedPoint(c_effectLocationTargetPoint), 4.0, true, false);
    Wait(0.5, c_timeGame);
    CreepModify(EventPlayerEffectUsedPoint(c_effectLocationTargetPoint), 5.0, true, false);
    Wait(0.5, c_timeGame);
    CreepModify(EventPlayerEffectUsedPoint(c_effectLocationTargetPoint), 7.0, true, false);
    PlayerCreateEffectPoint(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), "NukeEMP", EventPlayerEffectUsedPoint(c_effectLocationTargetPoint));
    auto8C8BE33C_g = PlayerGroupAll();
    lv_local_P1 = -1;
    while (true) {
        lv_local_P1 = PlayerGroupNextPlayer(auto8C8BE33C_g, lv_local_P1);
        if (lv_local_P1 < 0) { break; }
        CameraShakeStart(lv_local_P1, c_cameraPositionTarget, c_cameraDirectionZ, 0.4, 3.0, 100.0, 0.25);
    }
    gf_ThreathenRussia(EventPlayerEffectUsedPoint(c_effectLocationTargetPoint));
    gf_CreateAsh(EventPlayerEffectUsedPoint(c_effectLocationTargetPoint), 60);
    gf_NukeFiredAlready();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NukeDetonate_Init () {
    gt_NukeDetonate = TriggerCreate("gt_NukeDetonate_Func");
    TriggerAddEventPlayerEffectUsed(gt_NukeDetonate, 1, "SeekerMissileDamage23");
    TriggerAddEventPlayerEffectUsed(gt_NukeDetonate, 2, "SeekerMissileDamage23");
    TriggerAddEventPlayerEffectUsed(gt_NukeDetonate, 3, "SeekerMissileDamage23");
    TriggerAddEventPlayerEffectUsed(gt_NukeDetonate, 4, "SeekerMissileDamage23");
    TriggerAddEventPlayerEffectUsed(gt_NukeDetonate, 5, "SeekerMissileDamage23");
    TriggerAddEventPlayerEffectUsed(gt_NukeDetonate, 6, "SeekerMissileDamage23");
    TriggerAddEventPlayerEffectUsed(gt_NukeDetonate, 7, "SeekerMissileDamage23");
    TriggerAddEventPlayerEffectUsed(gt_NukeDetonate, 8, "SeekerMissileDamage23");
    TriggerAddEventPlayerEffectUsed(gt_NukeDetonate, 9, "SeekerMissileDamage23");
    TriggerAddEventPlayerEffectUsed(gt_NukeDetonate, 10, "SeekerMissileDamage23");
    TriggerAddEventPlayerEffectUsed(gt_NukeDetonate, 11, "SeekerMissileDamage23");
    TriggerAddEventPlayerEffectUsed(gt_NukeDetonate, 12, "SeekerMissileDamage23");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hydrogen Bomb Detonate
//--------------------------------------------------------------------------------------------------
bool gt_HydrogenBombDetonate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_local_P1;
    int lv_random;
    bool lv_did_revolt;

    // Automatic Variable Declarations
    playergroup auto146AAA33_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_globalDeadHand = 60;
    libCamp_gf_DisplayCampaignMessage(PlayerGroupAll(), libCamp_ge_CampaignMessageType_Warning, (StringExternal("Param/Value/531D8B18")), libCamp_ge_CampaignMessageFormatNotFormat_FormatMessage);
    SoundPlay(SoundLink("Ghost_NukeExplode", -1), PlayerGroupAll(), 100.0, 0.0);
    PlayerCreateEffectPoint(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), "HydrogenEMP", EventPlayerEffectUsedPoint(c_effectLocationTargetPoint));
    auto146AAA33_g = PlayerGroupAll();
    lv_local_P1 = -1;
    while (true) {
        lv_local_P1 = PlayerGroupNextPlayer(auto146AAA33_g, lv_local_P1);
        if (lv_local_P1 < 0) { break; }
        CameraShakeStart(lv_local_P1, c_cameraPositionTarget, c_cameraDirectionZ, 0.5, 6.0, 100.0, 1.5);
    }
    CreepModify(EventPlayerEffectUsedPoint(c_effectLocationTargetPoint), 5.0, true, false);
    Wait(0.5, c_timeGame);
    CreepModify(EventPlayerEffectUsedPoint(c_effectLocationTargetPoint), 7.0, true, false);
    Wait(0.5, c_timeGame);
    CreepModify(EventPlayerEffectUsedPoint(c_effectLocationTargetPoint), 10.0, true, false);
    Wait(0.5, c_timeGame);
    CreepModify(EventPlayerEffectUsedPoint(c_effectLocationTargetPoint), 12.0, true, false);
    Wait(0.5, c_timeGame);
    CreepModify(EventPlayerEffectUsedPoint(c_effectLocationTargetPoint), 15.0, true, false);
    Wait(0.5, c_timeGame);
    gf_ThreathenRussia(EventPlayerEffectUsedPoint(c_effectLocationTargetPoint));
    gf_CreateAsh(EventPlayerEffectUsedPoint(c_effectLocationTargetPoint), 120);
    gf_NukeFiredAlready();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HydrogenBombDetonate_Init () {
    gt_HydrogenBombDetonate = TriggerCreate("gt_HydrogenBombDetonate_Func");
    TriggerAddEventPlayerEffectUsed(gt_HydrogenBombDetonate, 1, "SeekerMissileDamage2");
    TriggerAddEventPlayerEffectUsed(gt_HydrogenBombDetonate, 2, "SeekerMissileDamage2");
    TriggerAddEventPlayerEffectUsed(gt_HydrogenBombDetonate, 3, "SeekerMissileDamage2");
    TriggerAddEventPlayerEffectUsed(gt_HydrogenBombDetonate, 4, "SeekerMissileDamage2");
    TriggerAddEventPlayerEffectUsed(gt_HydrogenBombDetonate, 5, "SeekerMissileDamage2");
    TriggerAddEventPlayerEffectUsed(gt_HydrogenBombDetonate, 6, "SeekerMissileDamage2");
    TriggerAddEventPlayerEffectUsed(gt_HydrogenBombDetonate, 7, "SeekerMissileDamage2");
    TriggerAddEventPlayerEffectUsed(gt_HydrogenBombDetonate, 8, "SeekerMissileDamage2");
    TriggerAddEventPlayerEffectUsed(gt_HydrogenBombDetonate, 9, "SeekerMissileDamage2");
    TriggerAddEventPlayerEffectUsed(gt_HydrogenBombDetonate, 10, "SeekerMissileDamage2");
    TriggerAddEventPlayerEffectUsed(gt_HydrogenBombDetonate, 11, "SeekerMissileDamage2");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Halcyon Bomb Detonate
//--------------------------------------------------------------------------------------------------
bool gt_HalcyonBombDetonate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_local_P1;
    int lv_random;
    bool lv_did_revolt;

    // Automatic Variable Declarations
    playergroup autoF0E0674F_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_globalDeadHand = 60;
    libCamp_gf_DisplayCampaignMessage(PlayerGroupAll(), libCamp_ge_CampaignMessageType_Warning, (StringExternal("Param/Value/D1477CB9")), libCamp_ge_CampaignMessageFormatNotFormat_FormatMessage);
    SoundPlay(SoundLink("Ghost_NukeExplode", -1), PlayerGroupAll(), 100.0, 0.0);
    PlayerCreateEffectPoint(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), "HalcyonEMP", EventPlayerEffectUsedPoint(c_effectLocationTargetPoint));
    autoF0E0674F_g = PlayerGroupAll();
    lv_local_P1 = -1;
    while (true) {
        lv_local_P1 = PlayerGroupNextPlayer(autoF0E0674F_g, lv_local_P1);
        if (lv_local_P1 < 0) { break; }
        CameraShakeStart(lv_local_P1, c_cameraPositionTarget, c_cameraDirectionZ, 1.0, 10.0, 100.0, 4.0);
    }
    CreepModify(EventPlayerEffectUsedPoint(c_effectLocationTargetPoint), 7.0, true, false);
    Wait(0.3, c_timeGame);
    Wait(0.5, c_timeGame);
    CreepModify(EventPlayerEffectUsedPoint(c_effectLocationTargetPoint), 15.0, true, false);
    Wait(0.5, c_timeGame);
    CreepModify(EventPlayerEffectUsedPoint(c_effectLocationTargetPoint), 20.0, true, false);
    Wait(0.5, c_timeGame);
    CreepModify(EventPlayerEffectUsedPoint(c_effectLocationTargetPoint), 25.0, true, false);
    Wait(0.5, c_timeGame);
    CreepModify(EventPlayerEffectUsedPoint(c_effectLocationTargetPoint), 30.0, true, false);
    Wait(0.5, c_timeGame);
    gf_ThreathenRussia(EventPlayerEffectUsedPoint(c_effectLocationTargetPoint));
    gf_CreateAsh(EventPlayerEffectUsedPoint(c_effectLocationTargetPoint), 360);
    gf_NukeFiredAlready();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HalcyonBombDetonate_Init () {
    gt_HalcyonBombDetonate = TriggerCreate("gt_HalcyonBombDetonate_Func");
    TriggerAddEventPlayerEffectUsed(gt_HalcyonBombDetonate, 1, "SeekerMissileDamage222");
    TriggerAddEventPlayerEffectUsed(gt_HalcyonBombDetonate, 2, "SeekerMissileDamage222");
    TriggerAddEventPlayerEffectUsed(gt_HalcyonBombDetonate, 3, "SeekerMissileDamage222");
    TriggerAddEventPlayerEffectUsed(gt_HalcyonBombDetonate, 4, "SeekerMissileDamage222");
    TriggerAddEventPlayerEffectUsed(gt_HalcyonBombDetonate, 5, "SeekerMissileDamage222");
    TriggerAddEventPlayerEffectUsed(gt_HalcyonBombDetonate, 6, "SeekerMissileDamage222");
    TriggerAddEventPlayerEffectUsed(gt_HalcyonBombDetonate, 7, "SeekerMissileDamage222");
    TriggerAddEventPlayerEffectUsed(gt_HalcyonBombDetonate, 8, "SeekerMissileDamage222");
    TriggerAddEventPlayerEffectUsed(gt_HalcyonBombDetonate, 9, "SeekerMissileDamage222");
    TriggerAddEventPlayerEffectUsed(gt_HalcyonBombDetonate, 10, "SeekerMissileDamage222");
    TriggerAddEventPlayerEffectUsed(gt_HalcyonBombDetonate, 11, "SeekerMissileDamage222");
}

//--------------------------------------------------------------------------------------------------
// Trigger: KillUnitsOnCreep
//--------------------------------------------------------------------------------------------------
bool gt_KillUnitsOnCreep_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto5945EB44_g;
    int auto5945EB44_u;
    unit auto5945EB44_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto5945EB44_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto5945EB44_u = UnitGroupCount(auto5945EB44_g, c_unitCountAll);
    for (;; auto5945EB44_u -= 1) {
        auto5945EB44_var = UnitGroupUnitFromEnd(auto5945EB44_g, auto5945EB44_u);
        if (auto5945EB44_var == null) { break; }
        if ((CreepIsPresent(UnitGetPosition(auto5945EB44_var)) == true)) {
            if ((UnitGetType(auto5945EB44_var) != "ShieldBattery") && (UnitGetType(auto5945EB44_var) != "BioTrooper") && (UnitGetType(auto5945EB44_var) != "ShieldBatteryNerazim2") && (UnitGetType(auto5945EB44_var) != "Moscow") && (UnitGetType(auto5945EB44_var) != "Marine") && (UnitGetType(auto5945EB44_var) != "NewRussianFederationPeacekeeper") && (UnitGetType(auto5945EB44_var) != "RussianBarracks") && (UnitGetType(auto5945EB44_var) != "RussianBunker") && (UnitGetType(auto5945EB44_var) != "RussianFactory") && (UnitGetType(auto5945EB44_var) != "AmericanBarracks") && (UnitGetType(auto5945EB44_var) != "RaynorLab") && (UnitGetType(auto5945EB44_var) != "RaynorCommando") && (UnitGetType(auto5945EB44_var) != "RussianRod") && (UnitGetType(auto5945EB44_var) != "RussianResearchCenter") && (UnitGetType(auto5945EB44_var) != "RussianArmory") && (UnitGetType(auto5945EB44_var) != "Convoy") && (UnitGetType(auto5945EB44_var) != "InfestedCivilian2") && (UnitGetType(auto5945EB44_var) != "InfestorTerran2") && (UnitGetType(auto5945EB44_var) != "InfestedCivilian22") && (UnitGetType(auto5945EB44_var) != "InfestorTerran22") && (UnitGetType(auto5945EB44_var) != "UASKenedyIV") && (UnitGetType(auto5945EB44_var) != "Shelter")) {
                UnitBehaviorAdd(auto5945EB44_var, "Creep", auto5945EB44_var, 1);
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KillUnitsOnCreep_Init () {
    gt_KillUnitsOnCreep = TriggerCreate("gt_KillUnitsOnCreep_Func");
    TriggerEnable(gt_KillUnitsOnCreep, false);
    TriggerAddEventTimePeriodic(gt_KillUnitsOnCreep, 4.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Worldeater Notification
//--------------------------------------------------------------------------------------------------
bool gt_WorldeaterNotification_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_position;

    // Automatic Variable Declarations
    const int autoEB3AE2AD_n = 5;
    int autoEB3AE2AD_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "SupplyDepot2343"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_position = UnitGetPosition(EventUnit());
    Wait(RandomInt(10, 15), c_timeGame);
    for (autoEB3AE2AD_i = 1; autoEB3AE2AD_i <= autoEB3AE2AD_n; autoEB3AE2AD_i += 1) {
        libCamp_gf_DisplayCampaignMessage(PlayerGroupAll(), libCamp_ge_CampaignMessageType_Warning, (StringExternal("Param/Value/165AFFD3")), libCamp_ge_CampaignMessageFormatNotFormat_FormatMessage);
        MinimapPing(PlayerGroupAll(), lv_position, 5.0, Color(100.00, 0.00, 0.00));
        MinimapPing(PlayerGroupAll(), lv_position, 5.0, Color(100.00, 0.00, 0.00));
        Wait(2.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WorldeaterNotification_Init () {
    gt_WorldeaterNotification = TriggerCreate("gt_WorldeaterNotification_Func");
    TriggerAddEventUnitAbility(gt_WorldeaterNotification, null, AbilityCommand("GivePopulationThinnerVirus3", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ReformGovernment
//--------------------------------------------------------------------------------------------------
bool gt_ReformGovernment_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitKill(EventUnit());
    gf_ResetModifiers(UnitGetOwner(EventUnit()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReformGovernment_Init () {
    gt_ReformGovernment = TriggerCreate("gt_ReformGovernment_Func");
    TriggerAddEventUnitAbility(gt_ReformGovernment, null, AbilityCommand("ReformGovernment", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AssignNationalName
//--------------------------------------------------------------------------------------------------
bool gt_AssignNationalName_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    unitgroup lv_coreBuildings;
    int lv_xDifference;
    int lv_yDifference;
    playergroup lv_canHaveNation;
    int[16] lv_ownedProvinces;
    int lv_province;
    int lv_soverign;
    int lv_totalSoverign;
    int[16] lv_normalizedSoverign;
    int[16] lv_nationID;
    string[16] lv_nationIDModifier;
    point[16] lv_capitolLocation;
    int lv_otherPlayer;
    int lv_taggg;

    // Automatic Variable Declarations
    playergroup autoF388DF79_g;
    int autoF388DF79_var;
    unitgroup auto7E353603_g;
    int auto7E353603_u;
    unit auto7E353603_var;
    const int auto7EECFA69_ae = gv_numberOfRegions;
    const int auto7EECFA69_ai = 1;
    playergroup autoF2C758D2_g;
    int autoF2C758D2_var;
    playergroup autoCBF95FCA_g;
    int autoCBF95FCA_var;
    int auto2F0B0222_n;
    int auto2F0B0222_i;
    playergroup auto0C4BC14E_g;
    int auto0C4BC14E_var;
    playergroup auto44DA2841_g;
    const int auto20B09013_ae = 7;
    const int auto20B09013_ai = 1;
    playergroup auto4E0D0793_g;
    int auto4E0D0793_var;
    playergroup auto56693B66_g;
    int auto56693B66_var;

    // Variable Initialization
    lv_coreBuildings = UnitGroupEmpty();
    lv_canHaveNation = PlayerGroupEmpty();
    for (init_i = 0; init_i <= 15; init_i += 1) {
        lv_nationIDModifier[init_i] = "";
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(2.0, c_timeGame);
    autoF388DF79_g = gv_users;
    autoF388DF79_var = -1;
    while (true) {
        autoF388DF79_var = PlayerGroupNextPlayer(autoF388DF79_g, autoF388DF79_var);
        if (autoF388DF79_var < 0) { break; }
        if ((gv_govType[autoF388DF79_var] == 1)) {
            gv_creditIncomeModifier[autoF388DF79_var] -= 60;
        }
        else {
            if ((gv_govType[autoF388DF79_var] == 2)) {
                gv_creditIncomeModifier[autoF388DF79_var] -= 15;
            }
            else {
                if ((gv_govType[autoF388DF79_var] == 3)) {
                    gv_centralization[autoF388DF79_var] += 10;
                }

            }
        }
        gv_nations[autoF388DF79_var] = "";
    }
    gv_nations[11] = "";
    gv_nations[10] = "";
    auto7E353603_g = UnitGroup("Capital", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto7E353603_u = UnitGroupCount(auto7E353603_g, c_unitCountAll);
    for (;; auto7E353603_u -= 1) {
        auto7E353603_var = UnitGroupUnitFromEnd(auto7E353603_g, auto7E353603_u);
        if (auto7E353603_var == null) { break; }
        PlayerGroupAdd(lv_canHaveNation, UnitGetOwner(auto7E353603_var));
        lv_nationID[UnitGetOwner(auto7E353603_var)] = gf_GetCultureGroup(gf_GetCountyID(auto7E353603_var));
        gv_nationalID[UnitGetOwner(auto7E353603_var)] = gf_GetCultureGroup(gf_GetCountyID(auto7E353603_var));
        lv_capitolLocation[UnitGetOwner(auto7E353603_var)] = UnitGetPosition(auto7E353603_var);
    }
    if ((gv_russianCitiesAlive[2] == true)) {
        PlayerGroupAdd(lv_canHaveNation, 11);
        lv_nationID[11] = 21;
        gv_nationalID[11] = 21;
        lv_capitolLocation[11] = UnitGetPosition(gv_russianCities[2]);
    }
    else {
        if ((gv_russianCitiesAlive[1] == true)) {
            PlayerGroupAdd(lv_canHaveNation, 11);
            lv_nationID[11] = 21;
            gv_nationalID[11] = 21;
            lv_capitolLocation[11] = UnitGetPosition(gv_russianCities[1]);
        }
        else {
            if ((gv_russianCitiesAlive[3] == true)) {
                PlayerGroupAdd(lv_canHaveNation, 11);
                lv_nationID[11] = 21;
                gv_nationalID[11] = 21;
                lv_capitolLocation[11] = UnitGetPosition(gv_russianCities[3]);
            }

        }
    }
    if ((gv_newYorkAlive == true)) {
        PlayerGroupAdd(lv_canHaveNation, 10);
        lv_nationID[10] = 1;
        gv_nationalID[10] = 1;
        lv_capitolLocation[10] = UnitGetPosition(UnitFromId(431751528));
    }

    lv_province = 1;
    for ( ; ( (auto7EECFA69_ai >= 0 && lv_province <= auto7EECFA69_ae) || (auto7EECFA69_ai < 0 && lv_province >= auto7EECFA69_ae) ) ; lv_province += auto7EECFA69_ai ) {
        if ((PlayerGroupHasPlayer(lv_canHaveNation, gv_soverignty[lv_province]) == true)) {
            lv_ownedProvinces[gv_soverignty[lv_province]] += 1;
            lv_totalSoverign += 1;
        }

    }
    autoF2C758D2_g = lv_canHaveNation;
    autoF2C758D2_var = -1;
    while (true) {
        autoF2C758D2_var = PlayerGroupNextPlayer(autoF2C758D2_g, autoF2C758D2_var);
        if (autoF2C758D2_var < 0) { break; }
        lv_normalizedSoverign[autoF2C758D2_var] = ((lv_ownedProvinces[autoF2C758D2_var] * 100) / (lv_totalSoverign + 1));
    }
    autoCBF95FCA_g = gv_users;
    autoCBF95FCA_var = -1;
    while (true) {
        autoCBF95FCA_var = PlayerGroupNextPlayer(autoCBF95FCA_g, autoCBF95FCA_var);
        if (autoCBF95FCA_var < 0) { break; }
        libNtve_gf_SetDialogItemImage(gv_mainDialogItemsUI[0], gf_GetNationalFlag(gf_GetNation(lv_nationID[autoCBF95FCA_var], autoCBF95FCA_var), autoCBF95FCA_var), PlayerGroupSingle(autoCBF95FCA_var));
    }
    auto2F0B0222_n = (PlayerGroupCount(lv_canHaveNation) * libNtve_gf_ArithmeticIntClamp((PlayerGroupCount(lv_canHaveNation) - 1), 0, 6));
    for (auto2F0B0222_i = 1; auto2F0B0222_i <= auto2F0B0222_n; auto2F0B0222_i += 1) {
        auto0C4BC14E_g = lv_canHaveNation;
        auto0C4BC14E_var = -1;
        while (true) {
            auto0C4BC14E_var = PlayerGroupNextPlayer(auto0C4BC14E_g, auto0C4BC14E_var);
            if (auto0C4BC14E_var < 0) { break; }
            auto44DA2841_g = lv_canHaveNation;
            lv_otherPlayer = -1;
            while (true) {
                lv_otherPlayer = PlayerGroupNextPlayer(auto44DA2841_g, lv_otherPlayer);
                if (lv_otherPlayer < 0) { break; }
                if ((lv_nationID[auto0C4BC14E_var] == lv_nationID[lv_otherPlayer]) && (lv_otherPlayer != auto0C4BC14E_var) && (lv_nationIDModifier[auto0C4BC14E_var] == "")) {
                    if ((lv_normalizedSoverign[auto0C4BC14E_var] > (lv_normalizedSoverign[lv_otherPlayer] * 3))) {
                    }
                    else {
                        lv_xDifference = (FixedToInt(PointGetX(lv_capitolLocation[auto0C4BC14E_var])) - FixedToInt(PointGetX(lv_capitolLocation[lv_otherPlayer])));
                        lv_yDifference = (FixedToInt(PointGetY(lv_capitolLocation[auto0C4BC14E_var])) - FixedToInt(PointGetY(lv_capitolLocation[lv_otherPlayer])));
                        if ((AbsI(lv_xDifference) > AbsI(lv_yDifference))) {
                            if ((lv_xDifference > 0)) {
                                lv_nationIDModifier[auto0C4BC14E_var] = "East ";
                            }
                            else {
                                lv_nationIDModifier[auto0C4BC14E_var] = "West ";
                            }
                        }
                        else {
                            if ((lv_yDifference > 0)) {
                                lv_nationIDModifier[auto0C4BC14E_var] = "North ";
                            }
                            else {
                                lv_nationIDModifier[auto0C4BC14E_var] = "South ";
                            }
                        }
                    }
                }

            }
        }
    }
    lv_taggg = 1;
    for ( ; ( (auto20B09013_ai >= 0 && lv_taggg <= auto20B09013_ae) || (auto20B09013_ai < 0 && lv_taggg >= auto20B09013_ae) ) ; lv_taggg += auto20B09013_ai ) {
        TextTagDestroy(gv_natoinalTags[lv_taggg]);
    }
    TextTagDestroy(gv_natoinalTags[11]);
    TextTagDestroy(gv_natoinalTags[10]);
    auto4E0D0793_g = lv_canHaveNation;
    auto4E0D0793_var = -1;
    while (true) {
        auto4E0D0793_var = PlayerGroupNextPlayer(auto4E0D0793_g, auto4E0D0793_var);
        if (auto4E0D0793_var < 0) { break; }
        if ((lv_normalizedSoverign[auto4E0D0793_var] > 39) && (lv_ownedProvinces[auto4E0D0793_var] > 14) && (gv_subjugated[auto4E0D0793_var] == false)) {
            lv_nationIDModifier[auto4E0D0793_var] = "";
            gv_govPower[auto4E0D0793_var] = 3;
            if ((gf_GetGovernmentType(auto4E0D0793_var) == 1)) {
                gv_nations[auto4E0D0793_var] = (gf_GetCultureGroupNames(auto4E0D0793_var) + " Commune");
            }
            else {
                if ((gf_GetGovernmentType(auto4E0D0793_var) == 3)) {
                    if ((lv_nationID[auto4E0D0793_var] != 8)) {
                        gv_nations[auto4E0D0793_var] = (gf_GetCultureGroupNames(auto4E0D0793_var) + " Empire");
                    }
                    else {
                        gv_nations[auto4E0D0793_var] = "Roman Empire";
                        gv_govType[auto4E0D0793_var] = 3;
                        libNtve_gf_SetDialogItemImage(gv_mainDialogItemsUI[0], gf_GetNationalFlag("Rome", auto4E0D0793_var), PlayerGroupSingle(auto4E0D0793_var));
                    }
                }
                else {
                    gv_nations[auto4E0D0793_var] = (lv_nationIDModifier[auto4E0D0793_var] + gf_GetNation(lv_nationID[auto4E0D0793_var], auto4E0D0793_var));
                }
            }
        }
        else {
            if ((lv_nationIDModifier[auto4E0D0793_var] == "")) {
                if ((auto4E0D0793_var < 8) && (gv_subjugated[auto4E0D0793_var] == true)) {
                    gv_govPower[auto4E0D0793_var] = 0;
                    gv_govType[auto4E0D0793_var] = 0;
                    if ((gf_GetGovernmentType(gv_subjugator[auto4E0D0793_var]) == 1)) {
                        gv_nations[auto4E0D0793_var] = ("Commune of " + gf_GetNation(lv_nationID[auto4E0D0793_var], auto4E0D0793_var));
                    }
                    else {
                        if ((gf_GetGovernmentType(gv_subjugator[auto4E0D0793_var]) == 2)) {
                            gv_nations[auto4E0D0793_var] = ("Protectorate of " + gf_GetNation(lv_nationID[auto4E0D0793_var], auto4E0D0793_var));
                        }
                        else {
                            if ((gf_GetGovernmentType(gv_subjugator[auto4E0D0793_var]) == 3)) {
                                if ((lv_ownedProvinces[auto4E0D0793_var] < 15)) {
                                    gv_nations[auto4E0D0793_var] = ("Protectorate of " + gf_GetNation(lv_nationID[auto4E0D0793_var], auto4E0D0793_var));
                                }
                                else {
                                    gv_nations[auto4E0D0793_var] = ((gf_GetCultureGroupNames(gv_subjugator[auto4E0D0793_var]) + " ") + gf_GetNation(lv_nationID[auto4E0D0793_var], auto4E0D0793_var));
                                    gv_govType[auto4E0D0793_var] = 2;
                                }
                            }
                            else {
                                gv_nations[auto4E0D0793_var] = ("Protectorate of " + gf_GetNation(lv_nationID[auto4E0D0793_var], auto4E0D0793_var));
                            }
                        }
                    }
                }
                else {
                    if (((lv_ownedProvinces[auto4E0D0793_var] < 6) || ((lv_ownedProvinces[auto4E0D0793_var] < 4) && ((lv_nationID[auto4E0D0793_var] == 3) || (lv_nationID[auto4E0D0793_var] == 4))) || ((lv_ownedProvinces[auto4E0D0793_var] < 2) && ((lv_nationID[auto4E0D0793_var] == 22) || (lv_nationID[auto4E0D0793_var] == 2))))) {
                        gv_govPower[auto4E0D0793_var] = 1;
                        gv_govType[auto4E0D0793_var] = 1;
                        if ((gf_GetGovernmentType(auto4E0D0793_var) == 1)) {
                            gv_nations[auto4E0D0793_var] = (gf_GetCountyName(gf_GetCountyIDByPoint(lv_capitolLocation[auto4E0D0793_var])) + " Commune");
                        }
                        else {
                            if ((gf_GetGovernmentType(auto4E0D0793_var) == 2)) {
                                gv_nations[auto4E0D0793_var] = ("City State of " + gf_GetCountyName(gf_GetCountyIDByPoint(lv_capitolLocation[auto4E0D0793_var])));
                            }
                            else {
                                if ((gf_GetGovernmentType(auto4E0D0793_var) == 3)) {
                                    gv_nations[auto4E0D0793_var] = ("Duchy of " + gf_GetCountyName(gf_GetCountyIDByPoint(lv_capitolLocation[auto4E0D0793_var])));
                                }
                                else {
                                    gv_nations[auto4E0D0793_var] = ("City State of " + gf_GetCountyName(gf_GetCountyIDByPoint(lv_capitolLocation[auto4E0D0793_var])));
                                }
                            }
                        }
                    }
                    else {
                        gv_govPower[auto4E0D0793_var] = 2;
                        gv_govType[auto4E0D0793_var] = 2;
                        if ((gf_GetGovernmentType(auto4E0D0793_var) == 1)) {
                            gv_nations[auto4E0D0793_var] = ("Socialist Republic of " + gf_GetNation(lv_nationID[auto4E0D0793_var], auto4E0D0793_var));
                        }
                        else {
                            if ((gf_GetGovernmentType(auto4E0D0793_var) == 2)) {
                                gv_nations[auto4E0D0793_var] = ("" + gf_GetNation(lv_nationID[auto4E0D0793_var], auto4E0D0793_var));
                            }
                            else {
                                if ((gf_GetGovernmentType(auto4E0D0793_var) == 3)) {
                                    if ((lv_ownedProvinces[auto4E0D0793_var] < 15)) {
                                        gv_nations[auto4E0D0793_var] = ("Kingdom of " + gf_GetNation(lv_nationID[auto4E0D0793_var], auto4E0D0793_var));
                                    }
                                    else {
                                        gv_nations[auto4E0D0793_var] = ("Empire of " + gf_GetNation(lv_nationID[auto4E0D0793_var], auto4E0D0793_var));
                                        gv_govType[auto4E0D0793_var] = 3;
                                    }
                                }
                                else {
                                    gv_nations[auto4E0D0793_var] = ("" + gf_GetNation(lv_nationID[auto4E0D0793_var], auto4E0D0793_var));
                                }
                            }
                        }
                    }
                }
            }
            else {
                gv_nations[auto4E0D0793_var] = (lv_nationIDModifier[auto4E0D0793_var] + gf_GetNation(lv_nationID[auto4E0D0793_var], auto4E0D0793_var));
            }
        }
    }
    gv_nations[11] = "New Russian Federation";
    gv_nations[10] = "United Americas";
    lv_normalizedSoverign[11] *= 2;
    lv_normalizedSoverign[11] *= 3;
    libNtve_gf_SetDialogItemTooltip(gv_mainDialogItemsUI[0], StringToText(""), PlayerGroupAll());
    auto56693B66_g = lv_canHaveNation;
    auto56693B66_var = -1;
    while (true) {
        auto56693B66_var = PlayerGroupNextPlayer(auto56693B66_g, auto56693B66_var);
        if (auto56693B66_var < 0) { break; }
        lv_coreBuildings = UnitGroup(null, auto56693B66_var, RegionEntireMap(), UnitFilter((1 << c_targetFilterPsionic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        TextTagCreate(TextWithColor(StringToText(gv_nations[auto56693B66_var]), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(auto56693B66_var, false))), libNtve_gf_ArithmeticIntClamp((lv_normalizedSoverign[auto56693B66_var] * 3), 20, 80), UnitGroupCenterOfGroup(lv_coreBuildings), 10.0, true, false, PlayerGroupAll());
        gv_natoinalTags[auto56693B66_var] = TextTagLastCreated();
        if ((gv_govType[auto56693B66_var] == 1)) {
            libNtve_gf_SetDialogItemTooltip(gv_mainDialogItemsUI[0], (StringExternal("Param/Value/F2198EC1") + StringToText("")), PlayerGroupSingle(auto56693B66_var));
            gv_creditIncomeModifier[auto56693B66_var] += 60;
        }

        if ((gv_govType[auto56693B66_var] == 2)) {
            libNtve_gf_SetDialogItemTooltip(gv_mainDialogItemsUI[0], (StringExternal("Param/Value/9E1C8B65") + StringToText("")), PlayerGroupSingle(auto56693B66_var));
            gv_creditIncomeModifier[auto56693B66_var] += 15;
        }

        if ((gv_govType[auto56693B66_var] == 3)) {
            libNtve_gf_SetDialogItemTooltip(gv_mainDialogItemsUI[0], (StringExternal("Param/Value/9265C495") + StringToText("")), PlayerGroupSingle(auto56693B66_var));
            gv_centralization[auto56693B66_var] -= 10;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AssignNationalName_Init () {
    gt_AssignNationalName = TriggerCreate("gt_AssignNationalName_Func");
    TriggerAddEventTimePeriodic(gt_AssignNationalName, 120.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: First 3 Minutes Name of Counties
//--------------------------------------------------------------------------------------------------
bool gt_First3MinutesNameofCounties_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int lv_destroy;
    int[10] lv_tag;

    // Automatic Variable Declarations
    const int auto865990DF_n = 360;
    int auto865990DF_i;
    const int auto753C02F6_ae = 9;
    const int auto753C02F6_ai = 1;
    unitgroup auto6E6528DE_g;
    int auto6E6528DE_u;
    unit auto6E6528DE_var;
    const int auto5DDE67B6_ae = 9;
    const int auto5DDE67B6_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= 9; init_i += 1) {
        lv_tag[init_i] = c_textTagNone;
    }

    // Actions
    if (!runActions) {
        return true;
    }

    for (auto865990DF_i = 1; auto865990DF_i <= auto865990DF_n; auto865990DF_i += 1) {
        lv_destroy = 1;
        for ( ; ( (auto753C02F6_ai >= 0 && lv_destroy <= auto753C02F6_ae) || (auto753C02F6_ai < 0 && lv_destroy >= auto753C02F6_ae) ) ; lv_destroy += auto753C02F6_ai ) {
            TextTagDestroy(lv_tag[lv_destroy]);
        }
        auto6E6528DE_g = UnitGroup("Settler", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto6E6528DE_u = UnitGroupCount(auto6E6528DE_g, c_unitCountAll);
        for (;; auto6E6528DE_u -= 1) {
            auto6E6528DE_var = UnitGroupUnitFromEnd(auto6E6528DE_g, auto6E6528DE_u);
            if (auto6E6528DE_var == null) { break; }
            TextTagCreate(StringToText(gf_GetCountyName(gf_GetCountyID(auto6E6528DE_var))), 24, UnitGetPosition(auto6E6528DE_var), 1.0, true, false, PlayerGroupAll());
            TextTagAttachToUnit(TextTagLastCreated(), auto6E6528DE_var, 1.0);
            lv_tag[UnitGetOwner(auto6E6528DE_var)] = TextTagLastCreated();
        }
        Wait(0.5, c_timeGame);
    }
    lv_destroy = 1;
    for ( ; ( (auto5DDE67B6_ai >= 0 && lv_destroy <= auto5DDE67B6_ae) || (auto5DDE67B6_ai < 0 && lv_destroy >= auto5DDE67B6_ae) ) ; lv_destroy += auto5DDE67B6_ai ) {
        TextTagDestroy(lv_tag[lv_destroy]);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_First3MinutesNameofCounties_Init () {
    gt_First3MinutesNameofCounties = TriggerCreate("gt_First3MinutesNameofCounties_Func");
    TriggerAddEventTimeElapsed(gt_First3MinutesNameofCounties, 40.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AssignCountryIDGroup
//--------------------------------------------------------------------------------------------------
bool gt_AssignCountryIDGroup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto323104E0_g;
    int auto323104E0_u;
    unit auto323104E0_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto323104E0_g = UnitGroup("Capital", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto323104E0_u = UnitGroupCount(auto323104E0_g, c_unitCountAll);
    for (;; auto323104E0_u -= 1) {
        auto323104E0_var = UnitGroupUnitFromEnd(auto323104E0_g, auto323104E0_u);
        if (auto323104E0_var == null) { break; }
        gf_GetCountyID(auto323104E0_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AssignCountryIDGroup_Init () {
    gt_AssignCountryIDGroup = TriggerCreate("gt_AssignCountryIDGroup_Func");
    TriggerAddEventTimeElapsed(gt_AssignCountryIDGroup, 5.0, c_timeGame);
    TriggerAddEventTimeElapsed(gt_AssignCountryIDGroup, 15.0, c_timeGame);
    TriggerAddEventTimePeriodic(gt_AssignCountryIDGroup, 60.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: IdTextTag, Soverignty
//--------------------------------------------------------------------------------------------------
bool gt_IdTextTagSoverignty_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool[gv_numberOfRegions + 1] lv_goneThrough;
    int lv_check;
    int lv_playerRegion;
    int lv_countyPopulation;
    int lv_soverign;
    int lv_fontSize;

    // Automatic Variable Declarations
    const int autoD81D0ABB_ae = gv_numberOfRegions;
    const int autoD81D0ABB_ai = 1;
    unitgroup auto27F59542_g;
    int auto27F59542_u;
    unit auto27F59542_var;
    const int autoDFC7A1EA_ae = gv_numberOfRegions;
    const int autoDFC7A1EA_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_check = 1;
    for ( ; ( (autoD81D0ABB_ai >= 0 && lv_check <= autoD81D0ABB_ae) || (autoD81D0ABB_ai < 0 && lv_check >= autoD81D0ABB_ae) ) ; lv_check += autoD81D0ABB_ai ) {
        auto27F59542_g = UnitGroup(null, c_playerAny, gv_countRegions[lv_check], UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1);
        auto27F59542_u = UnitGroupCount(auto27F59542_g, c_unitCountAll);
        for (;; auto27F59542_u -= 1) {
            auto27F59542_var = UnitGroupUnitFromEnd(auto27F59542_g, auto27F59542_u);
            if (auto27F59542_var == null) { break; }
            if ((lv_goneThrough[lv_check] == true)) {
            }
            else {
                if ((gv_countyIDTagCreated[lv_check] == true)) {
                    TextTagDestroy(gv_countyIDTag[lv_check]);
                }

                if ((UnitGetOwner(auto27F59542_var) != 15)) {
                    TextTagCreate(StringToText(gf_GetCountyName(lv_check)), 10, UnitGroupCenterOfGroup(UnitGroup(null, c_playerAny, gv_countRegions[lv_check], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0)), 3.5, true, false, PlayerGroupAll());
                    gv_countyIDTag[lv_check] = TextTagLastCreated();
                    gv_countyIDTagCreated[lv_check] = true;
                    lv_goneThrough[lv_check] = true;
                }

            }
        }
    }
    Wait(0.01, c_timeGame);
    lv_soverign = 1;
    for ( ; ( (autoDFC7A1EA_ai >= 0 && lv_soverign <= autoDFC7A1EA_ae) || (autoDFC7A1EA_ai < 0 && lv_soverign >= autoDFC7A1EA_ae) ) ; lv_soverign += autoDFC7A1EA_ai ) {
        gv_soverignty[lv_soverign] = gf_GetCountySoverignty(lv_soverign);
        if ((gv_countyIDTagCreated[lv_soverign] == true)) {
            TextTagSetColor(gv_countyIDTag[lv_soverign], c_textTagColorText, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_soverignty[lv_soverign], false)));
            lv_countyPopulation = gf_GetCountyPopulation(lv_soverign);
            lv_fontSize = (lv_countyPopulation / 300);
            lv_fontSize = (lv_fontSize + 12);
            lv_fontSize = libNtve_gf_ArithmeticIntClamp(lv_fontSize, 10, 30);
            lv_fontSize = libNtve_gf_ArithmeticIntClamp(lv_fontSize, gf_GetCountyPopulationProportion(lv_soverign), 35);
            lv_fontSize = libNtve_gf_ArithmeticIntClamp(lv_fontSize, 10, 35);
            TextTagSetFontSize(gv_countyIDTag[lv_soverign], lv_fontSize);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IdTextTagSoverignty_Init () {
    gt_IdTextTagSoverignty = TriggerCreate("gt_IdTextTagSoverignty_Func");
    TriggerAddEventTimePeriodic(gt_IdTextTagSoverignty, 60.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AssignCountVariables
//--------------------------------------------------------------------------------------------------
bool gt_AssignCountVariables_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_zVariableCount;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_zVariableCount = 1;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_countRegions[lv_zVariableCount] = RegionFromId(8);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(2);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(7);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(3);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(4);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(6);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(9);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(10);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(15);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(16);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(11);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(13);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(12);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(17);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(14);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(22);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(18);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(19);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(20);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(21);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(23);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(24);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(25);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(26);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(34);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(28);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(29);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(30);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(31);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(32);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(33);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(27);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(35);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(36);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(37);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(40);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(38);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(43);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(42);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(41);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(46);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(45);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(44);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(39);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(47);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(48);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(50);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(49);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(52);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(51);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(55);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(54);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(53);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(56);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(57);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(59);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(60);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(70);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(68);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(71);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(69);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(72);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(73);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(74);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(75);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(78);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(77);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(83);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(79);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(81);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(82);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(80);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(76);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(84);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(85);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(86);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(88);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(90);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(91);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(92);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(93);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(94);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(89);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(87);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(95);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(96);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(97);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(98);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(103);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(99);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(104);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(102);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(101);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(105);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(100);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(109);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(106);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(107);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(108);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(110);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(111);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(112);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(116);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(113);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(126);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(127);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(115);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(114);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(125);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(124);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(128);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(119);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(118);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(120);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(121);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(117);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(122);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(123);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(131);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(130);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(129);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(132);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(133);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(138);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(134);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(136);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(137);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(96);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(135);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(143);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(141);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(144);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(147);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(139);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(145);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(140);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(146);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(142);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(156);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(157);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(159);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(158);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(154);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(153);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(152);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(150);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(148);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(149);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(151);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(161);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(160);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(164);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(175);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(174);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(173);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(162);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(163);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(166);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(172);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(170);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(171);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(169);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(168);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(167);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(165);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(177);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(176);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(179);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(180);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(181);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(182);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(178);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(183);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(184);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(190);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(186);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(185);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(189);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(188);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(187);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(64);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(191);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(192);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(193);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(195);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(194);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(196);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(58);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(155);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(198);
    lv_zVariableCount += 1;
    gv_countRegions[lv_zVariableCount] = RegionFromId(199);
    lv_zVariableCount += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AssignCountVariables_Init () {
    gt_AssignCountVariables = TriggerCreate("gt_AssignCountVariables_Func");
    TriggerAddEventTimeElapsed(gt_AssignCountVariables, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CultureGroupNations
//--------------------------------------------------------------------------------------------------
bool gt_CultureGroupNations_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    unitgroup[gv_numberOfCultureGroups + 1] lv_tempUnits;
    int lv_region;
    int[gv_numberOfRegions + 1] lv_regionowner;
    region[gv_numberOfCultureGroups + 1] lv_nationRegions;

    // Automatic Variable Declarations
    const int autoC4B01EE5_ae = gv_numberOfRegions;
    const int autoC4B01EE5_ai = 1;
    const int autoC6762512_ae = gv_numberOfRegions;
    const int autoC6762512_ai = 1;
    const int auto82377469_ae = gv_numberOfCultureGroups;
    const int auto82377469_ai = 1;
    const int auto6444D59F_ae = gv_numberOfRegions;
    const int auto6444D59F_ai = 1;
    const int auto02781165_ae = gv_numberOfCultureGroups;
    const int auto02781165_ai = 1;
    unitgroup auto791E9C91_g;
    int auto791E9C91_u;
    unit auto791E9C91_var;
    const int autoFEA55467_ae = gv_numberOfCultureGroups;
    const int autoFEA55467_ai = 1;
    const int auto1082A184_ae = gv_numberOfRegions;
    const int auto1082A184_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= gv_numberOfCultureGroups; init_i += 1) {
        lv_tempUnits[init_i] = UnitGroupEmpty();
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_region = 1;
    for ( ; ( (autoC4B01EE5_ai >= 0 && lv_region <= autoC4B01EE5_ae) || (autoC4B01EE5_ai < 0 && lv_region >= autoC4B01EE5_ae) ) ; lv_region += autoC4B01EE5_ai ) {
        lv_regionowner[lv_region] = gf_GetCultureGroup(lv_region);
    }
    lv_region = 1;
    for ( ; ( (autoC6762512_ai >= 0 && lv_region <= autoC6762512_ae) || (autoC6762512_ai < 0 && lv_region >= autoC6762512_ae) ) ; lv_region += autoC6762512_ai ) {
        RegionAddRegion(lv_nationRegions[lv_regionowner[lv_region]], RegionCircle(RegionGetCenter(gv_countRegions[lv_region]), 12.0));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Skyscraper", 0, 0, RegionGetCenter(gv_countRegions[lv_region]));
        UnitGroupAdd(lv_tempUnits[lv_regionowner[lv_region]], UnitLastCreated());
    }
    lv_region = 1;
    for ( ; ( (auto82377469_ai >= 0 && lv_region <= auto82377469_ae) || (auto82377469_ai < 0 && lv_region >= auto82377469_ae) ) ; lv_region += auto82377469_ai ) {
        lv_nationRegions[lv_region] = RegionCircle(UnitGroupCenterOfGroup(lv_tempUnits[lv_region]), 4.0);
    }
    lv_region = 1;
    for ( ; ( (auto6444D59F_ai >= 0 && lv_region <= auto6444D59F_ae) || (auto6444D59F_ai < 0 && lv_region >= auto6444D59F_ae) ) ; lv_region += auto6444D59F_ai ) {
        RegionAddRegion(lv_nationRegions[lv_regionowner[lv_region]], gv_countRegions[lv_region]);
    }
    lv_region = 1;
    for ( ; ( (auto02781165_ai >= 0 && lv_region <= auto02781165_ae) || (auto02781165_ai < 0 && lv_region >= auto02781165_ae) ) ; lv_region += auto02781165_ai ) {
        auto791E9C91_g = lv_tempUnits[lv_region];
        auto791E9C91_u = UnitGroupCount(auto791E9C91_g, c_unitCountAll);
        for (;; auto791E9C91_u -= 1) {
            auto791E9C91_var = UnitGroupUnitFromEnd(auto791E9C91_g, auto791E9C91_u);
            if (auto791E9C91_var == null) { break; }
            UnitRemove(auto791E9C91_var);
        }
    }
    lv_region = 1;
    for ( ; ( (autoFEA55467_ai >= 0 && lv_region <= autoFEA55467_ae) || (autoFEA55467_ai < 0 && lv_region >= autoFEA55467_ae) ) ; lv_region += autoFEA55467_ai ) {
        gv_nationRegions[lv_region] = lv_nationRegions[lv_region];
    }
    lv_region = 1;
    for ( ; ( (auto1082A184_ai >= 0 && lv_region <= auto1082A184_ae) || (auto1082A184_ai < 0 && lv_region >= auto1082A184_ae) ) ; lv_region += auto1082A184_ai ) {
        gv_provinceInNation[lv_region] = lv_regionowner[lv_region];
    }
    gv_nationRegions[1] = RegionFromId(201);
    gv_nationRegions[21] = RegionFromId(202);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CultureGroupNations_Init () {
    gt_CultureGroupNations = TriggerCreate("gt_CultureGroupNations_Func");
    TriggerAddEventTimeElapsed(gt_CultureGroupNations, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Autobuild LD
//--------------------------------------------------------------------------------------------------
bool gt_AutobuildLD_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_theLuckyBuilding;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_theLuckyBuilding = "SmallHouse";
    gf_Autobuild(lv_theLuckyBuilding, EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AutobuildLD_Init () {
    gt_AutobuildLD = TriggerCreate("gt_AutobuildLD_Func");
    TriggerAddEventUnitAbility(gt_AutobuildLD, null, AbilityCommand("AutobuildLDHomes", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Autobuild HD
//--------------------------------------------------------------------------------------------------
bool gt_AutobuildHD_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_theLuckyBuilding;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_theLuckyBuilding = "Highrise";
    gf_Autobuild(lv_theLuckyBuilding, EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AutobuildHD_Init () {
    gt_AutobuildHD = TriggerCreate("gt_AutobuildHD_Func");
    TriggerAddEventUnitAbility(gt_AutobuildHD, null, AbilityCommand("AutobuildHDHomes", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Autobuild MD
//--------------------------------------------------------------------------------------------------
bool gt_AutobuildMD_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_theLuckyBuilding;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_theLuckyBuilding = "Flats";
    gf_Autobuild(lv_theLuckyBuilding, EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AutobuildMD_Init () {
    gt_AutobuildMD = TriggerCreate("gt_AutobuildMD_Func");
    TriggerAddEventUnitAbility(gt_AutobuildMD, null, AbilityCommand("AutobuildMDHomes", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Autobuild Farms
//--------------------------------------------------------------------------------------------------
bool gt_AutobuildFarms_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_theLuckyBuilding;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_theLuckyBuilding = "FarmI";
    gf_Autobuild(lv_theLuckyBuilding, EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AutobuildFarms_Init () {
    gt_AutobuildFarms = TriggerCreate("gt_AutobuildFarms_Func");
    TriggerAddEventUnitAbility(gt_AutobuildFarms, null, AbilityCommand("AutobuildFarms", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Autobuild Hydrofarms
//--------------------------------------------------------------------------------------------------
bool gt_AutobuildHydrofarms_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_theLuckyBuilding;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_theLuckyBuilding = "HydrofarmI";
    gf_Autobuild(lv_theLuckyBuilding, EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AutobuildHydrofarms_Init () {
    gt_AutobuildHydrofarms = TriggerCreate("gt_AutobuildHydrofarms_Func");
    TriggerAddEventUnitAbility(gt_AutobuildHydrofarms, null, AbilityCommand("AutobuildHydrofarms", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Autobuild Windmills
//--------------------------------------------------------------------------------------------------
bool gt_AutobuildWindmills_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_theLuckyBuilding;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_theLuckyBuilding = "WindTurbine";
    gf_Autobuild(lv_theLuckyBuilding, EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AutobuildWindmills_Init () {
    gt_AutobuildWindmills = TriggerCreate("gt_AutobuildWindmills_Func");
    TriggerAddEventUnitAbility(gt_AutobuildWindmills, null, AbilityCommand("AutobuildWindmills", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Autobuild Fission
//--------------------------------------------------------------------------------------------------
bool gt_AutobuildFission_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_theLuckyBuilding;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_theLuckyBuilding = "FissionPowerPlant";
    gf_Autobuild(lv_theLuckyBuilding, EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AutobuildFission_Init () {
    gt_AutobuildFission = TriggerCreate("gt_AutobuildFission_Func");
    TriggerAddEventUnitAbility(gt_AutobuildFission, null, AbilityCommand("AutobuildFission", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Autobuild Fusion
//--------------------------------------------------------------------------------------------------
bool gt_AutobuildFusion_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_theLuckyBuilding;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_theLuckyBuilding = "FusionReactor2";
    gf_Autobuild(lv_theLuckyBuilding, EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AutobuildFusion_Init () {
    gt_AutobuildFusion = TriggerCreate("gt_AutobuildFusion_Func");
    TriggerAddEventUnitAbility(gt_AutobuildFusion, null, AbilityCommand("AutobuildFusion", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Autobuild CPG
//--------------------------------------------------------------------------------------------------
bool gt_AutobuildCPG_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_theLuckyBuilding;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_theLuckyBuilding = "CPGI";
    gf_Autobuild(lv_theLuckyBuilding, EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AutobuildCPG_Init () {
    gt_AutobuildCPG = TriggerCreate("gt_AutobuildCPG_Func");
    TriggerAddEventUnitAbility(gt_AutobuildCPG, null, AbilityCommand("UnknownAbility", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Parliment Conquered
//--------------------------------------------------------------------------------------------------
bool gt_ParlimentConquered_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_conquerer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_conquerer = PlayerGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) <= 25.0))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitTarget()) < 8))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitTarget()) != 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_ParlimentConquered(EventUnit(), UnitGetOwner(EventUnitTarget()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ParlimentConquered_Init () {
    gt_ParlimentConquered = TriggerCreate("gt_ParlimentConquered_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UnitAttacked
//--------------------------------------------------------------------------------------------------
bool gt_UnitAttacked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_nearboi;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetPropertyFixed(EventUnit(), c_unitPropEnergyMax, c_unitPropNormal) > 0.0)) {
        if ((UnitGetPropertyFixed(EventUnit(), c_unitPropShields, c_unitPropCurrent) < 1.0) && (UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributePsionic) == false) && ((UnitGetType(EventUnit()) == "Metal") || (UnitGetType(EventUnit()) == "MineI") || (UnitGetType(EventUnit()) == "MineII") || (UnitGetType(EventUnit()) == "MineIII") || (UnitGetType(EventUnit()) == "MineIV") || (UnitGetType(EventUnit()) == "MineV") || (UnitGetType(EventUnit()) == "BoreholeI") || (UnitGetType(EventUnit()) == "BoreholeII") || (UnitGetType(EventUnit()) == "BoreholeIII") || (UnitGetType(EventUnit()) == "BoreholeIV") || (UnitGetType(EventUnit()) == "BoreholeV") || (UnitGetType(EventUnit()) == "Oil") || (UnitGetType(EventUnit()) == "Silver") || (UnitGetType(EventUnit()) == "Gold") || (UnitGetType(EventUnit()) == "Platinum") || (UnitGetType(EventUnit()) == "OilWellI") || (UnitGetType(EventUnit()) == "OilWellII") || (UnitGetType(EventUnit()) == "GeothermalPowerPlant") || (UnitGetType(EventUnit()) == "GeothermalFissure"))) {
            if ((UnitGetOwner(EventUnitDamageSourceUnit()) > 7)) {
                if ((UnitGetCustomValue(EventUnit(), 10) < 8.0) && (UnitGetCustomValue(EventUnit(), 10) > 0.0)) {
                    lv_nearboi = UnitGroupClosestToPoint(gv_corpResources[FixedToInt(UnitGetCustomValue(EventUnit(), 10))], UnitGetPosition(EventUnit()));
                    if ((lv_nearboi == null)) {
                    }
                    else {
                        UnitSetCustomValue(lv_nearboi, 15, (UnitGetCustomValue(lv_nearboi, 15) + (UnitGetCustomValue(EventUnit(), 15) * 1.5)));
                    }
                }

                gf_WipeUnitCustomValues(EventUnit(), 1, 64);
            }
            else {
                if ((UnitGetCustomValue(EventUnit(), 10) == 0.0) && (UnitGetOwner(EventUnit()) > 7) && ((UnitGetType(EventUnit()) == "Metal") || (UnitGetType(EventUnit()) == "MineI") || (UnitGetType(EventUnit()) == "MineII") || (UnitGetType(EventUnit()) == "MineIII") || (UnitGetType(EventUnit()) == "MineIV") || (UnitGetType(EventUnit()) == "MineV") || (UnitGetType(EventUnit()) == "BoreholeI") || (UnitGetType(EventUnit()) == "BoreholeII") || (UnitGetType(EventUnit()) == "BoreholeIII") || (UnitGetType(EventUnit()) == "BoreholeIV") || (UnitGetType(EventUnit()) == "BoreholeV") || (UnitGetType(EventUnit()) == "Oil") || (UnitGetType(EventUnit()) == "OilWellI") || (UnitGetType(EventUnit()) == "OilWellII"))) {
                    UnitSetCustomValue(EventUnit(), 10, IntToFixed(UnitGetOwner(EventUnitDamageSourceUnit())));
                }

            }
            UnitSetCustomValue(EventUnit(), 0, 0.0);
            UnitBehaviorAdd(EventUnit(), "ResourceInvulnerability", EventUnit(), 1);
            UnitSetOwner(EventUnit(), UnitGetOwner(EventUnitDamageSourceUnit()), true);
            if ((UnitGetPropertyFixed(EventUnit(), c_unitPropShields, c_unitPropCurrent) <= 1.0) && (UnitGetType(EventUnit()) == "Gold") && (UnitGetOwner(EventUnit()) != UnitGetOwner(EventUnitDamageSourceUnit()))) {
                UnitBehaviorAdd(EventUnit(), "ResourceInvulnerability", EventUnit(), 1);
                UnitSetOwner(EventUnit(), UnitGetOwner(EventUnitDamageSourceUnit()), true);
                gv_taxUpgrade[UnitGetOwner(EventUnit())] -= 60;
                gv_creditIncomeModifier[UnitGetOwner(EventUnit())] -= 60;
                gv_taxUpgrade[UnitGetOwner(EventUnitDamageSourceUnit())] += 60;
                gv_creditIncomeModifier[UnitGetOwner(EventUnitDamageSourceUnit())] += 60;
            }

            if ((UnitGetPropertyFixed(EventUnit(), c_unitPropShields, c_unitPropCurrent) <= 1.0) && (UnitGetType(EventUnit()) == "Silver") && (UnitGetOwner(EventUnit()) != UnitGetOwner(EventUnitDamageSourceUnit()))) {
                UnitBehaviorAdd(EventUnit(), "ResourceInvulnerability", EventUnit(), 1);
                UnitSetOwner(EventUnit(), UnitGetOwner(EventUnitDamageSourceUnit()), true);
                gv_taxUpgrade[UnitGetOwner(EventUnit())] -= 30;
                gv_creditIncomeModifier[UnitGetOwner(EventUnit())] -= 30;
                gv_taxUpgrade[UnitGetOwner(EventUnitDamageSourceUnit())] += 30;
                gv_creditIncomeModifier[UnitGetOwner(EventUnitDamageSourceUnit())] += 30;
            }

            if ((UnitGetPropertyFixed(EventUnit(), c_unitPropShields, c_unitPropCurrent) <= 1.0) && (UnitGetType(EventUnit()) == "Platinum") && (UnitGetOwner(EventUnit()) != UnitGetOwner(EventUnitDamageSourceUnit()))) {
                UnitBehaviorAdd(EventUnit(), "ResourceInvulnerability", EventUnit(), 1);
                UnitSetOwner(EventUnit(), UnitGetOwner(EventUnitDamageSourceUnit()), true);
                gv_taxUpgrade[UnitGetOwner(EventUnit())] -= 90;
                gv_creditIncomeModifier[UnitGetOwner(EventUnit())] -= 90;
                gv_taxUpgrade[UnitGetOwner(EventUnitDamageSourceUnit())] += 90;
                gv_creditIncomeModifier[UnitGetOwner(EventUnitDamageSourceUnit())] += 90;
            }

        }
        else {
            if ((UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) <= 25.0) && (UnitGetOwner(EventUnitDamageSourceUnit()) < 8) && (UnitGetOwner(EventUnitDamageSourceUnit()) != 0) && (UnitGetType(EventUnit()) == "EuropeanParliment")) {
                gf_ParlimentConquered(EventUnit(), UnitGetOwner(EventUnitTarget()));
            }

        }
    }
    else {
        if ((UnitGetOwner(EventUnitDamageSourceUnit()) < 8) && (UnitGetOwner(EventUnitDamageSourceUnit()) != 0) && (UnitGetOwner(EventUnitDamageSourceUnit()) != UnitGetOwner(EventUnit()))) {
            if (((PlayerGetAlliance(EventPlayer(), c_allianceIdPassive, EventUnitDamageSourcePlayer()) == true) || (PlayerGetAlliance(EventPlayer(), c_allianceIdChat, EventUnitDamageSourcePlayer()) == true))) {
                if ((UnitGetType(EventUnit()) == "Capital")) {
                    libNtve_gf_SetAlliance(EventPlayer(), EventUnitDamageSourcePlayer(), libNtve_ge_AllianceSetting_Enemy);
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/1E4CD798") + (gf_NationOfPlayer(EventPlayer()) + (StringExternal("Param/Value/2D52B836") + (gf_NationOfPlayer(EventUnitDamageSourcePlayer()) + StringExternal("Param/Value/0A41C42D"))))));
                    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/BF9E4000"));
                    MinimapPing(PlayerGroupSingle(EventPlayer()), EventUnitDamageSourcePoint(), 5.0, Color(100.00, 0.00, 0.00));
                    MinimapPing(PlayerGroupSingle(EventPlayer()), EventUnitDamageSourcePoint(), 5.0, Color(100.00, 0.00, 0.00));
                    MinimapPing(PlayerGroupSingle(EventPlayer()), EventUnitDamageSourcePoint(), 5.0, Color(100.00, 0.00, 0.00));
                    MinimapPing(PlayerGroupSingle(EventPlayer()), EventUnitDamageSourcePoint(), 5.0, Color(100.00, 0.00, 0.00));
                    MinimapPing(PlayerGroupSingle(EventPlayer()), EventUnitDamageSourcePoint(), 5.0, Color(100.00, 0.00, 0.00));
                }
                else {
                    MinimapPing(PlayerGroupSingle(EventPlayer()), EventUnitDamageSourcePoint(), 5.0, Color(100.00, 0.00, 0.00));
                }
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitAttacked_Init () {
    gt_UnitAttacked = TriggerCreate("gt_UnitAttacked_Func");
    TriggerAddEventUnitDamaged(gt_UnitAttacked, null, c_unitDamageTypeAny, c_unitDamageNonFatal, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: BuildingAttacked
//--------------------------------------------------------------------------------------------------
bool gt_BuildingAttacked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_pickedUnit;
    int lv_dealDamageAmmount;
    unit lv_nuclearShield;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior2(EventUnit(), "NuclearShield") == true)) {
        lv_nuclearShield = UnitGroupClosestToPoint(UnitGroup("ShieldBatteryNerazim2", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(EventUnit()));
        UnitDamage(EventUnitDamageSourceUnit(), EventUnitDamageEffect(), lv_nuclearShield, 0.0);
    }
    else {
        if ((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributePsionic) == true)) {
            if ((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeUser1) == true) && (UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent) > 0.0)) {
                gv_peopleDead[UnitGetOwner(EventUnit())][UnitGetOwner(EventUnitDamageSourceUnit())][1] += FixedToInt(EventUnitDamageAmount());
            }

            if ((UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) < 500.0)) {
                libNtve_gf_ReplaceUnit(EventUnit(), "Ruins", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                UnitSetOwner(libNtve_gf_LastReplacedUnit(), 0, true);
            }
            else {
                if ((UnitTypeTestAttribute(UnitGetType(EventUnitDamageSourceUnit()), c_unitAttributeBiological) == true) && (EventUnitDamageSourcePlayer() != EventPlayer())) {
                    UnitIssueOrder(EventUnit(), OrderTargetingUnitGroup(AbilityCommand("SkyScraperBunker", 0), UnitGroup(null, UnitGetOwner(EventUnit()), RegionCircle(UnitGetPosition(EventUnit()), 2.0), UnitFilter((1 << c_targetFilterBiological), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 8)), c_orderQueueReplace);
                    if ((UnitGroupCount(UnitCargoGroup(EventUnit()), c_unitCountAlive) > 0)) {
                        lv_dealDamageAmmount = libNtve_gf_ArithmeticIntClamp((FixedToInt(EventUnitDamageAmount()) - (FixedToInt(UnitGetPropertyFixed(EventUnit(), c_unitPropLifeArmor, c_unitPropCurrent)) * 2)), 10, 75);
                        lv_pickedUnit = UnitGroupRandomUnit(UnitCargoGroup(EventUnit()), c_unitCountAlive);
                        UnitSetPropertyFixed(lv_pickedUnit, c_unitPropLife, (UnitGetPropertyFixed(lv_pickedUnit, c_unitPropLife, c_unitPropCurrent) - lv_dealDamageAmmount));
                    }
                    else {
                        if ((UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent) > 5.0) && (UnitGroupCount(UnitGroup(null, EventPlayer(), RegionCircle(UnitGetPosition(EventUnit()), 3.0), UnitFilter((1 << c_targetFilterBiological), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= (UnitGroupCount(UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 3.0), UnitFilter((1 << c_targetFilterPsionic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) * 10))) {
                            UnitSetPropertyFixed(EventUnit(), c_unitPropEnergy, (UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent) - 5.0));
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Conscript", 0, UnitGetOwner(EventUnit()), UnitGetPosition(EventUnit()));
                        }
                        else {
                            gf_BuildingConquerCalculate(EventUnitDamageSourceUnit(), EventUnit());
                        }
                    }
                }

            }
        }
        else {
            if ((UnitGetType(EventUnit()) == "Capital") && (EventUnitDamageSourcePlayer() < 8) && (EventUnitDamageSourcePlayer() != EventPlayer()) && (UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) <= 15.0) && (EventUnitDamageSourcePlayer() != 0)) {
                UnitSetPropertyFixed(EventUnit(), c_unitPropLifePercent, 100.0);
                gf_FullSurrender(EventPlayer(), EventUnitDamageSourcePlayer());
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BuildingAttacked_Init () {
    gt_BuildingAttacked = TriggerCreate("gt_BuildingAttacked_Func");
    TriggerAddEventUnitDamaged(gt_BuildingAttacked, null, c_unitDamageTypeAny, c_unitDamageNonFatal, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DOM TRAIN
//--------------------------------------------------------------------------------------------------
bool gt_DOMTRAIN_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoD0E3BD05_g;
    int autoD0E3BD05_u;
    unit autoD0E3BD05_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoD0E3BD05_g = UnitGroup("Caboose", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD0E3BD05_u = UnitGroupCount(autoD0E3BD05_g, c_unitCountAll);
    for (;; autoD0E3BD05_u -= 1) {
        autoD0E3BD05_var = UnitGroupUnitFromEnd(autoD0E3BD05_g, autoD0E3BD05_u);
        if (autoD0E3BD05_var == null) { break; }
        UnitKill(autoD0E3BD05_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DOMTRAIN_Init () {
    gt_DOMTRAIN = TriggerCreate("gt_DOMTRAIN_Func");
    TriggerAddEventTimeElapsed(gt_DOMTRAIN, 60.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Surrender!
//--------------------------------------------------------------------------------------------------
bool gt_Surrender_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_defeatedPlayer = EventPlayer();
    gv_victoriousPlayer = UnitGetOwner(EventUnitTargetUnit());
    if ((gv_victoriousPlayer < 8) && (gv_victoriousPlayer != 0)) {
        gf_FullSurrender(UnitGetOwner(EventUnit()), UnitGetOwner(EventUnitTargetUnit()));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Surrender_Init () {
    gt_Surrender = TriggerCreate("gt_Surrender_Func");
    TriggerAddEventUnitAbility(gt_Surrender, null, AbilityCommand("Surrender", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reset Alliances
//--------------------------------------------------------------------------------------------------
bool gt_ResetAlliances_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_poorsubect;
    int lv_target;
    int lv_overlord;

    // Automatic Variable Declarations
    playergroup auto9D7EC029_g;
    int auto9D7EC029_var;
    playergroup autoC540F209_g;
    int autoC540F209_var;
    playergroup autoEB6C0113_g;

    // Variable Initialization
    lv_poorsubect = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_RemovePlayerGroupFromPlayerGroup(lv_poorsubect, lv_poorsubect);
    auto9D7EC029_g = gv_users;
    auto9D7EC029_var = -1;
    while (true) {
        auto9D7EC029_var = PlayerGroupNextPlayer(auto9D7EC029_g, auto9D7EC029_var);
        if (auto9D7EC029_var < 0) { break; }
        if ((TechTreeUpgradeCount(auto9D7EC029_var, "Subjugated", c_techCountCompleteOnly) == 1)) {
            PlayerGroupAdd(lv_poorsubect, auto9D7EC029_var);
        }

    }
    autoC540F209_g = lv_poorsubect;
    autoC540F209_var = -1;
    while (true) {
        autoC540F209_var = PlayerGroupNextPlayer(autoC540F209_g, autoC540F209_var);
        if (autoC540F209_var < 0) { break; }
        lv_overlord = gv_subjugator[autoC540F209_var];
        autoEB6C0113_g = gv_users;
        lv_target = -1;
        while (true) {
            lv_target = PlayerGroupNextPlayer(autoEB6C0113_g, lv_target);
            if (lv_target < 0) { break; }
            if ((lv_overlord != lv_target) && (libNtve_gf_PlayerIsEnemy(lv_overlord, lv_target, libNtve_ge_PlayerRelation_Enemy) == true)) {
                libNtve_gf_SetAlliance(autoC540F209_var, lv_target, libNtve_ge_AllianceSetting_Enemy);
            }

            if ((lv_overlord != lv_target) && (libNtve_gf_PlayerIsEnemy(lv_overlord, lv_target, libNtve_ge_PlayerRelation_Neutral) == true)) {
                libNtve_gf_SetAlliance(autoC540F209_var, lv_target, libNtve_ge_AllianceSetting_Neutral);
            }

            if ((lv_overlord != lv_target) && (libNtve_gf_PlayerIsEnemy(lv_overlord, lv_target, libNtve_ge_PlayerRelation_Ally) == true)) {
                libNtve_gf_SetAlliance(autoC540F209_var, lv_target, libNtve_ge_AllianceSetting_AllyWithSharedVision);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ResetAlliances_Init () {
    gt_ResetAlliances = TriggerCreate("gt_ResetAlliances_Func");
    TriggerEnable(gt_ResetAlliances, false);
    TriggerAddEventTimePeriodic(gt_ResetAlliances, 20.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PLAYA LEAVES!
//--------------------------------------------------------------------------------------------------
bool gt_PLAYALEAVES_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_corp;

    // Automatic Variable Declarations
    const int autoA6F4FB15_ae = 7;
    const int autoA6F4FB15_ai = 1;
    unitgroup auto0587CF3C_g;
    int auto0587CF3C_u;
    unit auto0587CF3C_var;
    unitgroup auto4252D55E_g;
    int auto4252D55E_u;
    unit auto4252D55E_var;
    unitgroup autoA02FB1D3_g;
    int autoA02FB1D3_u;
    unit autoA02FB1D3_var;
    playergroup autoFFCF46CA_g;
    int autoFFCF46CA_var;
    unitgroup auto9BCD3121_g;
    int auto9BCD3121_u;
    unit auto9BCD3121_var;
    playergroup auto39304126_g;
    int auto39304126_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gf_KillCorp(EventPlayer());
    gv_gDP[EventPlayer()] = 0;
    gv_autoImports[EventPlayer()][0] = 0;
    gv_autoImports[EventPlayer()][1] = 0;
    gv_autoImports[EventPlayer()][2] = 0;
    gv_autoImports[EventPlayer()][3] = 0;
    gv_nationalBankCash[EventPlayer()] = 0;
    gv_autoImportMode[EventPlayer()][0] = 0;
    gv_autoImportMode[EventPlayer()][1] = 0;
    gv_autoImportMode[EventPlayer()][2] = 0;
    gv_autoImportMode[EventPlayer()][3] = 0;
    gv_autoExports[EventPlayer()][0] = 0;
    gv_autoExports[EventPlayer()][1] = 0;
    gv_autoExports[EventPlayer()][2] = 0;
    gv_autoExports[EventPlayer()][3] = 0;
    gv_autoExportsMode[EventPlayer()][0] = 0;
    gv_autoExportsMode[EventPlayer()][1] = 0;
    gv_autoExportsMode[EventPlayer()][2] = 0;
    gv_autoExportsMode[EventPlayer()][3] = 0;
    gv_metalImports[EventPlayer()] = 0.0;
    gv_selectedCorporation[EventPlayer()] = 0;
    lv_corp = 1;
    for ( ; ( (autoA6F4FB15_ai >= 0 && lv_corp <= autoA6F4FB15_ae) || (autoA6F4FB15_ai < 0 && lv_corp >= autoA6F4FB15_ae) ) ; lv_corp += autoA6F4FB15_ai ) {
        gv_stockOwned[EventPlayer()][lv_corp] = 0;
        gv_stockTarget[EventPlayer()][lv_corp] = 0;
        gv_nationalBankDebts[EventPlayer()][lv_corp] = 0;
    }
    auto0587CF3C_g = UnitGroup("Convoy", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto0587CF3C_u = UnitGroupCount(auto0587CF3C_g, c_unitCountAll);
    for (;; auto0587CF3C_u -= 1) {
        auto0587CF3C_var = UnitGroupUnitFromEnd(auto0587CF3C_g, auto0587CF3C_u);
        if (auto0587CF3C_var == null) { break; }
        TextTagDestroy(libHots_gf_TextTagForUnit(auto0587CF3C_var, 0));
        TextTagDestroy(libHots_gf_TextTagForUnit(auto0587CF3C_var, 1));
        TextTagDestroy(libHots_gf_TextTagForUnit(auto0587CF3C_var, 2));
        TextTagDestroy(libHots_gf_TextTagForUnit(auto0587CF3C_var, 3));
        TextTagDestroy(libHots_gf_TextTagForUnit(auto0587CF3C_var, 4));
    }
    UnitGroupRemoveUnitGroup(gv_rEDISTRIBUTETHEBUILDINGS, gv_rEDISTRIBUTETHEBUILDINGS);
    auto4252D55E_g = UnitGroup(null, EventPlayer(), RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4252D55E_u = UnitGroupCount(auto4252D55E_g, c_unitCountAll);
    for (;; auto4252D55E_u -= 1) {
        auto4252D55E_var = UnitGroupUnitFromEnd(auto4252D55E_g, auto4252D55E_u);
        if (auto4252D55E_var == null) { break; }
        if (((UnitGetType(auto4252D55E_var) == "LaboratoryI") || (UnitGetType(auto4252D55E_var) == "LaboratoryII") || (UnitGetType(auto4252D55E_var) == "LaboratoryIII") || (UnitGetType(auto4252D55E_var) == "LaboratoryIV") || (UnitGetType(auto4252D55E_var) == "LaboratoryV") || (UnitGetType(auto4252D55E_var) == "ResearchComplexI") || (UnitGetType(auto4252D55E_var) == "ResearchComplexII") || (UnitGetType(auto4252D55E_var) == "ResearchComplexIII") || (UnitGetType(auto4252D55E_var) == "ResearchComplexIV") || (UnitGetType(auto4252D55E_var) == "ResearchComplexV") || (UnitGetType(auto4252D55E_var) == "Capital"))) {
            UnitRemove(auto4252D55E_var);
        }
        else {
            UnitGroupAdd(gv_rEDISTRIBUTETHEBUILDINGS, auto4252D55E_var);
        }
    }
    autoA02FB1D3_g = UnitGroup(null, EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA02FB1D3_u = UnitGroupCount(autoA02FB1D3_g, c_unitCountAll);
    for (;; autoA02FB1D3_u -= 1) {
        autoA02FB1D3_var = UnitGroupUnitFromEnd(autoA02FB1D3_g, autoA02FB1D3_u);
        if (autoA02FB1D3_var == null) { break; }
        UnitRemove(autoA02FB1D3_var);
    }
    gv_pLAYALEAVESrandomelement = RandomInt(0, 100);
    if (true) {
        gv_pLAYALEAVESrandomelement -= 70;
    }

    if ((EventPlayer() == gv_mrPresident)) {
        if ((PlayerGroupCount(gv_theEuroCrew) > 0)) {
            if ((gv_elections == 4)) {
                gv_mrPresident = PlayerGroupPlayer(gv_theEuroCrew, RandomInt(1, PlayerGroupCount(gv_theEuroCrew)));
                auto9BCD3121_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                auto9BCD3121_u = UnitGroupCount(auto9BCD3121_g, c_unitCountAll);
                for (;; auto9BCD3121_u -= 1) {
                    auto9BCD3121_var = UnitGroupUnitFromEnd(auto9BCD3121_g, auto9BCD3121_u);
                    if (auto9BCD3121_var == null) { break; }
                    if ((UnitGetType(auto9BCD3121_var) == "EuropeanParliment")) {
                        UnitSetOwner(auto9BCD3121_var, gv_mrPresident, true);
                    }

                }
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (PlayerName(gv_mrPresident) + StringExternal("Param/Value/50057B2C")));
            }
            else {
                TriggerExecute(gt_BeginTheElection, true, false);
            }
        }
        else {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/51B003E0"));
            gv_mrPresident = 0;
            autoFFCF46CA_g = gv_users;
            autoFFCF46CA_var = -1;
            while (true) {
                autoFFCF46CA_var = PlayerGroupNextPlayer(autoFFCF46CA_g, autoFFCF46CA_var);
                if (autoFFCF46CA_var < 0) { break; }
                libNtve_gf_SetUpgradeLevelForPlayer(autoFFCF46CA_var, "EUBuilt", 0);
            }
        }
    }

    auto39304126_g = gv_users;
    auto39304126_var = -1;
    while (true) {
        auto39304126_var = PlayerGroupNextPlayer(auto39304126_g, auto39304126_var);
        if (auto39304126_var < 0) { break; }
        libNtve_gf_SetAlliance(auto39304126_var, EventPlayer(), libNtve_ge_AllianceSetting_AllyWithSharedVision);
        gf_RemoveDiplomacyBetweenPlayers(EventPlayer(), auto39304126_var);
    }
    while (true) {
        if ((gv_eUVoteInProgress != 10000)) {
            PlayerGroupRemove(gv_theEuroCrew, EventPlayer());
            break;
        }
        else {
            Wait(5.0, c_timeGame);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PLAYALEAVES_Init () {
    gt_PLAYALEAVES = TriggerCreate("gt_PLAYALEAVES_Func");
    TriggerAddEventPlayerLeft(gt_PLAYALEAVES, c_playerAny, c_gameResultUndecided);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PLAYA LEAVES SUBJECT
//--------------------------------------------------------------------------------------------------
bool gt_PLAYALEAVESSUBJECT_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto546F01AE_g;
    int auto546F01AE_u;
    unit auto546F01AE_var;
    unitgroup auto8D799205_g;
    int auto8D799205_u;
    unit auto8D799205_var;

    // Conditions
    if (testConds) {
        if (!((gv_subjugated[EventPlayer()] == true))) {
            return false;
        }

        if (!((EventPlayer() != 11))) {
            return false;
        }

        if (!((EventPlayer() != 10))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(gv_subjugator[EventPlayer()], c_playerPropMinerals, c_playerPropOperAdd, PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals));
    PlayerModifyPropertyInt(gv_subjugator[EventPlayer()], c_playerPropTerrazine, c_playerPropOperAdd, PlayerGetPropertyInt(EventPlayer(), c_playerPropTerrazine));
    PlayerModifyPropertyInt(gv_subjugator[EventPlayer()], c_playerPropCustom, c_playerPropOperAdd, PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom));
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSetTo, 0);
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropTerrazine, c_playerPropOperSetTo, 0);
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropCustom, c_playerPropOperSetTo, 0);
    auto546F01AE_g = UnitGroup(null, EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto546F01AE_u = UnitGroupCount(auto546F01AE_g, c_unitCountAll);
    for (;; auto546F01AE_u -= 1) {
        auto546F01AE_var = UnitGroupUnitFromEnd(auto546F01AE_g, auto546F01AE_u);
        if (auto546F01AE_var == null) { break; }
        if (((UnitGetType(auto546F01AE_var) == "Leader") || (UnitGetType(auto546F01AE_var) == "Capital"))) {
            UnitRemove(auto546F01AE_var);
        }

    }
    auto8D799205_g = UnitGroup(null, EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto8D799205_u = UnitGroupCount(auto8D799205_g, c_unitCountAll);
    for (;; auto8D799205_u -= 1) {
        auto8D799205_var = UnitGroupUnitFromEnd(auto8D799205_g, auto8D799205_u);
        if (auto8D799205_var == null) { break; }
        UnitSetOwner(auto8D799205_var, gv_subjugator[EventPlayer()], true);
    }
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (PlayerName(EventPlayer()) + (StringExternal("Param/Value/C95C75AD") + (PlayerName(gv_subjugator[EventPlayer()]) + StringExternal("Param/Value/47F96236")))));
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_CentralizationofALLUNITS, true, false);
    gv_capitalsAlive -= 1;
    gv_subjugator[EventPlayer()] = 0;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PLAYALEAVESSUBJECT_Init () {
    gt_PLAYALEAVESSUBJECT = TriggerCreate("gt_PLAYALEAVESSUBJECT_Func");
    TriggerAddEventPlayerLeft(gt_PLAYALEAVESSUBJECT, c_playerAny, c_gameResultUndecided);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PLAYA LEAVES DESTRUCTION
//--------------------------------------------------------------------------------------------------
bool gt_PLAYALEAVESDESTRUCTION_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto225ED043_g;
    int auto225ED043_u;
    unit auto225ED043_var;

    // Conditions
    if (testConds) {
        if (!((gv_subjugated[EventPlayer()] == false))) {
            return false;
        }

        if (!((EventPlayer() != 11))) {
            return false;
        }

        if (!((EventPlayer() != 10))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSetTo, 0);
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropTerrazine, c_playerPropOperSetTo, 0);
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropCustom, c_playerPropOperSetTo, 0);
    auto225ED043_g = gv_rEDISTRIBUTETHEBUILDINGS;
    auto225ED043_u = UnitGroupCount(auto225ED043_g, c_unitCountAll);
    for (;; auto225ED043_u -= 1) {
        auto225ED043_var = UnitGroupUnitFromEnd(auto225ED043_g, auto225ED043_u);
        if (auto225ED043_var == null) { break; }
        gf_SuccessionDecide(auto225ED043_var, EventPlayer());
    }
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (PlayerName(EventPlayer()) + (StringExternal("Param/Value/8665B6A6") + (gf_NationOfPlayer(EventPlayer()) + StringExternal("Param/Value/6F445965")))));
    gv_capitalsAlive -= 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PLAYALEAVESDESTRUCTION_Init () {
    gt_PLAYALEAVESDESTRUCTION = TriggerCreate("gt_PLAYALEAVESDESTRUCTION_Func");
    TriggerAddEventPlayerLeft(gt_PLAYALEAVESDESTRUCTION, c_playerAny, c_gameResultUndecided);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scout
//--------------------------------------------------------------------------------------------------
bool gt_Scout_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Scoutbot"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionPlayableMap())), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Scout_Init () {
    gt_Scout = TriggerCreate("gt_Scout_Func");
    TriggerAddEventUnitBecomesIdle(gt_Scout, null, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scout 2
//--------------------------------------------------------------------------------------------------
bool gt_Scout2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitProgressUnit()) == "Scoutbot"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(EventUnitProgressUnit(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionPlayableMap())), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Scout2_Init () {
    gt_Scout2 = TriggerCreate("gt_Scout2_Func");
    TriggerAddEventUnitTrainProgress(gt_Scout2, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Im Taking Away your Scoutbots
//--------------------------------------------------------------------------------------------------
bool gt_ImTakingAwayyourScoutbots_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoA46616A7_g;
    int autoA46616A7_var;
    unitgroup auto7CCE1299_g;
    int auto7CCE1299_u;
    unit auto7CCE1299_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoA46616A7_g = gv_users;
    autoA46616A7_var = -1;
    while (true) {
        autoA46616A7_var = PlayerGroupNextPlayer(autoA46616A7_g, autoA46616A7_var);
        if (autoA46616A7_var < 0) { break; }
        libNtve_gf_SetUpgradeLevelForPlayer(autoA46616A7_var, "CanBuildScoutbots", 0);
    }
    auto7CCE1299_g = UnitGroup("Scoutbot", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto7CCE1299_u = UnitGroupCount(auto7CCE1299_g, c_unitCountAll);
    for (;; auto7CCE1299_u -= 1) {
        auto7CCE1299_var = UnitGroupUnitFromEnd(auto7CCE1299_g, auto7CCE1299_u);
        if (auto7CCE1299_var == null) { break; }
        UnitRemove(auto7CCE1299_var);
    }
    TriggerEnable(gt_Scout, false);
    TriggerEnable(gt_Scout2, false);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ImTakingAwayyourScoutbots_Init () {
    gt_ImTakingAwayyourScoutbots = TriggerCreate("gt_ImTakingAwayyourScoutbots_Func");
    TriggerAddEventTimeElapsed(gt_ImTakingAwayyourScoutbots, 1800.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: A TEMPTING ALLIANCE OFFER FOR ALLY
//--------------------------------------------------------------------------------------------------
bool gt_ATEMPTINGALLIANCEOFFERFORALLY_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(600, 250, c_anchorCenter, 0, 0, true);
    gv_allianceBackGround = DialogLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 500, 100, c_anchorTopLeft, 20, 20, (StringExternal("Param/Value/7CE7139C") + StringExternal("Param/Value/1588170B")), Color(0,66*100/255,100), true, 1.0);
    gv_whoSaskin = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 50, c_anchorBottomLeft, 40, 40, StringExternal("Param/Value/0BEBECC7"), StringExternal("Param/Value/C64ADAB7"), "");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_scrollbar_frame.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    gv_noAlly = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 50, c_anchorBottomRight, 40, 40, StringExternal("Param/Value/B1A36B56"), StringExternal("Param/Value/A797D759"), "");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_scrollbar_frame.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    gv_yesAlly = DialogControlLastCreated();
    DialogSetImage(gv_allianceBackGround, "Assets\\Textures\\ui_scrollbar_frame.dds");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ATEMPTINGALLIANCEOFFERFORALLY_Init () {
    gt_ATEMPTINGALLIANCEOFFERFORALLY = TriggerCreate("gt_ATEMPTINGALLIANCEOFFERFORALLY_Func");
    TriggerAddEventMapInit(gt_ATEMPTINGALLIANCEOFFERFORALLY);
}

//--------------------------------------------------------------------------------------------------
// Trigger: I DO
//--------------------------------------------------------------------------------------------------
bool gt_IDO_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_yesAlly == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(gv_allianceBackGround, PlayerGroupSingle(EventPlayer()), false);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (gf_NationOfPlayer(EventPlayer()) + (StringExternal("Param/Value/4678EFCE") + gf_NationOfPlayer(gv_whomstGlobalDiplomcay[EventPlayer()]))));
    libNtve_gf_SetAllianceOneWay(EventPlayer(), gv_whomstGlobalDiplomcay[EventPlayer()], libNtve_ge_AllianceSetting_AllyWithSharedVision);
    libNtve_gf_SetAllianceOneWay(gv_whomstGlobalDiplomcay[EventPlayer()], EventPlayer(), libNtve_ge_AllianceSetting_AllyWithSharedVision);
    gv_diplomacyQueue[gv_whomstGlobalDiplomcay[EventPlayer()]][1][2] = 0;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IDO_Init () {
    gt_IDO = TriggerCreate("gt_IDO_Func");
    TriggerAddEventDialogControl(gt_IDO, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: None
//--------------------------------------------------------------------------------------------------
bool gt_None_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_noAlly == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(gv_allianceBackGround, PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_None_Init () {
    gt_None = TriggerCreate("gt_None_Func");
    TriggerAddEventDialogControl(gt_None, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CallToArmsUI
//--------------------------------------------------------------------------------------------------
bool gt_CallToArmsUI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(600, 250, c_anchorCenter, 0, 0, true);
    gv_callToArmsDialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 500, 100, c_anchorTopLeft, 20, 20, (StringExternal("Param/Value/2608B88C") + StringExternal("Param/Value/9D0F6A43")), Color(0,66*100/255,100), true, 1.0);
    gv_callToArms[0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 50, c_anchorBottomLeft, 40, 40, StringExternal("Param/Value/441BC356"), StringExternal("Param/Value/A526608C"), "");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_scrollbar_frame.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    gv_callToArms[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 50, c_anchorBottomRight, 40, 40, StringExternal("Param/Value/35C2B5FB"), StringExternal("Param/Value/60845F53"), "");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_scrollbar_frame.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    gv_callToArms[2] = DialogControlLastCreated();
    DialogSetImage(gv_callToArmsDialog, "Assets\\Textures\\ui_scrollbar_frame.dds");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CallToArmsUI_Init () {
    gt_CallToArmsUI = TriggerCreate("gt_CallToArmsUI_Func");
    TriggerAddEventMapInit(gt_CallToArmsUI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: YES
//--------------------------------------------------------------------------------------------------
bool gt_YES_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_callToArms[2] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_WarDeclare(EventPlayer(), gv_whomstGlobalDiplomcay[EventPlayer()]);
    DialogSetVisible(gv_callToArmsDialog, PlayerGroupSingle(EventPlayer()), false);
    gv_diplomacyQueue[gv_whomstGlobalDiplomcay[EventPlayer()]][1][1] = 0;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_YES_Init () {
    gt_YES = TriggerCreate("gt_YES_Func");
    TriggerAddEventDialogControl(gt_YES, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Non
//--------------------------------------------------------------------------------------------------
bool gt_Non_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_callToArms[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(gv_callToArmsDialog, PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Non_Init () {
    gt_Non = TriggerCreate("gt_Non_Func");
    TriggerAddEventDialogControl(gt_Non, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CeasefireUI
//--------------------------------------------------------------------------------------------------
bool gt_CeasefireUI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(600, 250, c_anchorCenter, 0, 0, true);
    gv_ceaseFireDialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 500, 100, c_anchorTopLeft, 20, 20, (StringExternal("Param/Value/C5A4BD42") + StringExternal("Param/Value/613D73E7")), Color(0,66*100/255,100), true, 1.0);
    gv_ceaseFire[0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 50, c_anchorBottomLeft, 40, 40, StringExternal("Param/Value/B1874B75"), StringExternal("Param/Value/88025514"), "");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_scrollbar_frame.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    gv_ceaseFire[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 50, c_anchorBottomRight, 40, 40, StringExternal("Param/Value/22E7D094"), StringExternal("Param/Value/5FBE4A09"), "");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_scrollbar_frame.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    gv_ceaseFire[2] = DialogControlLastCreated();
    DialogSetImage(gv_ceaseFireDialog, "Assets\\Textures\\ui_scrollbar_frame.dds");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CeasefireUI_Init () {
    gt_CeasefireUI = TriggerCreate("gt_CeasefireUI_Func");
    TriggerAddEventMapInit(gt_CeasefireUI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: FINNNEEEEee
//--------------------------------------------------------------------------------------------------
bool gt_FINNNEEEEee_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_ceaseFire[2] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_CeaseFireDeclared(EventPlayer(), gv_whomstGlobalDiplomcay[EventPlayer()]);
    DialogSetVisible(gv_ceaseFireDialog, PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FINNNEEEEee_Init () {
    gt_FINNNEEEEee = TriggerCreate("gt_FINNNEEEEee_Func");
    TriggerAddEventDialogControl(gt_FINNNEEEEee, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: No
//--------------------------------------------------------------------------------------------------
bool gt_No_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_ceaseFire[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(gv_ceaseFireDialog, PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_No_Init () {
    gt_No = TriggerCreate("gt_No_Func");
    TriggerAddEventDialogControl(gt_No, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: EmbargoPeople
//--------------------------------------------------------------------------------------------------
bool gt_EmbargoPeople_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_corp;

    // Automatic Variable Declarations
    playergroup auto2B2AAC8B_g;
    int auto2B2AAC8B_var;
    const int auto30C5CD25_ae = 7;
    const int auto30C5CD25_ai = 1;
    const int autoBF7FB733_ae = 7;
    const int autoBF7FB733_ai = 1;
    playergroup autoEA8B5750_g;
    int autoEA8B5750_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto2B2AAC8B_g = gv_users;
    auto2B2AAC8B_var = -1;
    while (true) {
        auto2B2AAC8B_var = PlayerGroupNextPlayer(auto2B2AAC8B_g, auto2B2AAC8B_var);
        if (auto2B2AAC8B_var < 0) { break; }
        if ((gv_embargoed[auto2B2AAC8B_var] > 1)) {
            libNtve_gf_SetUpgradeLevelForPlayer(auto2B2AAC8B_var, "TradeEmbargo", 1);
            lv_corp = 1;
            for ( ; ( (autoBF7FB733_ai >= 0 && lv_corp <= autoBF7FB733_ae) || (autoBF7FB733_ai < 0 && lv_corp >= autoBF7FB733_ae) ) ; lv_corp += autoBF7FB733_ai ) {
                gv_embargo[auto2B2AAC8B_var][lv_corp] = true;
                gv_embargo[lv_corp][auto2B2AAC8B_var] = true;
            }
        }
        else {
            if ((gv_embargoed[auto2B2AAC8B_var] == 1)) {
                libNtve_gf_SetUpgradeLevelForPlayer(auto2B2AAC8B_var, "TradeEmbargo", 0);
                lv_corp = 1;
                for ( ; ( (auto30C5CD25_ai >= 0 && lv_corp <= auto30C5CD25_ae) || (auto30C5CD25_ai < 0 && lv_corp >= auto30C5CD25_ae) ) ; lv_corp += auto30C5CD25_ai ) {
                    gv_embargo[auto2B2AAC8B_var][lv_corp] = false;
                    gv_embargo[lv_corp][auto2B2AAC8B_var] = false;
                }
            }

        }
    }
    if ((gv_month == 2)) {
        autoEA8B5750_g = gv_users;
        autoEA8B5750_var = -1;
        while (true) {
            autoEA8B5750_var = PlayerGroupNextPlayer(autoEA8B5750_g, autoEA8B5750_var);
            if (autoEA8B5750_var < 0) { break; }
            if ((gv_embargoed[autoEA8B5750_var] > 0)) {
                gv_embargoed[autoEA8B5750_var] -= 1;
                UIDisplayMessage(PlayerGroupSingle(autoEA8B5750_var), c_messageAreaSubtitle, ((StringExternal("Param/Value/E30D3B8D") + IntToText(gv_embargoed[autoEA8B5750_var])) + StringExternal("Param/Value/74DE6871")));
            }

        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EmbargoPeople_Init () {
    gt_EmbargoPeople = TriggerCreate("gt_EmbargoPeople_Func");
    TriggerAddEventTimePeriodic(gt_EmbargoPeople, 10.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DisarmPeople
//--------------------------------------------------------------------------------------------------
bool gt_DisarmPeople_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto24F5EA95_g;
    int auto24F5EA95_var;
    unitgroup auto53AF662B_g;
    int auto53AF662B_u;
    unit auto53AF662B_var;
    playergroup auto8D76CD81_g;
    int auto8D76CD81_var;
    unitgroup auto9C8D9082_g;
    int auto9C8D9082_u;
    unit auto9C8D9082_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_month == 2)) {
        auto24F5EA95_g = gv_users;
        auto24F5EA95_var = -1;
        while (true) {
            auto24F5EA95_var = PlayerGroupNextPlayer(auto24F5EA95_g, auto24F5EA95_var);
            if (auto24F5EA95_var < 0) { break; }
            auto53AF662B_g = UnitGroup(null, auto24F5EA95_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto53AF662B_u = UnitGroupCount(auto53AF662B_g, c_unitCountAll);
            for (;; auto53AF662B_u -= 1) {
                auto53AF662B_var = UnitGroupUnitFromEnd(auto53AF662B_g, auto53AF662B_u);
                if (auto53AF662B_var == null) { break; }
                UnitBehaviorRemove(auto53AF662B_var, "Disarmed", 1);
            }
            if ((gv_disarmed[auto24F5EA95_var] > 0)) {
                gv_disarmed[auto24F5EA95_var] -= 1;
            }

        }
    }

    auto8D76CD81_g = gv_users;
    auto8D76CD81_var = -1;
    while (true) {
        auto8D76CD81_var = PlayerGroupNextPlayer(auto8D76CD81_g, auto8D76CD81_var);
        if (auto8D76CD81_var < 0) { break; }
        if ((gv_disarmed[auto8D76CD81_var] > 0)) {
            auto9C8D9082_g = UnitGroup(null, auto8D76CD81_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto9C8D9082_u = UnitGroupCount(auto9C8D9082_g, c_unitCountAll);
            for (;; auto9C8D9082_u -= 1) {
                auto9C8D9082_var = UnitGroupUnitFromEnd(auto9C8D9082_g, auto9C8D9082_u);
                if (auto9C8D9082_var == null) { break; }
                UnitBehaviorAdd(auto9C8D9082_var, "Disarmed", auto9C8D9082_var, 1);
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DisarmPeople_Init () {
    gt_DisarmPeople = TriggerCreate("gt_DisarmPeople_Func");
    TriggerAddEventTimePeriodic(gt_DisarmPeople, 10.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: YesOrNoUI
//--------------------------------------------------------------------------------------------------
bool gt_YesOrNoUI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(600, 300, c_anchorCenter, 0, 0, true);
    gv_yesOrNoDialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 550, 200, c_anchorTopLeft, 20, 20, (StringExternal("Param/Value/C34A7350") + StringToText("")), Color(0,66*100/255,100), true, 1.0);
    gv_yesOrNoButtons[0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 50, c_anchorBottomLeft, 40, 40, StringExternal("Param/Value/263DFD6B"), StringExternal("Param/Value/D8F50741"), "");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_scrollbar_frame.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    gv_yesOrNoButtons[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 50, c_anchorBottomRight, 40, 40, StringExternal("Param/Value/5FEE36CE"), StringExternal("Param/Value/43CD7129"), "");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_scrollbar_frame.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    gv_yesOrNoButtons[2] = DialogControlLastCreated();
    DialogSetImage(gv_yesOrNoDialog, "Assets\\Textures\\ui_scrollbar_frame.dds");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_YesOrNoUI_Init () {
    gt_YesOrNoUI = TriggerCreate("gt_YesOrNoUI_Func");
    TriggerAddEventMapInit(gt_YesOrNoUI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Accept Peace Deal
//--------------------------------------------------------------------------------------------------
bool gt_AcceptPeaceDeal_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player2;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_yesOrNoButtons[2] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player2 = gv_whomstGlobalDiplomcay[EventPlayer()];
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringToText(gv_nations[lv_player2]) + (StringExternal("Param/Value/497C4092") + (StringToText(gv_nations[EventPlayer()]) + StringExternal("Param/Value/DC9BB141")))));
    gf_EnforcePeaceTreaty(EventPlayer(), lv_player2, false);
    gf_EnforcePeaceTreaty(lv_player2, EventPlayer(), true);
    gv_diplomacyQueue[gv_whomstGlobalDiplomcay[EventPlayer()]][1][5] = 0;
    gv_diplomacyQueue[gv_whomstGlobalDiplomcay[EventPlayer()]][1][4] = 0;
    gv_diplomacyQueue[EventPlayer()][1][5] = 0;
    gv_diplomacyQueue[EventPlayer()][1][4] = 0;
    gv_sentPeaceOfferToConsider[gv_whomstGlobalDiplomcay[EventPlayer()]] = false;
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/39ED1E67") + (StringToText(gf_GetCountyName(gf_GetCountyID(gf_FindNeutralCapitol(lv_player2, EventPlayer())))) + StringExternal("Param/Value/AACB65F5"))));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, ((StringExternal("Param/Value/58286A8A") + StringToText(gv_nations[lv_player2])) + (StringExternal("Param/Value/025F2770") + gf_GetTotalPeaceDealSend(EventPlayer()))));
    DialogSetVisible(gv_yesOrNoDialog, PlayerGroupSingle(EventPlayer()), false);
    gf_ResetPeaceDealUI(EventPlayer());
    gf_ResetPeaceDealUI(lv_player2);
    gf_AnnexProvincesFromPlayer(lv_player2, EventPlayer());
    gf_AnnexProvincesFromPlayer(EventPlayer(), lv_player2);
    gf_ClearPeaceDeal(EventPlayer());
    gf_ClearPeaceDeal(lv_player2);
    gf_ReturnOccupiedTerritory(EventPlayer());
    gf_ReturnOccupiedTerritory(gv_whomstGlobalDiplomcay[EventPlayer()]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AcceptPeaceDeal_Init () {
    gt_AcceptPeaceDeal = TriggerCreate("gt_AcceptPeaceDeal_Func");
    TriggerAddEventDialogControl(gt_AcceptPeaceDeal, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Counter Peace Deal
//--------------------------------------------------------------------------------------------------
bool gt_CounterPeaceDeal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_yesOrNoButtons[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SwitchPeaceTreatyRoles(gv_whomstGlobalDiplomcay[EventPlayer()], EventPlayer());
    gv_sentPeaceOfferToConsider[gv_whomstGlobalDiplomcay[EventPlayer()]] = false;
    DialogSetVisible(gv_yesOrNoDialog, PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CounterPeaceDeal_Init () {
    gt_CounterPeaceDeal = TriggerCreate("gt_CounterPeaceDeal_Func");
    TriggerAddEventDialogControl(gt_CounterPeaceDeal, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PeaceConferenceUI
//--------------------------------------------------------------------------------------------------
bool gt_PeaceConferenceUI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_iDontWantToCode;

    // Automatic Variable Declarations
    const int autoD9A4DBE7_ae = 8;
    const int autoD9A4DBE7_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(900, 600, c_anchorTopRight, 300, 300, true);
    gv_peaceConferenceUI = DialogLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 400, 400, c_anchorTop, 0, 20, StringExternal("Param/Value/77EAEA0D"), Color(0,66*100/255,100), true, 1.0);
    gv_peaceConferenceButton[0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 170, 50, c_anchorBottomRight, 20, 20, StringExternal("Param/Value/FD557400"), StringExternal("Param/Value/AC2D39E3"), "");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_scrollbar_frame.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    gv_peaceConferenceButton[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 50, c_anchorBottom, 0, 20, StringExternal("Param/Value/921CF99A"), StringExternal("Param/Value/E6DE155D"), "");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_scrollbar_frame.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    gv_peaceConferenceButton[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 50, c_anchorBottomLeft, 20, 20, StringExternal("Param/Value/DA508743"), StringExternal("Param/Value/9EDFA6C8"), "");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_scrollbar_frame.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    gv_peaceConferenceButton[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 130, 50, c_anchorTopLeft, 40, 40, StringExternal("Param/Value/552F8D6E"), StringExternal("Param/Value/2F943B4F"), "");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_scrollbar_frame.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    gv_peaceConferenceButton[4] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 150, 50, c_anchorTopLeft, 40, 100, StringExternal("Param/Value/A04C5777"), StringExternal("Param/Value/243C178E"), "");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_scrollbar_frame.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    gv_peaceConferenceButton[5] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeEditBox);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 180, 100);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 150, 50);
    gv_peaceConferenceButton[6] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 150, 50, c_anchorTopLeft, 40, 160, StringExternal("Param/Value/F9F413F6"), StringExternal("Param/Value/28320628"), "");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_scrollbar_frame.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    gv_peaceConferenceButton[7] = DialogControlLastCreated();
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 150, 50, c_anchorTopLeft, 40, 220, StringExternal("Param/Value/2923354E"), StringExternal("Param/Value/AD7B543D"), "");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_scrollbar_frame.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    gv_peaceConferenceButton[8] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 150, 50, c_anchorTopLeft, 40, 280, StringExternal("Param/Value/488994F0"), StringExternal("Param/Value/820B35F9"), "");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_scrollbar_frame.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    gv_peaceConferenceButton[9] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 150, 50, c_anchorTopLeft, 40, 340, StringExternal("Param/Value/92027E4A"), StringExternal("Param/Value/1A34B7C3"), "");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_scrollbar_frame.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    gv_peaceConferenceButton[10] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 150, 50, c_anchorTopLeft, 40, 460, StringExternal("Param/Value/5905DA71"), StringExternal("Param/Value/DFB15793"), "");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_scrollbar_frame.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    gv_peaceConferenceButton[11] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 150, 50, c_anchorTopLeft, 40, 400, StringExternal("Param/Value/3BDCB8A2"), StringExternal("Param/Value/969A6607"), "");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_scrollbar_frame.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    gv_peaceConferenceButton[12] = DialogControlLastCreated();
    lv_iDontWantToCode = 1;
    for ( ; ( (autoD9A4DBE7_ai >= 0 && lv_iDontWantToCode <= autoD9A4DBE7_ae) || (autoD9A4DBE7_ai < 0 && lv_iDontWantToCode >= autoD9A4DBE7_ae) ) ; lv_iDontWantToCode += autoD9A4DBE7_ai ) {
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 100, 50, c_anchorTopRight, 450, (-20 + (60 * lv_iDontWantToCode)), StringExternal("Param/Value/7929C249"), StringExternal("Param/Value/D8872F18"), "");
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_scrollbar_frame.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
        gv_peaceConferenceCancelButton[lv_iDontWantToCode] = DialogControlLastCreated();
        DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
    }
    DialogControlSetEnabled(gv_peaceConferenceCancelButton[7], PlayerGroupAll(), true);
    DialogSetImage(gv_peaceConferenceUI, "Assets\\Textures\\ui_scrollbar_frame.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_scrollbar_frame.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 420, 500, c_anchorTopRight, 30, 50, StringExternal("Param/Value/41AD42E8"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_scrollbar_frame.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    gv_peaceConferenceSummary = DialogControlLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PeaceConferenceUI_Init () {
    gt_PeaceConferenceUI = TriggerCreate("gt_PeaceConferenceUI_Func");
    TriggerAddEventMapInit(gt_PeaceConferenceUI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SendDeal
//--------------------------------------------------------------------------------------------------
bool gt_SendDeal_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player2;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_peaceConferenceButton[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_conqueredPlayer[gv_whomstGlobalDiplomcay[EventPlayer()]] == false)) {
        DialogSetVisible(gv_yesOrNoDialog, PlayerGroupSingle(gv_whomstGlobalDiplomcay[EventPlayer()]), true);
        DialogSetVisible(gv_peaceConferenceUI, PlayerGroupSingle(EventPlayer()), false);
        libNtve_gf_SetDialogItemText(gv_yesOrNoButtons[0], TextWithColor((StringExternal("Param/Value/4B5325D8") + gf_NationOfPlayer(EventPlayer())), Color(0.00, 100.00, 0.00)), PlayerGroupSingle(gv_whomstGlobalDiplomcay[EventPlayer()]));
        gv_diplomacyQueue[EventPlayer()][1][5] = 0;
        gv_sentPeaceOfferToConsider[EventPlayer()] = true;
        gv_conqueredPlayer[gv_whomstGlobalDiplomcay[EventPlayer()]] = false;
    }
    else {
        DialogSetVisible(gv_peaceConferenceUI, PlayerGroupSingle(EventPlayer()), false);
        lv_player2 = gv_whomstGlobalDiplomcay[EventPlayer()];
        gf_EnforcePeaceTreaty(EventPlayer(), lv_player2, false);
        gf_EnforcePeaceTreaty(lv_player2, EventPlayer(), true);
        gv_diplomacyQueue[gv_whomstGlobalDiplomcay[EventPlayer()]][1][5] = 0;
        gv_diplomacyQueue[gv_whomstGlobalDiplomcay[EventPlayer()]][1][4] = 0;
        gv_diplomacyQueue[EventPlayer()][1][5] = 0;
        gv_diplomacyQueue[EventPlayer()][1][4] = 0;
        gv_sentPeaceOfferToConsider[gv_whomstGlobalDiplomcay[EventPlayer()]] = false;
        DialogSetVisible(gv_yesOrNoDialog, PlayerGroupSingle(EventPlayer()), false);
        gf_ResetPeaceDealUI(EventPlayer());
        gf_ResetPeaceDealUI(lv_player2);
        gf_AnnexProvincesFromPlayer(lv_player2, EventPlayer());
        gf_AnnexProvincesFromPlayer(EventPlayer(), lv_player2);
        gf_ClearPeaceDeal(EventPlayer());
        gf_ClearPeaceDeal(lv_player2);
        gf_ReturnOccupiedTerritory(EventPlayer());
        gf_ReturnOccupiedTerritory(gv_whomstGlobalDiplomcay[EventPlayer()]);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SendDeal_Init () {
    gt_SendDeal = TriggerCreate("gt_SendDeal_Func");
    TriggerAddEventDialogControl(gt_SendDeal, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: WhitePeace
//--------------------------------------------------------------------------------------------------
bool gt_WhitePeace_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_peaceConferenceButton[2] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(gv_yesOrNoDialog, PlayerGroupSingle(gv_whomstGlobalDiplomcay[EventPlayer()]), true);
    DialogSetVisible(gv_peaceConferenceUI, PlayerGroupSingle(EventPlayer()), false);
    libNtve_gf_SetDialogItemText(gv_yesOrNoButtons[0], TextWithColor((StringExternal("Param/Value/3AB0E6D6") + (gf_NationOfPlayer(EventPlayer()) + StringExternal("Param/Value/388E9AC2"))), Color(0.00, 100.00, 0.00)), PlayerGroupSingle(gv_whomstGlobalDiplomcay[EventPlayer()]));
    gv_diplomacyQueue[EventPlayer()][1][5] = 0;
    gv_sentPeaceOfferToConsider[EventPlayer()] = true;
    gf_ClearPeaceDeal(EventPlayer());
    gf_ClearPeaceDeal(gv_whomstGlobalDiplomcay[EventPlayer()]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WhitePeace_Init () {
    gt_WhitePeace = TriggerCreate("gt_WhitePeace_Func");
    TriggerAddEventDialogControl(gt_WhitePeace, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ClearPeaceDeals
//--------------------------------------------------------------------------------------------------
bool gt_ClearPeaceDeals_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_loops;

    // Automatic Variable Declarations
    const int autoED9C5611_ae = 200;
    const int autoED9C5611_ai = 1;
    const int auto5DD9AED4_ae = 200;
    const int auto5DD9AED4_ai = 1;
    unitgroup auto6EAB5C46_g;
    int auto6EAB5C46_u;
    unit auto6EAB5C46_var;
    unitgroup autoB2992DCC_g;
    int autoB2992DCC_u;
    unit autoB2992DCC_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_peaceConferenceButton[3] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_loops = 1;
    for ( ; ( (autoED9C5611_ai >= 0 && lv_loops <= autoED9C5611_ae) || (autoED9C5611_ai < 0 && lv_loops >= autoED9C5611_ae) ) ; lv_loops += autoED9C5611_ai ) {
        gv_requestedAnnex[EventPlayer()][lv_loops] = false;
    }
    lv_loops = 1;
    for ( ; ( (auto5DD9AED4_ai >= 0 && lv_loops <= auto5DD9AED4_ae) || (auto5DD9AED4_ai < 0 && lv_loops >= auto5DD9AED4_ae) ) ; lv_loops += auto5DD9AED4_ai ) {
        gv_requestedAnnex[gv_whomstGlobalDiplomcay[EventPlayer()]][lv_loops] = false;
    }
    auto6EAB5C46_g = UnitGroup(null, EventPlayer(), RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto6EAB5C46_u = UnitGroupCount(auto6EAB5C46_g, c_unitCountAll);
    for (;; auto6EAB5C46_u -= 1) {
        auto6EAB5C46_var = UnitGroupUnitFromEnd(auto6EAB5C46_g, auto6EAB5C46_u);
        if (auto6EAB5C46_var == null) { break; }
        TextTagDestroy(libHots_gf_TextTagForUnit(auto6EAB5C46_var, 1));
        UnitBehaviorRemove(auto6EAB5C46_var, "NegotiatedTerritory", 1);
    }
    autoB2992DCC_g = UnitGroup(null, gv_whomstGlobalDiplomcay[EventPlayer()], RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB2992DCC_u = UnitGroupCount(autoB2992DCC_g, c_unitCountAll);
    for (;; autoB2992DCC_u -= 1) {
        autoB2992DCC_var = UnitGroupUnitFromEnd(autoB2992DCC_g, autoB2992DCC_u);
        if (autoB2992DCC_var == null) { break; }
        TextTagDestroy(libHots_gf_TextTagForUnit(autoB2992DCC_var, 1));
        UnitBehaviorRemove(autoB2992DCC_var, "NegotiatedTerritory", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ClearPeaceDeals_Init () {
    gt_ClearPeaceDeals = TriggerCreate("gt_ClearPeaceDeals_Func");
    TriggerAddEventDialogControl(gt_ClearPeaceDeals, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: IfBuildingSelected,HighlightProvince
//--------------------------------------------------------------------------------------------------
bool gt_IfBuildingSelectedHighlightProvince_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int lv_pickedRegion;
    unitgroup[16] lv_unitedUnitGroup;

    // Automatic Variable Declarations
    unitgroup auto0C58BD4E_g;
    int auto0C58BD4E_u;
    unit auto0C58BD4E_var;
    playergroup autoB4239A8B_g;
    int autoB4239A8B_var;

    // Variable Initialization
    for (init_i = 0; init_i <= 15; init_i += 1) {
        lv_unitedUnitGroup[init_i] = UnitGroupEmpty();
    }

    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroupSelected(EventPlayer()), c_unitCountAlive) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_pickedRegion = gf_GetCountyID(EventUnit());
    auto0C58BD4E_g = UnitGroup(null, c_playerAny, gv_countRegions[lv_pickedRegion], UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto0C58BD4E_u = UnitGroupCount(auto0C58BD4E_g, c_unitCountAll);
    for (;; auto0C58BD4E_u -= 1) {
        auto0C58BD4E_var = UnitGroupUnitFromEnd(auto0C58BD4E_g, auto0C58BD4E_u);
        if (auto0C58BD4E_var == null) { break; }
        if ((gf_GetCountyID(auto0C58BD4E_var) == lv_pickedRegion)) {
            TextTagCreate(StringToText(gf_GetCountyName(lv_pickedRegion)), 14, UnitGetPosition(auto0C58BD4E_var), 1.0, true, false, PlayerGroupSingle(EventPlayer()));
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 10.0);
            UnitGroupAdd(lv_unitedUnitGroup[UnitGetOwner(auto0C58BD4E_var)], auto0C58BD4E_var);
        }

    }
    autoB4239A8B_g = gv_users;
    autoB4239A8B_var = -1;
    while (true) {
        autoB4239A8B_var = PlayerGroupNextPlayer(autoB4239A8B_g, autoB4239A8B_var);
        if (autoB4239A8B_var < 0) { break; }
        if ((gf_GetCountySoverigntyPointCount(lv_pickedRegion, autoB4239A8B_var) > 0)) {
            TextTagCreate(TextWithColor(((gf_NationOfPlayer(autoB4239A8B_var) + StringExternal("Param/Value/6D48A783")) + IntToText(gf_GetCountySoverigntyPointCount(lv_pickedRegion, autoB4239A8B_var))), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(autoB4239A8B_var, false))), 20, UnitGroupCenterOfGroup(lv_unitedUnitGroup[autoB4239A8B_var]), 6.0, true, false, PlayerGroupSingle(EventPlayer()));
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 10.0);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IfBuildingSelectedHighlightProvince_Init () {
    gt_IfBuildingSelectedHighlightProvince = TriggerCreate("gt_IfBuildingSelectedHighlightProvince_Func");
    TriggerAddEventUnitSelected(gt_IfBuildingSelectedHighlightProvince, null, c_playerAny, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: RequestSubjugate
//--------------------------------------------------------------------------------------------------
bool gt_RequestSubjugate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_peaceConferenceButton[4] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetEnabled(gv_peaceConferenceButton[4], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetEnabled(gv_peaceConferenceCancelButton[1], PlayerGroupSingle(EventPlayer()), true);
    gv_requestSubjugate[EventPlayer()][gv_whomstGlobalDiplomcay[EventPlayer()]] = true;
    gv_requestSubjugate[gv_whomstGlobalDiplomcay[EventPlayer()]][EventPlayer()] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RequestSubjugate_Init () {
    gt_RequestSubjugate = TriggerCreate("gt_RequestSubjugate_Func");
    TriggerAddEventDialogControl(gt_RequestSubjugate, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: RequestReparations
//--------------------------------------------------------------------------------------------------
bool gt_RequestReparations_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_reparations;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_peaceConferenceButton[5] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetEnabled(gv_peaceConferenceButton[5], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetEnabled(gv_peaceConferenceCancelButton[2], PlayerGroupSingle(EventPlayer()), true);
    lv_reparations = StringToInt(libNtve_gf_DialogItemEditValue(gv_peaceConferenceButton[6], EventPlayer()));
    gv_requestWarReps[gv_whomstGlobalDiplomcay[EventPlayer()]][EventPlayer()] = 0;
    gv_requestWarReps[EventPlayer()][gv_whomstGlobalDiplomcay[EventPlayer()]] = libNtve_gf_ArithmeticIntClamp(lv_reparations, 1, 1000000000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RequestReparations_Init () {
    gt_RequestReparations = TriggerCreate("gt_RequestReparations_Func");
    TriggerAddEventDialogControl(gt_RequestReparations, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: RequestChangeGovernment
//--------------------------------------------------------------------------------------------------
bool gt_RequestChangeGovernment_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_reparations;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_peaceConferenceButton[7] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetEnabled(gv_peaceConferenceButton[7], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetEnabled(gv_peaceConferenceCancelButton[3], PlayerGroupSingle(EventPlayer()), true);
    gv_requestChangeGovernment[gv_whomstGlobalDiplomcay[EventPlayer()]][EventPlayer()] = false;
    gv_requestChangeGovernment[EventPlayer()][gv_whomstGlobalDiplomcay[EventPlayer()]] = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RequestChangeGovernment_Init () {
    gt_RequestChangeGovernment = TriggerCreate("gt_RequestChangeGovernment_Func");
    TriggerAddEventDialogControl(gt_RequestChangeGovernment, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: RequestEmbargo
//--------------------------------------------------------------------------------------------------
bool gt_RequestEmbargo_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_reparations;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_peaceConferenceButton[8] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetEnabled(gv_peaceConferenceButton[8], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetEnabled(gv_peaceConferenceCancelButton[4], PlayerGroupSingle(EventPlayer()), true);
    gv_requestEmbargo[gv_whomstGlobalDiplomcay[EventPlayer()]][EventPlayer()] = false;
    gv_requestEmbargo[EventPlayer()][gv_whomstGlobalDiplomcay[EventPlayer()]] = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RequestEmbargo_Init () {
    gt_RequestEmbargo = TriggerCreate("gt_RequestEmbargo_Func");
    TriggerAddEventDialogControl(gt_RequestEmbargo, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: RequestDisarm
//--------------------------------------------------------------------------------------------------
bool gt_RequestDisarm_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_reparations;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_peaceConferenceButton[9] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetEnabled(gv_peaceConferenceButton[9], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetEnabled(gv_peaceConferenceCancelButton[5], PlayerGroupSingle(EventPlayer()), true);
    gv_requestDisarmament[gv_whomstGlobalDiplomcay[EventPlayer()]][EventPlayer()] = false;
    gv_requestDisarmament[EventPlayer()][gv_whomstGlobalDiplomcay[EventPlayer()]] = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RequestDisarm_Init () {
    gt_RequestDisarm = TriggerCreate("gt_RequestDisarm_Func");
    TriggerAddEventDialogControl(gt_RequestDisarm, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: RequestReleaseVassal
//--------------------------------------------------------------------------------------------------
bool gt_RequestReleaseVassal_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_reparations;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_peaceConferenceButton[10] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetEnabled(gv_peaceConferenceButton[10], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetEnabled(gv_peaceConferenceCancelButton[6], PlayerGroupSingle(EventPlayer()), true);
    gv_requestReleaseVassal[gv_whomstGlobalDiplomcay[EventPlayer()]][EventPlayer()] = false;
    gv_requestReleaseVassal[EventPlayer()][gv_whomstGlobalDiplomcay[EventPlayer()]] = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RequestReleaseVassal_Init () {
    gt_RequestReleaseVassal = TriggerCreate("gt_RequestReleaseVassal_Func");
    TriggerAddEventDialogControl(gt_RequestReleaseVassal, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: RequestFullAnnex
//--------------------------------------------------------------------------------------------------
bool gt_RequestFullAnnex_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_reparations;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_peaceConferenceButton[11] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetEnabled(gv_peaceConferenceButton[11], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetEnabled(gv_peaceConferenceCancelButton[8], PlayerGroupSingle(EventPlayer()), true);
    gv_requestFullAnnex[gv_whomstGlobalDiplomcay[EventPlayer()]][EventPlayer()] = false;
    gv_requestFullAnnex[EventPlayer()][gv_whomstGlobalDiplomcay[EventPlayer()]] = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RequestFullAnnex_Init () {
    gt_RequestFullAnnex = TriggerCreate("gt_RequestFullAnnex_Func");
    TriggerAddEventDialogControl(gt_RequestFullAnnex, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: RequestAnnex
//--------------------------------------------------------------------------------------------------
bool gt_RequestAnnex_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_capitolProvince;
    int lv_player1;
    int lv_player2;
    int lv_selectedRegion;
    unit lv_capitolOfPlayer1;

    // Automatic Variable Declarations
    unitgroup auto1EB12FC0_g;
    int auto1EB12FC0_u;
    unit auto1EB12FC0_var;
    unitgroup autoC3C9E159_g;
    int autoC3C9E159_u;
    unit autoC3C9E159_var;
    unitgroup autoFCCFB1E0_g;
    int autoFCCFB1E0_u;
    unit autoFCCFB1E0_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_peaceConferenceButton[12] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_diplomacyQueue[EventPlayer()][1][5] == 0)) {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/98921AFD"));

    }
    else {
        lv_player2 = gv_whomstGlobalDiplomcay[EventPlayer()];
        lv_player1 = EventPlayer();
        if ((UnitGroupCount(UnitGroupSelected(lv_player1), c_unitCountAlive) > 1)) {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/CA6A3E5F"));

        }
        else {
            if ((UnitGroupCount(UnitGroupSelected(lv_player1), c_unitCountAlive) == 0)) {
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/6A17B084"));

            }
            else {
                if ((!(((UnitGetOwner(UnitGroupRandomUnit(UnitGroupSelected(EventPlayer()), c_unitCountAlive)) == lv_player2) || (UnitGetOwner(UnitGroupRandomUnit(UnitGroupSelected(EventPlayer()), c_unitCountAlive)) == EventPlayer()))))) {
                    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/FE50AE4D"));

                }
                else {
                    lv_selectedRegion = gf_GetCountyID(UnitGroupRandomUnit(UnitGroupSelected(lv_player1), c_unitCountAlive));
                    auto1EB12FC0_g = UnitGroup(null, lv_player2, gv_countRegions[lv_selectedRegion], UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                    auto1EB12FC0_u = UnitGroupCount(auto1EB12FC0_g, c_unitCountAll);
                    for (;; auto1EB12FC0_u -= 1) {
                        auto1EB12FC0_var = UnitGroupUnitFromEnd(auto1EB12FC0_g, auto1EB12FC0_u);
                        if (auto1EB12FC0_var == null) { break; }
                        if ((UnitGetType(auto1EB12FC0_var) == "Capital")) {
                            lv_capitolProvince = true;
                        }

                    }
                    if ((lv_capitolProvince == true)) {
                        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/C78E5155"));

                    }
                    else {
                        autoC3C9E159_g = UnitGroup("Capital", lv_player1, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                        autoC3C9E159_u = UnitGroupCount(autoC3C9E159_g, c_unitCountAll);
                        for (;; autoC3C9E159_u -= 1) {
                            autoC3C9E159_var = UnitGroupUnitFromEnd(autoC3C9E159_g, autoC3C9E159_u);
                            if (autoC3C9E159_var == null) { break; }
                            lv_capitolOfPlayer1 = autoC3C9E159_var;
                        }
                        gv_requestedAnnex[EventPlayer()][lv_selectedRegion] = true;
                        autoFCCFB1E0_g = UnitGroup(null, lv_player2, gv_countRegions[lv_selectedRegion], UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                        autoFCCFB1E0_u = UnitGroupCount(autoFCCFB1E0_g, c_unitCountAll);
                        for (;; autoFCCFB1E0_u -= 1) {
                            autoFCCFB1E0_var = UnitGroupUnitFromEnd(autoFCCFB1E0_g, autoFCCFB1E0_u);
                            if (autoFCCFB1E0_var == null) { break; }
                            UnitBehaviorAdd(autoFCCFB1E0_var, "NegotiatedTerritory", lv_capitolOfPlayer1, 1);
                            TextTagDestroy(libHots_gf_TextTagForUnit(autoFCCFB1E0_var, 1));
                            TextTagCreate(StringExternal("Param/Value/124D2A35"), 20, UnitGetPosition(autoFCCFB1E0_var), 1.0, true, false, PlayerGroupAll());
                            TextTagSetColor(TextTagLastCreated(), c_textTagColorText, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false)));
                            libHots_gf_StoreTextTagForUnit(autoFCCFB1E0_var, 1, TextTagLastCreated());
                        }
                    }
                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RequestAnnex_Init () {
    gt_RequestAnnex = TriggerCreate("gt_RequestAnnex_Func");
    TriggerAddEventDialogControl(gt_RequestAnnex, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: RequestAnnexRemove
//--------------------------------------------------------------------------------------------------
bool gt_RequestAnnexRemove_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_capitolProvince;
    int lv_player1;
    int lv_player2;
    int lv_selectedRegion;
    unit lv_capitolOfPlayer1;

    // Automatic Variable Declarations
    unitgroup auto96064AF2_g;
    int auto96064AF2_u;
    unit auto96064AF2_var;
    unitgroup auto7AF45249_g;
    int auto7AF45249_u;
    unit auto7AF45249_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_peaceConferenceCancelButton[7] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_diplomacyQueue[EventPlayer()][1][5] == 0)) {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/5DBA66EA"));

    }
    else {
        lv_player2 = gv_whomstGlobalDiplomcay[EventPlayer()];
        lv_player1 = EventPlayer();
        if ((UnitGroupCount(UnitGroupSelected(lv_player1), c_unitCountAlive) > 1)) {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/97E09317"));

        }
        else {
            if ((UnitGroupCount(UnitGroupSelected(lv_player1), c_unitCountAlive) == 0)) {
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/13F24807"));

            }
            else {
                if ((!(((UnitGetOwner(UnitGroupRandomUnit(UnitGroupSelected(EventPlayer()), c_unitCountAlive)) == lv_player2) || (UnitGetOwner(UnitGroupRandomUnit(UnitGroupSelected(EventPlayer()), c_unitCountAlive)) == EventPlayer()))))) {
                    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/9CB4C5F8"));

                }
                else {
                    lv_selectedRegion = gf_GetCountyID(UnitGroupRandomUnit(UnitGroupSelected(lv_player1), c_unitCountAlive));
                    gv_requestedAnnex[gv_whomstGlobalDiplomcay[EventPlayer()]][lv_selectedRegion] = false;
                    gv_requestedAnnex[EventPlayer()][lv_selectedRegion] = false;
                    auto96064AF2_g = UnitGroup(null, lv_player2, gv_countRegions[lv_selectedRegion], UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                    auto96064AF2_u = UnitGroupCount(auto96064AF2_g, c_unitCountAll);
                    for (;; auto96064AF2_u -= 1) {
                        auto96064AF2_var = UnitGroupUnitFromEnd(auto96064AF2_g, auto96064AF2_u);
                        if (auto96064AF2_var == null) { break; }
                        UnitBehaviorRemove(auto96064AF2_var, "NegotiatedTerritory", 1);
                        TextTagDestroy(libHots_gf_TextTagForUnit(auto96064AF2_var, 1));
                    }
                    auto7AF45249_g = UnitGroup(null, lv_player1, gv_countRegions[lv_selectedRegion], UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                    auto7AF45249_u = UnitGroupCount(auto7AF45249_g, c_unitCountAll);
                    for (;; auto7AF45249_u -= 1) {
                        auto7AF45249_var = UnitGroupUnitFromEnd(auto7AF45249_g, auto7AF45249_u);
                        if (auto7AF45249_var == null) { break; }
                        UnitBehaviorRemove(auto7AF45249_var, "NegotiatedTerritory", 1);
                        TextTagDestroy(libHots_gf_TextTagForUnit(auto7AF45249_var, 1));
                    }
                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RequestAnnexRemove_Init () {
    gt_RequestAnnexRemove = TriggerCreate("gt_RequestAnnexRemove_Func");
    TriggerAddEventDialogControl(gt_RequestAnnexRemove, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: RequestCancel
//--------------------------------------------------------------------------------------------------
bool gt_RequestCancel_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_whichPeaceConferenceButton;
    int lv_eZLOOP;

    // Automatic Variable Declarations
    const int auto91834DA6_ae = 8;
    const int auto91834DA6_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((gv_peaceConferenceCancelButton[1] == EventDialogControl()) || (gv_peaceConferenceCancelButton[2] == EventDialogControl()) || (gv_peaceConferenceCancelButton[3] == EventDialogControl()) || (gv_peaceConferenceCancelButton[4] == EventDialogControl()) || (gv_peaceConferenceCancelButton[5] == EventDialogControl()) || (gv_peaceConferenceCancelButton[6] == EventDialogControl()) || (gv_peaceConferenceCancelButton[8] == EventDialogControl())))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_whichPeaceConferenceButton = 1;
    for ( ; ( (auto91834DA6_ai >= 0 && lv_whichPeaceConferenceButton <= auto91834DA6_ae) || (auto91834DA6_ai < 0 && lv_whichPeaceConferenceButton >= auto91834DA6_ae) ) ; lv_whichPeaceConferenceButton += auto91834DA6_ai ) {
        if ((EventDialogControl() == gv_peaceConferenceCancelButton[lv_whichPeaceConferenceButton])) {
            if ((lv_whichPeaceConferenceButton == 1)) {
                DialogControlSetEnabled(gv_peaceConferenceButton[4], PlayerGroupSingle(EventPlayer()), true);
                DialogControlSetEnabled(gv_peaceConferenceCancelButton[1], PlayerGroupSingle(EventPlayer()), false);
                gv_requestSubjugate[gv_whomstGlobalDiplomcay[EventPlayer()]][EventPlayer()] = false;
                gv_requestSubjugate[EventPlayer()][gv_whomstGlobalDiplomcay[EventPlayer()]] = false;
            }

            if ((lv_whichPeaceConferenceButton == 2)) {
                DialogControlSetEnabled(gv_peaceConferenceButton[5], PlayerGroupSingle(EventPlayer()), true);
                DialogControlSetEnabled(gv_peaceConferenceCancelButton[2], PlayerGroupSingle(EventPlayer()), false);
                gv_requestWarReps[gv_whomstGlobalDiplomcay[EventPlayer()]][EventPlayer()] = 0;
                gv_requestWarReps[EventPlayer()][gv_whomstGlobalDiplomcay[EventPlayer()]] = 0;
            }

            if ((lv_whichPeaceConferenceButton == 3)) {
                DialogControlSetEnabled(gv_peaceConferenceButton[7], PlayerGroupSingle(EventPlayer()), true);
                DialogControlSetEnabled(gv_peaceConferenceCancelButton[3], PlayerGroupSingle(EventPlayer()), false);
                gv_requestChangeGovernment[gv_whomstGlobalDiplomcay[EventPlayer()]][EventPlayer()] = false;
                gv_requestChangeGovernment[EventPlayer()][gv_whomstGlobalDiplomcay[EventPlayer()]] = false;
            }

            if ((lv_whichPeaceConferenceButton == 4)) {
                DialogControlSetEnabled(gv_peaceConferenceButton[8], PlayerGroupSingle(EventPlayer()), true);
                DialogControlSetEnabled(gv_peaceConferenceCancelButton[4], PlayerGroupSingle(EventPlayer()), false);
                gv_requestEmbargo[gv_whomstGlobalDiplomcay[EventPlayer()]][EventPlayer()] = false;
                gv_requestEmbargo[EventPlayer()][gv_whomstGlobalDiplomcay[EventPlayer()]] = false;
            }

            if ((lv_whichPeaceConferenceButton == 5)) {
                DialogControlSetEnabled(gv_peaceConferenceButton[9], PlayerGroupSingle(EventPlayer()), true);
                DialogControlSetEnabled(gv_peaceConferenceCancelButton[5], PlayerGroupSingle(EventPlayer()), false);
                gv_requestDisarmament[gv_whomstGlobalDiplomcay[EventPlayer()]][EventPlayer()] = false;
                gv_requestDisarmament[EventPlayer()][gv_whomstGlobalDiplomcay[EventPlayer()]] = false;
            }

            if ((lv_whichPeaceConferenceButton == 6)) {
                gv_requestReleaseVassal[gv_whomstGlobalDiplomcay[EventPlayer()]][EventPlayer()] = false;
                gv_requestReleaseVassal[EventPlayer()][gv_whomstGlobalDiplomcay[EventPlayer()]] = false;
                DialogControlSetEnabled(gv_peaceConferenceButton[10], PlayerGroupSingle(EventPlayer()), true);
                DialogControlSetEnabled(gv_peaceConferenceCancelButton[6], PlayerGroupSingle(EventPlayer()), false);
            }

            if ((lv_whichPeaceConferenceButton == 8)) {
                gv_requestFullAnnex[gv_whomstGlobalDiplomcay[EventPlayer()]][EventPlayer()] = false;
                gv_requestFullAnnex[EventPlayer()][gv_whomstGlobalDiplomcay[EventPlayer()]] = false;
                DialogControlSetEnabled(gv_peaceConferenceButton[11], PlayerGroupSingle(EventPlayer()), true);
                DialogControlSetEnabled(gv_peaceConferenceCancelButton[8], PlayerGroupSingle(EventPlayer()), false);
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RequestCancel_Init () {
    gt_RequestCancel = TriggerCreate("gt_RequestCancel_Func");
    TriggerAddEventDialogControl(gt_RequestCancel, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UpdateTotalPeaceDeal
//--------------------------------------------------------------------------------------------------
bool gt_UpdateTotalPeaceDeal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((gv_peaceConferenceCancelButton[1] == EventDialogControl()) || (gv_peaceConferenceCancelButton[2] == EventDialogControl()) || (gv_peaceConferenceCancelButton[3] == EventDialogControl()) || (gv_peaceConferenceCancelButton[4] == EventDialogControl()) || (gv_peaceConferenceCancelButton[5] == EventDialogControl()) || (gv_peaceConferenceCancelButton[6] == EventDialogControl()) || (gv_peaceConferenceCancelButton[7] == EventDialogControl()) || (gv_peaceConferenceCancelButton[8] == EventDialogControl()) || (gv_peaceConferenceButton[12] == EventDialogControl()) || (gv_peaceConferenceButton[11] == EventDialogControl()) || (gv_peaceConferenceButton[10] == EventDialogControl()) || (gv_peaceConferenceButton[9] == EventDialogControl()) || (gv_peaceConferenceButton[8] == EventDialogControl()) || (gv_peaceConferenceButton[7] == EventDialogControl()) || (gv_peaceConferenceButton[6] == EventDialogControl()) || (gv_peaceConferenceButton[5] == EventDialogControl()) || (gv_peaceConferenceButton[4] == EventDialogControl()) || (gv_peaceConferenceButton[3] == EventDialogControl()) || (gv_peaceConferenceButton[2] == EventDialogControl()) || (gv_peaceConferenceButton[1] == EventDialogControl()) || (gv_yesOrNoButtons[2] == EventDialogControl()) || (EventChatMessage(false) == "-annex")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetDialogItemText(gv_peaceConferenceSummary, (StringExternal("Param/Value/BB5D923B") + gf_GetTotalPeaceDealSend(gv_whomstGlobalDiplomcay[EventPlayer()])), PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_peaceConferenceSummary, (StringExternal("Param/Value/0C704BFD") + gf_GetTotalPeaceDealSend(EventPlayer())), PlayerGroupSingle(gv_whomstGlobalDiplomcay[EventPlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpdateTotalPeaceDeal_Init () {
    gt_UpdateTotalPeaceDeal = TriggerCreate("gt_UpdateTotalPeaceDeal_Func");
    TriggerAddEventDialogControl(gt_UpdateTotalPeaceDeal, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventChatMessage(gt_UpdateTotalPeaceDeal, c_playerAny, "-annex", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DeclareWarButtonPressed
//--------------------------------------------------------------------------------------------------
bool gt_DeclareWarButtonPressed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_warType;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventPlayer() != UnitGetOwner(EventUnitTargetUnit())))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_GetWarType(EventPlayer(), UnitGetOwner(EventUnitTargetUnit()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DeclareWarButtonPressed_Init () {
    gt_DeclareWarButtonPressed = TriggerCreate("gt_DeclareWarButtonPressed_Func");
    TriggerAddEventUnitAbility(gt_DeclareWarButtonPressed, null, AbilityCommand("DeclareWar", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CutRelationsButtonPressed
//--------------------------------------------------------------------------------------------------
bool gt_CutRelationsButtonPressed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto424C0EDF_g;
    int auto424C0EDF_var;

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnitTargetUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitTargetUnit()) != 15))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitTargetUnit()) != 11))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitTargetUnit()) != 12))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitTargetUnit()) != 10))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitTargetUnit()) != 13))) {
            return false;
        }

        if (!((EventPlayer() != UnitGetOwner(EventUnitTargetUnit())))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gf_CanNeutral(EventPlayer(), UnitGetOwner(EventUnitTargetUnit())) == true)) {
        libNtve_gf_SetAlliance(EventPlayer(), UnitGetOwner(EventUnitTargetUnit()), libNtve_ge_AllianceSetting_Neutral);
        UIDisplayMessage(gv_users, c_messageAreaSubtitle, ((TextWithColor(gf_NationOfPlayer(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/8A40ABCB")) + TextWithColor(gf_NationOfPlayer(UnitGetOwner(EventUnitTargetUnit())), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(EventUnitTargetUnit()), false)))));
        auto424C0EDF_g = gv_users;
        auto424C0EDF_var = -1;
        while (true) {
            auto424C0EDF_var = PlayerGroupNextPlayer(auto424C0EDF_g, auto424C0EDF_var);
            if (auto424C0EDF_var < 0) { break; }
            if ((gv_subjugator[auto424C0EDF_var] == EventPlayer()) && (auto424C0EDF_var != EventPlayer())) {
                libNtve_gf_SetAlliance(auto424C0EDF_var, UnitGetOwner(EventUnitTargetUnit()), libNtve_ge_AllianceSetting_Neutral);
                UIDisplayMessage(gv_users, c_messageAreaSubtitle, ((TextWithColor(gf_NationOfPlayer(auto424C0EDF_var), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(auto424C0EDF_var, false))) + StringExternal("Param/Value/526B3B32")) + TextWithColor(gf_NationOfPlayer(UnitGetOwner(EventUnitTargetUnit())), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(EventUnitTargetUnit()), false)))));
            }

        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CutRelationsButtonPressed_Init () {
    gt_CutRelationsButtonPressed = TriggerCreate("gt_CutRelationsButtonPressed_Func");
    TriggerAddEventUnitAbility(gt_CutRelationsButtonPressed, null, AbilityCommand("BreakRelations", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SendAllyRequestButtonPressed
//--------------------------------------------------------------------------------------------------
bool gt_SendAllyRequestButtonPressed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnitTargetUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitTargetUnit()) != 15))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitTargetUnit()) != 11))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitTargetUnit()) != 12))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitTargetUnit()) != 10))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitTargetUnit()) != 13))) {
            return false;
        }

        if (!((EventPlayer() != UnitGetOwner(EventUnitTargetUnit())))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gf_CanAlly(EventPlayer(), UnitGetOwner(EventUnitTargetUnit())) == true)) {
        gf_RemoveAllianceOffers(EventPlayer(), UnitGetOwner(EventUnitTargetUnit()));
        gf_AddToDiplomacyQueue(EventPlayer(), UnitGetOwner(EventUnitTargetUnit()), 2);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SendAllyRequestButtonPressed_Init () {
    gt_SendAllyRequestButtonPressed = TriggerCreate("gt_SendAllyRequestButtonPressed_Func");
    TriggerAddEventUnitAbility(gt_SendAllyRequestButtonPressed, null, AbilityCommand("OfferAlliance", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SendCeasefireButtonPRessed
//--------------------------------------------------------------------------------------------------
bool gt_SendCeasefireButtonPRessed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnitTargetUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitTargetUnit()) != 15))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitTargetUnit()) != 11))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitTargetUnit()) != 12))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitTargetUnit()) != 10))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitTargetUnit()) != 13))) {
            return false;
        }

        if (!((EventPlayer() != UnitGetOwner(EventUnitTargetUnit())))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gf_CanCeaseFire(EventPlayer(), UnitGetOwner(EventUnitTargetUnit())) == true)) {
        gf_RemoveCeasefireRequests(EventPlayer(), UnitGetOwner(EventUnitTargetUnit()));
        gf_AddToDiplomacyQueue(EventPlayer(), UnitGetOwner(EventUnitTargetUnit()), 3);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SendCeasefireButtonPRessed_Init () {
    gt_SendCeasefireButtonPRessed = TriggerCreate("gt_SendCeasefireButtonPRessed_Func");
    TriggerAddEventUnitAbility(gt_SendCeasefireButtonPRessed, null, AbilityCommand("Peace", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GoThroughDiplomaticQueue
//--------------------------------------------------------------------------------------------------
bool gt_GoThroughDiplomaticQueue_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto075FA55B_g;
    int auto075FA55B_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gf_ReadDiplomaticOffers();
    Wait(9.9, c_timeGame);
    gf_HideDiplomaticUIs();
    Wait(0.02, c_timeGame);
    gf_IfNoResponseOr0ThenDeclined();
    Wait(0.02, c_timeGame);
    gf_ReadClear();
    Wait(0.02, c_timeGame);
    gf_ShiftDiplomaticQueueDown();
    Wait(0.02, c_timeGame);
    auto075FA55B_g = gv_users;
    auto075FA55B_var = -1;
    while (true) {
        auto075FA55B_var = PlayerGroupNextPlayer(auto075FA55B_g, auto075FA55B_var);
        if (auto075FA55B_var < 0) { break; }
        if ((gv_subjugated[auto075FA55B_var] == true)) {
            gf_SubjectRelations(auto075FA55B_var);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GoThroughDiplomaticQueue_Init () {
    gt_GoThroughDiplomaticQueue = TriggerCreate("gt_GoThroughDiplomaticQueue_Func");
    TriggerAddEventTimePeriodic(gt_GoThroughDiplomaticQueue, 10.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Credit Transferance Show UI
//--------------------------------------------------------------------------------------------------
bool gt_CreditTransferanceShowUI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventPlayer() != UnitGetOwner(EventUnitTargetUnit())))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_donator = EventPlayer();
    gv_reciever = UnitGetOwner(EventUnitTargetUnit());
    DialogSetVisible(gv_creditTransfer, PlayerGroupSingle(EventPlayer()), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreditTransferanceShowUI_Init () {
    gt_CreditTransferanceShowUI = TriggerCreate("gt_CreditTransferanceShowUI_Func");
    TriggerAddEventUnitAbility(gt_CreditTransferanceShowUI, null, AbilityCommand("GiveCreditInfusion", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gib Credits
//--------------------------------------------------------------------------------------------------
bool gt_GibCredits_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_donationMoney;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_creditTransferItems[0]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_donationMoney = StringToInt(libNtve_gf_DialogItemEditValue(gv_creditTransferItems[1], EventPlayer()));
    DialogSetVisible(gv_creditTransfer, PlayerGroupAll(), false);
    if ((lv_donationMoney < PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals))) {
        if ((lv_donationMoney <= 0)) {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/37EE9CB5"));
        }
        else {
            PlayerModifyPropertyInt(gv_donator, c_playerPropMinerals, c_playerPropOperSubtract, lv_donationMoney);
            PlayerModifyPropertyInt(gv_reciever, c_playerPropMinerals, c_playerPropOperAdd, lv_donationMoney);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, (StringExternal("Param/Value/C27F974C") + (IntToText(lv_donationMoney) + (StringExternal("Param/Value/86621984") + PlayerName(gv_reciever)))));
            UIDisplayMessage(PlayerGroupSingle(gv_reciever), c_messageAreaSubtitle, (StringExternal("Param/Value/CDE815F6") + (IntToText(lv_donationMoney) + (StringExternal("Param/Value/5C280B87") + PlayerName(EventPlayer())))));
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/6AF725B7"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GibCredits_Init () {
    gt_GibCredits = TriggerCreate("gt_GibCredits_Func");
    TriggerAddEventDialogControl(gt_GibCredits, c_playerAny, EventDialogControl(), c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Credit Transfer UI
//--------------------------------------------------------------------------------------------------
bool gt_CreditTransferUI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(250, 280, c_anchorCenter, 0, 0, true);
    gv_creditTransfer = DialogLastCreated();
    DialogSetTitle(gv_creditTransfer, StringExternal("Param/Value/AE95648A"));
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 50, c_anchorBottom, 0, 40, StringExternal("Param/Value/FBD76159"), StringExternal("Param/Value/DCB0D844"), "");
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    gv_creditTransferItems[0] = DialogControlLastCreated();
    DialogControlCreate(gv_creditTransfer, c_triggerControlTypeEditBox);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 150, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_scrollbar_frame.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    gv_creditTransferItems[1] = DialogControlLastCreated();
    DialogSetImage(gv_creditTransfer, "Assets\\Textures\\ui_scrollbar_frame.dds");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreditTransferUI_Init () {
    gt_CreditTransferUI = TriggerCreate("gt_CreditTransferUI_Func");
    TriggerAddEventMapInit(gt_CreditTransferUI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Donate
//--------------------------------------------------------------------------------------------------
bool gt_Donate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_subjugated[EventPlayer()] == true)) {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/B45CAFEA"));
    }
    else {
        if ((UnitGetOwner(EventUnitTargetUnit()) != 0) && (UnitGetOwner(EventUnitTargetUnit()) < 8)) {
            MinimapPing(PlayerGroupSingle(UnitGetOwner(EventUnitTargetUnit())), UnitGetPosition(EventUnit()), 2.0, Color(100.00, 0.00, 0.00));
            UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnitTargetUnit())), c_messageAreaSubtitle, (PlayerName(EventPlayer()) + (StringExternal("Param/Value/2FFE633B") + (UnitTypeGetName(UnitGetType(EventUnit())) + StringExternal("Param/Value/B5FABAA2")))));
            UnitSetOwner(EventUnit(), UnitGetOwner(EventUnitTargetUnit()), true);
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/E2AEE83C"));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Donate_Init () {
    gt_Donate = TriggerCreate("gt_Donate_Func");
    TriggerAddEventUnitAbility(gt_Donate, null, AbilityCommand("Donate", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Local Militia
//--------------------------------------------------------------------------------------------------
bool gt_LocalMilitia_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_techLevel;

    // Automatic Variable Declarations
    playergroup autoF7678E61_g;
    int autoF7678E61_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPropertyFixed(EventUnit(), c_unitPropEnergy, 0.0);
    lv_techLevel = 0;
    if ((PlayerGroupCount(gv_theEuroCrew) > 0)) {
        autoF7678E61_g = gv_theEuroCrew;
        autoF7678E61_var = -1;
        while (true) {
            autoF7678E61_var = PlayerGroupNextPlayer(autoF7678E61_g, autoF7678E61_var);
            if (autoF7678E61_var < 0) { break; }
            if ((TechTreeUpgradeCount(autoF7678E61_var, "AdvancedPowerArmour", c_techCountQueuedOrBetter) == 1) && (lv_techLevel < 2)) {
                lv_techLevel = 2;
            }

            if ((TechTreeUpgradeCount(autoF7678E61_var, "PowerArmour", c_techCountQueuedOrBetter) == 1) && (lv_techLevel < 1)) {
                lv_techLevel = 1;
            }

        }
    }

    if ((lv_techLevel == 0)) {
        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnitTargetUnit())), c_messageAreaSubtitle, StringExternal("Param/Value/0513BDBA"));
        libNtve_gf_CreateUnitsWithDefaultFacing(16, "Rifleman", 0, UnitGetOwner(EventUnitTargetUnit()), UnitGetPosition(EventUnitTargetUnit()));
        libNtve_gf_CreateUnitsWithDefaultFacing(6, "Mortaliser", 0, UnitGetOwner(EventUnitTargetUnit()), UnitGetPosition(EventUnitTargetUnit()));
        PingCreate(PlayerGroupSingle(UnitGetOwner(EventUnitTargetUnit())), "PingObjective", UnitGetPosition(EventUnitTargetUnit()), Color(61.57, 91.76, 69.02), 5.0);
    }

    if ((lv_techLevel == 1)) {
        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnitTargetUnit())), c_messageAreaSubtitle, StringExternal("Param/Value/E5EA1921"));
        libNtve_gf_CreateUnitsWithDefaultFacing(16, "AlphaMarine", 0, UnitGetOwner(EventUnitTargetUnit()), UnitGetPosition(EventUnitTargetUnit()));
        libNtve_gf_CreateUnitsWithDefaultFacing(6, "StrikeTrooper", 0, UnitGetOwner(EventUnitTargetUnit()), UnitGetPosition(EventUnitTargetUnit()));
        PingCreate(PlayerGroupSingle(UnitGetOwner(EventUnitTargetUnit())), "PingObjective", UnitGetPosition(EventUnitTargetUnit()), Color(61.57, 91.76, 69.02), 5.0);
    }

    if ((lv_techLevel == 2)) {
        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnitTargetUnit())), c_messageAreaSubtitle, StringExternal("Param/Value/97370675"));
        libNtve_gf_CreateUnitsWithDefaultFacing(16, "Stormtrooper", 0, UnitGetOwner(EventUnitTargetUnit()), UnitGetPosition(EventUnitTargetUnit()));
        libNtve_gf_CreateUnitsWithDefaultFacing(6, "Equaliser", 0, UnitGetOwner(EventUnitTargetUnit()), UnitGetPosition(EventUnitTargetUnit()));
        PingCreate(PlayerGroupSingle(UnitGetOwner(EventUnitTargetUnit())), "PingObjective", UnitGetPosition(EventUnitTargetUnit()), Color(61.57, 91.76, 69.02), 5.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LocalMilitia_Init () {
    gt_LocalMilitia = TriggerCreate("gt_LocalMilitia_Func");
    TriggerAddEventUnitAbility(gt_LocalMilitia, null, AbilityCommand("FundMilitia", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Peacekeeper Squad
//--------------------------------------------------------------------------------------------------
bool gt_PeacekeeperSquad_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_techLevel;

    // Automatic Variable Declarations
    playergroup auto2D7A094B_g;
    int auto2D7A094B_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPropertyFixed(EventUnit(), c_unitPropEnergy, 0.0);
    lv_techLevel = 0;
    if ((PlayerGroupCount(gv_theEuroCrew) > 0)) {
        auto2D7A094B_g = gv_theEuroCrew;
        auto2D7A094B_var = -1;
        while (true) {
            auto2D7A094B_var = PlayerGroupNextPlayer(auto2D7A094B_g, auto2D7A094B_var);
            if (auto2D7A094B_var < 0) { break; }
            if ((TechTreeUpgradeCount(auto2D7A094B_var, "AdvancedPowerArmour", c_techCountQueuedOrBetter) == 1) && (lv_techLevel < 2)) {
                lv_techLevel = 2;
            }

            if ((TechTreeUpgradeCount(auto2D7A094B_var, "PowerArmour", c_techCountQueuedOrBetter) == 1) && (lv_techLevel < 1)) {
                lv_techLevel = 1;
            }

        }
    }

    if ((lv_techLevel == 0)) {
        UIDisplayMessage(gv_users, c_messageAreaSubtitle, StringExternal("Param/Value/A91A5161"));
        libNtve_gf_CreateUnitsWithDefaultFacing(10, "Rifleman", 0, 12, UnitGetPosition(EventUnit()));
        UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(EventUnitTargetUnit())), c_orderQueueReplace);
        libNtve_gf_CreateUnitsWithDefaultFacing(5, "Mortaliser", 0, 12, UnitGetPosition(EventUnit()));
        UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(EventUnitTargetUnit())), c_orderQueueReplace);
        libNtve_gf_CreateUnitsWithDefaultFacing(3, "Mortaliser", 0, 12, UnitGetPosition(EventUnit()));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "CerulianMarine", 0, 12, UnitGetPosition(EventUnit()));
        UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(EventUnitTargetUnit())), c_orderQueueReplace);
        PingCreate(gv_theEuroCrew, "PingObjective", UnitGetPosition(EventUnitTargetUnit()), Color(61.57, 91.76, 69.02), 5.0);
        TriggerExecute(gt_Send, true, false);
    }

    if ((lv_techLevel == 1)) {
        UIDisplayMessage(gv_users, c_messageAreaSubtitle, StringExternal("Param/Value/50935E9D"));
        libNtve_gf_CreateUnitsWithDefaultFacing(10, "AlphaMarine", 0, 12, UnitGetPosition(EventUnit()));
        UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(EventUnitTargetUnit())), c_orderQueueReplace);
        libNtve_gf_CreateUnitsWithDefaultFacing(5, "StrikeTrooper", 0, 12, UnitGetPosition(EventUnit()));
        UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(EventUnitTargetUnit())), c_orderQueueReplace);
        libNtve_gf_CreateUnitsWithDefaultFacing(3, "Knight", 0, 12, UnitGetPosition(EventUnit()));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "CerulianMarine", 0, 12, UnitGetPosition(EventUnit()));
        UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(EventUnitTargetUnit())), c_orderQueueReplace);
        PingCreate(gv_theEuroCrew, "PingObjective", UnitGetPosition(EventUnitTargetUnit()), Color(61.57, 91.76, 69.02), 5.0);
        TriggerExecute(gt_Send, true, false);
    }

    if ((lv_techLevel == 2)) {
        UIDisplayMessage(gv_users, c_messageAreaSubtitle, StringExternal("Param/Value/05D042BB"));
        libNtve_gf_CreateUnitsWithDefaultFacing(10, "Stormtrooper", 0, 12, UnitGetPosition(EventUnit()));
        UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(EventUnitTargetUnit())), c_orderQueueReplace);
        libNtve_gf_CreateUnitsWithDefaultFacing(5, "Equaliser", 0, 12, UnitGetPosition(EventUnit()));
        UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(EventUnitTargetUnit())), c_orderQueueReplace);
        libNtve_gf_CreateUnitsWithDefaultFacing(3, "Knight", 0, 12, UnitGetPosition(EventUnit()));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "CerulianMarine", 0, 12, UnitGetPosition(EventUnit()));
        UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(EventUnitTargetUnit())), c_orderQueueReplace);
        PingCreate(gv_theEuroCrew, "PingObjective", UnitGetPosition(EventUnitTargetUnit()), Color(61.57, 91.76, 69.02), 5.0);
        TriggerExecute(gt_Send, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PeacekeeperSquad_Init () {
    gt_PeacekeeperSquad = TriggerCreate("gt_PeacekeeperSquad_Func");
    TriggerAddEventUnitAbility(gt_PeacekeeperSquad, null, AbilityCommand("DeployPeacekeeperSquad", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Peacekeeper Heli
//--------------------------------------------------------------------------------------------------
bool gt_PeacekeeperHeli_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_techLevel;

    // Automatic Variable Declarations
    playergroup auto1C67CD25_g;
    int auto1C67CD25_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPropertyFixed(EventUnit(), c_unitPropEnergy, 0.0);
    lv_techLevel = 0;
    if ((PlayerGroupCount(gv_theEuroCrew) > 0)) {
        auto1C67CD25_g = gv_theEuroCrew;
        auto1C67CD25_var = -1;
        while (true) {
            auto1C67CD25_var = PlayerGroupNextPlayer(auto1C67CD25_g, auto1C67CD25_var);
            if (auto1C67CD25_var < 0) { break; }
            if ((TechTreeUpgradeCount(auto1C67CD25_var, "AdvancedPowerArmour", c_techCountQueuedOrBetter) == 1) && (lv_techLevel < 2)) {
                lv_techLevel = 2;
            }

            if ((TechTreeUpgradeCount(auto1C67CD25_var, "PowerArmour", c_techCountQueuedOrBetter) == 1) && (lv_techLevel < 1)) {
                lv_techLevel = 1;
            }

        }
    }

    if ((lv_techLevel == 0)) {
        UIDisplayMessage(gv_users, c_messageAreaSubtitle, StringExternal("Param/Value/5DB582D1"));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HerculesLanderFlying", 0, 12, UnitGetPosition(EventUnit()));
        UnitCargoCreate(UnitLastCreated(), "Rifleman", 32);
        libLbty_gf_OrderTransporttoUnloadAllthenDespawn(UnitLastCreated(), UnitGetPosition(EventUnitTargetUnit()), gv_entrypoint[8]);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HerculesLanderFlying", 0, 12, UnitGetPosition(EventUnit()));
        UnitCargoCreate(UnitLastCreated(), "Mortaliser", 16);
        UnitCargoCreate(UnitLastCreated(), "Medic2", 16);
        libLbty_gf_OrderTransporttoUnloadAllthenDespawn(UnitLastCreated(), UnitGetPosition(EventUnitTargetUnit()), gv_entrypoint[8]);
        PingCreate(gv_theEuroCrew, "PingObjective", UnitGetPosition(EventUnitTargetUnit()), Color(61.57, 91.76, 69.02), 5.0);
        TriggerExecute(gt_Send, true, false);
    }

    if ((lv_techLevel == 1)) {
        UIDisplayMessage(gv_users, c_messageAreaSubtitle, StringExternal("Param/Value/0BA4E4C7"));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HerculesLanderFlying", 0, 12, UnitGetPosition(EventUnit()));
        UnitCargoCreate(UnitLastCreated(), "AlphaMarine", 32);
        libLbty_gf_OrderTransporttoUnloadAllthenDespawn(UnitLastCreated(), UnitGetPosition(EventUnitTargetUnit()), gv_entrypoint[8]);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HerculesLanderFlying", 0, 12, UnitGetPosition(EventUnit()));
        UnitCargoCreate(UnitLastCreated(), "StrikeTrooper", 24);
        UnitCargoCreate(UnitLastCreated(), "Knight", 8);
        libLbty_gf_OrderTransporttoUnloadAllthenDespawn(UnitLastCreated(), UnitGetPosition(EventUnitTargetUnit()), gv_entrypoint[8]);
        PingCreate(gv_theEuroCrew, "PingObjective", UnitGetPosition(EventUnitTargetUnit()), Color(61.57, 91.76, 69.02), 5.0);
        TriggerExecute(gt_Send, true, false);
    }

    if ((lv_techLevel == 2)) {
        UIDisplayMessage(gv_users, c_messageAreaSubtitle, StringExternal("Param/Value/786811C0"));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HerculesLanderFlying", 0, 12, UnitGetPosition(EventUnit()));
        UnitCargoCreate(UnitLastCreated(), "Stormtrooper", 32);
        libLbty_gf_OrderTransporttoUnloadAllthenDespawn(UnitLastCreated(), UnitGetPosition(EventUnitTargetUnit()), gv_entrypoint[8]);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HerculesLanderFlying", 0, 12, UnitGetPosition(EventUnit()));
        UnitCargoCreate(UnitLastCreated(), "Equaliser", 16);
        UnitCargoCreate(UnitLastCreated(), "Knight", 16);
        libLbty_gf_OrderTransporttoUnloadAllthenDespawn(UnitLastCreated(), UnitGetPosition(EventUnitTargetUnit()), gv_entrypoint[8]);
        PingCreate(gv_theEuroCrew, "PingObjective", UnitGetPosition(EventUnitTargetUnit()), Color(61.57, 91.76, 69.02), 5.0);
        TriggerExecute(gt_Send, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PeacekeeperHeli_Init () {
    gt_PeacekeeperHeli = TriggerCreate("gt_PeacekeeperHeli_Func");
    TriggerAddEventUnitAbility(gt_PeacekeeperHeli, null, AbilityCommand("DeployPeacekeeperHeli", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Peacekeeper Truck
//--------------------------------------------------------------------------------------------------
bool gt_PeacekeeperTruck_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_techLevel;

    // Automatic Variable Declarations
    playergroup auto21A6C8A1_g;
    int auto21A6C8A1_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPropertyFixed(EventUnit(), c_unitPropEnergy, 0.0);
    lv_techLevel = 0;
    if ((PlayerGroupCount(gv_theEuroCrew) > 0)) {
        auto21A6C8A1_g = gv_theEuroCrew;
        auto21A6C8A1_var = -1;
        while (true) {
            auto21A6C8A1_var = PlayerGroupNextPlayer(auto21A6C8A1_g, auto21A6C8A1_var);
            if (auto21A6C8A1_var < 0) { break; }
            if ((TechTreeUpgradeCount(auto21A6C8A1_var, "AdvancedPowerArmour", c_techCountQueuedOrBetter) == 1) && (lv_techLevel < 2)) {
                lv_techLevel = 2;
            }

            if ((TechTreeUpgradeCount(auto21A6C8A1_var, "PowerArmour", c_techCountQueuedOrBetter) == 1) && (lv_techLevel < 1)) {
                lv_techLevel = 1;
            }

        }
    }

    if ((lv_techLevel == 0)) {
        UIDisplayMessage(gv_users, c_messageAreaSubtitle, StringExternal("Param/Value/60D59691"));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ArmadilloAPC", 0, 12, UnitGetPosition(EventUnit()));
        UnitCargoCreate(UnitLastCreated(), "Rifleman", 8);
        libLbty_gf_OrderTransporttoUnloadAllthenDespawn(UnitLastCreated(), UnitGetPosition(EventUnitTargetUnit()), gv_entrypoint[8]);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ArmadilloAPC", 0, 12, UnitGetPosition(EventUnit()));
        UnitCargoCreate(UnitLastCreated(), "Mortaliser", 4);
        UnitCargoCreate(UnitLastCreated(), "Medic2", 4);
        libLbty_gf_OrderTransporttoUnloadAllthenDespawn(UnitLastCreated(), UnitGetPosition(EventUnitTargetUnit()), gv_entrypoint[8]);
        PingCreate(gv_theEuroCrew, "PingObjective", UnitGetPosition(EventUnitTargetUnit()), Color(61.57, 91.76, 69.02), 5.0);
        TriggerExecute(gt_Send, true, false);
    }

    if ((lv_techLevel == 1)) {
        UIDisplayMessage(gv_users, c_messageAreaSubtitle, StringExternal("Param/Value/F87FD4DC"));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ArmadilloAPC", 0, 12, UnitGetPosition(EventUnit()));
        UnitCargoCreate(UnitLastCreated(), "AlphaMarine", 8);
        libLbty_gf_OrderTransporttoUnloadAllthenDespawn(UnitLastCreated(), UnitGetPosition(EventUnitTargetUnit()), gv_entrypoint[8]);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ArmadilloAPC", 0, 12, UnitGetPosition(EventUnit()));
        UnitCargoCreate(UnitLastCreated(), "StrikeTrooper", 6);
        UnitCargoCreate(UnitLastCreated(), "Knight", 2);
        libLbty_gf_OrderTransporttoUnloadAllthenDespawn(UnitLastCreated(), UnitGetPosition(EventUnitTargetUnit()), gv_entrypoint[8]);
        PingCreate(gv_theEuroCrew, "PingObjective", UnitGetPosition(EventUnitTargetUnit()), Color(61.57, 91.76, 69.02), 5.0);
        TriggerExecute(gt_Send, true, false);
    }

    if ((lv_techLevel == 2)) {
        UIDisplayMessage(gv_users, c_messageAreaSubtitle, StringExternal("Param/Value/26896952"));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ArmadilloAPC", 0, 12, UnitGetPosition(EventUnit()));
        UnitCargoCreate(UnitLastCreated(), "Stormtrooper", 8);
        libLbty_gf_OrderTransporttoUnloadAllthenDespawn(UnitLastCreated(), UnitGetPosition(EventUnitTargetUnit()), gv_entrypoint[8]);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ArmadilloAPC", 0, 12, UnitGetPosition(EventUnit()));
        UnitCargoCreate(UnitLastCreated(), "Equaliser", 4);
        UnitCargoCreate(UnitLastCreated(), "Knight", 4);
        libLbty_gf_OrderTransporttoUnloadAllthenDespawn(UnitLastCreated(), UnitGetPosition(EventUnitTargetUnit()), gv_entrypoint[8]);
        PingCreate(gv_theEuroCrew, "PingObjective", UnitGetPosition(EventUnitTargetUnit()), Color(61.57, 91.76, 69.02), 5.0);
        TriggerExecute(gt_Send, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PeacekeeperTruck_Init () {
    gt_PeacekeeperTruck = TriggerCreate("gt_PeacekeeperTruck_Func");
    TriggerAddEventUnitAbility(gt_PeacekeeperTruck, null, AbilityCommand("DeployPeacekeeperTruck", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Presidental Vote
//--------------------------------------------------------------------------------------------------
bool gt_PresidentalVote_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int[10] lv_middleman;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_presidentalVote[1]) || (EventDialogControl() == gv_presidentalVote[2]) || (EventDialogControl() == gv_presidentalVote[3]) || (EventDialogControl() == gv_presidentalVote[4]) || (EventDialogControl() == gv_presidentalVote[5]) || (EventDialogControl() == gv_presidentalVote[6]) || (EventDialogControl() == gv_presidentalVote[7]) || (EventDialogControl() == gv_presidentalVote[8]) || (EventDialogControl() == gv_presidentalVote[9])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_presidentTime, PlayerGroupAll(), false);
    DialogControlSetVisible(gv_presidentalVote[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_presidentalVote[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_presidentalVote[3], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_presidentalVote[4], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_presidentalVote[5], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_presidentalVote[6], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_presidentalVote[7], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_presidentalVote[8], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_presidentalVote[9], PlayerGroupSingle(EventPlayer()), false);
    if ((EventDialogControl() == gv_presidentalVote[1])) {
        gv_iamVotingFor[EventPlayer()] = 1;
        Wait(2.0, c_timeGame);
        UIDisplayMessage(gv_theEuroCrew, c_messageAreaSubtitle, (PlayerName(EventPlayer()) + (StringExternal("Param/Value/5E57C523") + (IntToText(gv_votes[EventPlayer()]) + (StringExternal("Param/Value/BBC1504E") + PlayerName(PlayerGroupPlayer(gv_theEuroCrew, 1)))))));
    }

    if ((EventDialogControl() == gv_presidentalVote[2])) {
        gv_iamVotingFor[EventPlayer()] = 2;
        Wait(2.0, c_timeGame);
        UIDisplayMessage(gv_theEuroCrew, c_messageAreaSubtitle, (PlayerName(EventPlayer()) + (StringExternal("Param/Value/06B81D62") + (IntToText(gv_votes[EventPlayer()]) + (StringExternal("Param/Value/2181ACEE") + PlayerName(PlayerGroupPlayer(gv_theEuroCrew, 2)))))));
    }

    if ((EventDialogControl() == gv_presidentalVote[3])) {
        gv_iamVotingFor[EventPlayer()] = 3;
        Wait(2.0, c_timeGame);
        UIDisplayMessage(gv_theEuroCrew, c_messageAreaSubtitle, (PlayerName(EventPlayer()) + (StringExternal("Param/Value/82E929E2") + (IntToText(gv_votes[EventPlayer()]) + (StringExternal("Param/Value/0286EF8D") + PlayerName(PlayerGroupPlayer(gv_theEuroCrew, 3)))))));
    }

    if ((EventDialogControl() == gv_presidentalVote[4])) {
        gv_iamVotingFor[EventPlayer()] = 4;
        Wait(2.0, c_timeGame);
        UIDisplayMessage(gv_theEuroCrew, c_messageAreaSubtitle, (PlayerName(EventPlayer()) + (StringExternal("Param/Value/19E8C4DB") + (IntToText(gv_votes[EventPlayer()]) + (StringExternal("Param/Value/FB520BE8") + PlayerName(PlayerGroupPlayer(gv_theEuroCrew, 4)))))));
    }

    if ((EventDialogControl() == gv_presidentalVote[5])) {
        gv_iamVotingFor[EventPlayer()] = 5;
        Wait(2.0, c_timeGame);
        UIDisplayMessage(gv_theEuroCrew, c_messageAreaSubtitle, (PlayerName(EventPlayer()) + (StringExternal("Param/Value/A1E9127B") + (IntToText(gv_votes[EventPlayer()]) + (StringExternal("Param/Value/B10CEFC7") + PlayerName(PlayerGroupPlayer(gv_theEuroCrew, 5)))))));
    }

    if ((EventDialogControl() == gv_presidentalVote[6])) {
        gv_iamVotingFor[EventPlayer()] = 6;
        Wait(2.0, c_timeGame);
        UIDisplayMessage(gv_theEuroCrew, c_messageAreaSubtitle, (PlayerName(EventPlayer()) + (StringExternal("Param/Value/E1B90E76") + (IntToText(gv_votes[EventPlayer()]) + (StringExternal("Param/Value/CCC38084") + PlayerName(PlayerGroupPlayer(gv_theEuroCrew, 6)))))));
    }

    if ((EventDialogControl() == gv_presidentalVote[7])) {
        gv_iamVotingFor[EventPlayer()] = 7;
        Wait(2.0, c_timeGame);
        UIDisplayMessage(gv_theEuroCrew, c_messageAreaSubtitle, (PlayerName(EventPlayer()) + (StringExternal("Param/Value/D0166231") + (IntToText(gv_votes[EventPlayer()]) + (StringExternal("Param/Value/38B106AE") + PlayerName(PlayerGroupPlayer(gv_theEuroCrew, 7)))))));
    }

    if ((EventDialogControl() == gv_presidentalVote[8])) {
        gv_iamVotingFor[EventPlayer()] = 8;
        Wait(2.0, c_timeGame);
        UIDisplayMessage(gv_theEuroCrew, c_messageAreaSubtitle, (PlayerName(EventPlayer()) + (StringExternal("Param/Value/EA25FF6F") + (IntToText(gv_votes[EventPlayer()]) + (StringExternal("Param/Value/0C799FB3") + PlayerName(PlayerGroupPlayer(gv_theEuroCrew, 8)))))));
    }

    if ((EventDialogControl() == gv_presidentalVote[9])) {
        gv_iamVotingFor[EventPlayer()] = 9;
        Wait(2.0, c_timeGame);
        UIDisplayMessage(gv_theEuroCrew, c_messageAreaSubtitle, (PlayerName(EventPlayer()) + (StringExternal("Param/Value/7C8AF0C2") + (IntToText(gv_votes[EventPlayer()]) + (StringExternal("Param/Value/F711013D") + PlayerName(PlayerGroupPlayer(gv_theEuroCrew, 9)))))));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PresidentalVote_Init () {
    gt_PresidentalVote = TriggerCreate("gt_PresidentalVote_Func");
    TriggerAddEventDialogControl(gt_PresidentalVote, c_playerAny, EventDialogControl(), c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Begin The Election!
//--------------------------------------------------------------------------------------------------
bool gt_BeginTheElection_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_repeatVariable;
    int lv_itishim;
    int lv_newPresident;
    int lv_highestBidder;

    // Automatic Variable Declarations
    unitgroup auto7B6397A9_g;
    int auto7B6397A9_u;
    unit auto7B6397A9_var;
    playergroup auto3782C040_g;
    int auto3782C040_var;
    unitgroup autoE7E12CAF_g;
    int autoE7E12CAF_u;
    unit autoE7E12CAF_var;
    playergroup auto50EF855A_g;
    int auto50EF855A_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        if ((gv_eUVoteInProgress > 0)) {
            Wait(2.0, c_timeGame);
        }
        else {
            gv_iamVotingFor[0] = 0;
            gv_iamVotingFor[1] = 0;
            gv_iamVotingFor[2] = 0;
            gv_iamVotingFor[3] = 0;
            gv_iamVotingFor[4] = 0;
            gv_iamVotingFor[5] = 0;
            gv_iamVotingFor[6] = 0;
            gv_iamVotingFor[7] = 0;
            gv_iamVotingFor[8] = 0;
            gv_iamVotingFor[9] = 0;
            gv_delegatedVotes[0] = 0;
            gv_delegatedVotes[1] = 0;
            gv_delegatedVotes[2] = 0;
            gv_delegatedVotes[3] = 0;
            gv_delegatedVotes[4] = 0;
            gv_delegatedVotes[5] = 0;
            gv_delegatedVotes[6] = 0;
            gv_delegatedVotes[7] = 0;
            gv_delegatedVotes[8] = 0;
            gv_delegatedVotes[9] = 0;
            lv_repeatVariable = 0;
            lv_newPresident = 0;
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/6B7F0BCC"));
            lv_highestBidder = 0;
            if ((gv_elections == 0)) {
                lv_newPresident = PlayerGroupPlayer(gv_theEuroCrew, RandomInt(1, PlayerGroupCount(gv_theEuroCrew)));
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (PlayerName(lv_newPresident) + StringExternal("Param/Value/A73B905C")));
                gv_mrPresident = lv_newPresident;
                auto7B6397A9_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                auto7B6397A9_u = UnitGroupCount(auto7B6397A9_g, c_unitCountAll);
                for (;; auto7B6397A9_u -= 1) {
                    auto7B6397A9_var = UnitGroupUnitFromEnd(auto7B6397A9_g, auto7B6397A9_u);
                    if (auto7B6397A9_var == null) { break; }
                    if ((UnitGetType(auto7B6397A9_var) == "EuropeanParliment")) {
                        UnitSetOwner(auto7B6397A9_var, gv_mrPresident, true);
                    }

                }
                break;
            }

            gv_eUVoteInProgress = 10000;
            DialogControlSetVisible(gv_presidentTime, PlayerGroupAll(), true);
            DialogControlSetVisible(gv_presidentalVote[1], PlayerGroupAll(), false);
            DialogControlSetVisible(gv_presidentalVote[2], PlayerGroupAll(), false);
            DialogControlSetVisible(gv_presidentalVote[3], PlayerGroupAll(), false);
            DialogControlSetVisible(gv_presidentalVote[4], PlayerGroupAll(), false);
            DialogControlSetVisible(gv_presidentalVote[5], PlayerGroupAll(), false);
            DialogControlSetVisible(gv_presidentalVote[6], PlayerGroupAll(), false);
            DialogControlSetVisible(gv_presidentalVote[7], PlayerGroupAll(), false);
            DialogControlSetVisible(gv_presidentalVote[8], PlayerGroupAll(), false);
            DialogControlSetVisible(gv_presidentalVote[9], PlayerGroupAll(), false);
            if ((PlayerGroupCount(gv_theEuroCrew) == 9)) {
                DialogControlSetVisible(gv_presidentalVote[1], PlayerGroupAll(), true);
                DialogControlSetVisible(gv_presidentalVote[2], PlayerGroupAll(), true);
                DialogControlSetVisible(gv_presidentalVote[3], PlayerGroupAll(), true);
                DialogControlSetVisible(gv_presidentalVote[4], PlayerGroupAll(), true);
                DialogControlSetVisible(gv_presidentalVote[5], PlayerGroupAll(), true);
                DialogControlSetVisible(gv_presidentalVote[6], PlayerGroupAll(), true);
                DialogControlSetVisible(gv_presidentalVote[7], PlayerGroupAll(), true);
                DialogControlSetVisible(gv_presidentalVote[8], PlayerGroupAll(), true);
                DialogControlSetVisible(gv_presidentalVote[9], PlayerGroupAll(), true);
            }

            if ((PlayerGroupCount(gv_theEuroCrew) == 8)) {
                DialogControlSetVisible(gv_presidentalVote[1], PlayerGroupAll(), true);
                DialogControlSetVisible(gv_presidentalVote[2], PlayerGroupAll(), true);
                DialogControlSetVisible(gv_presidentalVote[3], PlayerGroupAll(), true);
                DialogControlSetVisible(gv_presidentalVote[4], PlayerGroupAll(), true);
                DialogControlSetVisible(gv_presidentalVote[5], PlayerGroupAll(), true);
                DialogControlSetVisible(gv_presidentalVote[6], PlayerGroupAll(), true);
                DialogControlSetVisible(gv_presidentalVote[7], PlayerGroupAll(), true);
                DialogControlSetVisible(gv_presidentalVote[8], PlayerGroupAll(), true);
            }

            if ((PlayerGroupCount(gv_theEuroCrew) == 7)) {
                DialogControlSetVisible(gv_presidentalVote[1], PlayerGroupAll(), true);
                DialogControlSetVisible(gv_presidentalVote[2], PlayerGroupAll(), true);
                DialogControlSetVisible(gv_presidentalVote[3], PlayerGroupAll(), true);
                DialogControlSetVisible(gv_presidentalVote[4], PlayerGroupAll(), true);
                DialogControlSetVisible(gv_presidentalVote[5], PlayerGroupAll(), true);
                DialogControlSetVisible(gv_presidentalVote[6], PlayerGroupAll(), true);
                DialogControlSetVisible(gv_presidentalVote[7], PlayerGroupAll(), true);
            }

            if ((PlayerGroupCount(gv_theEuroCrew) == 6)) {
                DialogControlSetVisible(gv_presidentalVote[1], PlayerGroupAll(), true);
                DialogControlSetVisible(gv_presidentalVote[2], PlayerGroupAll(), true);
                DialogControlSetVisible(gv_presidentalVote[3], PlayerGroupAll(), true);
                DialogControlSetVisible(gv_presidentalVote[4], PlayerGroupAll(), true);
                DialogControlSetVisible(gv_presidentalVote[5], PlayerGroupAll(), true);
                DialogControlSetVisible(gv_presidentalVote[6], PlayerGroupAll(), true);
            }

            if ((PlayerGroupCount(gv_theEuroCrew) == 5)) {
                DialogControlSetVisible(gv_presidentalVote[1], PlayerGroupAll(), true);
                DialogControlSetVisible(gv_presidentalVote[2], PlayerGroupAll(), true);
                DialogControlSetVisible(gv_presidentalVote[3], PlayerGroupAll(), true);
                DialogControlSetVisible(gv_presidentalVote[4], PlayerGroupAll(), true);
                DialogControlSetVisible(gv_presidentalVote[5], PlayerGroupAll(), true);
            }

            if ((PlayerGroupCount(gv_theEuroCrew) == 4)) {
                DialogControlSetVisible(gv_presidentalVote[1], PlayerGroupAll(), true);
                DialogControlSetVisible(gv_presidentalVote[2], PlayerGroupAll(), true);
                DialogControlSetVisible(gv_presidentalVote[3], PlayerGroupAll(), true);
                DialogControlSetVisible(gv_presidentalVote[4], PlayerGroupAll(), true);
            }

            if ((PlayerGroupCount(gv_theEuroCrew) == 3)) {
                DialogControlSetVisible(gv_presidentalVote[1], PlayerGroupAll(), true);
                DialogControlSetVisible(gv_presidentalVote[2], PlayerGroupAll(), true);
                DialogControlSetVisible(gv_presidentalVote[3], PlayerGroupAll(), true);
            }

            if ((PlayerGroupCount(gv_theEuroCrew) == 2)) {
                DialogControlSetVisible(gv_presidentalVote[1], PlayerGroupAll(), true);
                DialogControlSetVisible(gv_presidentalVote[2], PlayerGroupAll(), true);
            }

            if ((PlayerGroupCount(gv_theEuroCrew) == 1)) {
                DialogControlSetVisible(gv_presidentalVote[1], PlayerGroupAll(), true);
            }

            if ((gv_elections == 1)) {
                DialogControlSetVisible(gv_presidentalVote[PlayerGroupPlayer(gv_theEuroCrew, gv_mrPresident)], PlayerGroupAll(), false);
            }

            DialogSetVisible(gv_eUScreen, gv_theEuroCrew, true);
            DialogControlSetEnabled(gv_mainDialogItemsUI[4], gv_theEuroCrew, true);
            libNtve_gf_SetDialogItemImage(gv_mainDialogItemsUI[1], "Military\\Music\\GameScreens\\v2\\MainUI\\3rdComp.tga", gv_theEuroCrew);
            DialogControlSetVisible(gv_openAdvancedEUUIButton[0], gv_theEuroCrew, false);
            DialogControlSetVisible(gv_openAdvancedEUUIButton[1], gv_theEuroCrew, true);
            Wait(55.0, c_timeGame);
            auto3782C040_g = gv_theEuroCrew;
            auto3782C040_var = -1;
            while (true) {
                auto3782C040_var = PlayerGroupNextPlayer(auto3782C040_g, auto3782C040_var);
                if (auto3782C040_var < 0) { break; }
                if ((gv_iamVotingFor[auto3782C040_var] == 1)) {
                    gv_delegatedVotes[PlayerGroupPlayer(gv_theEuroCrew, 1)] += gv_votes[auto3782C040_var];
                }

                if ((gv_iamVotingFor[auto3782C040_var] == 2)) {
                    gv_delegatedVotes[PlayerGroupPlayer(gv_theEuroCrew, 2)] += gv_votes[auto3782C040_var];
                }

                if ((gv_iamVotingFor[auto3782C040_var] == 3)) {
                    gv_delegatedVotes[PlayerGroupPlayer(gv_theEuroCrew, 3)] += gv_votes[auto3782C040_var];
                }

                if ((gv_iamVotingFor[auto3782C040_var] == 4)) {
                    gv_delegatedVotes[PlayerGroupPlayer(gv_theEuroCrew, 4)] += gv_votes[auto3782C040_var];
                }

                if ((gv_iamVotingFor[auto3782C040_var] == 5)) {
                    gv_delegatedVotes[PlayerGroupPlayer(gv_theEuroCrew, 5)] += gv_votes[auto3782C040_var];
                }

                if ((gv_iamVotingFor[auto3782C040_var] == 6)) {
                    gv_delegatedVotes[PlayerGroupPlayer(gv_theEuroCrew, 6)] += gv_votes[auto3782C040_var];
                }

                if ((gv_iamVotingFor[auto3782C040_var] == 7)) {
                    gv_delegatedVotes[PlayerGroupPlayer(gv_theEuroCrew, 7)] += gv_votes[auto3782C040_var];
                }

                if ((gv_iamVotingFor[auto3782C040_var] == 8)) {
                    gv_delegatedVotes[PlayerGroupPlayer(gv_theEuroCrew, 8)] += gv_votes[auto3782C040_var];
                }

                if ((gv_iamVotingFor[auto3782C040_var] == 9)) {
                    gv_delegatedVotes[PlayerGroupPlayer(gv_theEuroCrew, 9)] += gv_votes[auto3782C040_var];
                }

            }
            if ((PlayerGroupCount(gv_theEuroCrew) == 1)) {
                if ((gv_delegatedVotes[PlayerGroupPlayer(gv_theEuroCrew, 1)] > lv_highestBidder)) {
                    lv_newPresident = PlayerGroupPlayer(gv_theEuroCrew, 1);
                    lv_highestBidder = gv_delegatedVotes[PlayerGroupPlayer(gv_theEuroCrew, 1)];
                }

            }

            lv_highestBidder = 0;
            if ((gv_delegatedVotes[1] > lv_highestBidder)) {
                lv_newPresident = PlayerGroupPlayer(gv_theEuroCrew, 1);
                lv_highestBidder = gv_delegatedVotes[PlayerGroupPlayer(gv_theEuroCrew, 1)];
            }

            if ((gv_delegatedVotes[2] > lv_highestBidder)) {
                lv_newPresident = PlayerGroupPlayer(gv_theEuroCrew, 2);
                lv_highestBidder = gv_delegatedVotes[PlayerGroupPlayer(gv_theEuroCrew, 2)];
            }

            if ((gv_delegatedVotes[3] > lv_highestBidder)) {
                lv_newPresident = PlayerGroupPlayer(gv_theEuroCrew, 3);
                lv_highestBidder = gv_delegatedVotes[PlayerGroupPlayer(gv_theEuroCrew, 3)];
            }

            if ((gv_delegatedVotes[4] > lv_highestBidder)) {
                lv_newPresident = PlayerGroupPlayer(gv_theEuroCrew, 4);
                lv_highestBidder = gv_delegatedVotes[PlayerGroupPlayer(gv_theEuroCrew, 4)];
            }

            if ((gv_delegatedVotes[5] > lv_highestBidder)) {
                lv_newPresident = PlayerGroupPlayer(gv_theEuroCrew, 5);
                lv_highestBidder = gv_delegatedVotes[PlayerGroupPlayer(gv_theEuroCrew, 5)];
            }

            if ((gv_delegatedVotes[6] > lv_highestBidder)) {
                lv_newPresident = PlayerGroupPlayer(gv_theEuroCrew, 6);
                lv_highestBidder = gv_delegatedVotes[PlayerGroupPlayer(gv_theEuroCrew, 6)];
            }

            if ((gv_delegatedVotes[7] > lv_highestBidder)) {
                lv_newPresident = PlayerGroupPlayer(gv_theEuroCrew, 7);
                lv_highestBidder = gv_delegatedVotes[PlayerGroupPlayer(gv_theEuroCrew, 7)];
            }

            if ((gv_delegatedVotes[8] > lv_highestBidder)) {
                lv_newPresident = PlayerGroupPlayer(gv_theEuroCrew, 8);
                lv_highestBidder = gv_delegatedVotes[PlayerGroupPlayer(gv_theEuroCrew, 8)];
            }

            if ((gv_delegatedVotes[9] > lv_highestBidder)) {
                lv_newPresident = PlayerGroupPlayer(gv_theEuroCrew, 9);
                lv_highestBidder = gv_delegatedVotes[PlayerGroupPlayer(gv_theEuroCrew, 9)];
            }

            DialogControlSetVisible(gv_presidentTime, PlayerGroupAll(), false);
            if ((lv_highestBidder == 0)) {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (PlayerName(gv_mrPresident) + StringExternal("Param/Value/B5E1143C")));
                gv_eUVoteInProgress = 0;
                break;
            }

            if ((gv_mrPresident == PlayerGroupPlayer(gv_theEuroCrew, lv_newPresident))) {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (PlayerName(gv_mrPresident) + (StringExternal("Param/Value/D9963B60") + (IntToText(gv_delegatedVotes[lv_newPresident]) + StringExternal("Param/Value/B71BB295")))));
                gf_SetTimeline(0, (gf_NationOfPlayerString(gv_mrPresident) + " was re-elected to EU president"));
            }
            else {
                gv_mrPresident = PlayerGroupPlayer(gv_theEuroCrew, lv_newPresident);
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (PlayerName(gv_mrPresident) + (StringExternal("Param/Value/7261BF63") + (IntToText(gv_delegatedVotes[lv_newPresident]) + StringExternal("Param/Value/20213F4A")))));
                gf_SetTimeline(1, (gf_NationOfPlayerString(gv_mrPresident) + " was elected to EU president"));
            }
            autoE7E12CAF_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoE7E12CAF_u = UnitGroupCount(autoE7E12CAF_g, c_unitCountAll);
            for (;; autoE7E12CAF_u -= 1) {
                autoE7E12CAF_var = UnitGroupUnitFromEnd(autoE7E12CAF_g, autoE7E12CAF_u);
                if (autoE7E12CAF_var == null) { break; }
                if ((UnitGetType(autoE7E12CAF_var) == "EuropeanParliment")) {
                    UnitSetOwner(autoE7E12CAF_var, gv_mrPresident, true);
                    MinimapPing(PlayerGroupSingle(gv_mrPresident), UnitGetPosition(autoE7E12CAF_var), 2.4, Color(100.00, 0.00, 0.00));
                    UIDisplayMessage(PlayerGroupSingle(gv_mrPresident), c_messageAreaSubtitle, StringExternal("Param/Value/9DED3364"));
                    CameraPan(gv_mrPresident, UnitGetPosition(autoE7E12CAF_var), 2.0, -1, 50.0, false);
                }

            }
            gv_eUVoteInProgress = 0;
            auto50EF855A_g = gv_users;
            auto50EF855A_var = -1;
            while (true) {
                auto50EF855A_var = PlayerGroupNextPlayer(auto50EF855A_g, auto50EF855A_var);
                if (auto50EF855A_var < 0) { break; }
                DialogControlSetVisible(gv_presidentalVote[auto50EF855A_var], PlayerGroupAll(), false);
            }
            break;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BeginTheElection_Init () {
    gt_BeginTheElection = TriggerCreate("gt_BeginTheElection_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: EU Screen
//--------------------------------------------------------------------------------------------------
bool gt_EUScreen_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(1200, 500, c_anchorTopLeft, 150, 60, true);
    gv_eUScreen = DialogLastCreated();
    DialogSetImage(gv_eUScreen, "Assets\\Textures\\ui_scrollbar_frame.dds");
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 600, 80, c_anchorTopLeft, 140, 30, StringExternal("Param/Value/2D72F7AA"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 180, 80, c_anchorTopLeft, 40, 140, StringExternal("Param/Value/7370E6B2"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 3, 250, c_anchorTopLeft, 200, 140, StringToText(""), "Assets\\EU\\ArisBlackBox.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 170, 35, c_anchorTopLeft, 20, 185, StringExternal("Param/Value/0C1D8DB9"), StringExternal("Param/Value/51C714A3"), "");
    gv_votingLawUI[0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 170, 35, c_anchorTopLeft, 20, 225, StringExternal("Param/Value/72EC9ADB"), StringExternal("Param/Value/5E4C5C90"), "");
    gv_votingLawUI[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 170, 35, c_anchorTopLeft, 20, 265, StringExternal("Param/Value/D69EEFF5"), StringExternal("Param/Value/84F711D5"), "");
    gv_votingLawUI[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 170, 35, c_anchorTopLeft, 20, 305, StringExternal("Param/Value/5CF9CA12"), StringExternal("Param/Value/50B348D0"), "");
    gv_votingLawUI[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 170, 35, c_anchorTopLeft, 20, 345, StringExternal("Param/Value/B85034C1"), StringExternal("Param/Value/E096BC88"), "");
    gv_votingLawUI[4] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 180, 80, c_anchorTopLeft, 235, 140, StringExternal("Param/Value/8E9108D8"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 170, 35, c_anchorTopLeft, 220, 185, StringExternal("Param/Value/9A7DFB2D"), StringExternal("Param/Value/C6E177E9"), "");
    gv_electionLawUI[0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 170, 35, c_anchorTopLeft, 220, 225, StringExternal("Param/Value/08D8B97E"), StringExternal("Param/Value/CC593A69"), "");
    gv_electionLawUI[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 170, 35, c_anchorTopLeft, 220, 265, StringExternal("Param/Value/8AE9907E"), StringExternal("Param/Value/EBE7A338"), "");
    gv_electionLawUI[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 170, 35, c_anchorTopLeft, 220, 305, StringExternal("Param/Value/2F91124B"), StringExternal("Param/Value/4323D81E"), "");
    gv_electionLawUI[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 170, 35, c_anchorTopLeft, 220, 345, StringExternal("Param/Value/50E4483F"), StringExternal("Param/Value/C512751B"), "");
    gv_electionLawUI[4] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 170, 35, c_anchorTopLeft, 220, 385, StringExternal("Param/Value/A9C36778"), StringExternal("Param/Value/EB1CFF63"), "");
    gv_electionLawUI[5] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 3, 250, c_anchorTopLeft, 400, 140, StringToText(""), "Assets\\EU\\ArisBlackBox.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 180, 80, c_anchorTopLeft, 450, 140, StringExternal("Param/Value/1A7E430D"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 170, 35, c_anchorTopLeft, 420, 185, StringExternal("Param/Value/70ABFEE7"), StringExternal("Param/Value/BC9BF84A"), "");
    gv_taxLawUI[0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 170, 35, c_anchorTopLeft, 420, 225, StringExternal("Param/Value/C6B709BB"), StringExternal("Param/Value/E4771F6F"), "");
    gv_taxLawUI[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 170, 35, c_anchorTopLeft, 420, 265, StringExternal("Param/Value/69D1CF71"), StringExternal("Param/Value/BB71C9E1"), "");
    gv_taxLawUI[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 170, 35, c_anchorTopLeft, 420, 305, StringExternal("Param/Value/DAAE5CCB"), StringExternal("Param/Value/951F0939"), "");
    gv_taxLawUI[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 170, 35, c_anchorTopLeft, 420, 345, StringExternal("Param/Value/00BA3ABA"), StringExternal("Param/Value/462F3893"), "");
    gv_taxLawUI[4] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 3, 250, c_anchorTopLeft, 600, 140, StringToText(""), "Assets\\EU\\ArisBlackBox.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 180, 80, c_anchorTopLeft, 622, 140, StringExternal("Param/Value/C171A00F"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 170, 35, c_anchorTopLeft, 610, 185, StringExternal("Param/Value/DD407613"), StringExternal("Param/Value/9ED7DC09"), "");
    gv_redistributionLawUI[0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 170, 35, c_anchorTopLeft, 610, 225, StringExternal("Param/Value/46F3F468"), StringExternal("Param/Value/44338BA1"), "");
    gv_redistributionLawUI[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 170, 35, c_anchorTopLeft, 610, 265, StringExternal("Param/Value/6432A34A"), StringExternal("Param/Value/D401167E"), "");
    gv_redistributionLawUI[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 170, 35, c_anchorTopLeft, 610, 305, StringExternal("Param/Value/3244D222"), StringExternal("Param/Value/1C63E981"), "");
    gv_redistributionLawUI[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 170, 35, c_anchorTopLeft, 610, 345, StringExternal("Param/Value/D82144E6"), StringExternal("Param/Value/E85897A2"), "");
    gv_redistributionLawUI[4] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 150, 50, c_anchorTopLeft, 821, 146, StringExternal("Param/Value/B5C5BDD3"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 3, 350, c_anchorTopLeft, 800, 140, StringToText(""), "Assets\\EU\\ArisBlackBox.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 150, 50, c_anchorTopLeft, 820, 185, StringExternal("Param/Value/1B61435E"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_eUMemberlist[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 150, 50, c_anchorTopLeft, 820, 225, StringToText(""), Color(0.00, 0.00, 0.00), false, 2.0);
    gv_eUMemberlist[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 150, 50, c_anchorTopLeft, 820, 265, StringToText(""), Color(0.00, 0.00, 0.00), false, 2.0);
    gv_eUMemberlist[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 150, 50, c_anchorTopLeft, 820, 305, StringToText(""), Color(0.00, 0.00, 0.00), false, 2.0);
    gv_eUMemberlist[4] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 150, 50, c_anchorTopLeft, 820, 345, StringToText(""), Color(0.00, 0.00, 0.00), false, 2.0);
    gv_eUMemberlist[5] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 150, 50, c_anchorTopLeft, 820, 385, StringToText(""), Color(0.00, 0.00, 0.00), false, 2.0);
    gv_eUMemberlist[6] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 150, 50, c_anchorTopLeft, 820, 425, StringToText(""), Color(0.00, 0.00, 0.00), false, 2.0);
    gv_eUMemberlist[7] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 150, 50, c_anchorTopLeft, 820, 465, StringToText(""), Color(0.00, 0.00, 0.00), false, 2.0);
    gv_eUMemberlist[8] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 150, 50, c_anchorTopLeft, 820, 505, StringToText(""), Color(0.00, 0.00, 0.00), false, 2.0);
    gv_eUMemberlist[9] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 150, 50, c_anchorTopLeft, 960, 146, StringExternal("Param/Value/589448E6"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 150, 50, c_anchorTopLeft, 970, 185, StringToText(""), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_eUVoteslist[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 150, 50, c_anchorTopLeft, 970, 225, StringToText(""), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_eUVoteslist[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 150, 50, c_anchorTopLeft, 970, 265, StringToText(""), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_eUVoteslist[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 150, 50, c_anchorTopLeft, 970, 305, StringToText(""), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_eUVoteslist[4] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 150, 50, c_anchorTopLeft, 970, 345, StringToText(""), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_eUVoteslist[5] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 150, 50, c_anchorTopLeft, 970, 385, StringToText(""), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_eUVoteslist[6] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 150, 50, c_anchorTopLeft, 970, 425, StringToText(""), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_eUVoteslist[7] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 150, 50, c_anchorTopLeft, 970, 465, StringToText(""), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_eUVoteslist[8] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 150, 50, c_anchorTopLeft, 970, 505, StringToText(""), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_eUVoteslist[9] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 1099, 50, c_anchorTopLeft, 1050, 146, StringExternal("Param/Value/C9CDC56D"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_presidentTime = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 80, 40, c_anchorTopLeft, 1048, 175, StringToText(""), StringExternal("Param/Value/B33DB176"), "");
    gv_presidentalVote[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 80, 40, c_anchorTopLeft, 1048, 215, StringToText(""), StringExternal("Param/Value/5946303B"), "");
    gv_presidentalVote[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 80, 40, c_anchorTopLeft, 1048, 255, StringToText(""), StringExternal("Param/Value/E25C8AF7"), "");
    gv_presidentalVote[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 80, 40, c_anchorTopLeft, 1048, 295, StringToText(""), StringExternal("Param/Value/9BA1FA7E"), "");
    gv_presidentalVote[4] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 80, 40, c_anchorTopLeft, 1048, 335, StringToText(""), StringExternal("Param/Value/C511D69D"), "");
    gv_presidentalVote[5] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 80, 40, c_anchorTopLeft, 1048, 375, StringToText(""), StringExternal("Param/Value/06EA516B"), "");
    gv_presidentalVote[6] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 80, 40, c_anchorTopLeft, 1048, 415, StringToText(""), StringExternal("Param/Value/912E50D4"), "");
    gv_presidentalVote[7] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 80, 40, c_anchorTopLeft, 1048, 455, StringToText(""), StringExternal("Param/Value/E067E219"), "");
    gv_presidentalVote[8] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 80, 40, c_anchorTopLeft, 1048, 495, StringToText(""), StringExternal("Param/Value/987081E2"), "");
    gv_presidentalVote[9] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 250, 50, c_anchorTopLeft, 165, 72, StringExternal("Param/Value/9368E31D"), Color(150*100/255,150*100/255,30*100/255), false, 2.0);
    gv_presidentalUI = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 250, 50, c_anchorTopLeft, 420, 72, StringExternal("Param/Value/82D56F38"), Color(150*100/255,150*100/255,30*100/255), false, 2.0);
    gv_nextElectionUI = DialogControlLastCreated();
    DialogControlSetVisible(gv_presidentalVote[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_presidentalVote[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_presidentalVote[3], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_presidentalVote[4], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_presidentalVote[5], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_presidentalVote[6], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_presidentalVote[7], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_presidentalVote[8], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_presidentalVote[9], PlayerGroupAll(), false);
    DialogControlSetEnabled(gv_electionLawUI[5], PlayerGroupAll(), false);
    DialogControlSetEnabled(gv_electionLawUI[2], PlayerGroupAll(), false);
    DialogControlSetEnabled(gv_votingLawUI[2], PlayerGroupAll(), false);
    DialogControlSetEnabled(gv_taxLawUI[1], PlayerGroupAll(), false);
    DialogControlSetEnabled(gv_redistributionLawUI[4], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_presidentTime, PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EUScreen_Init () {
    gt_EUScreen = TriggerCreate("gt_EUScreen_Func");
    TriggerAddEventMapInit(gt_EUScreen);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Lets Refresh Votes
//--------------------------------------------------------------------------------------------------
bool gt_LetsRefreshVotes_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_totalVotes;
    fixed[10] lv_percentageoftheVote;

    // Automatic Variable Declarations
    playergroup auto5E917584_g;
    int auto5E917584_var;
    playergroup auto2617A65F_g;
    int auto2617A65F_var;
    playergroup auto2DC42BA2_g;
    int auto2DC42BA2_var;
    playergroup auto73D4F4B8_g;
    int auto73D4F4B8_var;
    playergroup autoB580C54C_g;
    int autoB580C54C_var;
    playergroup autoEF52A557_g;
    int autoEF52A557_var;
    playergroup autoFF1A02ED_g;
    int autoFF1A02ED_var;
    playergroup auto49EDA65B_g;
    int auto49EDA65B_var;
    playergroup auto10DAB963_g;
    int auto10DAB963_var;
    playergroup auto61D1BBB8_g;
    int auto61D1BBB8_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        if ((gv_eUVoteInProgress == 0)) {
            gv_possibleVotes = 0;
            auto5E917584_g = gv_users;
            auto5E917584_var = -1;
            while (true) {
                auto5E917584_var = PlayerGroupNextPlayer(auto5E917584_g, auto5E917584_var);
                if (auto5E917584_var < 0) { break; }
                lv_totalVotes = 0;
                lv_percentageoftheVote[auto5E917584_var] = 0.0;
                gv_votes[auto5E917584_var] = 0;
            }
            if ((gv_votingSystem == 0)) {
                gv_votes[gv_mrPresident] = PlayerGroupCount(gv_theEuroCrew);
                if ((gv_votes[gv_mrPresident] > 1)) {
                    gv_votes[gv_mrPresident] -= 2;
                }

                auto2617A65F_g = gv_theEuroCrew;
                auto2617A65F_var = -1;
                while (true) {
                    auto2617A65F_var = PlayerGroupNextPlayer(auto2617A65F_g, auto2617A65F_var);
                    if (auto2617A65F_var < 0) { break; }
                    gv_votes[auto2617A65F_var] += 1;
                }
            }

            if ((gv_votingSystem == 1)) {
                auto2DC42BA2_g = gv_theEuroCrew;
                auto2DC42BA2_var = -1;
                while (true) {
                    auto2DC42BA2_var = PlayerGroupNextPlayer(auto2DC42BA2_g, auto2DC42BA2_var);
                    if (auto2DC42BA2_var < 0) { break; }
                    gv_votes[auto2DC42BA2_var] = (gv_population[auto2DC42BA2_var] / 10);
                }
            }

            if ((gv_votingSystem == 2)) {
                gv_eUPopulation = 0;
                auto73D4F4B8_g = gv_theEuroCrew;
                auto73D4F4B8_var = -1;
                while (true) {
                    auto73D4F4B8_var = PlayerGroupNextPlayer(auto73D4F4B8_g, auto73D4F4B8_var);
                    if (auto73D4F4B8_var < 0) { break; }
                    gv_eUPopulation += gv_population[auto73D4F4B8_var];
                }
                autoB580C54C_g = gv_theEuroCrew;
                autoB580C54C_var = -1;
                while (true) {
                    autoB580C54C_var = PlayerGroupNextPlayer(autoB580C54C_g, autoB580C54C_var);
                    if (autoB580C54C_var < 0) { break; }
                    lv_percentageoftheVote[autoB580C54C_var] = (IntToFixed(gv_population[autoB580C54C_var]) / IntToFixed(gv_eUPopulation));
                    if ((lv_percentageoftheVote[autoB580C54C_var] > 0.33) && (PlayerGroupCount(gv_theEuroCrew) >= 3)) {
                        lv_percentageoftheVote[autoB580C54C_var] = 0.33;
                    }

                    gv_votes[autoB580C54C_var] = FixedToInt((lv_percentageoftheVote[autoB580C54C_var] * IntToFixed(100)));
                }
                autoEF52A557_g = gv_theEuroCrew;
                autoEF52A557_var = -1;
                while (true) {
                    autoEF52A557_var = PlayerGroupNextPlayer(autoEF52A557_g, autoEF52A557_var);
                    if (autoEF52A557_var < 0) { break; }
                    lv_totalVotes += gv_votes[autoEF52A557_var];
                }
                if ((lv_totalVotes > 100)) {
                    while (true) {
                        auto49EDA65B_g = gv_theEuroCrew;
                        auto49EDA65B_var = -1;
                        while (true) {
                            auto49EDA65B_var = PlayerGroupNextPlayer(auto49EDA65B_g, auto49EDA65B_var);
                            if (auto49EDA65B_var < 0) { break; }
                            if ((lv_totalVotes <= 100)) {
                                break;
                            }
                            else {
                                lv_totalVotes -= 1;
                                gv_votes[auto49EDA65B_var] -= 1;
                            }
                            if ((lv_totalVotes > 100)) {
                                if ((gv_votes[auto49EDA65B_var] < 33)) {
                                    lv_totalVotes += 3;
                                    gv_votes[auto49EDA65B_var] += 3;
                                }
                                else {
                                    gv_votes[auto49EDA65B_var] += 1;
                                    lv_totalVotes += 1;
                                }
                            }
                            else {
                                break;
                            }
                        }
                    }
                }
                else {
                    autoFF1A02ED_g = gv_theEuroCrew;
                    autoFF1A02ED_var = -1;
                    while (true) {
                        autoFF1A02ED_var = PlayerGroupNextPlayer(autoFF1A02ED_g, autoFF1A02ED_var);
                        if (autoFF1A02ED_var < 0) { break; }
                        if ((gv_votes[autoFF1A02ED_var] < 0)) {
                            gv_votes[autoFF1A02ED_var] = 0;
                        }

                        gv_votes[autoFF1A02ED_var] += 1;
                        lv_totalVotes += 1;
                    }
                }
            }

            if ((gv_votingSystem == 3)) {
                auto10DAB963_g = gv_theEuroCrew;
                auto10DAB963_var = -1;
                while (true) {
                    auto10DAB963_var = PlayerGroupNextPlayer(auto10DAB963_g, auto10DAB963_var);
                    if (auto10DAB963_var < 0) { break; }
                    gv_votes[auto10DAB963_var] = 1;
                }
            }

            if ((gv_votingSystem == 4)) {
                gv_votes[gv_mrPresident] = 1;
            }

            auto61D1BBB8_g = gv_theEuroCrew;
            auto61D1BBB8_var = -1;
            while (true) {
                auto61D1BBB8_var = PlayerGroupNextPlayer(auto61D1BBB8_g, auto61D1BBB8_var);
                if (auto61D1BBB8_var < 0) { break; }
                gv_possibleVotes += gv_votes[auto61D1BBB8_var];
            }
            break;
        }
        else {
            Wait(5.0, c_timeGame);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LetsRefreshVotes_Init () {
    gt_LetsRefreshVotes = TriggerCreate("gt_LetsRefreshVotes_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Trigger Vote
//--------------------------------------------------------------------------------------------------
bool gt_TriggerVote_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_repeat;

    // Automatic Variable Declarations
    const int auto179E85CA_n = 5;
    int auto179E85CA_i;
    playergroup auto6F24DAB1_g;
    int auto6F24DAB1_var;
    playergroup autoB0A06D47_g;
    int autoB0A06D47_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventPlayer() == gv_mrPresident))) {
            return false;
        }

        if (!((gv_theEUEvent[0] == 0))) {
            return false;
        }

        if (!((gv_theEUEvent[1] == 0))) {
            return false;
        }

        if (!((gv_theEUEvent[2] == 0))) {
            return false;
        }

        if (!((gv_theEUEvent[3] == 0))) {
            return false;
        }

        if (!((gv_theEUEvent[4] == 0))) {
            return false;
        }

        if (!((gv_theEUEvent[5] == 0))) {
            return false;
        }

        if (!((gv_theEUEvent[6] == 0))) {
            return false;
        }

        if (!((gv_theEUEvent[7] == 0))) {
            return false;
        }

        if (!((gv_theEUEvent[8] == 0))) {
            return false;
        }

        if (!((gv_theEUEvent[9] == 0))) {
            return false;
        }

        if (!((gv_theEUEvent[10] == 0))) {
            return false;
        }

        if (!((gv_eUVoteInProgress == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_repeat = 0;
    for (auto179E85CA_i = 1; auto179E85CA_i <= auto179E85CA_n; auto179E85CA_i += 1) {
        if (((EventDialogControl() == gv_votingLawUI[lv_repeat]) || (EventDialogControl() == gv_electionLawUI[lv_repeat]) || (EventDialogControl() == gv_taxLawUI[lv_repeat]) || (EventDialogControl() == gv_redistributionLawUI[lv_repeat]))) {
            TriggerExecute(gt_CountVotes, false, false);
        }
        else {
            lv_repeat += 1;
        }
    }
    if ((EventDialogControl() == gv_votingLawUI[0])) {
        gv_yesVotes = 0;
        gv_eUVoteInProgress = 1;
        libNtve_gf_SetDialogItemText(gv_eUDialogItems[0], StringExternal("Param/Value/F62604A4"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemText(gv_eUDialogItems[1], StringExternal("Param/Value/84120DA3"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemTooltip(gv_eUDialogItems[1], StringExternal("Param/Value/F449FC2F"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemText(gv_eUDialogItems[2], StringExternal("Param/Value/123A4CB8"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemTooltip(gv_eUDialogItems[2], StringExternal("Param/Value/73EB8C60"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemText(gv_eUDialogItems[3], (StringExternal("Param/Value/8D9F39FB") + (PlayerName(EventPlayer()) + (StringExternal("Param/Value/7C6F776F") + StringToText("")))), gv_theEuroCrew);
        DialogSetVisible(gv_eUDialog, gv_theEuroCrew, true);
        Wait(40.0, c_timeGame);
        DialogSetVisible(gv_eUDialog, gv_theEuroCrew, false);
        if ((gv_yesVotes > (gv_possibleVotes / 2))) {
            TriggerExecute(gt_LetsRefreshVotes, true, false);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/557BF95E") + (IntToText(gv_yesVotes) + (StringExternal("Param/Value/5BE783F2") + IntToText((gv_possibleVotes - gv_yesVotes))))));
            gv_votingSystem = 0;
            DialogControlSetEnabled(gv_votingLawUI[0], PlayerGroupAll(), false);
            DialogControlSetEnabled(gv_votingLawUI[1], PlayerGroupAll(), true);
            DialogControlSetEnabled(gv_votingLawUI[2], PlayerGroupAll(), true);
            DialogControlSetEnabled(gv_votingLawUI[3], PlayerGroupAll(), true);
            DialogControlSetEnabled(gv_votingLawUI[4], PlayerGroupAll(), true);
        }
        else {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/3695F744") + (IntToText(gv_yesVotes) + (StringExternal("Param/Value/0A10C687") + IntToText((gv_possibleVotes - gv_yesVotes))))));
        }
        gv_eUVoteInProgress = 0;
    }

    if ((EventDialogControl() == gv_votingLawUI[1])) {
        gv_yesVotes = 0;
        gv_eUVoteInProgress = 2;
        libNtve_gf_SetDialogItemText(gv_eUDialogItems[0], StringExternal("Param/Value/1D70CE3B"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemText(gv_eUDialogItems[1], StringExternal("Param/Value/3D11BF75"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemTooltip(gv_eUDialogItems[1], StringExternal("Param/Value/054B8CE8"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemText(gv_eUDialogItems[2], StringExternal("Param/Value/EA3FE138"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemTooltip(gv_eUDialogItems[2], StringExternal("Param/Value/251413BE"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemText(gv_eUDialogItems[3], (StringExternal("Param/Value/F95E9C96") + (PlayerName(EventPlayer()) + (StringExternal("Param/Value/9623F795") + StringToText("")))), gv_theEuroCrew);
        DialogSetVisible(gv_eUDialog, gv_theEuroCrew, true);
        Wait(40.0, c_timeGame);
        DialogSetVisible(gv_eUDialog, gv_theEuroCrew, false);
        if ((gv_yesVotes > (gv_possibleVotes / 2))) {
            TriggerExecute(gt_LetsRefreshVotes, true, false);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/71DF822A") + (IntToText(gv_yesVotes) + (StringExternal("Param/Value/3134C504") + IntToText((gv_possibleVotes - gv_yesVotes))))));
            gv_votingSystem = 1;
            DialogControlSetEnabled(gv_votingLawUI[0], PlayerGroupAll(), true);
            DialogControlSetEnabled(gv_votingLawUI[1], PlayerGroupAll(), false);
            DialogControlSetEnabled(gv_votingLawUI[2], PlayerGroupAll(), true);
            DialogControlSetEnabled(gv_votingLawUI[3], PlayerGroupAll(), true);
            DialogControlSetEnabled(gv_votingLawUI[4], PlayerGroupAll(), true);
        }
        else {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/60E92550") + (IntToText(gv_yesVotes) + (StringExternal("Param/Value/7D64F113") + IntToText((gv_possibleVotes - gv_yesVotes))))));
        }
        gv_eUVoteInProgress = 0;
    }

    if ((EventDialogControl() == gv_votingLawUI[2])) {
        gv_yesVotes = 0;
        gv_eUVoteInProgress = 2;
        libNtve_gf_SetDialogItemText(gv_eUDialogItems[0], StringExternal("Param/Value/D8F6A8F2"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemText(gv_eUDialogItems[1], StringExternal("Param/Value/C4ECC044"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemTooltip(gv_eUDialogItems[1], StringExternal("Param/Value/71D3638E"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemText(gv_eUDialogItems[2], StringExternal("Param/Value/015363FE"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemTooltip(gv_eUDialogItems[2], StringExternal("Param/Value/36E57618"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemText(gv_eUDialogItems[3], (StringExternal("Param/Value/1F0163CB") + (PlayerName(EventPlayer()) + (StringExternal("Param/Value/5014E6CA") + StringToText("")))), gv_theEuroCrew);
        DialogSetVisible(gv_eUDialog, gv_theEuroCrew, true);
        Wait(40.0, c_timeGame);
        DialogSetVisible(gv_eUDialog, gv_theEuroCrew, false);
        if ((gv_yesVotes > (gv_possibleVotes / 2))) {
            TriggerExecute(gt_LetsRefreshVotes, true, false);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/649E1D02") + (IntToText(gv_yesVotes) + (StringExternal("Param/Value/6CE80755") + IntToText((gv_possibleVotes - gv_yesVotes))))));
            gv_votingSystem = 2;
            DialogControlSetEnabled(gv_votingLawUI[0], PlayerGroupAll(), true);
            DialogControlSetEnabled(gv_votingLawUI[1], PlayerGroupAll(), true);
            DialogControlSetEnabled(gv_votingLawUI[2], PlayerGroupAll(), false);
            DialogControlSetEnabled(gv_votingLawUI[3], PlayerGroupAll(), true);
            DialogControlSetEnabled(gv_votingLawUI[4], PlayerGroupAll(), true);
        }
        else {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/9AB5BC9D") + (IntToText(gv_yesVotes) + (StringExternal("Param/Value/C8121141") + IntToText((gv_possibleVotes - gv_yesVotes))))));
        }
        gv_eUVoteInProgress = 0;
    }

    if ((EventDialogControl() == gv_votingLawUI[3])) {
        gv_yesVotes = 0;
        gv_eUVoteInProgress = 2;
        libNtve_gf_SetDialogItemText(gv_eUDialogItems[0], StringExternal("Param/Value/46572A45"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemText(gv_eUDialogItems[1], StringExternal("Param/Value/48963E0B"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemTooltip(gv_eUDialogItems[1], StringExternal("Param/Value/D5CC0756"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemText(gv_eUDialogItems[2], StringExternal("Param/Value/0A1A76C0"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemTooltip(gv_eUDialogItems[2], StringExternal("Param/Value/8B478FCE"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemText(gv_eUDialogItems[3], (StringExternal("Param/Value/3B32C3D2") + (PlayerName(EventPlayer()) + (StringExternal("Param/Value/0A2B60F6") + StringToText("")))), gv_theEuroCrew);
        DialogSetVisible(gv_eUDialog, gv_theEuroCrew, true);
        Wait(40.0, c_timeGame);
        DialogSetVisible(gv_eUDialog, gv_theEuroCrew, false);
        if ((gv_yesVotes > (gv_possibleVotes / 2))) {
            TriggerExecute(gt_LetsRefreshVotes, true, false);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/D575E2F2") + (IntToText(gv_yesVotes) + (StringExternal("Param/Value/53DD76A5") + IntToText((gv_possibleVotes - gv_yesVotes))))));
            gv_votingSystem = 3;
            DialogControlSetEnabled(gv_votingLawUI[0], PlayerGroupAll(), true);
            DialogControlSetEnabled(gv_votingLawUI[1], PlayerGroupAll(), true);
            DialogControlSetEnabled(gv_votingLawUI[2], PlayerGroupAll(), true);
            DialogControlSetEnabled(gv_votingLawUI[3], PlayerGroupAll(), false);
            DialogControlSetEnabled(gv_votingLawUI[4], PlayerGroupAll(), true);
        }
        else {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/5FAE236F") + (IntToText(gv_yesVotes) + (StringExternal("Param/Value/404D9D4B") + IntToText((gv_possibleVotes - gv_yesVotes))))));
        }
        gv_eUVoteInProgress = 0;
    }

    if ((EventDialogControl() == gv_votingLawUI[4])) {
        gv_yesVotes = 0;
        gv_eUVoteInProgress = 2;
        libNtve_gf_SetDialogItemText(gv_eUDialogItems[0], StringExternal("Param/Value/1BF530D0"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemText(gv_eUDialogItems[1], StringExternal("Param/Value/31EC419F"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemTooltip(gv_eUDialogItems[1], StringExternal("Param/Value/A125930A"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemText(gv_eUDialogItems[2], StringExternal("Param/Value/10C27468"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemTooltip(gv_eUDialogItems[2], (StringExternal("Param/Value/AD0CBE12") + (PlayerName(gv_mrPresident) + StringExternal("Param/Value/B9290620"))), gv_theEuroCrew);
        libNtve_gf_SetDialogItemText(gv_eUDialogItems[3], (StringExternal("Param/Value/9711FC8A") + (PlayerName(EventPlayer()) + (StringExternal("Param/Value/CBE3343A") + StringToText("")))), gv_theEuroCrew);
        DialogSetVisible(gv_eUDialog, gv_theEuroCrew, true);
        Wait(40.0, c_timeGame);
        DialogSetVisible(gv_eUDialog, gv_theEuroCrew, false);
        if ((gv_yesVotes > (gv_possibleVotes / 2))) {
            TriggerExecute(gt_LetsRefreshVotes, true, false);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/DF8E116F") + (IntToText(gv_yesVotes) + (StringExternal("Param/Value/B83B21E6") + IntToText((gv_possibleVotes - gv_yesVotes))))));
            gv_votingSystem = 4;
            DialogControlSetEnabled(gv_votingLawUI[0], PlayerGroupAll(), true);
            DialogControlSetEnabled(gv_votingLawUI[1], PlayerGroupAll(), true);
            DialogControlSetEnabled(gv_votingLawUI[2], PlayerGroupAll(), true);
            DialogControlSetEnabled(gv_votingLawUI[3], PlayerGroupAll(), true);
            DialogControlSetEnabled(gv_votingLawUI[4], PlayerGroupAll(), false);
        }
        else {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/8C3D2E79") + (IntToText(gv_yesVotes) + (StringExternal("Param/Value/8855C41A") + IntToText((gv_possibleVotes - gv_yesVotes))))));
        }
        gv_eUVoteInProgress = 0;
    }

    if ((EventDialogControl() == gv_electionLawUI[0])) {
        gv_yesVotes = 0;
        gv_eUVoteInProgress = 16;
        libNtve_gf_SetDialogItemText(gv_eUDialogItems[0], StringExternal("Param/Value/FCD9DAE7"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemText(gv_eUDialogItems[1], StringExternal("Param/Value/A0CE5D99"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemTooltip(gv_eUDialogItems[1], StringExternal("Param/Value/B14D52D0"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemText(gv_eUDialogItems[2], StringExternal("Param/Value/81579611"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemTooltip(gv_eUDialogItems[2], StringExternal("Param/Value/E3ADA6AB"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemText(gv_eUDialogItems[3], (StringExternal("Param/Value/0F6D6065") + (PlayerName(EventPlayer()) + (StringExternal("Param/Value/C5198019") + StringToText("")))), gv_theEuroCrew);
        DialogSetVisible(gv_eUDialog, gv_theEuroCrew, true);
        Wait(40.0, c_timeGame);
        DialogSetVisible(gv_eUDialog, gv_theEuroCrew, false);
        if ((gv_yesVotes > (gv_possibleVotes / 2))) {
            TriggerExecute(gt_LetsRefreshVotes, true, false);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/A35B71DE") + (IntToText(gv_yesVotes) + (StringExternal("Param/Value/0D9AE614") + IntToText((gv_possibleVotes - gv_yesVotes))))));
            gv_elections = 0;
            DialogControlSetEnabled(gv_electionLawUI[0], PlayerGroupAll(), false);
            DialogControlSetEnabled(gv_electionLawUI[1], PlayerGroupAll(), true);
            DialogControlSetEnabled(gv_electionLawUI[2], PlayerGroupAll(), true);
            DialogControlSetEnabled(gv_electionLawUI[3], PlayerGroupAll(), true);
            DialogControlSetEnabled(gv_electionLawUI[4], PlayerGroupAll(), true);
            if ((gv_yearsUntillVote > 4)) {
                gv_yearsUntillVote = 4;
            }

        }
        else {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/94D49019") + (IntToText(gv_yesVotes) + (StringExternal("Param/Value/F5AB39C7") + IntToText((gv_possibleVotes - gv_yesVotes))))));
        }
        gv_eUVoteInProgress = 0;
    }

    if ((EventDialogControl() == gv_electionLawUI[1])) {
        gv_yesVotes = 0;
        gv_eUVoteInProgress = 17;
        libNtve_gf_SetDialogItemText(gv_eUDialogItems[0], StringExternal("Param/Value/3C138430"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemText(gv_eUDialogItems[1], StringExternal("Param/Value/54B6614C"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemTooltip(gv_eUDialogItems[1], StringExternal("Param/Value/925218DB"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemText(gv_eUDialogItems[2], StringExternal("Param/Value/BACFE9EA"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemTooltip(gv_eUDialogItems[2], StringExternal("Param/Value/CFC7269D"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemText(gv_eUDialogItems[3], (StringExternal("Param/Value/C67C1FA5") + (PlayerName(EventPlayer()) + (StringExternal("Param/Value/C18FD468") + StringToText("")))), gv_theEuroCrew);
        DialogSetVisible(gv_eUDialog, gv_theEuroCrew, true);
        if ((gv_yearsUntillVote > 4)) {
            gv_yearsUntillVote = 4;
        }

        Wait(40.0, c_timeGame);
        DialogSetVisible(gv_eUDialog, gv_theEuroCrew, false);
        if ((gv_yesVotes > (gv_possibleVotes / 2))) {
            TriggerExecute(gt_LetsRefreshVotes, true, false);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/2C0FC580") + (IntToText(gv_yesVotes) + (StringExternal("Param/Value/66717F09") + IntToText((gv_possibleVotes - gv_yesVotes))))));
            gv_elections = 1;
            DialogControlSetEnabled(gv_electionLawUI[0], PlayerGroupAll(), true);
            DialogControlSetEnabled(gv_electionLawUI[1], PlayerGroupAll(), false);
            DialogControlSetEnabled(gv_electionLawUI[2], PlayerGroupAll(), true);
            DialogControlSetEnabled(gv_electionLawUI[3], PlayerGroupAll(), true);
            DialogControlSetEnabled(gv_electionLawUI[4], PlayerGroupAll(), true);
            DialogControlSetEnabled(gv_electionLawUI[5], PlayerGroupAll(), false);
            if ((gv_yearsUntillVote > 4)) {
                gv_yearsUntillVote = 4;
            }

        }
        else {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/670B679E") + (IntToText(gv_yesVotes) + (StringExternal("Param/Value/2A1349C4") + IntToText((gv_possibleVotes - gv_yesVotes))))));
        }
        gv_eUVoteInProgress = 0;
    }

    if ((EventDialogControl() == gv_electionLawUI[2])) {
        gv_yesVotes = 0;
        gv_eUVoteInProgress = 18;
        libNtve_gf_SetDialogItemText(gv_eUDialogItems[0], StringExternal("Param/Value/769E1B74"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemText(gv_eUDialogItems[1], StringExternal("Param/Value/2641356F"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemTooltip(gv_eUDialogItems[1], StringExternal("Param/Value/6F7EDD37"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemText(gv_eUDialogItems[2], StringExternal("Param/Value/F84DE81C"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemTooltip(gv_eUDialogItems[2], StringExternal("Param/Value/10CE50D4"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemText(gv_eUDialogItems[3], (StringExternal("Param/Value/D2C257DB") + (PlayerName(EventPlayer()) + (StringExternal("Param/Value/1E126546") + StringToText("")))), gv_theEuroCrew);
        DialogSetVisible(gv_eUDialog, gv_theEuroCrew, true);
        Wait(40.0, c_timeGame);
        DialogSetVisible(gv_eUDialog, gv_theEuroCrew, false);
        if ((gv_yesVotes > (gv_possibleVotes / 2))) {
            TriggerExecute(gt_LetsRefreshVotes, true, false);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/9C512441") + (IntToText(gv_yesVotes) + (StringExternal("Param/Value/EA05E3FC") + IntToText((gv_possibleVotes - gv_yesVotes))))));
            gv_elections = 2;
            DialogControlSetEnabled(gv_electionLawUI[0], PlayerGroupAll(), true);
            DialogControlSetEnabled(gv_electionLawUI[1], PlayerGroupAll(), true);
            DialogControlSetEnabled(gv_electionLawUI[2], PlayerGroupAll(), false);
            DialogControlSetEnabled(gv_electionLawUI[3], PlayerGroupAll(), true);
            DialogControlSetEnabled(gv_electionLawUI[4], PlayerGroupAll(), true);
            DialogControlSetEnabled(gv_electionLawUI[5], PlayerGroupAll(), false);
            if ((gv_yearsUntillVote > 4)) {
                gv_yearsUntillVote = 4;
            }

        }
        else {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/8D4502F5") + (IntToText(gv_yesVotes) + (StringExternal("Param/Value/2758628B") + IntToText((gv_possibleVotes - gv_yesVotes))))));
        }
        gv_eUVoteInProgress = 0;
    }

    if ((EventDialogControl() == gv_electionLawUI[3])) {
        gv_yesVotes = 0;
        gv_eUVoteInProgress = 19;
        libNtve_gf_SetDialogItemText(gv_eUDialogItems[0], StringExternal("Param/Value/FCDC3C2F"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemText(gv_eUDialogItems[1], StringExternal("Param/Value/42BAC348"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemTooltip(gv_eUDialogItems[1], StringExternal("Param/Value/7FA97C99"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemText(gv_eUDialogItems[2], StringExternal("Param/Value/5EB45A91"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemTooltip(gv_eUDialogItems[2], StringExternal("Param/Value/FE401C08"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemText(gv_eUDialogItems[3], (StringExternal("Param/Value/CA156F6F") + (PlayerName(EventPlayer()) + (StringExternal("Param/Value/3ADD03E9") + StringToText("")))), gv_theEuroCrew);
        DialogSetVisible(gv_eUDialog, gv_theEuroCrew, true);
        Wait(40.0, c_timeGame);
        DialogSetVisible(gv_eUDialog, gv_theEuroCrew, false);
        if ((gv_yesVotes > (gv_possibleVotes / 2))) {
            TriggerExecute(gt_LetsRefreshVotes, true, false);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/2717DF8F") + (IntToText(gv_yesVotes) + (StringExternal("Param/Value/0D7770D0") + IntToText((gv_possibleVotes - gv_yesVotes))))));
            gv_elections = 3;
            DialogControlSetEnabled(gv_electionLawUI[0], PlayerGroupAll(), true);
            DialogControlSetEnabled(gv_electionLawUI[1], PlayerGroupAll(), true);
            DialogControlSetEnabled(gv_electionLawUI[2], PlayerGroupAll(), true);
            DialogControlSetEnabled(gv_electionLawUI[3], PlayerGroupAll(), false);
            DialogControlSetEnabled(gv_electionLawUI[4], PlayerGroupAll(), true);
            DialogControlSetEnabled(gv_electionLawUI[5], PlayerGroupAll(), false);
        }
        else {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/CC055783") + (IntToText(gv_yesVotes) + (StringExternal("Param/Value/5FF852B4") + IntToText((gv_possibleVotes - gv_yesVotes))))));
        }
        gv_eUVoteInProgress = 0;
    }

    if ((EventDialogControl() == gv_electionLawUI[4])) {
        gv_yesVotes = 0;
        gv_eUVoteInProgress = 20;
        libNtve_gf_SetDialogItemText(gv_eUDialogItems[0], StringExternal("Param/Value/DD5D8815"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemText(gv_eUDialogItems[1], StringExternal("Param/Value/A0A88DF4"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemTooltip(gv_eUDialogItems[1], StringExternal("Param/Value/3E8A92B9"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemText(gv_eUDialogItems[2], StringExternal("Param/Value/8DDAEA1D"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemTooltip(gv_eUDialogItems[2], StringExternal("Param/Value/C2595CAA"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemText(gv_eUDialogItems[3], (StringExternal("Param/Value/5F69E58A") + (PlayerName(EventPlayer()) + ((StringExternal("Param/Value/FBA3C879") + PlayerName(gv_mrPresident)) + StringExternal("Param/Value/31956492")))), gv_theEuroCrew);
        DialogSetVisible(gv_eUDialog, gv_theEuroCrew, true);
        Wait(40.0, c_timeGame);
        DialogSetVisible(gv_eUDialog, gv_theEuroCrew, false);
        if ((gv_yesVotes > (gv_possibleVotes / 2))) {
            TriggerExecute(gt_LetsRefreshVotes, true, false);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/94ADA90F") + (IntToText(gv_yesVotes) + (StringExternal("Param/Value/06B5A5C2") + IntToText((gv_possibleVotes - gv_yesVotes))))));
            gv_elections = 4;
            DialogControlSetEnabled(gv_electionLawUI[0], PlayerGroupAll(), true);
            DialogControlSetEnabled(gv_electionLawUI[1], PlayerGroupAll(), true);
            DialogControlSetEnabled(gv_electionLawUI[2], PlayerGroupAll(), true);
            DialogControlSetEnabled(gv_electionLawUI[3], PlayerGroupAll(), true);
            DialogControlSetEnabled(gv_electionLawUI[4], PlayerGroupAll(), false);
            DialogControlSetEnabled(gv_electionLawUI[5], PlayerGroupAll(), true);
        }
        else {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/57BCA8A4") + (IntToText(gv_yesVotes) + (StringExternal("Param/Value/1B81BF44") + IntToText((gv_possibleVotes - gv_yesVotes))))));
        }
        gv_eUVoteInProgress = 0;
    }

    if ((EventDialogControl() == gv_electionLawUI[5])) {
        gv_yesVotes = 0;
        gv_eUVoteInProgress = 22;
        if ((gf_GetGovernmentType(gv_mrPresident) == 1)) {
            libNtve_gf_SetDialogItemText(gv_eUDialogItems[0], StringExternal("Param/Value/F17AF37A"), gv_theEuroCrew);
            libNtve_gf_SetDialogItemText(gv_eUDialogItems[3], (StringExternal("Param/Value/850D2871") + (PlayerName(EventPlayer()) + ((StringExternal("Param/Value/C9FB83EB") + PlayerName(gv_mrPresident)) + StringExternal("Param/Value/F4D1BFE4")))), gv_theEuroCrew);
        }
        else {
            if ((gf_GetGovernmentType(gv_mrPresident) == 2)) {
                libNtve_gf_SetDialogItemText(gv_eUDialogItems[0], StringExternal("Param/Value/6B65EB9A"), gv_theEuroCrew);
                libNtve_gf_SetDialogItemText(gv_eUDialogItems[3], (StringExternal("Param/Value/E0EED561") + (PlayerName(EventPlayer()) + ((StringExternal("Param/Value/811B5D3F") + PlayerName(gv_mrPresident)) + StringExternal("Param/Value/FFF5FA61")))), gv_theEuroCrew);
            }
            else {
                if ((gf_GetGovernmentType(gv_mrPresident) == 3)) {
                    libNtve_gf_SetDialogItemText(gv_eUDialogItems[0], StringExternal("Param/Value/02793E22"), gv_theEuroCrew);
                    libNtve_gf_SetDialogItemText(gv_eUDialogItems[3], (StringExternal("Param/Value/734927CD") + (PlayerName(EventPlayer()) + ((StringExternal("Param/Value/C6C53739") + PlayerName(gv_mrPresident)) + StringExternal("Param/Value/00F1B928")))), gv_theEuroCrew);
                }

            }
        }
        libNtve_gf_SetDialogItemText(gv_eUDialogItems[1], StringExternal("Param/Value/BA166BFF"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemTooltip(gv_eUDialogItems[1], StringExternal("Param/Value/65C39D94"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemText(gv_eUDialogItems[2], StringExternal("Param/Value/B5A00601"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemTooltip(gv_eUDialogItems[2], StringExternal("Param/Value/19687D75"), gv_theEuroCrew);
        DialogSetVisible(gv_eUDialog, gv_theEuroCrew, true);
        Wait(40.0, c_timeGame);
        auto6F24DAB1_g = gv_theEuroCrew;
        auto6F24DAB1_var = -1;
        while (true) {
            auto6F24DAB1_var = PlayerGroupNextPlayer(auto6F24DAB1_g, auto6F24DAB1_var);
            if (auto6F24DAB1_var < 0) { break; }
            if ((auto6F24DAB1_var != gv_mrPresident)) {
                PlayerGroupAdd(gv_rebelsEuroCrew, auto6F24DAB1_var);
                PlayerGroupRemove(gv_theEuroCrew, auto6F24DAB1_var);
            }

        }
        if ((PlayerGroupCount(gv_rebelsEuroCrew) == 0)) {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextWithColor(((StringExternal("Param/Value/7AAD2FBC") + TextWithColor(PlayerName(gv_mrPresident), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_mrPresident, false)))) + StringExternal("Param/Value/88D9CC7F")), Color(0.00, 100.00, 0.00)));
        }
        else {
            autoB0A06D47_g = gv_rebelsEuroCrew;
            autoB0A06D47_var = -1;
            while (true) {
                autoB0A06D47_var = PlayerGroupNextPlayer(autoB0A06D47_g, autoB0A06D47_var);
                if (autoB0A06D47_var < 0) { break; }
                gf_WarDeclare(gv_mrPresident, autoB0A06D47_var);
            }
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextWithColor((StringExternal("Param/Value/0A639737") + (TextWithColor(PlayerName(gv_mrPresident), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_mrPresident, false))) + StringExternal("Param/Value/98FC2881"))), Color(100.00, 0.00, 0.00)));
        }
        TriggerExecute(gt_LetsRefreshVotes, true, false);
        DialogSetVisible(gv_eUDialog, gv_theEuroCrew, false);
        gv_eUVoteInProgress = 0;
    }

    if ((EventDialogControl() == gv_redistributionLawUI[0])) {
        gv_yesVotes = 0;
        gv_eUVoteInProgress = 6;
        libNtve_gf_SetDialogItemText(gv_eUDialogItems[0], StringExternal("Param/Value/CBDDCA0C"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemText(gv_eUDialogItems[1], StringExternal("Param/Value/E4CB42FB"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemTooltip(gv_eUDialogItems[1], StringExternal("Param/Value/A999FCE5"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemText(gv_eUDialogItems[2], StringExternal("Param/Value/0462FBE6"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemTooltip(gv_eUDialogItems[2], StringExternal("Param/Value/511F4BDF"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemText(gv_eUDialogItems[3], (StringExternal("Param/Value/368740CE") + (PlayerName(EventPlayer()) + StringExternal("Param/Value/05BDDF33"))), gv_theEuroCrew);
        DialogSetVisible(gv_eUDialog, gv_theEuroCrew, true);
        Wait(40.0, c_timeGame);
        DialogSetVisible(gv_eUDialog, gv_theEuroCrew, false);
        if ((gv_yesVotes > (gv_possibleVotes / 2))) {
            TriggerExecute(gt_LetsRefreshVotes, true, false);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/B4D7009E") + (IntToText(gv_yesVotes) + (StringExternal("Param/Value/BC8F1DE4") + IntToText((gv_possibleVotes - gv_yesVotes))))));
            gv_redistribution = 90;
            DialogControlSetEnabled(gv_redistributionLawUI[0], PlayerGroupAll(), false);
            DialogControlSetEnabled(gv_redistributionLawUI[1], PlayerGroupAll(), true);
            DialogControlSetEnabled(gv_redistributionLawUI[2], PlayerGroupAll(), true);
            DialogControlSetEnabled(gv_redistributionLawUI[3], PlayerGroupAll(), true);
            DialogControlSetEnabled(gv_redistributionLawUI[4], PlayerGroupAll(), true);
        }
        else {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/7C0736E4") + (IntToText(gv_yesVotes) + (StringExternal("Param/Value/7163FAF5") + IntToText((gv_possibleVotes - gv_yesVotes))))));
        }
        gv_eUVoteInProgress = 0;
    }

    if ((EventDialogControl() == gv_redistributionLawUI[1])) {
        gv_yesVotes = 0;
        gv_eUVoteInProgress = 7;
        libNtve_gf_SetDialogItemText(gv_eUDialogItems[0], StringExternal("Param/Value/14777C13"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemText(gv_eUDialogItems[1], StringExternal("Param/Value/1B14C62D"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemTooltip(gv_eUDialogItems[1], StringExternal("Param/Value/D2B02FF5"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemText(gv_eUDialogItems[2], StringExternal("Param/Value/8B7DE889"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemTooltip(gv_eUDialogItems[2], StringExternal("Param/Value/BD010056"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemText(gv_eUDialogItems[3], (StringExternal("Param/Value/716ED619") + (PlayerName(EventPlayer()) + StringExternal("Param/Value/27BE76E9"))), gv_theEuroCrew);
        DialogSetVisible(gv_eUDialog, gv_theEuroCrew, true);
        Wait(40.0, c_timeGame);
        DialogSetVisible(gv_eUDialog, gv_theEuroCrew, false);
        if ((gv_yesVotes > (gv_possibleVotes / 2))) {
            TriggerExecute(gt_LetsRefreshVotes, true, false);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/B0E44995") + (IntToText(gv_yesVotes) + (StringExternal("Param/Value/4A2B1918") + IntToText((gv_possibleVotes - gv_yesVotes))))));
            gv_redistribution = 50;
            DialogControlSetEnabled(gv_redistributionLawUI[0], PlayerGroupAll(), true);
            DialogControlSetEnabled(gv_redistributionLawUI[1], PlayerGroupAll(), false);
            DialogControlSetEnabled(gv_redistributionLawUI[2], PlayerGroupAll(), true);
            DialogControlSetEnabled(gv_redistributionLawUI[3], PlayerGroupAll(), true);
            DialogControlSetEnabled(gv_redistributionLawUI[4], PlayerGroupAll(), true);
        }
        else {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/466F3894") + (IntToText(gv_yesVotes) + (StringExternal("Param/Value/F25C9EAB") + IntToText((gv_possibleVotes - gv_yesVotes))))));
        }
        gv_eUVoteInProgress = 0;
    }

    if ((EventDialogControl() == gv_redistributionLawUI[2])) {
        gv_yesVotes = 0;
        gv_eUVoteInProgress = 8;
        libNtve_gf_SetDialogItemText(gv_eUDialogItems[0], StringExternal("Param/Value/A369B358"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemText(gv_eUDialogItems[1], StringExternal("Param/Value/0FF54DB3"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemTooltip(gv_eUDialogItems[1], StringExternal("Param/Value/32521CBF"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemText(gv_eUDialogItems[2], StringExternal("Param/Value/F9C23D7F"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemTooltip(gv_eUDialogItems[2], StringExternal("Param/Value/147D7FBF"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemText(gv_eUDialogItems[3], (StringExternal("Param/Value/62CB0456") + (PlayerName(EventPlayer()) + StringExternal("Param/Value/67997183"))), gv_theEuroCrew);
        DialogSetVisible(gv_eUDialog, gv_theEuroCrew, true);
        Wait(40.0, c_timeGame);
        DialogSetVisible(gv_eUDialog, gv_theEuroCrew, false);
        if ((gv_yesVotes > (gv_possibleVotes / 2))) {
            TriggerExecute(gt_LetsRefreshVotes, true, false);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/2742A90C") + (IntToText(gv_yesVotes) + (StringExternal("Param/Value/3EA64CF4") + IntToText((gv_possibleVotes - gv_yesVotes))))));
            gv_redistribution = 30;
            DialogControlSetEnabled(gv_redistributionLawUI[0], PlayerGroupAll(), true);
            DialogControlSetEnabled(gv_redistributionLawUI[1], PlayerGroupAll(), true);
            DialogControlSetEnabled(gv_redistributionLawUI[2], PlayerGroupAll(), false);
            DialogControlSetEnabled(gv_redistributionLawUI[3], PlayerGroupAll(), true);
            DialogControlSetEnabled(gv_redistributionLawUI[4], PlayerGroupAll(), true);
        }
        else {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/A714E554") + (IntToText(gv_yesVotes) + (StringExternal("Param/Value/9F8B9B27") + IntToText((gv_possibleVotes - gv_yesVotes))))));
        }
        gv_eUVoteInProgress = 0;
    }

    if ((EventDialogControl() == gv_redistributionLawUI[3])) {
        gv_yesVotes = 0;
        gv_eUVoteInProgress = 9;
        libNtve_gf_SetDialogItemText(gv_eUDialogItems[0], StringExternal("Param/Value/6A8FA204"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemText(gv_eUDialogItems[1], StringExternal("Param/Value/7E5829D2"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemTooltip(gv_eUDialogItems[1], StringExternal("Param/Value/8E1F6C56"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemText(gv_eUDialogItems[2], StringExternal("Param/Value/59022707"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemTooltip(gv_eUDialogItems[2], StringExternal("Param/Value/190AD63C"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemText(gv_eUDialogItems[3], (StringExternal("Param/Value/C04248EF") + (PlayerName(EventPlayer()) + StringExternal("Param/Value/D4C837F6"))), gv_theEuroCrew);
        DialogSetVisible(gv_eUDialog, gv_theEuroCrew, true);
        Wait(40.0, c_timeGame);
        DialogSetVisible(gv_eUDialog, gv_theEuroCrew, false);
        if ((gv_yesVotes > (gv_possibleVotes / 2))) {
            TriggerExecute(gt_LetsRefreshVotes, true, false);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/88A1EF7C") + (IntToText(gv_yesVotes) + (StringExternal("Param/Value/FF74BB53") + IntToText((gv_possibleVotes - gv_yesVotes))))));
            gv_redistribution = 15;
            DialogControlSetEnabled(gv_redistributionLawUI[0], PlayerGroupAll(), true);
            DialogControlSetEnabled(gv_redistributionLawUI[1], PlayerGroupAll(), true);
            DialogControlSetEnabled(gv_redistributionLawUI[2], PlayerGroupAll(), true);
            DialogControlSetEnabled(gv_redistributionLawUI[3], PlayerGroupAll(), false);
            DialogControlSetEnabled(gv_redistributionLawUI[4], PlayerGroupAll(), true);
        }
        else {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/4D016C24") + (IntToText(gv_yesVotes) + (StringExternal("Param/Value/ADD539A0") + IntToText((gv_possibleVotes - gv_yesVotes))))));
        }
        gv_eUVoteInProgress = 0;
    }

    if ((EventDialogControl() == gv_redistributionLawUI[4])) {
        gv_yesVotes = 0;
        gv_eUVoteInProgress = 10;
        libNtve_gf_SetDialogItemText(gv_eUDialogItems[0], StringExternal("Param/Value/8494BC84"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemText(gv_eUDialogItems[1], StringExternal("Param/Value/29E69E16"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemTooltip(gv_eUDialogItems[1], StringExternal("Param/Value/D1545622"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemText(gv_eUDialogItems[2], StringExternal("Param/Value/F1F304A0"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemTooltip(gv_eUDialogItems[2], StringExternal("Param/Value/F2ACCB21"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemText(gv_eUDialogItems[3], (StringExternal("Param/Value/9AEA22C5") + (PlayerName(EventPlayer()) + StringExternal("Param/Value/E2E487B6"))), gv_theEuroCrew);
        DialogSetVisible(gv_eUDialog, gv_theEuroCrew, true);
        Wait(40.0, c_timeGame);
        DialogSetVisible(gv_eUDialog, gv_theEuroCrew, false);
        if ((gv_yesVotes > (gv_possibleVotes / 2))) {
            TriggerExecute(gt_LetsRefreshVotes, true, false);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/6F878C4A") + (IntToText(gv_yesVotes) + (StringExternal("Param/Value/8582B54A") + IntToText((gv_possibleVotes - gv_yesVotes))))));
            gv_redistribution = 0;
            DialogControlSetEnabled(gv_redistributionLawUI[0], PlayerGroupAll(), true);
            DialogControlSetEnabled(gv_redistributionLawUI[1], PlayerGroupAll(), true);
            DialogControlSetEnabled(gv_redistributionLawUI[2], PlayerGroupAll(), true);
            DialogControlSetEnabled(gv_redistributionLawUI[3], PlayerGroupAll(), true);
            DialogControlSetEnabled(gv_redistributionLawUI[4], PlayerGroupAll(), false);
        }
        else {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/B905FE8C") + (IntToText(gv_yesVotes) + (StringExternal("Param/Value/5A06AA3D") + IntToText((gv_possibleVotes - gv_yesVotes))))));
        }
        gv_eUVoteInProgress = 0;
    }

    if ((EventDialogControl() == gv_taxLawUI[0])) {
        gv_yesVotes = 0;
        gv_eUVoteInProgress = 11;
        libNtve_gf_SetDialogItemText(gv_eUDialogItems[0], StringExternal("Param/Value/CCE3E21C"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemText(gv_eUDialogItems[1], StringExternal("Param/Value/4ED5EB6A"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemTooltip(gv_eUDialogItems[1], StringExternal("Param/Value/79EB9AE6"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemText(gv_eUDialogItems[2], StringExternal("Param/Value/55460143"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemTooltip(gv_eUDialogItems[2], StringExternal("Param/Value/A96611C1"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemText(gv_eUDialogItems[3], (StringExternal("Param/Value/77F9D4C0") + (PlayerName(EventPlayer()) + StringExternal("Param/Value/8EEE0FA4"))), gv_theEuroCrew);
        DialogSetVisible(gv_eUDialog, gv_theEuroCrew, true);
        Wait(40.0, c_timeGame);
        DialogSetVisible(gv_eUDialog, gv_theEuroCrew, false);
        if ((gv_yesVotes > (gv_possibleVotes / 2))) {
            TriggerExecute(gt_LetsRefreshVotes, true, false);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/8EB4C35D") + (IntToText(gv_yesVotes) + (StringExternal("Param/Value/42143350") + IntToText((gv_possibleVotes - gv_yesVotes))))));
            gv_eUTax = -5;
            DialogControlSetEnabled(gv_taxLawUI[0], PlayerGroupAll(), false);
            DialogControlSetEnabled(gv_taxLawUI[1], PlayerGroupAll(), true);
            DialogControlSetEnabled(gv_taxLawUI[2], PlayerGroupAll(), true);
            DialogControlSetEnabled(gv_taxLawUI[3], PlayerGroupAll(), true);
            DialogControlSetEnabled(gv_taxLawUI[4], PlayerGroupAll(), true);
        }
        else {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/0B1C6998") + (IntToText(gv_yesVotes) + (StringExternal("Param/Value/FE8890D8") + IntToText((gv_possibleVotes - gv_yesVotes))))));
        }
        gv_eUVoteInProgress = 0;
    }

    if ((EventDialogControl() == gv_taxLawUI[1])) {
        gv_yesVotes = 0;
        gv_eUVoteInProgress = 12;
        libNtve_gf_SetDialogItemText(gv_eUDialogItems[0], StringExternal("Param/Value/90053B26"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemText(gv_eUDialogItems[1], StringExternal("Param/Value/AF01AEAA"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemTooltip(gv_eUDialogItems[1], StringExternal("Param/Value/65706ACE"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemText(gv_eUDialogItems[2], StringExternal("Param/Value/DFA946B7"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemTooltip(gv_eUDialogItems[2], StringExternal("Param/Value/88A91487"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemText(gv_eUDialogItems[3], (StringExternal("Param/Value/D0940D4B") + (PlayerName(EventPlayer()) + StringExternal("Param/Value/6308E764"))), gv_theEuroCrew);
        DialogSetVisible(gv_eUDialog, gv_theEuroCrew, true);
        Wait(40.0, c_timeGame);
        DialogSetVisible(gv_eUDialog, gv_theEuroCrew, false);
        if ((gv_yesVotes > (gv_possibleVotes / 2))) {
            TriggerExecute(gt_LetsRefreshVotes, true, false);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/9ED54F93") + (IntToText(gv_yesVotes) + (StringExternal("Param/Value/DF34BB83") + IntToText((gv_possibleVotes - gv_yesVotes))))));
            gv_eUTax = 0;
            DialogControlSetEnabled(gv_taxLawUI[0], PlayerGroupAll(), true);
            DialogControlSetEnabled(gv_taxLawUI[1], PlayerGroupAll(), false);
            DialogControlSetEnabled(gv_taxLawUI[2], PlayerGroupAll(), true);
            DialogControlSetEnabled(gv_taxLawUI[3], PlayerGroupAll(), true);
            DialogControlSetEnabled(gv_taxLawUI[4], PlayerGroupAll(), true);
        }
        else {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/7FBD94C5") + (IntToText(gv_yesVotes) + (StringExternal("Param/Value/43ECEB50") + IntToText((gv_possibleVotes - gv_yesVotes))))));
        }
        gv_eUVoteInProgress = 0;
    }

    if ((EventDialogControl() == gv_taxLawUI[2])) {
        gv_yesVotes = 0;
        gv_eUVoteInProgress = 13;
        libNtve_gf_SetDialogItemText(gv_eUDialogItems[0], StringExternal("Param/Value/CCBF458F"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemText(gv_eUDialogItems[1], StringExternal("Param/Value/9BBEB1EA"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemTooltip(gv_eUDialogItems[1], StringExternal("Param/Value/EA0E19CE"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemText(gv_eUDialogItems[2], StringExternal("Param/Value/62329DB2"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemTooltip(gv_eUDialogItems[2], StringExternal("Param/Value/847D4739"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemText(gv_eUDialogItems[3], (StringExternal("Param/Value/3364A129") + (PlayerName(EventPlayer()) + StringExternal("Param/Value/244EB7EC"))), gv_theEuroCrew);
        DialogSetVisible(gv_eUDialog, gv_theEuroCrew, true);
        Wait(40.0, c_timeGame);
        DialogSetVisible(gv_eUDialog, gv_theEuroCrew, false);
        if ((gv_yesVotes > (gv_possibleVotes / 2))) {
            TriggerExecute(gt_LetsRefreshVotes, true, false);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/57CFC570") + (IntToText(gv_yesVotes) + (StringExternal("Param/Value/01B0B238") + IntToText((gv_possibleVotes - gv_yesVotes))))));
            gv_eUTax = 5;
            DialogControlSetEnabled(gv_taxLawUI[0], PlayerGroupAll(), true);
            DialogControlSetEnabled(gv_taxLawUI[1], PlayerGroupAll(), true);
            DialogControlSetEnabled(gv_taxLawUI[2], PlayerGroupAll(), false);
            DialogControlSetEnabled(gv_taxLawUI[3], PlayerGroupAll(), true);
            DialogControlSetEnabled(gv_taxLawUI[4], PlayerGroupAll(), true);
        }
        else {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/8ACA5112") + (IntToText(gv_yesVotes) + (StringExternal("Param/Value/986D5992") + IntToText((gv_possibleVotes - gv_yesVotes))))));
        }
        gv_eUVoteInProgress = 0;
    }

    if ((EventDialogControl() == gv_taxLawUI[3])) {
        gv_yesVotes = 0;
        gv_eUVoteInProgress = 14;
        libNtve_gf_SetDialogItemText(gv_eUDialogItems[0], StringExternal("Param/Value/E83F29DA"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemText(gv_eUDialogItems[1], StringExternal("Param/Value/00C8D432"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemTooltip(gv_eUDialogItems[1], StringExternal("Param/Value/524EABFE"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemText(gv_eUDialogItems[2], StringExternal("Param/Value/7317EB17"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemTooltip(gv_eUDialogItems[2], StringExternal("Param/Value/5F3ABC09"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemText(gv_eUDialogItems[3], (StringExternal("Param/Value/C2080DE3") + (PlayerName(EventPlayer()) + StringExternal("Param/Value/3253ED1C"))), gv_theEuroCrew);
        DialogSetVisible(gv_eUDialog, gv_theEuroCrew, true);
        Wait(40.0, c_timeGame);
        DialogSetVisible(gv_eUDialog, gv_theEuroCrew, false);
        if ((gv_yesVotes > (gv_possibleVotes / 2))) {
            TriggerExecute(gt_LetsRefreshVotes, true, false);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/FA74BB55") + (IntToText(gv_yesVotes) + (StringExternal("Param/Value/FE149C1A") + IntToText((gv_possibleVotes - gv_yesVotes))))));
            gv_eUTax = 15;
            DialogControlSetEnabled(gv_taxLawUI[0], PlayerGroupAll(), true);
            DialogControlSetEnabled(gv_taxLawUI[1], PlayerGroupAll(), true);
            DialogControlSetEnabled(gv_taxLawUI[2], PlayerGroupAll(), true);
            DialogControlSetEnabled(gv_taxLawUI[3], PlayerGroupAll(), false);
            DialogControlSetEnabled(gv_taxLawUI[4], PlayerGroupAll(), true);
        }
        else {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/3B460A39") + (IntToText(gv_yesVotes) + (StringExternal("Param/Value/DE73154A") + IntToText((gv_possibleVotes - gv_yesVotes))))));
        }
        gv_eUVoteInProgress = 0;
    }

    if ((EventDialogControl() == gv_taxLawUI[4])) {
        gv_yesVotes = 0;
        gv_eUVoteInProgress = 15;
        libNtve_gf_SetDialogItemText(gv_eUDialogItems[0], StringExternal("Param/Value/4196F84A"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemText(gv_eUDialogItems[1], StringExternal("Param/Value/27BF96B6"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemTooltip(gv_eUDialogItems[1], StringExternal("Param/Value/8CBDEA85"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemText(gv_eUDialogItems[2], StringExternal("Param/Value/4DD14728"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemTooltip(gv_eUDialogItems[2], StringExternal("Param/Value/6E078C39"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemText(gv_eUDialogItems[3], (StringExternal("Param/Value/81E9C1F5") + (PlayerName(EventPlayer()) + StringExternal("Param/Value/D4114884"))), gv_theEuroCrew);
        DialogSetVisible(gv_eUDialog, gv_theEuroCrew, true);
        Wait(40.0, c_timeGame);
        DialogSetVisible(gv_eUDialog, gv_theEuroCrew, false);
        if ((gv_yesVotes > (gv_possibleVotes / 2))) {
            TriggerExecute(gt_LetsRefreshVotes, true, false);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/BA816E11") + (IntToText(gv_yesVotes) + (StringExternal("Param/Value/07F43E53") + IntToText((gv_possibleVotes - gv_yesVotes))))));
            gv_eUTax = 30;
            DialogControlSetEnabled(gv_taxLawUI[0], PlayerGroupAll(), true);
            DialogControlSetEnabled(gv_taxLawUI[1], PlayerGroupAll(), true);
            DialogControlSetEnabled(gv_taxLawUI[2], PlayerGroupAll(), true);
            DialogControlSetEnabled(gv_taxLawUI[3], PlayerGroupAll(), true);
            DialogControlSetEnabled(gv_taxLawUI[4], PlayerGroupAll(), false);
        }
        else {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/6B445D03") + (IntToText(gv_yesVotes) + (StringExternal("Param/Value/219935EB") + IntToText((gv_possibleVotes - gv_yesVotes))))));
        }
        gv_eUVoteInProgress = 0;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TriggerVote_Init () {
    gt_TriggerVote = TriggerCreate("gt_TriggerVote_Func");
    TriggerAddEventDialogControl(gt_TriggerVote, c_playerAny, EventDialogControl(), c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Count Votes
//--------------------------------------------------------------------------------------------------
bool gt_CountVotes_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoD4A16678_g;
    int autoD4A16678_var;

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(38.0, c_timeGame);
    DialogSetVisible(gv_eUDialog, PlayerGroupAll(), false);
    autoD4A16678_g = gv_votingYes;
    autoD4A16678_var = -1;
    while (true) {
        autoD4A16678_var = PlayerGroupNextPlayer(autoD4A16678_g, autoD4A16678_var);
        if (autoD4A16678_var < 0) { break; }
        gv_yesVotes += gv_votes[autoD4A16678_var];
    }
    libNtve_gf_RemovePlayerGroupFromPlayerGroup(gv_votingYes, gv_votingYes);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CountVotes_Init () {
    gt_CountVotes = TriggerCreate("gt_CountVotes_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Track Votes
//--------------------------------------------------------------------------------------------------
bool gt_TrackVotes_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int[10] lv_voteVariable;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_theEUEvent[0] == 0))) {
            return false;
        }

        if (!((gv_eUVoteInProgress != 22))) {
            return false;
        }

        if (!(((EventDialogControl() == gv_eUDialogItems[1]) || (EventDialogControl() == gv_eUDialogItems[2])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(gv_eUDialog, PlayerGroupSingle(EventPlayer()), false);
    if ((EventDialogControl() == gv_eUDialogItems[1])) {
        lv_voteVariable[EventPlayer()] = 0;
        Wait(1.0, c_timeGame);
        if ((lv_voteVariable[EventPlayer()] == 0)) {
            UIDisplayMessage(gv_theEuroCrew, c_messageAreaSubtitle, (PlayerName(EventPlayer()) + (StringExternal("Param/Value/E0B3B64D") + (IntToText(gv_votes[EventPlayer()]) + StringExternal("Param/Value/64F45193")))));
        }

    }

    if ((EventDialogControl() == gv_eUDialogItems[2]) && (PlayerGroupHasPlayer(gv_votingYes, EventPlayer()) == false)) {
        lv_voteVariable[EventPlayer()] = 1;
        if ((lv_voteVariable[EventPlayer()] == 1)) {
            UIDisplayMessage(gv_theEuroCrew, c_messageAreaSubtitle, (PlayerName(EventPlayer()) + (StringExternal("Param/Value/0B608A32") + (IntToText(gv_votes[EventPlayer()]) + StringExternal("Param/Value/B955DFD8")))));
            PlayerGroupAdd(gv_votingYes, EventPlayer());
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrackVotes_Init () {
    gt_TrackVotes = TriggerCreate("gt_TrackVotes_Func");
    TriggerAddEventDialogControl(gt_TrackVotes, c_playerAny, EventDialogControl(), c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Track Votes Federation
//--------------------------------------------------------------------------------------------------
bool gt_TrackVotesFederation_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int[10] lv_voteVariable;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_eUVoteInProgress == 22))) {
            return false;
        }

        if (!(((EventDialogControl() == gv_eUDialogItems[1]) || (EventDialogControl() == gv_eUDialogItems[2])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(gv_eUDialog, PlayerGroupSingle(EventPlayer()), false);
    if ((EventDialogControl() == gv_eUDialogItems[1]) && (EventPlayer() != gv_mrPresident)) {
        PlayerGroupRemove(gv_theEuroCrew, EventPlayer());
        UIDisplayMessage(gv_users, c_messageAreaSubtitle, (PlayerName(EventPlayer()) + (StringExternal("Param/Value/CFDBD71A") + (gf_NationOfPlayer(EventPlayer()) + StringExternal("Param/Value/56B83602")))));
        PlayerGroupAdd(gv_rebelsEuroCrew, EventPlayer());
    }

    if ((EventDialogControl() == gv_eUDialogItems[2]) && (EventPlayer() != gv_mrPresident)) {
        PlayerGroupRemove(gv_theEuroCrew, EventPlayer());
        UIDisplayMessage(gv_users, c_messageAreaSubtitle, (PlayerName(EventPlayer()) + (StringExternal("Param/Value/44EF8DCE") + (StringExternal("Param/Value/69231266") + StringExternal("Param/Value/4C0E6532")))));
        gf_SubjugatePlayer(gv_mrPresident, EventPlayer());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrackVotesFederation_Init () {
    gt_TrackVotesFederation = TriggerCreate("gt_TrackVotesFederation_Func");
    TriggerAddEventDialogControl(gt_TrackVotesFederation, c_playerAny, EventDialogControl(), c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: EU In Order
//--------------------------------------------------------------------------------------------------
bool gt_EUInOrder_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_repeat;

    // Automatic Variable Declarations
    playergroup autoAFBC3D22_g;
    int autoAFBC3D22_var;
    playergroup auto91A8C1E6_g;
    int auto91A8C1E6_var;
    playergroup autoF4F790AC_g;
    int autoF4F790AC_var;
    const int auto972E0D39_n = 9;
    int auto972E0D39_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_repeat = 1;
    DialogSetVisible(gv_openAdvancedEUUI[0], PlayerGroupAll(), false);
    autoAFBC3D22_g = gv_users;
    autoAFBC3D22_var = -1;
    while (true) {
        autoAFBC3D22_var = PlayerGroupNextPlayer(autoAFBC3D22_g, autoAFBC3D22_var);
        if (autoAFBC3D22_var < 0) { break; }
        libNtve_gf_SetUpgradeLevelForPlayer(autoAFBC3D22_var, "EuropeanUnion", 0);
    }
    auto91A8C1E6_g = gv_theEuroCrew;
    auto91A8C1E6_var = -1;
    while (true) {
        auto91A8C1E6_var = PlayerGroupNextPlayer(auto91A8C1E6_g, auto91A8C1E6_var);
        if (auto91A8C1E6_var < 0) { break; }
        libNtve_gf_SetUpgradeLevelForPlayer(auto91A8C1E6_var, "EuropeanUnion", 1);
        DialogControlSetEnabled(gv_mainDialogItemsUI[4], PlayerGroupSingle(auto91A8C1E6_var), true);
        libNtve_gf_SetDialogItemImage(gv_mainDialogItemsUI[1], "Military\\Music\\GameScreens\\v2\\MainUI\\3rdComp.tga", PlayerGroupSingle(auto91A8C1E6_var));
    }
    autoF4F790AC_g = gv_users;
    autoF4F790AC_var = -1;
    while (true) {
        autoF4F790AC_var = PlayerGroupNextPlayer(autoF4F790AC_g, autoF4F790AC_var);
        if (autoF4F790AC_var < 0) { break; }
        if ((TechTreeUpgradeCount(autoF4F790AC_var, "EuropeanUnion", c_techCountQueuedOrBetter) != 1)) {
            DialogControlSetEnabled(gv_mainDialogItemsUI[4], PlayerGroupSingle(autoF4F790AC_var), false);
            libNtve_gf_SetDialogItemImage(gv_mainDialogItemsUI[1], "Military\\Music\\GameScreens\\v2\\MainUI\\3rdCompNonEU.tga", PlayerGroupSingle(autoF4F790AC_var));
            DialogSetVisible(gv_eUScreen, PlayerGroupSingle(autoF4F790AC_var), false);
        }

    }
    libNtve_gf_SetPlayerGroupAlliance(gv_theEuroCrew, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    DialogSetVisible(gv_openAdvancedEUUI[0], gv_theEuroCrew, true);
    libNtve_gf_SetDialogItemText(gv_presidentalUI, (StringExternal("Param/Value/1F0CF4BD") + PlayerName(gv_mrPresident)), PlayerGroupAll());
    DialogControlSetVisible(gv_eUVoteslist[1], PlayerGroupAll(), true);
    DialogControlSetVisible(gv_eUVoteslist[2], PlayerGroupAll(), true);
    DialogControlSetVisible(gv_eUVoteslist[3], PlayerGroupAll(), true);
    DialogControlSetVisible(gv_eUVoteslist[4], PlayerGroupAll(), true);
    DialogControlSetVisible(gv_eUVoteslist[5], PlayerGroupAll(), true);
    DialogControlSetVisible(gv_eUVoteslist[6], PlayerGroupAll(), true);
    DialogControlSetVisible(gv_eUVoteslist[7], PlayerGroupAll(), true);
    DialogControlSetVisible(gv_eUVoteslist[8], PlayerGroupAll(), true);
    DialogControlSetVisible(gv_eUVoteslist[9], PlayerGroupAll(), true);
    if ((PlayerGroupCount(gv_theEuroCrew) == 1)) {
        DialogControlSetVisible(gv_eUVoteslist[2], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_eUVoteslist[3], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_eUVoteslist[4], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_eUVoteslist[5], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_eUVoteslist[6], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_eUVoteslist[7], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_eUVoteslist[8], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_eUVoteslist[9], PlayerGroupAll(), false);
    }

    if ((PlayerGroupCount(gv_theEuroCrew) == 2)) {
        DialogControlSetVisible(gv_eUVoteslist[3], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_eUVoteslist[4], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_eUVoteslist[5], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_eUVoteslist[6], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_eUVoteslist[7], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_eUVoteslist[8], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_eUVoteslist[9], PlayerGroupAll(), false);
    }

    if ((PlayerGroupCount(gv_theEuroCrew) == 3)) {
        DialogControlSetVisible(gv_eUVoteslist[4], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_eUVoteslist[5], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_eUVoteslist[6], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_eUVoteslist[7], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_eUVoteslist[8], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_eUVoteslist[9], PlayerGroupAll(), false);
    }

    if ((PlayerGroupCount(gv_theEuroCrew) == 4)) {
        DialogControlSetVisible(gv_eUVoteslist[5], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_eUVoteslist[6], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_eUVoteslist[7], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_eUVoteslist[8], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_eUVoteslist[9], PlayerGroupAll(), false);
    }

    if ((PlayerGroupCount(gv_theEuroCrew) == 5)) {
        DialogControlSetVisible(gv_eUVoteslist[6], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_eUVoteslist[7], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_eUVoteslist[8], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_eUVoteslist[9], PlayerGroupAll(), false);
    }

    if ((PlayerGroupCount(gv_theEuroCrew) == 6)) {
        DialogControlSetVisible(gv_eUVoteslist[7], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_eUVoteslist[8], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_eUVoteslist[9], PlayerGroupAll(), false);
    }

    if ((PlayerGroupCount(gv_theEuroCrew) == 7)) {
        DialogControlSetVisible(gv_eUVoteslist[8], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_eUVoteslist[9], PlayerGroupAll(), false);
    }

    if ((PlayerGroupCount(gv_theEuroCrew) == 8)) {
        DialogControlSetVisible(gv_eUVoteslist[9], PlayerGroupAll(), false);
    }

    if ((PlayerGroupCount(gv_theEuroCrew) == 9)) {
        DialogControlSetVisible(gv_eUVoteslist[9], PlayerGroupAll(), false);
    }

    for (auto972E0D39_i = 1; auto972E0D39_i <= auto972E0D39_n; auto972E0D39_i += 1) {
        libNtve_gf_SetDialogItemColor(gv_eUMemberlist[lv_repeat], libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupPlayer(gv_theEuroCrew, lv_repeat), false)), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(gv_eUMemberlist[lv_repeat], PlayerName(PlayerGroupPlayer(gv_theEuroCrew, lv_repeat)), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(gv_eUVoteslist[lv_repeat], IntToText(gv_votes[PlayerGroupPlayer(gv_theEuroCrew, lv_repeat)]), PlayerGroupAll());
        lv_repeat += 1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EUInOrder_Init () {
    gt_EUInOrder = TriggerCreate("gt_EUInOrder_Func");
    TriggerEnable(gt_EUInOrder, false);
    TriggerAddEventTimePeriodic(gt_EUInOrder, 16.1, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: EU Cooldown
//--------------------------------------------------------------------------------------------------
bool gt_EUCooldown_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_eUVoteCooldown = true;
    Wait(40.0, c_timeGame);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/7C09DF9F"));
    gv_theEUEvent[0] = 0;
    gv_theEUEvent[1] = 0;
    gv_theEUEvent[2] = 0;
    gv_theEUEvent[3] = 0;
    gv_theEUEvent[4] = 0;
    gv_theEUEvent[5] = 0;
    gv_theEUEvent[6] = 0;
    gv_theEUEvent[7] = 0;
    gv_theEUEvent[8] = 0;
    gv_theEUEvent[9] = 0;
    gv_theEUEvent[10] = 0;
    gv_eUVoteCooldown = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EUCooldown_Init () {
    gt_EUCooldown = TriggerCreate("gt_EUCooldown_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: EUUI
//--------------------------------------------------------------------------------------------------
bool gt_EUUI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(650, 400, c_anchorCenter, 0, -125, true);
    gv_eUDialog = DialogLastCreated();
    DialogSetTitle(DialogLastCreated(), StringExternal("Param/Value/F5CF1B09"));
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 400, 100, c_anchorCenter, 65, -40, StringExternal("Param/Value/A51EAE6E"), Color(72.55, 72.55, 0.00), false, 0.0);
    gv_eUDialogItems[0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 300, 55, c_anchorBottomLeft, 20, 20, StringExternal("Param/Value/9F1F1FB5"), StringExternal("Param/Value/3C1F46C9"), "");
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_scrollbar_frame.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    gv_eUDialogItems[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 300, 55, c_anchorBottomRight, 20, 20, StringExternal("Param/Value/8E5AF05A"), StringExternal("Param/Value/A88B1DDE"), "");
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_scrollbar_frame.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    gv_eUDialogItems[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 600, 400, c_anchorTopLeft, 40, 171, StringExternal("Param/Value/490D69AD"), ColorWithAlpha(0,0,0,0), true, 3.0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_scrollbar_frame.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    gv_eUDialogItems[3] = DialogControlLastCreated();
    DialogSetImage(gv_eUDialog, "Assets\\Textures\\ui_scrollbar_frame.dds");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EUUI_Init () {
    gt_EUUI = TriggerCreate("gt_EUUI_Func");
    TriggerAddEventMapInit(gt_EUUI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Yes/No
//--------------------------------------------------------------------------------------------------
bool gt_YesNo_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto336CA1B6_g;
    int auto336CA1B6_u;
    unit auto336CA1B6_var;

    // Conditions
    if (testConds) {
        if (!((gv_eUVoteInProgress == 0))) {
            return false;
        }

        if (!(((EventDialogControl() == gv_eUDialogItems[1]) || (EventDialogControl() == gv_eUDialogItems[2])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(gv_eUDialog, PlayerGroupSingle(EventPlayer()), false);
    if ((EventDialogControl() == gv_eUDialogItems[2]) && (gv_theEUEvent[0] > 0)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (gf_NationOfPlayer(EventPlayer()) + StringExternal("Param/Value/DA46B066")));
        PlayerGroupAdd(gv_theEuroCrew, EventPlayer());
        libNtve_gf_SetPlayerGroupAlliance(gv_theEuroCrew, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    }

    if ((EventDialogControl() == gv_eUDialogItems[1]) && (gv_theEUEvent[0] > 0)) {
    }

    if ((EventDialogControl() == gv_eUDialogItems[1]) && (gv_theEUEvent[1] > 0)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (gf_NationOfPlayer(EventPlayer()) + StringExternal("Param/Value/785326B1")));
        libNtve_gf_RemovePlayerGroupFromPlayerGroup(PlayerGroupAll(), gv_theEuroCrew);
        gv_mrPresident = 0;
        auto336CA1B6_g = UnitGroup("EuropeanParliment", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto336CA1B6_u = UnitGroupCount(auto336CA1B6_g, c_unitCountAll);
        for (;; auto336CA1B6_u -= 1) {
            auto336CA1B6_var = UnitGroupUnitFromEnd(auto336CA1B6_g, auto336CA1B6_u);
            if (auto336CA1B6_var == null) { break; }
            UnitKill(auto336CA1B6_var);
        }
        TriggerExecute(gt_ParlimentDed, true, false);
    }

    if ((EventDialogControl() == gv_eUDialogItems[2]) && (gv_theEUEvent[1] > 0)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (PlayerName(EventPlayer()) + StringExternal("Param/Value/58709969")));
        PlayerGroupAdd(gv_theEuroCrew, EventPlayer());
        gv_mrPresident = EventPlayer();
        TriggerExecute(gt_EUCooldown, false, false);
    }

    if ((EventDialogControl() == gv_eUDialogItems[1]) && (gv_theEUEvent[2] > 0)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (gf_NationOfPlayer(EventPlayer()) + StringExternal("Param/Value/2D121CEB")));
        libNtve_gf_RemovePlayerGroupFromPlayerGroup(PlayerGroupSingle(EventPlayer()), gv_theEuroCrew);
        libNtve_gf_SetPlayerGroupAlliance(gv_theEuroCrew, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    }

    if ((EventDialogControl() == gv_eUDialogItems[2]) && (gv_theEUEvent[2] > 0)) {
    }

    if ((EventDialogControl() == gv_eUDialogItems[1]) && (gv_theEUEvent[5] > 0)) {
        gv_theEUEvent[5] = 0;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (gf_NationOfPlayer(EventPlayer()) + StringExternal("Param/Value/6BE57E2C")));
        libNtve_gf_SetPlayerGroupAlliance(gv_theEuroCrew, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    }

    if ((EventDialogControl() == gv_eUDialogItems[2]) && (gv_theEUEvent[5] > 0)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (gf_NationOfPlayer(EventPlayer()) + StringExternal("Param/Value/EE771345")));
        libNtve_gf_AddPlayerGroupToPlayerGroup(PlayerGroupSingle(EventPlayer()), gv_theEuroCrew);
        libNtve_gf_SetPlayerGroupAlliance(gv_theEuroCrew, libNtve_ge_AllianceSetting_AllyWithSharedVision);
        gv_theEUEvent[5] = 0;
        TriggerExecute(gt_LetsRefreshVotes, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_YesNo_Init () {
    gt_YesNo = TriggerCreate("gt_YesNo_Func");
    TriggerAddEventDialogControl(gt_YesNo, c_playerAny, EventDialogControl(), c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Leave EU
//--------------------------------------------------------------------------------------------------
bool gt_LeaveEU_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_eUVoteInProgress == 10000)) {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/4F16BDFE"));
    }
    else {
        libNtve_gf_SetPlayerGroupAlliance(gv_theEuroCrew, libNtve_ge_AllianceSetting_Neutral);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (gf_NationOfPlayer(UnitGetOwner(EventUnit())) + StringExternal("Param/Value/8A609B56")));
        if ((UnitGetOwner(EventUnit()) == gv_mrPresident)) {
            UIDisplayMessage(gv_theEuroCrew, c_messageAreaSubtitle, StringExternal("Param/Value/F1C8696C"));
            gv_yearsUntillVote = 0;
        }

        MinimapPing(PlayerGroupAll(), UnitGetPosition(EventUnit()), 5.0, Color(100.00, 0.00, 0.00));
        PlayerGroupRemove(gv_theEuroCrew, UnitGetOwner(EventUnit()));
        libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "EuropeanUnion", 0);
        libNtve_gf_SetPlayerGroupAlliance(gv_theEuroCrew, libNtve_ge_AllianceSetting_AllyWithSharedVision);
        TriggerExecute(gt_LetsRefreshVotes, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LeaveEU_Init () {
    gt_LeaveEU = TriggerCreate("gt_LeaveEU_Func");
    TriggerAddEventUnitAbility(gt_LeaveEU, null, AbilityCommand("LeaveEuropeanUnion", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: The Birth of an Empire
//--------------------------------------------------------------------------------------------------
bool gt_TheBirthofanEmpire_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto26CF57B6_g;
    int auto26CF57B6_var;

    // Conditions
    if (testConds) {
        if (!((TechTreeUpgradeCount(UnitGetOwner(EventUnitProgressUnit()), "EUBuilt", c_techCountCompleteOnly) != 1))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUnitType() == "EuropeanParliment"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_EUInOrder, true);
    gv_theEUEvent[0] = UnitGetOwner(EventUnitProgressUnit());
    gv_mrPresident = UnitGetOwner(EventUnitProgressUnit());
    gv_yearsUntillVote = 8;
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (gf_NationOfPlayer(UnitGetOwner(EventUnitProgressUnit())) + StringExternal("Param/Value/24830347")));
    PlayerGroupAdd(gv_theEuroCrew, UnitGetOwner(EventUnitProgressUnit()));
    auto26CF57B6_g = gv_users;
    auto26CF57B6_var = -1;
    while (true) {
        auto26CF57B6_var = PlayerGroupNextPlayer(auto26CF57B6_g, auto26CF57B6_var);
        if (auto26CF57B6_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto26CF57B6_var, "EUBuilt", 1);
        if ((auto26CF57B6_var != UnitGetOwner(EventUnitProgressUnit()))) {
            if ((gv_subjugated[auto26CF57B6_var] == false)) {
                DialogSetVisible(gv_eUDialog, PlayerGroupSingle(auto26CF57B6_var), true);
            }

        }

    }
    libNtve_gf_SetDialogItemText(gv_eUDialogItems[0], StringExternal("Param/Value/781CC80F"), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(gv_eUDialogItems[1], StringExternal("Param/Value/906ECC22"), PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_eUDialogItems[1], StringExternal("Param/Value/BE3E6A06"), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(gv_eUDialogItems[2], StringExternal("Param/Value/EB5C5BA6"), PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_eUDialogItems[2], StringExternal("Param/Value/4ACF7E94"), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(gv_eUDialogItems[3], StringExternal("Param/Value/793A0BAB"), PlayerGroupAll());
    TriggerExecute(gt_EUCooldown, true, false);
    Wait(30.0, c_timeGame);
    TriggerExecute(gt_LetsRefreshVotes, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TheBirthofanEmpire_Init () {
    gt_TheBirthofanEmpire = TriggerCreate("gt_TheBirthofanEmpire_Func");
    TriggerAddEventUnitConstructProgress(gt_TheBirthofanEmpire, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Parliment Ded
//--------------------------------------------------------------------------------------------------
bool gt_ParlimentDed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto5D6A9A40_g;
    int auto5D6A9A40_var;

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "EuropeanParliment"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_theEUEvent[0] = 0;
    gv_theEUEvent[1] = 0;
    gv_theEUEvent[2] = 0;
    gv_theEUEvent[3] = 0;
    gv_theEUEvent[4] = 0;
    gv_theEUEvent[5] = 0;
    gv_theEUEvent[6] = 0;
    gv_theEUEvent[7] = 0;
    gv_theEUEvent[8] = 0;
    gv_theEUEvent[9] = 0;
    gv_theEUEvent[10] = 0;
    libNtve_gf_RemovePlayerGroupFromPlayerGroup(PlayerGroupAll(), gv_theEuroCrew);
    gv_mrPresident = 0;
    auto5D6A9A40_g = gv_users;
    auto5D6A9A40_var = -1;
    while (true) {
        auto5D6A9A40_var = PlayerGroupNextPlayer(auto5D6A9A40_g, auto5D6A9A40_var);
        if (auto5D6A9A40_var < 0) { break; }
        libNtve_gf_SetUpgradeLevelForPlayer(auto5D6A9A40_var, "EUBuilt", 0);
    }
    Wait(2.0, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ParlimentDed_Init () {
    gt_ParlimentDed = TriggerCreate("gt_ParlimentDed_Func");
    TriggerAddEventUnitDied(gt_ParlimentDed, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kick Player From EU
//--------------------------------------------------------------------------------------------------
bool gt_KickPlayerFromEU_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_repeat;
    int lv_eUVoters;
    bool lv_canRun;
    int lv_repeatInteger;

    // Automatic Variable Declarations
    const int auto29FAE7E2_ae = 9;
    const int auto29FAE7E2_ai = 1;
    playergroup auto4A2D9021_g;
    int auto4A2D9021_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_eUVoteInProgress == 0))) {
            return false;
        }

        if (!((EventPlayer() != UnitGetOwner(EventUnitTargetUnit())))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_repeatInteger = 1;
    lv_eUVoters = 0;
    lv_repeat = 0;
    gv_yesVotes = 0;
    lv_canRun = false;
    lv_repeat = 1;
    for ( ; ( (auto29FAE7E2_ai >= 0 && lv_repeat <= auto29FAE7E2_ae) || (auto29FAE7E2_ai < 0 && lv_repeat >= auto29FAE7E2_ae) ) ; lv_repeat += auto29FAE7E2_ai ) {
        if ((UnitGetOwner(EventUnitTargetUnit()) == PlayerGroupPlayer(gv_theEuroCrew, lv_repeat))) {
            lv_canRun = true;
        }

        if ((gv_theEUEvent[lv_repeatInteger] == 0)) {
        }
        else {
            lv_canRun = false;
        }
    }
    auto4A2D9021_g = gv_theEuroCrew;
    auto4A2D9021_var = -1;
    while (true) {
        auto4A2D9021_var = PlayerGroupNextPlayer(auto4A2D9021_g, auto4A2D9021_var);
        if (auto4A2D9021_var < 0) { break; }
        lv_eUVoters += 1;
    }
    if ((lv_canRun == true)) {
        gv_eUTarget = UnitGetOwner(EventUnitTargetUnit());
        gv_theEUEvent[3] = gv_eUTarget;
        libNtve_gf_SetDialogItemText(gv_eUDialogItems[0], (StringExternal("Param/Value/C00AE723") + gf_NationOfPlayer(gv_eUTarget)), gv_theEuroCrew);
        libNtve_gf_SetDialogItemText(gv_eUDialogItems[1], StringExternal("Param/Value/5CB0E198"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemTooltip(gv_eUDialogItems[1], StringExternal("Param/Value/3BC9A357"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemText(gv_eUDialogItems[2], StringExternal("Param/Value/B76A4EE6"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemTooltip(gv_eUDialogItems[2], StringExternal("Param/Value/B107C4D7"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemText(gv_eUDialogItems[3], (StringExternal("Param/Value/E6675C49") + (PlayerName(EventPlayer()) + (StringExternal("Param/Value/099AB14B") + (gf_NationOfPlayer(gv_eUTarget) + StringExternal("Param/Value/B734B846"))))), gv_theEuroCrew);
        DialogSetVisible(gv_eUDialog, gv_theEuroCrew, true);
        DialogSetVisible(gv_eUDialog, PlayerGroupSingle(gv_eUTarget), false);
        UIDisplayMessage(PlayerGroupSingle(gv_eUTarget), c_messageAreaSubtitle, ((StringExternal("Param/Value/96D60370") + PlayerName(EventPlayer())) + (StringExternal("Param/Value/AED9449E") + StringExternal("Param/Value/7E22E509"))));
        TriggerExecute(gt_CountVotes, true, false);
        Wait(40.0, c_timeGame);
        DialogSetVisible(gv_eUDialog, PlayerGroupAll(), false);
        UIDisplayMessage(gv_theEuroCrew, c_messageAreaSubtitle, StringExternal("Param/Value/594FADFD"));
        if ((gv_yesVotes > (gv_possibleVotes / 2))) {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/256E6FE6") + (gf_NationOfPlayer(gv_eUTarget) + (StringExternal("Param/Value/860BF320") + (IntToText(gv_yesVotes) + (StringExternal("Param/Value/45642AD5") + IntToText((gv_possibleVotes - gv_yesVotes))))))));
            gv_yay = 0;
            gv_theEUEvent[3] = 0;
            libNtve_gf_RemovePlayerGroupFromPlayerGroup(PlayerGroupSingle(gv_eUTarget), gv_theEuroCrew);
            libNtve_gf_SetAlliance(PlayerGroupPlayer(gv_theEuroCrew, 1), gv_eUTarget, libNtve_ge_AllianceSetting_Neutral);
            libNtve_gf_SetAlliance(PlayerGroupPlayer(gv_theEuroCrew, 2), gv_eUTarget, libNtve_ge_AllianceSetting_Neutral);
            libNtve_gf_SetAlliance(PlayerGroupPlayer(gv_theEuroCrew, 3), gv_eUTarget, libNtve_ge_AllianceSetting_Neutral);
            libNtve_gf_SetAlliance(PlayerGroupPlayer(gv_theEuroCrew, 4), gv_eUTarget, libNtve_ge_AllianceSetting_Neutral);
            libNtve_gf_SetAlliance(PlayerGroupPlayer(gv_theEuroCrew, 5), gv_eUTarget, libNtve_ge_AllianceSetting_Neutral);
            libNtve_gf_SetAlliance(PlayerGroupPlayer(gv_theEuroCrew, 6), gv_eUTarget, libNtve_ge_AllianceSetting_Neutral);
            libNtve_gf_SetAlliance(PlayerGroupPlayer(gv_theEuroCrew, 7), gv_eUTarget, libNtve_ge_AllianceSetting_Neutral);
            libNtve_gf_SetAlliance(PlayerGroupPlayer(gv_theEuroCrew, 8), gv_eUTarget, libNtve_ge_AllianceSetting_Neutral);
            libNtve_gf_SetAlliance(PlayerGroupPlayer(gv_theEuroCrew, 9), gv_eUTarget, libNtve_ge_AllianceSetting_Neutral);
            TriggerExecute(gt_LetsRefreshVotes, true, false);
        }
        else {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/6CE35C07") + (gf_NationOfPlayer(gv_eUTarget) + (StringExternal("Param/Value/53F746ED") + (IntToText(gv_yay) + (StringExternal("Param/Value/5E0CD37C") + IntToText((lv_eUVoters - gv_yay))))))));
            gv_yay = 0;
            gv_theEUEvent[3] = 0;
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/5496B6EB"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KickPlayerFromEU_Init () {
    gt_KickPlayerFromEU = TriggerCreate("gt_KickPlayerFromEU_Func");
    TriggerAddEventUnitAbility(gt_KickPlayerFromEU, null, AbilityCommand("KickFromEU", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Invite to EU
//--------------------------------------------------------------------------------------------------
bool gt_InvitetoEU_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_repeat;
    int lv_eUVoters;
    bool lv_canRun;
    int lv_repeatInteger;

    // Automatic Variable Declarations
    const int auto676A954E_ae = 9;
    const int auto676A954E_ai = 1;
    playergroup auto60770A8D_g;
    int auto60770A8D_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_eUVoteInProgress == 0))) {
            return false;
        }

        if (!((EventPlayer() != UnitGetOwner(EventUnitTargetUnit())))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_repeatInteger = 1;
    lv_eUVoters = 0;
    lv_repeat = 0;
    lv_canRun = true;
    lv_repeat = 1;
    for ( ; ( (auto676A954E_ai >= 0 && lv_repeat <= auto676A954E_ae) || (auto676A954E_ai < 0 && lv_repeat >= auto676A954E_ae) ) ; lv_repeat += auto676A954E_ai ) {
        if ((gv_theEUEvent[lv_repeat] == 0)) {
        }
        else {
            lv_canRun = false;
        }
        if ((UnitGetOwner(EventUnitTargetUnit()) != PlayerGroupPlayer(gv_theEuroCrew, lv_repeat))) {
        }
        else {
            lv_canRun = false;
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/C9843BB0"));
        }
    }
    auto60770A8D_g = gv_theEuroCrew;
    auto60770A8D_var = -1;
    while (true) {
        auto60770A8D_var = PlayerGroupNextPlayer(auto60770A8D_g, auto60770A8D_var);
        if (auto60770A8D_var < 0) { break; }
        lv_eUVoters += 1;
    }
    if ((TechTreeUpgradeCount(UnitGetOwner(EventUnitTargetUnit()), "Subjugated", c_techCountQueuedOrBetter) == 1)) {
        lv_canRun = false;
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/4AEDA93B"));
    }

    if ((lv_canRun == true)) {
        gv_eUTarget = UnitGetOwner(EventUnitTargetUnit());
        gv_theEUEvent[4] = gv_eUTarget;
        gv_yesVotes = 0;
        libNtve_gf_SetDialogItemText(gv_eUDialogItems[0], (StringExternal("Param/Value/227AEED3") + gf_NationOfPlayer(gv_eUTarget)), gv_theEuroCrew);
        libNtve_gf_SetDialogItemText(gv_eUDialogItems[1], StringExternal("Param/Value/9B31F3B5"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemTooltip(gv_eUDialogItems[1], StringExternal("Param/Value/1BC5D5AA"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemText(gv_eUDialogItems[2], StringExternal("Param/Value/E3084C16"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemTooltip(gv_eUDialogItems[2], StringExternal("Param/Value/30EE04C6"), gv_theEuroCrew);
        libNtve_gf_SetDialogItemText(gv_eUDialogItems[3], (StringExternal("Param/Value/95EE7DB2") + (PlayerName(EventPlayer()) + (StringExternal("Param/Value/782C7973") + (gf_NationOfPlayer(gv_eUTarget) + StringExternal("Param/Value/37E47DCB"))))), gv_theEuroCrew);
        DialogSetVisible(gv_eUDialog, gv_theEuroCrew, true);
        TriggerExecute(gt_CountVotes, true, false);
        Wait(40.0, c_timeGame);
        UIDisplayMessage(gv_theEuroCrew, c_messageAreaSubtitle, StringExternal("Param/Value/8E73E241"));
        DialogSetVisible(gv_eUDialog, PlayerGroupAll(), false);
        if ((gv_yesVotes > (gv_possibleVotes / 2))) {
            UIDisplayMessage(gv_theEuroCrew, c_messageAreaSubtitle, (StringExternal("Param/Value/02A20032") + (IntToText(gv_yesVotes) + (StringExternal("Param/Value/D519170A") + IntToText((gv_possibleVotes - gv_yesVotes))))));
            gv_yay = 0;
            gv_theEUEvent[4] = 0;
            gv_theEUEvent[5] = 1;
            gv_yesVotes = 0;
            libNtve_gf_SetDialogItemText(gv_eUDialogItems[0], StringExternal("Param/Value/DD9A9378"), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(gv_eUDialogItems[1], StringExternal("Param/Value/E1DB9505"), PlayerGroupAll());
            libNtve_gf_SetDialogItemTooltip(gv_eUDialogItems[1], StringExternal("Param/Value/208722F6"), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(gv_eUDialogItems[2], StringExternal("Param/Value/62EBC1CE"), PlayerGroupAll());
            libNtve_gf_SetDialogItemTooltip(gv_eUDialogItems[2], StringExternal("Param/Value/851604FD"), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(gv_eUDialogItems[3], StringExternal("Param/Value/12A3BEA3"), PlayerGroupAll());
            DialogSetVisible(gv_eUDialog, PlayerGroupSingle(gv_eUTarget), true);
        }
        else {
            UIDisplayMessage(gv_theEuroCrew, c_messageAreaSubtitle, (StringExternal("Param/Value/570FA83C") + (IntToText(gv_yesVotes) + (StringExternal("Param/Value/E54E6396") + IntToText((gv_possibleVotes - gv_yesVotes))))));
            gv_yay = 0;
            gv_theEUEvent[4] = 0;
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/C8385180"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InvitetoEU_Init () {
    gt_InvitetoEU = TriggerCreate("gt_InvitetoEU_Func");
    TriggerAddEventUnitAbility(gt_InvitetoEU, null, AbilityCommand("InvitetoEU", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Declare Independence
//--------------------------------------------------------------------------------------------------
bool gt_DeclareIndependence_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_overlord;

    // Automatic Variable Declarations
    const int auto145BE770_n = 11;
    int auto145BE770_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_subjugated[EventPlayer()] == false)) {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/477C4EB1"));
    }
    else {
        if ((gv_yearPressed[EventPlayer()] == gv_year)) {
            if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= gv_independenceCost[EventPlayer()])) {
                lv_overlord = gv_subjugator[EventPlayer()];
                PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, gv_independenceCost[EventPlayer()]);
                gf_DeSubjugatePlayer(EventPlayer());
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, ((TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/C72A7AD0")) + (TextWithColor(gf_NationOfPlayer(lv_overlord), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_overlord, false))) + StringExternal("Param/Value/048017A8"))));
                Wait(5.0, c_timeGame);
                gf_WarDeclare(lv_overlord, EventPlayer());
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, (StringExternal("Param/Value/0916D281") + gf_MakeUIPresentable(gv_yearPressed[EventPlayer()])));
            }
        }
        else {
            gv_independenceCost[EventPlayer()] = libNtve_gf_ArithmeticIntClamp(gv_gDP[gv_subjugator[EventPlayer()]], 10000, 10000000);
            gv_yearPressed[EventPlayer()] = gv_year;
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, (gf_MakeUIPresentable(gv_independenceCost[EventPlayer()]) + StringExternal("Param/Value/5A08CB19")));
            if ((gv_month == 12)) {
                for (auto145BE770_i = 1; auto145BE770_i <= auto145BE770_n; auto145BE770_i += 1) {
                    Wait(1.0, c_timeGame);
                    if ((gv_month == 1)) {
                        gv_yearPressed[EventPlayer()] = gv_year;
                        break;
                    }

                }
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DeclareIndependence_Init () {
    gt_DeclareIndependence = TriggerCreate("gt_DeclareIndependence_Func");
    TriggerAddEventUnitAbility(gt_DeclareIndependence, null, AbilityCommand("AgitateForREVOLUTION", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CustomLedgerForGame
//--------------------------------------------------------------------------------------------------
bool gt_CustomLedgerForGame_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto40F96ACA_g;
    int auto40F96ACA_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto40F96ACA_g = gv_users;
    auto40F96ACA_var = -1;
    while (true) {
        auto40F96ACA_var = PlayerGroupNextPlayer(auto40F96ACA_g, auto40F96ACA_var);
        if (auto40F96ACA_var < 0) { break; }
        DialogControlSetVisible(gv_ledgerGovernment[auto40F96ACA_var], PlayerGroupAll(), true);
        DialogControlSetVisible(gv_ledgerDiplopolicy[auto40F96ACA_var], PlayerGroupAll(), true);
        DialogControlSetVisible(gv_ledgerGDP[auto40F96ACA_var], PlayerGroupAll(), true);
        DialogControlSetVisible(gv_ledgerWarpolicy[auto40F96ACA_var], PlayerGroupAll(), true);
        DialogControlSetVisible(gv_ledgerLosses[auto40F96ACA_var], PlayerGroupAll(), true);
        DialogControlSetVisible(gv_ledgerLosses[(auto40F96ACA_var + 7)], PlayerGroupAll(), true);
        DialogControlSetVisible(gv_ledgerPop[auto40F96ACA_var], PlayerGroupAll(), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CustomLedgerForGame_Init () {
    gt_CustomLedgerForGame = TriggerCreate("gt_CustomLedgerForGame_Func");
    TriggerAddEventTimeElapsed(gt_CustomLedgerForGame, 10.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ledger
//--------------------------------------------------------------------------------------------------
bool gt_Ledger_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_laze;

    // Automatic Variable Declarations
    const int auto3502E02D_ae = 14;
    const int auto3502E02D_ai = 1;
    const int auto25E6CF9E_ae = 7;
    const int auto25E6CF9E_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(760, ((PlayerGroupCount(gv_users) * 52) + 110), c_anchorTopLeft, 153, 180, true);
    gv_dialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_dialog, 200, 20, c_anchorTop, 50, 25, StringExternal("Param/Value/F448C20B"), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(gv_dialog, 150, 20, c_anchorTopLeft, 20, 70, StringExternal("Param/Value/19FC4811"), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(gv_dialog, 60, 20, c_anchorTopLeft, 270, 70, StringExternal("Param/Value/72EF1B78"), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(gv_dialog, 40, 20, c_anchorTopLeft, 356, 70, StringExternal("Param/Value/174A755A"), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(gv_dialog, 100, 20, c_anchorTopLeft, 401, 70, StringExternal("Param/Value/68CF1A82"), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(gv_dialog, 100, 20, c_anchorTopLeft, 460, 70, StringExternal("Param/Value/C7C9B969"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/2EB7C5FE"), PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(gv_dialog, 100, 20, c_anchorTopLeft, 560, 70, StringExternal("Param/Value/22E05B0F"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/FAAF53A3"), PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(gv_dialog, 100, 20, c_anchorTopLeft, 660, 70, StringExternal("Param/Value/DEA2A62B"), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(gv_dialog, 250, 20, c_anchorTopLeft, 20, 100, PlayerName(1), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(1, false)), false, 2.0);
    gv_ledgerNames[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Void_RegularSmall", PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(gv_dialog, 250, 20, c_anchorTopLeft, 20, 150, PlayerName(2), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(2, false)), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Void_RegularSmall", PlayerGroupAll());
    gv_ledgerNames[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_dialog, 250, 20, c_anchorTopLeft, 20, 200, PlayerName(3), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(3, false)), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Void_RegularSmall", PlayerGroupAll());
    gv_ledgerNames[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_dialog, 250, 20, c_anchorTopLeft, 20, 250, PlayerName(4), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(4, false)), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Void_RegularSmall", PlayerGroupAll());
    gv_ledgerNames[4] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_dialog, 250, 20, c_anchorTopLeft, 20, 300, PlayerName(5), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(5, false)), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Void_RegularSmall", PlayerGroupAll());
    gv_ledgerNames[5] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_dialog, 250, 20, c_anchorTopLeft, 20, 350, PlayerName(6), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(6, false)), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Void_RegularSmall", PlayerGroupAll());
    gv_ledgerNames[6] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_dialog, 250, 20, c_anchorTopLeft, 20, 400, PlayerName(7), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(7, false)), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Void_RegularSmall", PlayerGroupAll());
    gv_ledgerNames[7] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 10, 10, c_anchorTopLeft, 18, 107, StringToText(""), "Assets\\EU\\EUIcon.tga", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_ledgerEU[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 10, 10, c_anchorTopLeft, 18, 157, StringToText(""), "Assets\\EU\\EUIcon.tga", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_ledgerEU[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 10, 10, c_anchorTopLeft, 18, 207, StringToText(""), "Assets\\EU\\EUIcon.tga", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_ledgerEU[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 10, 10, c_anchorTopLeft, 18, 257, StringToText(""), "Assets\\EU\\EUIcon.tga", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_ledgerEU[4] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 10, 10, c_anchorTopLeft, 18, 307, StringToText(""), "Assets\\EU\\EUIcon.tga", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_ledgerEU[5] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 10, 10, c_anchorTopLeft, 18, 357, StringToText(""), "Assets\\EU\\EUIcon.tga", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_ledgerEU[6] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 10, 10, c_anchorTopLeft, 18, 407, StringToText(""), "Assets\\EU\\EUIcon.tga", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_ledgerEU[7] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 10, 10, c_anchorTopLeft, 18, 457, StringToText(""), "Assets\\EU\\EUIcon.tga", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_ledgerEU[8] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 10, 10, c_anchorTopLeft, 18, 557, StringToText(""), "Assets\\EU\\EUIcon.tga", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_ledgerEU[9] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 25, 25, c_anchorTopLeft, 360, 98, StringToText(""), "Assets\\Textures\\ui_trial_frame_blackbox.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_ledgerGovernment[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 25, 25, c_anchorTopLeft, 360, 148, StringToText(""), "Assets\\Textures\\ui_trial_frame_blackbox.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_ledgerGovernment[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 25, 25, c_anchorTopLeft, 360, 198, StringToText(""), "Assets\\Textures\\ui_trial_frame_blackbox.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_ledgerGovernment[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 25, 25, c_anchorTopLeft, 360, 248, StringToText(""), "Assets\\Textures\\ui_trial_frame_blackbox.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_ledgerGovernment[4] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 25, 25, c_anchorTopLeft, 360, 298, StringToText(""), "Assets\\Textures\\ui_trial_frame_blackbox.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_ledgerGovernment[5] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 25, 25, c_anchorTopLeft, 360, 348, StringToText(""), "Assets\\Textures\\ui_trial_frame_blackbox.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_ledgerGovernment[6] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 25, 25, c_anchorTopLeft, 360, 398, StringToText(""), "Assets\\Textures\\ui_trial_frame_blackbox.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_ledgerGovernment[7] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 25, 25, c_anchorTopLeft, 360, 448, StringToText(""), "Assets\\Textures\\ui_trial_frame_blackbox.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_ledgerGovernment[8] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 25, 25, c_anchorTopLeft, 360, 498, StringToText(""), "Assets\\Textures\\ui_trial_frame_blackbox.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_ledgerGovernment[9] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 25, 25, c_anchorTopLeft, 407, 98, StringToText(""), "Assets\\Textures\\ui_trial_frame_blackbox.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_ledgerWarpolicy[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 25, 25, c_anchorTopLeft, 407, 148, StringToText(""), "Assets\\Textures\\ui_trial_frame_blackbox.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_ledgerWarpolicy[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 25, 25, c_anchorTopLeft, 407, 198, StringToText(""), "Assets\\Textures\\ui_trial_frame_blackbox.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_ledgerWarpolicy[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 25, 25, c_anchorTopLeft, 407, 248, StringToText(""), "Assets\\Textures\\ui_trial_frame_blackbox.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_ledgerWarpolicy[4] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 25, 25, c_anchorTopLeft, 407, 298, StringToText(""), "Assets\\Textures\\ui_trial_frame_blackbox.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_ledgerWarpolicy[5] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 25, 25, c_anchorTopLeft, 407, 348, StringToText(""), "Assets\\Textures\\ui_trial_frame_blackbox.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_ledgerWarpolicy[6] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 25, 25, c_anchorTopLeft, 407, 398, StringToText(""), "Assets\\Textures\\ui_trial_frame_blackbox.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_ledgerWarpolicy[7] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 25, 25, c_anchorTopLeft, 407, 448, StringToText(""), "Assets\\Textures\\ui_trial_frame_blackbox.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_ledgerWarpolicy[8] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 25, 25, c_anchorTopLeft, 407, 498, StringToText(""), "Assets\\Textures\\ui_trial_frame_blackbox.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_ledgerWarpolicy[9] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 120, 20, c_anchorTopLeft, 270, 100, StringExternal("Param/Value/82F53F81"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_ledgerGDP[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 120, 20, c_anchorTopLeft, 270, 150, StringExternal("Param/Value/8A5C1607"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_ledgerGDP[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 120, 20, c_anchorTopLeft, 270, 200, StringExternal("Param/Value/68409065"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_ledgerGDP[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 120, 20, c_anchorTopLeft, 270, 250, StringExternal("Param/Value/C8672934"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_ledgerGDP[4] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 120, 20, c_anchorTopLeft, 270, 300, StringExternal("Param/Value/C69C8090"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_ledgerGDP[5] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 120, 20, c_anchorTopLeft, 270, 350, StringExternal("Param/Value/EBED3E55"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_ledgerGDP[6] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 120, 20, c_anchorTopLeft, 270, 400, StringExternal("Param/Value/D36C5AA8"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_ledgerGDP[7] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 120, 20, c_anchorTopLeft, 270, 450, StringExternal("Param/Value/E18D4CF1"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_ledgerGDP[8] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 120, 20, c_anchorTopLeft, 270, 500, StringExternal("Param/Value/4C479F6E"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_ledgerGDP[9] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 120, 20, c_anchorTopLeft, 460, 100, StringExternal("Param/Value/90D92616"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_ledgerLosses[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 120, 20, c_anchorTopLeft, 460, 150, StringExternal("Param/Value/4F86597E"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_ledgerLosses[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 120, 20, c_anchorTopLeft, 460, 200, StringExternal("Param/Value/887F231F"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_ledgerLosses[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 120, 20, c_anchorTopLeft, 460, 250, StringExternal("Param/Value/9E9A98B5"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_ledgerLosses[4] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 120, 20, c_anchorTopLeft, 460, 300, StringExternal("Param/Value/DBCA12F5"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_ledgerLosses[5] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 120, 20, c_anchorTopLeft, 460, 350, StringExternal("Param/Value/4FCE03EF"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_ledgerLosses[6] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 120, 20, c_anchorTopLeft, 460, 400, StringExternal("Param/Value/6F963231"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_ledgerLosses[7] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 120, 20, c_anchorTopLeft, 560, 100, StringExternal("Param/Value/52B3FC48"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_ledgerLosses[8] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 120, 20, c_anchorTopLeft, 560, 150, StringExternal("Param/Value/BE2F46B0"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_ledgerLosses[9] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 120, 20, c_anchorTopLeft, 560, 200, StringExternal("Param/Value/3D988B94"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_ledgerLosses[10] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 120, 20, c_anchorTopLeft, 560, 250, StringExternal("Param/Value/12CBF173"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_ledgerLosses[11] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 120, 20, c_anchorTopLeft, 560, 300, StringExternal("Param/Value/8D8681B3"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_ledgerLosses[12] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 120, 20, c_anchorTopLeft, 560, 350, StringExternal("Param/Value/B7E3A718"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_ledgerLosses[13] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 120, 20, c_anchorTopLeft, 560, 400, StringExternal("Param/Value/79F6B2C3"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_ledgerLosses[14] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 120, 20, c_anchorTopLeft, 660, 100, StringExternal("Param/Value/9EB3D327"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_ledgerPop[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 120, 20, c_anchorTopLeft, 660, 150, StringExternal("Param/Value/8ED831B8"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_ledgerPop[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 120, 20, c_anchorTopLeft, 660, 200, StringExternal("Param/Value/E4D0434C"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_ledgerPop[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 120, 20, c_anchorTopLeft, 660, 250, StringExternal("Param/Value/7754D6DA"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_ledgerPop[4] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 120, 20, c_anchorTopLeft, 660, 300, StringExternal("Param/Value/3199ED49"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_ledgerPop[5] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 120, 20, c_anchorTopLeft, 660, 350, StringExternal("Param/Value/BDDB87DE"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_ledgerPop[6] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 120, 20, c_anchorTopLeft, 660, 400, StringExternal("Param/Value/2D7D0D10"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_ledgerPop[7] = DialogControlLastCreated();
    DialogSetImage(gv_dialog, "Assets\\Textures\\ui_scrollbar_frame.dds");
    DialogControlSetVisible(gv_ledgerEU[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_ledgerEU[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_ledgerEU[3], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_ledgerEU[4], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_ledgerEU[5], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_ledgerEU[6], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_ledgerEU[7], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_ledgerEU[8], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_ledgerEU[9], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_ledgerGovernment[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_ledgerGovernment[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_ledgerGovernment[3], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_ledgerGovernment[4], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_ledgerGovernment[5], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_ledgerGovernment[6], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_ledgerGovernment[7], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_ledgerGovernment[8], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_ledgerGovernment[9], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_ledgerDiplopolicy[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_ledgerDiplopolicy[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_ledgerDiplopolicy[3], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_ledgerDiplopolicy[4], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_ledgerDiplopolicy[5], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_ledgerDiplopolicy[6], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_ledgerDiplopolicy[7], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_ledgerDiplopolicy[8], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_ledgerDiplopolicy[9], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_ledgerGDP[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_ledgerGDP[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_ledgerGDP[3], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_ledgerGDP[4], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_ledgerGDP[5], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_ledgerGDP[6], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_ledgerGDP[7], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_ledgerGDP[8], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_ledgerGDP[9], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_ledgerWarpolicy[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_ledgerWarpolicy[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_ledgerWarpolicy[3], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_ledgerWarpolicy[4], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_ledgerWarpolicy[5], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_ledgerWarpolicy[6], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_ledgerWarpolicy[7], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_ledgerWarpolicy[8], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_ledgerWarpolicy[9], PlayerGroupAll(), false);
    lv_laze = 1;
    for ( ; ( (auto3502E02D_ai >= 0 && lv_laze <= auto3502E02D_ae) || (auto3502E02D_ai < 0 && lv_laze >= auto3502E02D_ae) ) ; lv_laze += auto3502E02D_ai ) {
        DialogControlSetVisible(gv_ledgerLosses[lv_laze], PlayerGroupAll(), false);
    }
    lv_laze = 1;
    for ( ; ( (auto25E6CF9E_ai >= 0 && lv_laze <= auto25E6CF9E_ae) || (auto25E6CF9E_ai < 0 && lv_laze >= auto25E6CF9E_ae) ) ; lv_laze += auto25E6CF9E_ai ) {
        DialogControlSetVisible(gv_ledgerPop[lv_laze], PlayerGroupAll(), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Ledger_Init () {
    gt_Ledger = TriggerCreate("gt_Ledger_Func");
    TriggerAddEventMapInit(gt_Ledger);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Show Ledger and EU Dialog Refreseh
//--------------------------------------------------------------------------------------------------
bool gt_ShowLedgerandEUDialogRefreseh_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_count;
    bool[10] lv_eU;

    // Automatic Variable Declarations
    const int auto2E5DE078_ae = 9;
    const int auto2E5DE078_ai = 1;
    playergroup autoB7C561C3_g;
    int autoB7C561C3_var;
    playergroup auto75CD4586_g;
    int auto75CD4586_var;
    playergroup autoBAC8806E_g;
    int autoBAC8806E_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_count = 1;
    lv_count = 1;
    for ( ; ( (auto2E5DE078_ai >= 0 && lv_count <= auto2E5DE078_ae) || (auto2E5DE078_ai < 0 && lv_count >= auto2E5DE078_ae) ) ; lv_count += auto2E5DE078_ai ) {
        lv_eU[lv_count] = false;
    }
    autoB7C561C3_g = gv_theEuroCrew;
    autoB7C561C3_var = -1;
    while (true) {
        autoB7C561C3_var = PlayerGroupNextPlayer(autoB7C561C3_g, autoB7C561C3_var);
        if (autoB7C561C3_var < 0) { break; }
        lv_eU[autoB7C561C3_var] = true;
    }
    auto75CD4586_g = gv_users;
    auto75CD4586_var = -1;
    while (true) {
        auto75CD4586_var = PlayerGroupNextPlayer(auto75CD4586_g, auto75CD4586_var);
        if (auto75CD4586_var < 0) { break; }
        if ((TechTreeUpgradeCount(auto75CD4586_var, "Communism", c_techCountQueuedOrBetter) == 1)) {
            libNtve_gf_SetDialogItemImage(gv_ledgerGovernment[auto75CD4586_var], "btn-hammersickle.dds", PlayerGroupAll());
        }

        if ((TechTreeUpgradeCount(auto75CD4586_var, "SocialistRepublic", c_techCountQueuedOrBetter) == 1)) {
            libNtve_gf_SetDialogItemImage(gv_ledgerGovernment[auto75CD4586_var], "btn-socialism.dds", PlayerGroupAll());
        }

        if ((TechTreeUpgradeCount(auto75CD4586_var, "NeoFederation", c_techCountQueuedOrBetter) == 1)) {
            libNtve_gf_SetDialogItemImage(gv_ledgerGovernment[auto75CD4586_var], "btn-neofederation.dds", PlayerGroupAll());
        }

        if ((TechTreeUpgradeCount(auto75CD4586_var, "DirectDemocracy", c_techCountQueuedOrBetter) == 1)) {
            libNtve_gf_SetDialogItemImage(gv_ledgerGovernment[auto75CD4586_var], "Direct Democracy.dds", PlayerGroupAll());
        }

        if ((TechTreeUpgradeCount(auto75CD4586_var, "Neofascism", c_techCountQueuedOrBetter) == 1)) {
            libNtve_gf_SetDialogItemImage(gv_ledgerGovernment[auto75CD4586_var], "btn-fascism.dds", PlayerGroupAll());
        }

        if ((TechTreeUpgradeCount(auto75CD4586_var, "GrandEmpire", c_techCountQueuedOrBetter) == 1)) {
            libNtve_gf_SetDialogItemImage(gv_ledgerGovernment[auto75CD4586_var], "Grand Empire.dds", PlayerGroupAll());
        }

        if ((TechTreeUpgradeCount(auto75CD4586_var, "FauxDemocracy", c_techCountQueuedOrBetter) == 1)) {
            libNtve_gf_SetDialogItemImage(gv_ledgerGovernment[auto75CD4586_var], "btn-fauxdemocracy.dds", PlayerGroupAll());
        }

        if ((TechTreeUpgradeCount(auto75CD4586_var, "Corporatocracy", c_techCountQueuedOrBetter) == 1)) {
            libNtve_gf_SetDialogItemImage(gv_ledgerGovernment[auto75CD4586_var], "btn-corporatocracy.dds", PlayerGroupAll());
        }

        if ((TechTreeUpgradeCount(auto75CD4586_var, "DefensiveWar", c_techCountQueuedOrBetter) == 1)) {
            libNtve_gf_SetDialogItemImage(gv_ledgerWarpolicy[auto75CD4586_var], "Assets\\Millitary Policies\\Defensive War.dds", PlayerGroupAll());
        }

        if ((TechTreeUpgradeCount(auto75CD4586_var, "LimitedWar", c_techCountQueuedOrBetter) == 1)) {
            libNtve_gf_SetDialogItemImage(gv_ledgerWarpolicy[auto75CD4586_var], "Assets\\Millitary Policies\\Limited War.dds", PlayerGroupAll());
        }

        if ((TechTreeUpgradeCount(auto75CD4586_var, "TotalWar", c_techCountQueuedOrBetter) == 1)) {
            libNtve_gf_SetDialogItemImage(gv_ledgerWarpolicy[auto75CD4586_var], "Assets\\Millitary Policies\\Total War.dds", PlayerGroupAll());
        }

        if ((TechTreeUpgradeCount(auto75CD4586_var, "InhumaneWar", c_techCountQueuedOrBetter) == 1)) {
            libNtve_gf_SetDialogItemImage(gv_ledgerWarpolicy[auto75CD4586_var], "Assets\\Millitary Policies\\Inhumane War.dds", PlayerGroupAll());
        }

        if ((TechTreeUpgradeCount(auto75CD4586_var, "Pacifist", c_techCountQueuedOrBetter) == 1)) {
            libNtve_gf_SetDialogItemImage(gv_ledgerWarpolicy[auto75CD4586_var], "Assets\\Diplomatic Policies\\Pacifisim.dds", PlayerGroupAll());
        }

    }
    autoBAC8806E_g = gv_users;
    autoBAC8806E_var = -1;
    while (true) {
        autoBAC8806E_var = PlayerGroupNextPlayer(autoBAC8806E_g, autoBAC8806E_var);
        if (autoBAC8806E_var < 0) { break; }
        if ((lv_eU[autoBAC8806E_var] == true)) {
            DialogControlSetVisible(gv_ledgerEU[autoBAC8806E_var], PlayerGroupAll(), true);
        }
        else {
            DialogControlSetVisible(gv_ledgerEU[autoBAC8806E_var], PlayerGroupAll(), false);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShowLedgerandEUDialogRefreseh_Init () {
    gt_ShowLedgerandEUDialogRefreseh = TriggerCreate("gt_ShowLedgerandEUDialogRefreseh_Func");
    TriggerAddEventTimePeriodic(gt_ShowLedgerandEUDialogRefreseh, 15.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hide/ShowLedger UI
//--------------------------------------------------------------------------------------------------
bool gt_HideShowLedgerUI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(160, 38, c_anchorTopLeft, 0, 475, true);
    gv_hideShowLedger = DialogLastCreated();
    DialogSetImage(gv_hideShowLedger, "Assets\\Textures\\ui_scrollbar_frame.dds");
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 160, 38, c_anchorCenter, 0, 0, StringToText(""), StringExternal("Param/Value/7C326E80"), "");
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    gv_hideShowLedgerDialog[0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 160, 38, c_anchorCenter, 0, 0, StringToText(""), StringExternal("Param/Value/1F196A8E"), "");
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    gv_hideShowLedgerDialog[1] = DialogControlLastCreated();
    DialogControlSetVisible(gv_hideShowLedgerDialog[1], PlayerGroupAll(), false);
    DialogSetVisible(gv_hideShowLedger, PlayerGroupAll(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HideShowLedgerUI_Init () {
    gt_HideShowLedgerUI = TriggerCreate("gt_HideShowLedgerUI_Func");
    TriggerAddEventTimeElapsed(gt_HideShowLedgerUI, 2.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Show Dialog
//--------------------------------------------------------------------------------------------------
bool gt_ShowDialog_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_hideShowLedgerDialog[0]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_hideShowLedgerDialog[0], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_hideShowLedgerDialog[1], PlayerGroupSingle(EventPlayer()), true);
    DialogSetVisible(gv_dialog, PlayerGroupSingle(EventPlayer()), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShowDialog_Init () {
    gt_ShowDialog = TriggerCreate("gt_ShowDialog_Func");
    TriggerAddEventDialogControl(gt_ShowDialog, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Close Dialog
//--------------------------------------------------------------------------------------------------
bool gt_CloseDialog_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_hideShowLedgerDialog[1]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_hideShowLedgerDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_hideShowLedgerDialog[0], PlayerGroupSingle(EventPlayer()), true);
    DialogSetVisible(gv_dialog, PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CloseDialog_Init () {
    gt_CloseDialog = TriggerCreate("gt_CloseDialog_Func");
    TriggerAddEventDialogControl(gt_CloseDialog, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ApplyBehaviors
//--------------------------------------------------------------------------------------------------
bool gt_ApplyBehaviors_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnitCreatedUnit()) < 8))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeUpgradeCount(UnitGetOwner(EventUnitCreatedUnit()), "Communism", c_techCountCompleteOnly) == 1)) {
        UnitBehaviorAdd(EventUnitCreatedUnit(), "TotalistCommune", EventUnitCreatedUnit(), 1);
    }

    if ((TechTreeUpgradeCount(UnitGetOwner(EventUnitCreatedUnit()), "SocialistRepublic", c_techCountCompleteOnly) == 1)) {
        UnitBehaviorAdd(EventUnitCreatedUnit(), "SyndaclistCommune", EventUnitCreatedUnit(), 1);
    }

    if ((TechTreeUpgradeCount(UnitGetOwner(EventUnitCreatedUnit()), "NeoFederation", c_techCountCompleteOnly) == 1)) {
        UnitBehaviorAdd(EventUnitCreatedUnit(), "WelfareDemocracy", EventUnitCreatedUnit(), 1);
    }

    if ((TechTreeUpgradeCount(UnitGetOwner(EventUnitCreatedUnit()), "DirectDemocracy", c_techCountCompleteOnly) == 1)) {
        UnitBehaviorAdd(EventUnitCreatedUnit(), "CapitalistDemocracy", EventUnitCreatedUnit(), 1);
    }

    if ((TechTreeUpgradeCount(UnitGetOwner(EventUnitCreatedUnit()), "GrandEmpire", c_techCountCompleteOnly) == 1)) {
        UnitBehaviorAdd(EventUnitCreatedUnit(), "GrandEmpire", EventUnitCreatedUnit(), 1);
    }

    if ((TechTreeUpgradeCount(UnitGetOwner(EventUnitCreatedUnit()), "Corporatocracy", c_techCountCompleteOnly) == 1)) {
        UnitBehaviorAdd(EventUnitCreatedUnit(), "Corporatocracy", EventUnitCreatedUnit(), 1);
    }

    if ((TechTreeUpgradeCount(UnitGetOwner(EventUnitCreatedUnit()), "Neofascism", c_techCountCompleteOnly) == 1)) {
        UnitBehaviorAdd(EventUnitCreatedUnit(), "NeoFascism", EventUnitCreatedUnit(), 1);
    }

    if ((TechTreeUpgradeCount(UnitGetOwner(EventUnitCreatedUnit()), "Pacifist", c_techCountCompleteOnly) == 1)) {
        UnitBehaviorAdd(EventUnitCreatedUnit(), "Pacifist", EventUnitCreatedUnit(), 1);
    }

    if ((TechTreeUpgradeCount(UnitGetOwner(EventUnitCreatedUnit()), "DefensiveWar", c_techCountCompleteOnly) == 1)) {
        UnitBehaviorAdd(EventUnitCreatedUnit(), "DefensiveWar", EventUnitCreatedUnit(), 1);
    }

    if ((TechTreeUpgradeCount(UnitGetOwner(EventUnitCreatedUnit()), "LimitedWar", c_techCountCompleteOnly) == 1)) {
        UnitBehaviorAdd(EventUnitCreatedUnit(), "LimitedWar", EventUnitCreatedUnit(), 1);
    }

    if ((TechTreeUpgradeCount(UnitGetOwner(EventUnitCreatedUnit()), "TotalWar", c_techCountCompleteOnly) == 1)) {
        UnitBehaviorAdd(EventUnitCreatedUnit(), "TotalWar", EventUnitCreatedUnit(), 1);
    }

    if ((TechTreeUpgradeCount(UnitGetOwner(EventUnitCreatedUnit()), "InhumaneWar", c_techCountCompleteOnly) == 1)) {
        UnitBehaviorAdd(EventUnitCreatedUnit(), "InhumaneWar", EventUnitCreatedUnit(), 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ApplyBehaviors_Init () {
    gt_ApplyBehaviors = TriggerCreate("gt_ApplyBehaviors_Func");
    TriggerAddEventUnitCreated(gt_ApplyBehaviors, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Change War Policy
//--------------------------------------------------------------------------------------------------
bool gt_ChangeWarPolicy_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) < 8))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitAbility() == AbilityCommand("InhumaneWar", 0))) {
        gv_creditIncomeModifier[UnitGetOwner(EventUnit())] -= 180;
        gv_foodIncomeModifier[UnitGetOwner(EventUnit())] -= 70;
        gv_electricityIncomeModifier[UnitGetOwner(EventUnit())] += 50;
        gv_metalIncomeModifier[UnitGetOwner(EventUnit())] += 100;
        gv_oilIncomeModifier[UnitGetOwner(EventUnit())] += 100;
        gv_popGrowth[UnitGetOwner(EventUnit())] -= 0.04;
        gv_techIncomeModifier[UnitGetOwner(EventUnit())] += 40;
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropSuppliesLimit, c_playerPropOperAdd, 250);
        libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "ChangeWarPolicy", 1);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (gf_NationOfPlayer(UnitGetOwner(EventUnit())) + StringExternal("Param/Value/D0CB46CB")));
        libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "InhumaneWar", 1);
    }

    if ((EventUnitAbility() == AbilityCommand("TotalWar", 0))) {
        gv_creditIncomeModifier[UnitGetOwner(EventUnit())] -= 120;
        gv_foodIncomeModifier[UnitGetOwner(EventUnit())] -= 50;
        gv_electricityIncomeModifier[UnitGetOwner(EventUnit())] += 30;
        gv_metalIncomeModifier[UnitGetOwner(EventUnit())] += 50;
        gv_oilIncomeModifier[UnitGetOwner(EventUnit())] += 50;
        gv_popGrowth[UnitGetOwner(EventUnit())] -= 0.02;
        gv_techIncomeModifier[UnitGetOwner(EventUnit())] += 20;
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropSuppliesLimit, c_playerPropOperAdd, 150);
        libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "TotalWar", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "ChangeWarPolicy", 1);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (gf_NationOfPlayer(UnitGetOwner(EventUnit())) + StringExternal("Param/Value/52198DB6")));
    }

    if ((EventUnitAbility() == AbilityCommand("LimitedWar", 0))) {
        gv_creditIncomeModifier[UnitGetOwner(EventUnit())] -= 45;
        gv_foodIncomeModifier[UnitGetOwner(EventUnit())] -= 10;
        gv_electricityIncomeModifier[UnitGetOwner(EventUnit())] += 10;
        gv_metalIncomeModifier[UnitGetOwner(EventUnit())] += 25;
        gv_oilIncomeModifier[UnitGetOwner(EventUnit())] += 25;
        gv_popGrowth[UnitGetOwner(EventUnit())] -= 0.003;
        gv_techIncomeModifier[UnitGetOwner(EventUnit())] += 5;
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropSuppliesLimit, c_playerPropOperAdd, 50);
        libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "LimitedWar", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "ChangeWarPolicy", 1);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (gf_NationOfPlayer(UnitGetOwner(EventUnit())) + StringExternal("Param/Value/601AC4B8")));
    }

    if ((EventUnitAbility() == AbilityCommand("Skirmish", 0))) {
        gv_creditIncomeModifier[UnitGetOwner(EventUnit())] += 15;
        gv_popGrowth[UnitGetOwner(EventUnit())] += 0.005;
        libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "DefensiveWar", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "ChangeWarPolicy", 1);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (gf_NationOfPlayer(UnitGetOwner(EventUnit())) + StringExternal("Param/Value/203556EB")));
    }

    if ((EventUnitAbility() == AbilityCommand("DefensiveWar", 0))) {
        gv_creditIncomeModifier[UnitGetOwner(EventUnit())] += 30;
        gv_foodIncomeModifier[UnitGetOwner(EventUnit())] += 20;
        gv_metalIncomeModifier[UnitGetOwner(EventUnit())] -= 10;
        gv_oilIncomeModifier[UnitGetOwner(EventUnit())] -= 10;
        gv_popGrowth[UnitGetOwner(EventUnit())] += 0.001;
        libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "DefensiveWar", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "Pacifist", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "ChangeWarPolicy", 1);
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropSuppliesLimit, c_playerPropOperSubtract, 50);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (gf_NationOfPlayer(UnitGetOwner(EventUnit())) + StringExternal("Param/Value/CF226176")));
    }

    if ((EventUnitAbility() == AbilityCommand("ChangeWarPolicy", 0))) {
        gf_ResetWarPolicy(UnitGetOwner(EventUnit()));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ChangeWarPolicy_Init () {
    gt_ChangeWarPolicy = TriggerCreate("gt_ChangeWarPolicy_Func");
    TriggerAddEventUnitAbility(gt_ChangeWarPolicy, null, null, c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Policies
//--------------------------------------------------------------------------------------------------
bool gt_Policies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Politics"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitAbility() == AbilityCommand("Communism", 0))) {
        gv_creditIncomeModifier[UnitGetOwner(EventUnit())] -= 60;
        gv_foodIncomeModifier[UnitGetOwner(EventUnit())] += 30;
        gv_electricityIncomeModifier[UnitGetOwner(EventUnit())] += 35;
        gv_metalIncomeModifier[UnitGetOwner(EventUnit())] += 20;
        gv_oilIncomeModifier[UnitGetOwner(EventUnit())] += 20;
        libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "Communism", 1);
    }

    if ((EventUnitAbility() == AbilityCommand("Technocracy", 0))) {
        gv_creditIncomeModifier[UnitGetOwner(EventUnit())] += 30;
        gv_foodIncomeModifier[UnitGetOwner(EventUnit())] += 20;
        gv_popGrowth[UnitGetOwner(EventUnit())] += 0.005;
        gv_techIncomeModifier[UnitGetOwner(EventUnit())] -= 15;
        libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "GrandEmpire", 1);
    }

    if ((EventUnitAbility() == AbilityCommand("SocialistRepublic", 0))) {
        gv_creditIncomeModifier[UnitGetOwner(EventUnit())] -= 30;
        gv_foodIncomeModifier[UnitGetOwner(EventUnit())] += 40;
        gv_electricityIncomeModifier[UnitGetOwner(EventUnit())] += 35;
        gv_metalIncomeModifier[UnitGetOwner(EventUnit())] += 10;
        gv_oilIncomeModifier[UnitGetOwner(EventUnit())] += 10;
        gv_popGrowth[UnitGetOwner(EventUnit())] += 0.005;
        libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "SocialistRepublic", 1);
    }

    if ((EventUnitAbility() == AbilityCommand("Corporatocracy", 0))) {
        gv_creditIncomeModifier[UnitGetOwner(EventUnit())] += 180;
        gv_foodIncomeModifier[UnitGetOwner(EventUnit())] -= 60;
        gv_electricityIncomeModifier[UnitGetOwner(EventUnit())] -= 10;
        gv_popGrowth[UnitGetOwner(EventUnit())] -= 0.01;
        gv_techIncomeModifier[UnitGetOwner(EventUnit())] -= 10;
        libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "Corporatocracy", 1);
    }

    if ((EventUnitAbility() == AbilityCommand("UpgradetoMDHousing2", 0))) {
        gv_creditIncomeModifier[UnitGetOwner(EventUnit())] += 60;
        gv_electricityIncomeModifier[UnitGetOwner(EventUnit())] -= 25;
        gv_popGrowth[UnitGetOwner(EventUnit())] += 0.025;
        gv_techIncomeModifier[UnitGetOwner(EventUnit())] -= 10;
        libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "FauxDemocracy", 1);
    }

    if ((EventUnitAbility() == AbilityCommand("Neofascism", 0))) {
        gv_creditIncomeModifier[UnitGetOwner(EventUnit())] -= 30;
        gv_foodIncomeModifier[UnitGetOwner(EventUnit())] -= 20;
        gv_metalIncomeModifier[UnitGetOwner(EventUnit())] += 25;
        gv_oilIncomeModifier[UnitGetOwner(EventUnit())] += 25;
        gv_popGrowth[UnitGetOwner(EventUnit())] -= 0.02;
        gv_techIncomeModifier[UnitGetOwner(EventUnit())] += 15;
        libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "Neofascism", 1);
    }

    if ((EventUnitAbility() == AbilityCommand("Neofederation", 0))) {
        gv_creditIncomeModifier[UnitGetOwner(EventUnit())] -= 15;
        gv_foodIncomeModifier[UnitGetOwner(EventUnit())] += 10;
        gv_popGrowth[UnitGetOwner(EventUnit())] += 0.04;
        gv_techIncomeModifier[UnitGetOwner(EventUnit())] += 12;
        libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "NeoFederation", 1);
    }

    if ((EventUnitAbility() == AbilityCommand("DirectDemocracy", 0))) {
        gv_creditIncomeModifier[UnitGetOwner(EventUnit())] += 75;
        gv_foodIncomeModifier[UnitGetOwner(EventUnit())] -= 15;
        gv_electricityIncomeModifier[UnitGetOwner(EventUnit())] -= 10;
        gv_popGrowth[UnitGetOwner(EventUnit())] += 0.0055;
        gv_techIncomeModifier[UnitGetOwner(EventUnit())] += 20;
        libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "DirectDemocracy", 1);
    }

    UnitRemove(EventUnit());
    libNtve_gf_CreateUnitsWithDefaultFacing(8, "Founder", 0, EventPlayer(), UnitGetPosition(EventUnit()));
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(UnitGroupRandomUnit(UnitLastCreatedGroup(), c_unitCountAlive)), 9.0))), c_orderQueueReplace);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Capital", c_unitCreateIgnorePlacement, UnitGetOwner(EventUnit()), UnitGetPosition(EventUnit()));
    gf_UpdateCapitals();
    if ((gv_buildingTechLevel[UnitGetOwner(EventUnit())] >= 1) && (UnitGroupCount(UnitGroup("School", UnitGetOwner(UnitLastCreated()), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        Wait(1.0, c_timeGame);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "School", c_unitCreateIgnorePlacement, UnitGetOwner(UnitLastCreated()), UnitGetPosition(UnitLastCreated()));
    }

    if ((gv_buildingTechLevel[UnitGetOwner(EventUnit())] >= 2) && (UnitGroupCount(UnitGroup("Clinic", UnitGetOwner(UnitLastCreated()), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        Wait(1.0, c_timeGame);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Clinic", c_unitCreateIgnorePlacement, UnitGetOwner(UnitLastCreated()), UnitGetPosition(UnitLastCreated()));
    }

    if ((gv_buildingTechLevel[UnitGetOwner(EventUnit())] >= 3) && (UnitGroupCount(UnitGroup("University", UnitGetOwner(UnitLastCreated()), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        Wait(1.0, c_timeGame);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "University", c_unitCreateIgnorePlacement, UnitGetOwner(UnitLastCreated()), UnitGetPosition(UnitLastCreated()));
    }

    if ((StringLength(gv_corpName[UnitGetOwner(EventUnit())]) < 5)) {
        gf_CreateCorporation(UnitGetOwner(EventUnit()));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Policies_Init () {
    gt_Policies = TriggerCreate("gt_Policies_Func");
    TriggerAddEventUnitAbility(gt_Policies, null, null, c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: EmperorDies
//--------------------------------------------------------------------------------------------------
bool gt_EmperorDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_civilWarSupport;
    int lv_storedCount;
    unit lv_storedPop;
    int[4001] lv_rebellionChanceCount;
    unit[4001] lv_rebellionChancePop;
    int lv_numberOfBuildings;
    int lv_buildingNumber;
    int lv_potentialRebellingPop;
    int lv_revoltOdds;
    int lv_populationF;
    int lv_gDPF;
    int lv_economyF;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 15))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) != 11))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Leader"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    MinimapPing(PlayerGroupAll(), UnitGetPosition(libNtve_gf_KillingUnit()), 2.0, Color(100.00, 0.00, 0.00));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (((StringExternal("Param/Value/6734D0CF") + StringToText(gf_GetEmperorTitle(UnitGetOwner(EventUnit())))) + StringExternal("Param/Value/58419D7F")) + (gf_NationOfPlayer(UnitGetOwner(EventUnit())) + StringExternal("Param/Value/34B81C32"))));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EmperorDies_Init () {
    gt_EmperorDies = TriggerCreate("gt_EmperorDies_Func");
    TriggerAddEventUnitDied(gt_EmperorDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SpawnEmperor
//--------------------------------------------------------------------------------------------------
bool gt_SpawnEmperor_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_type;
    playergroup lv_civilWar;

    // Automatic Variable Declarations
    playergroup auto9647D5A3_g;
    int auto9647D5A3_var;
    unitgroup auto8BDBE135_g;
    int auto8BDBE135_u;
    unit auto8BDBE135_var;
    unitgroup auto27F9A9DF_g;
    int auto27F9A9DF_u;
    unit auto27F9A9DF_var;
    unitgroup auto31CAD87D_g;
    int auto31CAD87D_u;
    unit auto31CAD87D_var;

    // Variable Initialization
    lv_type = "";
    lv_civilWar = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    auto9647D5A3_g = gv_users;
    auto9647D5A3_var = -1;
    while (true) {
        auto9647D5A3_var = PlayerGroupNextPlayer(auto9647D5A3_g, auto9647D5A3_var);
        if (auto9647D5A3_var < 0) { break; }
        if ((TechTreeUpgradeCount(auto9647D5A3_var, "GrandEmpire", c_techCountQueuedOrBetter) != 1)) {
            auto8BDBE135_g = UnitGroup(null, auto9647D5A3_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto8BDBE135_u = UnitGroupCount(auto8BDBE135_g, c_unitCountAll);
            for (;; auto8BDBE135_u -= 1) {
                auto8BDBE135_var = UnitGroupUnitFromEnd(auto8BDBE135_g, auto8BDBE135_u);
                if (auto8BDBE135_var == null) { break; }
                if ((UnitGetType(auto8BDBE135_var) == "Leader")) {
                    UnitRemove(auto8BDBE135_var);
                }

            }
        }

        if ((TechTreeUpgradeCount(auto9647D5A3_var, "GrandEmpire", c_techCountQueuedOrBetter) == 1) && (UnitGroupCount(UnitGroup("Leader", auto9647D5A3_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup("Capital", auto9647D5A3_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 1) && (RandomInt(0, 100) < 40)) {
            lv_type = gf_GetEmperorTitle(auto9647D5A3_var);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(gf_NationOfPlayer(auto9647D5A3_var), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(auto9647D5A3_var, false))) + TextWithColor((StringExternal("Param/Value/61EF27D9") + (StringToText(lv_type) + (StringExternal("Param/Value/D4176585") + (StringToText(lv_type) + StringExternal("Param/Value/8907D159"))))), Color(0.00, 0.00, 100.00))));
            auto27F9A9DF_g = UnitGroup("Capital", auto9647D5A3_var, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 9999);
            auto27F9A9DF_u = UnitGroupCount(auto27F9A9DF_g, c_unitCountAll);
            for (;; auto27F9A9DF_u -= 1) {
                auto27F9A9DF_var = UnitGroupUnitFromEnd(auto27F9A9DF_g, auto27F9A9DF_u);
                if (auto27F9A9DF_var == null) { break; }
                if ((UnitGetType(auto27F9A9DF_var) == "Capital")) {
                    MinimapPing(PlayerGroupSingle(auto9647D5A3_var), UnitGetPosition(auto27F9A9DF_var), 2.0, Color(100.00, 0.00, 0.00));
                    UnitCreate(1, "Leader", 0, auto9647D5A3_var, UnitGetPosition(auto27F9A9DF_var), 270.0);
                }

            }
        }

        if ((UnitGroupCount(UnitGroup("Leader", auto9647D5A3_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 1)) {
            auto31CAD87D_g = UnitGroup("Leader", auto9647D5A3_var, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1);
            auto31CAD87D_u = UnitGroupCount(auto31CAD87D_g, c_unitCountAll);
            for (;; auto31CAD87D_u -= 1) {
                auto31CAD87D_var = UnitGroupUnitFromEnd(auto31CAD87D_g, auto31CAD87D_u);
                if (auto31CAD87D_var == null) { break; }
                UnitRemove(auto31CAD87D_var);
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnEmperor_Init () {
    gt_SpawnEmperor = TriggerCreate("gt_SpawnEmperor_Func");
    TriggerAddEventTimePeriodic(gt_SpawnEmperor, 15.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ResetReachedCorporationEnd?
//--------------------------------------------------------------------------------------------------
bool gt_ResetReachedCorporationEnd_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(gv_debugPlayers, c_messageAreaSubtitle, (StringExternal("Param/Value/7F0CC4FB") + gf_MakeUIPresentable(gv_convoyRecursion)));
    gv_convoyRecursion = 0;
    Wait(8.0, c_timeGame);
    if ((gv_reachedCorporationEnd == true)) {
        gv_reachedCorporationEnd = false;
    }
    else {
        if ((gv_linesGotThrough < 17)) {
            gf_PushDownCVariables(true);
        }

        gv_brokenLine = gv_linesGotThrough;
        UIDisplayMessage(gv_debugPlayers, c_messageAreaSubtitle, StringExternal("Param/Value/355DC721"));
        if ((gv_brokenLine == 3)) {
            UIDisplayMessage(gv_debugPlayers, c_messageAreaSubtitle, (StringExternal("Param/Value/5C610016") + gv_cID3));
        }
        else {
            UIDisplayMessage(gv_debugPlayers, c_messageAreaSubtitle, (StringExternal("Param/Value/E3B51B20") + IntToText(gv_brokenLine)));
        }
        gv_sUCCsessivebreaks += 1;
    }
    Wait(2.0, c_timeGame);
    if ((gv_reachedIncomeEnd == true)) {
        gv_reachedIncomeEnd = false;
    }
    else {
        UIDisplayMessage(gv_debugPlayers, c_messageAreaSubtitle, StringExternal("Param/Value/84993733"));
        UIDisplayMessage(gv_debugPlayers, c_messageAreaSubtitle, (StringExternal("Param/Value/CA09CBE4") + IntToText(gv_brokenIncomeLine)));
    }
    gv_brokenIncomeLine = 0;
    gv_linesGotThrough = 0;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ResetReachedCorporationEnd_Init () {
    gt_ResetReachedCorporationEnd = TriggerCreate("gt_ResetReachedCorporationEnd_Func");
    TriggerAddEventTimePeriodic(gt_ResetReachedCorporationEnd, 10.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ADDDEBUGPLAYERGROUPTEST
//--------------------------------------------------------------------------------------------------
bool gt_ADDDEBUGPLAYERGROUPTEST_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGroupHasPlayer(gv_debugPlayers, EventPlayer()) == false)) {
        PlayerGroupAdd(gv_debugPlayers, EventPlayer());
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/D2C4DA55"));
    }
    else {
        PlayerGroupRemove(gv_debugPlayers, EventPlayer());
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/F1E80C76"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ADDDEBUGPLAYERGROUPTEST_Init () {
    gt_ADDDEBUGPLAYERGROUPTEST = TriggerCreate("gt_ADDDEBUGPLAYERGROUPTEST_Func");
    TriggerAddEventChatMessage(gt_ADDDEBUGPLAYERGROUPTEST, c_playerAny, "debug", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CHECKFOODREQURIED
//--------------------------------------------------------------------------------------------------
bool gt_CHECKFOODREQURIED_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, (StringExternal("Param/Value/A24B1E92") + (gf_MakeUIPresentable(gf_GetPlayerFoodDemand(EventPlayer())) + StringExternal("Param/Value/B37A49D5"))));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CHECKFOODREQURIED_Init () {
    gt_CHECKFOODREQURIED = TriggerCreate("gt_CHECKFOODREQURIED_Func");
    TriggerAddEventChatMessage(gt_CHECKFOODREQURIED, c_playerAny, "-food", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Great Depression
//--------------------------------------------------------------------------------------------------
bool gt_GreatDepression_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto71D493D5_g;
    int auto71D493D5_var;
    playergroup auto56853C8B_g;
    int auto56853C8B_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_economyHealth = 50;
    TriggerStop(gt_EconomyHealth);
    TriggerEnable(gt_EconomyHealth, false);
    Wait(2.0, c_timeGame);
    libNtve_gf_SetDialogItemText(gv_economicDebtPolicyDialogItems[7], StringExternal("Param/Value/151A8ED8"), PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(gv_economicDebtPolicyDialogItems[7], Color(0,0,0), PlayerGroupAll());
    UIDisplayMessage(gv_users, c_messageAreaSubtitle, StringExternal("Param/Value/9A145AE1"));
    gv_economicState = "Depression";
    SoundPlay(SoundLink("HansonABChoiceAlarm", 0), gv_users, 100.0, 0.0);
    SoundPlay(SoundLink("TScene16Valerian016", 0), gv_users, 100.0, 0.0);
    auto71D493D5_g = gv_users;
    auto71D493D5_var = -1;
    while (true) {
        auto71D493D5_var = PlayerGroupNextPlayer(auto71D493D5_g, auto71D493D5_var);
        if (auto71D493D5_var < 0) { break; }
        gf_CreateBanner(auto71D493D5_var, 6);
        gv_creditIncomeModifier[auto71D493D5_var] -= 160;
    }
    Wait(RandomInt(300, 700), c_timeGame);
    gv_economyHealth = 650;
    TriggerEnable(gt_EconomyHealth, true);
    TriggerExecute(gt_EconomyHealth, true, false);
    UIDisplayMessage(gv_users, c_messageAreaSubtitle, StringExternal("Param/Value/0FB02585"));
    gv_economicState = "";
    auto56853C8B_g = gv_users;
    auto56853C8B_var = -1;
    while (true) {
        auto56853C8B_var = PlayerGroupNextPlayer(auto56853C8B_g, auto56853C8B_var);
        if (auto56853C8B_var < 0) { break; }
        gf_RemoveBanner(auto56853C8B_var, 6);
        gv_creditIncomeModifier[auto56853C8B_var] += 160;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GreatDepression_Init () {
    gt_GreatDepression = TriggerCreate("gt_GreatDepression_Func");
    TriggerEnable(gt_GreatDepression, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Recession
//--------------------------------------------------------------------------------------------------
bool gt_Recession_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto122D6992_g;
    int auto122D6992_var;
    playergroup autoCACB022B_g;
    int autoCACB022B_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_economyHealth = 200;
    TriggerStop(gt_EconomyHealth);
    TriggerEnable(gt_EconomyHealth, false);
    Wait(2.0, c_timeGame);
    libNtve_gf_SetDialogItemText(gv_economicDebtPolicyDialogItems[7], StringExternal("Param/Value/46BB60BB"), PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(gv_economicDebtPolicyDialogItems[7], Color(100.00, 0.00, 0.00), PlayerGroupAll());
    UIDisplayMessage(gv_users, c_messageAreaSubtitle, StringExternal("Param/Value/6E056DCE"));
    gv_economicState = "Recession";
    SoundPlay(SoundLink("TScene16Valerian016", 0), gv_users, 100.0, 0.0);
    auto122D6992_g = gv_users;
    auto122D6992_var = -1;
    while (true) {
        auto122D6992_var = PlayerGroupNextPlayer(auto122D6992_g, auto122D6992_var);
        if (auto122D6992_var < 0) { break; }
        gf_CreateBanner(auto122D6992_var, 17);
        gv_creditIncomeModifier[auto122D6992_var] -= 100;
        if ((TechTreeUpgradeCount(auto122D6992_var, "ResearchEconomicBailouts", c_techCountCompleteOnly) == 1)) {
            gv_creditIncomeModifier[auto122D6992_var] += 20;
        }

    }
    Wait(RandomInt(120, 300), c_timeReal);
    gv_economyHealth = 600;
    TriggerEnable(gt_EconomyHealth, true);
    TriggerExecute(gt_EconomyHealth, true, false);
    UIDisplayMessage(gv_users, c_messageAreaSubtitle, StringExternal("Param/Value/697D9EEF"));
    gv_economicState = "";
    autoCACB022B_g = gv_users;
    autoCACB022B_var = -1;
    while (true) {
        autoCACB022B_var = PlayerGroupNextPlayer(autoCACB022B_g, autoCACB022B_var);
        if (autoCACB022B_var < 0) { break; }
        gf_RemoveBanner(autoCACB022B_var, 17);
        gv_creditIncomeModifier[autoCACB022B_var] += 100;
        if ((TechTreeUpgradeCount(autoCACB022B_var, "ResearchEconomicBailouts", c_techCountCompleteOnly) == 1)) {
            gv_creditIncomeModifier[autoCACB022B_var] -= 20;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Recession_Init () {
    gt_Recession = TriggerCreate("gt_Recession_Func");
    TriggerEnable(gt_Recession, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Booming
//--------------------------------------------------------------------------------------------------
bool gt_Booming_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoA366154A_g;
    int autoA366154A_var;
    playergroup auto50FAEFBD_g;
    int auto50FAEFBD_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_economyHealth = 850;
    TriggerStop(gt_EconomyHealth);
    TriggerEnable(gt_EconomyHealth, false);
    Wait(2.0, c_timeGame);
    libNtve_gf_SetDialogItemText(gv_economicDebtPolicyDialogItems[7], StringExternal("Param/Value/B557E5E8"), PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(gv_economicDebtPolicyDialogItems[7], Color(84*100/255,0,129*100/255), PlayerGroupAll());
    if ((gv_aIYes == 1)) {
    }

    UIDisplayMessage(gv_users, c_messageAreaSubtitle, StringExternal("Param/Value/51C0F16A"));
    gv_economicState = "Booming";
    autoA366154A_g = gv_users;
    autoA366154A_var = -1;
    while (true) {
        autoA366154A_var = PlayerGroupNextPlayer(autoA366154A_g, autoA366154A_var);
        if (autoA366154A_var < 0) { break; }
        gf_CreateBanner(autoA366154A_var, 32);
        gv_creditIncomeModifier[autoA366154A_var] += 70;
    }
    Wait(RandomInt(120, 600), c_timeGame);
    gv_economyHealth = 400;
    TriggerEnable(gt_EconomyHealth, true);
    TriggerExecute(gt_EconomyHealth, true, false);
    UIDisplayMessage(gv_users, c_messageAreaSubtitle, StringExternal("Param/Value/8A0A9C5A"));
    gv_economicState = "";
    auto50FAEFBD_g = gv_users;
    auto50FAEFBD_var = -1;
    while (true) {
        auto50FAEFBD_var = PlayerGroupNextPlayer(auto50FAEFBD_g, auto50FAEFBD_var);
        if (auto50FAEFBD_var < 0) { break; }
        gf_RemoveBanner(auto50FAEFBD_var, 32);
        gv_creditIncomeModifier[auto50FAEFBD_var] -= 70;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Booming_Init () {
    gt_Booming = TriggerCreate("gt_Booming_Func");
    TriggerEnable(gt_Booming, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UpgradeColonies
//--------------------------------------------------------------------------------------------------
bool gt_UpgradeColonies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeUpgradeAddLevel(12, "InfantryDamageUP", 1);
    TechTreeUpgradeAddLevel(12, "InfantryArmourUP", 1);
    TechTreeUpgradeAddLevel(12, "AircraftDamageUP", 1);
    TechTreeUpgradeAddLevel(12, "AircraftArmourUP", 1);
    TechTreeUpgradeAddLevel(12, "VehicleArmourUP", 1);
    TechTreeUpgradeAddLevel(12, "VehicleDamageUP", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpgradeColonies_Init () {
    gt_UpgradeColonies = TriggerCreate("gt_UpgradeColonies_Func");
    TriggerAddEventTimePeriodic(gt_UpgradeColonies, 300.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Economy Health
//--------------------------------------------------------------------------------------------------
bool gt_EconomyHealth_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoFF548574_g;
    int autoFF548574_var;
    playergroup autoC34029A8_g;
    int autoC34029A8_var;
    playergroup autoA1F7114E_g;
    int autoA1F7114E_var;
    playergroup auto8F6D0FB8_g;
    int auto8F6D0FB8_var;
    playergroup autoA798F780_g;
    int autoA798F780_var;
    playergroup auto8F5CF1E8_g;
    int auto8F5CF1E8_var;
    playergroup autoDFAF21A9_g;
    int autoDFAF21A9_var;
    playergroup auto97A7BE7E_g;
    int auto97A7BE7E_var;
    playergroup auto8CD59A3B_g;
    int auto8CD59A3B_var;
    playergroup auto6C5E5F67_g;
    int auto6C5E5F67_var;
    playergroup auto955CAF72_g;
    int auto955CAF72_var;
    playergroup auto065E8172_g;
    int auto065E8172_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_economyHealth < 300) && (RandomInt(0, 100) < 20)) {
        TriggerExecute(gt_Recession, true, false);
    }

    if ((gv_economyHealth > 800) && (RandomInt(0, 100) < 20)) {
        TriggerExecute(gt_Booming, true, false);
        gv_economyHealth = 400;
    }

    if ((gv_economyHealth > 999)) {
        TriggerExecute(gt_Booming, true, false);
        gv_economyHealth = 400;
    }

    if ((gv_economyHealth < 10)) {
        TriggerExecute(gt_GreatDepression, true, false);
        gv_economyHealth = 650;
    }

    if ((gv_economyHealth < 200) && (RandomInt(0, 100) < 10)) {
        TriggerExecute(gt_GreatDepression, true, false);
    }

    if ((gv_economyHealth < 500)) {
        gv_economyHealth -= 2;
    }

    if ((gv_economyHealth < 400)) {
        gv_economyHealth -= 4;
    }

    if ((gv_economyHealth < 300)) {
        gv_economyHealth -= 6;
    }

    if ((gv_economyHealth < 200)) {
        gv_economyHealth -= 8;
    }

    if ((gv_economyHealth < 100)) {
        gv_economyHealth -= 10;
    }

    if ((gv_economyHealth < 50)) {
        gv_economyHealth -= 12;
    }

    if ((gv_economyHealth > 500)) {
        gv_economyHealth += 2;
    }

    if ((gv_economyHealth > 600)) {
        gv_economyHealth += 4;
    }

    if ((gv_economyHealth > 700)) {
        gv_economyHealth += 6;
    }

    if ((gv_economyHealth > 800)) {
        gv_economyHealth += 8;
    }

    if ((gv_economyHealth > 900)) {
        gv_economyHealth += 10;
    }

    if ((gv_economyHealth > 950)) {
        gv_economyHealth += 12;
    }

    autoFF548574_g = gv_users;
    autoFF548574_var = -1;
    while (true) {
        autoFF548574_var = PlayerGroupNextPlayer(autoFF548574_g, autoFF548574_var);
        if (autoFF548574_var < 0) { break; }
        if ((TechTreeUpgradeCount(autoFF548574_var, "UrbanDevelopment", c_techCountCompleteOnly) == 1)) {
            gv_economyHealth += 2;
        }
        else {
            gv_economyHealth -= 1;
        }
    }
    autoC34029A8_g = gv_users;
    autoC34029A8_var = -1;
    while (true) {
        autoC34029A8_var = PlayerGroupNextPlayer(autoC34029A8_g, autoC34029A8_var);
        if (autoC34029A8_var < 0) { break; }
        if ((TechTreeUpgradeCount(autoC34029A8_var, "Communism", c_techCountCompleteOnly) == 1)) {
            gv_economyHealth -= 2;
        }

    }
    autoA1F7114E_g = gv_users;
    autoA1F7114E_var = -1;
    while (true) {
        autoA1F7114E_var = PlayerGroupNextPlayer(autoA1F7114E_g, autoA1F7114E_var);
        if (autoA1F7114E_var < 0) { break; }
        if ((TechTreeUpgradeCount(autoA1F7114E_var, "SocialistRepublic", c_techCountCompleteOnly) == 1)) {
            gv_economyHealth -= 1;
        }

    }
    auto8F6D0FB8_g = gv_users;
    auto8F6D0FB8_var = -1;
    while (true) {
        auto8F6D0FB8_var = PlayerGroupNextPlayer(auto8F6D0FB8_g, auto8F6D0FB8_var);
        if (auto8F6D0FB8_var < 0) { break; }
        if ((TechTreeUpgradeCount(auto8F6D0FB8_var, "DirectDemocracy", c_techCountCompleteOnly) == 1)) {
            gv_economyHealth += 1;
        }

    }
    autoA798F780_g = gv_users;
    autoA798F780_var = -1;
    while (true) {
        autoA798F780_var = PlayerGroupNextPlayer(autoA798F780_g, autoA798F780_var);
        if (autoA798F780_var < 0) { break; }
        if ((TechTreeUpgradeCount(autoA798F780_var, "FauxDemocracy", c_techCountCompleteOnly) == 1)) {
            gv_economyHealth += 2;
        }

    }
    auto8F5CF1E8_g = gv_users;
    auto8F5CF1E8_var = -1;
    while (true) {
        auto8F5CF1E8_var = PlayerGroupNextPlayer(auto8F5CF1E8_g, auto8F5CF1E8_var);
        if (auto8F5CF1E8_var < 0) { break; }
        if ((TechTreeUpgradeCount(auto8F5CF1E8_var, "Corporatocracy", c_techCountCompleteOnly) == 1)) {
            gv_economyHealth += 3;
        }

    }
    autoDFAF21A9_g = gv_users;
    autoDFAF21A9_var = -1;
    while (true) {
        autoDFAF21A9_var = PlayerGroupNextPlayer(autoDFAF21A9_g, autoDFAF21A9_var);
        if (autoDFAF21A9_var < 0) { break; }
        if ((TechTreeUpgradeCount(autoDFAF21A9_var, "TotalWar", c_techCountCompleteOnly) == 1)) {
            gv_economyHealth += 2;
        }

    }
    auto97A7BE7E_g = gv_users;
    auto97A7BE7E_var = -1;
    while (true) {
        auto97A7BE7E_var = PlayerGroupNextPlayer(auto97A7BE7E_g, auto97A7BE7E_var);
        if (auto97A7BE7E_var < 0) { break; }
        if ((TechTreeUpgradeCount(auto97A7BE7E_var, "InhumaneWar", c_techCountCompleteOnly) == 1)) {
            gv_economyHealth += 1;
        }

    }
    auto8CD59A3B_g = gv_users;
    auto8CD59A3B_var = -1;
    while (true) {
        auto8CD59A3B_var = PlayerGroupNextPlayer(auto8CD59A3B_g, auto8CD59A3B_var);
        if (auto8CD59A3B_var < 0) { break; }
        if ((TechTreeUpgradeCount(auto8CD59A3B_var, "LimitedWar", c_techCountCompleteOnly) == 1)) {
            gv_economyHealth += 1;
        }

    }
    auto6C5E5F67_g = gv_users;
    auto6C5E5F67_var = -1;
    while (true) {
        auto6C5E5F67_var = PlayerGroupNextPlayer(auto6C5E5F67_g, auto6C5E5F67_var);
        if (auto6C5E5F67_var < 0) { break; }
        if ((TechTreeUpgradeCount(auto6C5E5F67_var, "FullyAutomatedEconomyProject", c_techCountCompleteOnly) == 1)) {
            gv_economyHealth -= 2;
        }

    }
    auto955CAF72_g = gv_users;
    auto955CAF72_var = -1;
    while (true) {
        auto955CAF72_var = PlayerGroupNextPlayer(auto955CAF72_g, auto955CAF72_var);
        if (auto955CAF72_var < 0) { break; }
        if ((TechTreeUpgradeCount(auto955CAF72_var, "ResearchTradeRegulations", c_techCountCompleteOnly) == 1)) {
            gv_economyHealth += 1;
        }

    }
    auto065E8172_g = gv_users;
    auto065E8172_var = -1;
    while (true) {
        auto065E8172_var = PlayerGroupNextPlayer(auto065E8172_g, auto065E8172_var);
        if (auto065E8172_var < 0) { break; }
        if ((PlayerGroupCount(gv_theEuroCrew) == (PlayerGroupCount(gv_users) / 2))) {
            gv_economyHealth += 1;
        }
        else {
            gv_economyHealth -= 1;
        }
    }
    if ((gv_economyHealth < 150)) {
        libNtve_gf_SetDialogItemText(gv_economicDebtPolicyDialogItems[7], StringExternal("Param/Value/ACC5D9DF"), PlayerGroupAll());
        libNtve_gf_SetDialogItemColor(gv_economicDebtPolicyDialogItems[7], Color(100.00, 0.00, 0.00), PlayerGroupAll());
    }
    else {
        if ((gv_economyHealth < 300)) {
            libNtve_gf_SetDialogItemText(gv_economicDebtPolicyDialogItems[7], StringExternal("Param/Value/D0349786"), PlayerGroupAll());
            libNtve_gf_SetDialogItemColor(gv_economicDebtPolicyDialogItems[7], Color(254*100/255,138*100/255,14*100/255), PlayerGroupAll());
        }
        else {
            if ((gv_economyHealth < 450)) {
                libNtve_gf_SetDialogItemText(gv_economicDebtPolicyDialogItems[7], StringExternal("Param/Value/27C12069"), PlayerGroupAll());
                libNtve_gf_SetDialogItemColor(gv_economicDebtPolicyDialogItems[7], Color(150*100/255,150*100/255,30*100/255), PlayerGroupAll());
            }
            else {
                if ((gv_economyHealth < 650)) {
                    libNtve_gf_SetDialogItemText(gv_economicDebtPolicyDialogItems[7], StringExternal("Param/Value/025D56BC"), PlayerGroupAll());
                    libNtve_gf_SetDialogItemColor(gv_economicDebtPolicyDialogItems[7], Color(22*100/255,128*100/255,0), PlayerGroupAll());
                }
                else {
                    if ((gv_economyHealth < 750)) {
                        libNtve_gf_SetDialogItemText(gv_economicDebtPolicyDialogItems[7], StringExternal("Param/Value/CABE51BC"), PlayerGroupAll());
                        libNtve_gf_SetDialogItemColor(gv_economicDebtPolicyDialogItems[7], Color(16*100/255,98*100/255,70*100/255), PlayerGroupAll());
                    }
                    else {
                        if ((gv_economyHealth < 850)) {
                            libNtve_gf_SetDialogItemText(gv_economicDebtPolicyDialogItems[7], StringExternal("Param/Value/C93F861B"), PlayerGroupAll());
                            libNtve_gf_SetDialogItemColor(gv_economicDebtPolicyDialogItems[7], Color(0,66*100/255,100), PlayerGroupAll());
                        }
                        else {
                            libNtve_gf_SetDialogItemText(gv_economicDebtPolicyDialogItems[7], StringExternal("Param/Value/567D4A92"), PlayerGroupAll());
                            libNtve_gf_SetDialogItemColor(gv_economicDebtPolicyDialogItems[7], Color(84*100/255,0,129*100/255), PlayerGroupAll());
                        }
                    }
                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EconomyHealth_Init () {
    gt_EconomyHealth = TriggerCreate("gt_EconomyHealth_Func");
    TriggerAddEventTimePeriodic(gt_EconomyHealth, 25.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Credit Rating System
//--------------------------------------------------------------------------------------------------
bool gt_CreditRatingSystem_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_reparation;
    int lv_player;

    // Automatic Variable Declarations
    playergroup autoEAD94612_g;
    int autoEAD94612_var;
    const int autoE7C00F24_ae = 7;
    const int autoE7C00F24_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoEAD94612_g = gv_users;
    autoEAD94612_var = -1;
    while (true) {
        autoEAD94612_var = PlayerGroupNextPlayer(autoEAD94612_g, autoEAD94612_var);
        if (autoEAD94612_var < 0) { break; }
        lv_reparation = 0;
        lv_player = 1;
        for ( ; ( (autoE7C00F24_ai >= 0 && lv_player <= autoE7C00F24_ae) || (autoE7C00F24_ai < 0 && lv_player >= autoE7C00F24_ae) ) ; lv_player += autoE7C00F24_ai ) {
            lv_reparation += gv_reparations[autoEAD94612_var][lv_player];
        }
        libNtve_gf_SetDialogItemText(gv_economicDebtPolicyDialogItems[1], (StringToText("") + gf_MakeUIPresentable((gf_GetTotalDebt(autoEAD94612_var) + lv_reparation))), PlayerGroupSingle(autoEAD94612_var));
        if ((gv_creditRatingValue[autoEAD94612_var] > 1000)) {
            gv_creditRatingValue[autoEAD94612_var] = 1000;
        }

        if ((gv_creditRatingValue[autoEAD94612_var] < 0)) {
            gv_creditRatingValue[autoEAD94612_var] = 0;
        }

        if ((gv_creditRatingValue[autoEAD94612_var] < 0)) {
            libNtve_gf_SetDialogItemText(gv_dialolgItems[12], (StringExternal("Param/Value/7E9C837F") + StringExternal("Param/Value/7E1175FF")), PlayerGroupSingle(autoEAD94612_var));
        }
        else {
            if ((gv_creditRatingValue[autoEAD94612_var] > 10)) {
                if ((gv_creditRatingValue[autoEAD94612_var] > 50)) {
                    if ((gv_creditRatingValue[autoEAD94612_var] > 125)) {
                        if ((gv_creditRatingValue[autoEAD94612_var] > 200)) {
                            if ((gv_creditRatingValue[autoEAD94612_var] > 300)) {
                                if ((gv_creditRatingValue[autoEAD94612_var] > 400)) {
                                    if ((gv_creditRatingValue[autoEAD94612_var] > 500)) {
                                        if ((gv_creditRatingValue[autoEAD94612_var] > 700)) {
                                            if ((gv_creditRatingValue[autoEAD94612_var] > 975)) {
                                                libNtve_gf_SetDialogItemText(gv_dialolgItems[12], (StringExternal("Param/Value/4B621B85") + StringExternal("Param/Value/3859950E")), PlayerGroupSingle(autoEAD94612_var));
                                                gv_interestRate[autoEAD94612_var] = 2.5;
                                            }
                                            else {
                                                libNtve_gf_SetDialogItemText(gv_dialolgItems[12], (StringExternal("Param/Value/C1A82547") + StringExternal("Param/Value/46748284")), PlayerGroupSingle(autoEAD94612_var));
                                                gv_interestRate[autoEAD94612_var] = 3.0;
                                            }
                                        }
                                        else {
                                            libNtve_gf_SetDialogItemText(gv_dialolgItems[12], (StringExternal("Param/Value/DB81ECDB") + StringExternal("Param/Value/FFDFE15E")), PlayerGroupSingle(autoEAD94612_var));
                                            gv_interestRate[autoEAD94612_var] = 4.0;
                                        }
                                    }
                                    else {
                                        libNtve_gf_SetDialogItemText(gv_dialolgItems[12], (StringExternal("Param/Value/F8E60417") + StringExternal("Param/Value/0A20BAE3")), PlayerGroupSingle(autoEAD94612_var));
                                        gv_interestRate[autoEAD94612_var] = 5.0;
                                    }
                                }
                                else {
                                    libNtve_gf_SetDialogItemText(gv_dialolgItems[12], (StringExternal("Param/Value/0AF4237E") + StringExternal("Param/Value/5324E171")), PlayerGroupSingle(autoEAD94612_var));
                                    gv_interestRate[autoEAD94612_var] = 7.0;
                                }
                            }
                            else {
                                libNtve_gf_SetDialogItemText(gv_dialolgItems[12], (StringExternal("Param/Value/BE9EB022") + StringExternal("Param/Value/0CEFE32F")), PlayerGroupSingle(autoEAD94612_var));
                                gv_interestRate[autoEAD94612_var] = 9.0;
                            }
                        }
                        else {
                            libNtve_gf_SetDialogItemText(gv_dialolgItems[12], (StringExternal("Param/Value/3D8FBBBB") + StringExternal("Param/Value/07DA91F3")), PlayerGroupSingle(autoEAD94612_var));
                            gv_interestRate[autoEAD94612_var] = 20.0;
                        }
                    }
                    else {
                        libNtve_gf_SetDialogItemText(gv_dialolgItems[12], (StringExternal("Param/Value/AB496ADA") + StringExternal("Param/Value/09A803A9")), PlayerGroupSingle(autoEAD94612_var));
                        gv_interestRate[autoEAD94612_var] = 25.0;
                    }
                }
                else {
                    libNtve_gf_SetDialogItemText(gv_dialolgItems[12], (StringExternal("Param/Value/03D458A0") + StringExternal("Param/Value/EA4E93F9")), PlayerGroupSingle(autoEAD94612_var));
                    gv_interestRate[autoEAD94612_var] = 30.0;
                }
            }
            else {
                libNtve_gf_SetDialogItemText(gv_dialolgItems[12], (StringExternal("Param/Value/731BCBAA") + StringExternal("Param/Value/12D09E5F")), PlayerGroupSingle(autoEAD94612_var));
                gv_interestRate[autoEAD94612_var] = 50.0;
            }
        }
        if ((TechTreeUpgradeCount(autoEAD94612_var, "ResearchDeficitManagement", c_techCountCompleteOnly) >= 1)) {
            gv_interestRate[autoEAD94612_var] -= 0.2;
        }

        libNtve_gf_SetDialogItemText(gv_economicDebtPolicyDialogItems[3], (FixedToText(gv_interestRate[autoEAD94612_var], c_fixedPrecisionAny) + StringExternal("Param/Value/391F53BB")), PlayerGroupSingle(autoEAD94612_var));
        libNtve_gf_SetDialogItemTooltip(gv_economicDebtPolicyDialogItems[3], StringExternal("Param/Value/CE6934D0"), PlayerGroupAll());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreditRatingSystem_Init () {
    gt_CreditRatingSystem = TriggerCreate("gt_CreditRatingSystem_Func");
    TriggerAddEventTimePeriodic(gt_CreditRatingSystem, 9.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Open up Private Loan
//--------------------------------------------------------------------------------------------------
bool gt_OpenupPrivateLoan_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playSound;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_economicDebtPolicyDialogItems[5]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(gv_privateLoanUI, PlayerGroupSingle(EventPlayer()), true);
    DialogSetVisible(gv_repayLoanUI, PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OpenupPrivateLoan_Init () {
    gt_OpenupPrivateLoan = TriggerCreate("gt_OpenupPrivateLoan_Func");
    TriggerAddEventDialogControl(gt_OpenupPrivateLoan, c_playerAny, EventDialogControl(), c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Open up Repay Loan
//--------------------------------------------------------------------------------------------------
bool gt_OpenupRepayLoan_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playSound;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_economicDebtPolicyDialogItems[6]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(gv_repayLoanUI, PlayerGroupSingle(EventPlayer()), true);
    DialogSetVisible(gv_privateLoanUI, PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OpenupRepayLoan_Init () {
    gt_OpenupRepayLoan = TriggerCreate("gt_OpenupRepayLoan_Func");
    TriggerAddEventDialogControl(gt_OpenupRepayLoan, c_playerAny, EventDialogControl(), c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Take Private Loan
//--------------------------------------------------------------------------------------------------
bool gt_TakePrivateLoan_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_request;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_privateLoanUIDialogItems[0]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_request = StringToInt(libNtve_gf_DialogItemEditValue(gv_privateLoanUIDialogItems[1], EventPlayer()));
    lv_request = libNtve_gf_ArithmeticIntClamp(lv_request, 1, 100000000);
    DialogSetVisible(gv_privateLoanUI, PlayerGroupSingle(EventPlayer()), false);
    Wait(1.5, c_timeGame);
    if ((gf_TakeLoan(EventPlayer(), lv_request) == false)) {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/986F22F4"));
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/78AD441A"));
    }
    gv_allowedSelfDebt[EventPlayer()] = gf_GetAllowedDebt(EventPlayer());
    gv_totalDebt[EventPlayer()] = gf_GetTotalDebt(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TakePrivateLoan_Init () {
    gt_TakePrivateLoan = TriggerCreate("gt_TakePrivateLoan_Func");
    TriggerAddEventDialogControl(gt_TakePrivateLoan, c_playerAny, EventDialogControl(), c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: RepayLoan
//--------------------------------------------------------------------------------------------------
bool gt_RepayLoan_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_request;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_repayLoanDialogItems[0]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_request = StringToInt(libNtve_gf_DialogItemEditValue(gv_repayLoanDialogItems[1], EventPlayer()));
    lv_request = libNtve_gf_ArithmeticIntClamp(lv_request, 1, 999999);
    DialogSetVisible(gv_repayLoanUI, PlayerGroupSingle(EventPlayer()), false);
    Wait(1.5, c_timeGame);
    if ((lv_request > PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals))) {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/44404032"));
    }
    else {
        if ((lv_request > gv_totalDebt[EventPlayer()])) {
            lv_request = gv_totalDebt[EventPlayer()];
        }

        gf_RepayLoans(EventPlayer(), lv_request);
    }
    gv_allowedSelfDebt[EventPlayer()] = gf_GetAllowedDebt(EventPlayer());
    gv_totalDebt[EventPlayer()] = gf_GetTotalDebt(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RepayLoan_Init () {
    gt_RepayLoan = TriggerCreate("gt_RepayLoan_Func");
    TriggerAddEventDialogControl(gt_RepayLoan, c_playerAny, EventDialogControl(), c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: RepayLoanUI
//--------------------------------------------------------------------------------------------------
bool gt_RepayLoanUI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(250, 280, c_anchorTopLeft, 1460, 255, true);
    gv_repayLoanUI = DialogLastCreated();
    DialogSetTitle(gv_repayLoanUI, StringExternal("Param/Value/5BF47481"));
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 50, c_anchorBottom, 0, 40, StringExternal("Param/Value/55146A81"), StringExternal("Param/Value/32744580"), "");
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    gv_repayLoanDialogItems[0] = DialogControlLastCreated();
    DialogControlCreate(gv_repayLoanUI, c_triggerControlTypeEditBox);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 150, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_scrollbar_frame.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    gv_repayLoanDialogItems[1] = DialogControlLastCreated();
    DialogSetImage(gv_repayLoanUI, "Assets\\Textures\\ui_scrollbar_frame.dds");
    DialogSetImage(gv_repayLoanUI, "Assets\\Textures\\ui_scrollbar_frame.dds");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RepayLoanUI_Init () {
    gt_RepayLoanUI = TriggerCreate("gt_RepayLoanUI_Func");
    TriggerAddEventMapInit(gt_RepayLoanUI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PrivateLoanUI
//--------------------------------------------------------------------------------------------------
bool gt_PrivateLoanUI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(250, 280, c_anchorTopLeft, 1460, 255, true);
    gv_privateLoanUI = DialogLastCreated();
    DialogSetTitle(gv_privateLoanUI, StringExternal("Param/Value/D82C421B"));
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 50, c_anchorBottom, 0, 40, StringExternal("Param/Value/F9149BC9"), StringExternal("Param/Value/47B5C672"), "");
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    gv_privateLoanUIDialogItems[0] = DialogControlLastCreated();
    DialogControlCreate(gv_privateLoanUI, c_triggerControlTypeEditBox);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 150, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_scrollbar_frame.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    gv_privateLoanUIDialogItems[1] = DialogControlLastCreated();
    DialogSetImage(gv_privateLoanUI, "Assets\\Textures\\ui_scrollbar_frame.dds");
    DialogSetImage(gv_privateLoanUI, "Assets\\Textures\\ui_scrollbar_frame.dds");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PrivateLoanUI_Init () {
    gt_PrivateLoanUI = TriggerCreate("gt_PrivateLoanUI_Func");
    TriggerAddEventMapInit(gt_PrivateLoanUI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MasterTradeScript
//--------------------------------------------------------------------------------------------------
bool gt_MasterTradeScript_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_ye == false)) {
        gf_PushGlobalTrackingDown();
        gf_FindGlobalTrackers();
        gv_ye = true;
    }
    else {
        gv_ye = false;
    }
    gf_UpdateMainTradeScreen();
    gf_UpdateExternalTradePolicies();
    gf_UpdateTradePolicyUI();
    gf_UpdateInternalPolicy();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MasterTradeScript_Init () {
    gt_MasterTradeScript = TriggerCreate("gt_MasterTradeScript_Func");
    TriggerAddEventTimePeriodic(gt_MasterTradeScript, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Buy/Sell
//--------------------------------------------------------------------------------------------------
bool gt_BuySell_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_tradeDialogItems[10]) || (EventDialogControl() == gv_tradeDialogItems[11]) || (EventDialogControl() == gv_tradeDialogItems[12]) || (EventDialogControl() == gv_tradeDialogItems[13]) || (EventDialogControl() == gv_tradeDialogItems[14]) || (EventDialogControl() == gv_tradeDialogItems[15])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(gv_manualTradeDialog, PlayerGroupSingle(EventPlayer()), true);
    if ((EventDialogControl() == gv_tradeDialogItems[10])) {
        gv_buySellVariable[EventPlayer()] = 1;
    }

    if ((EventDialogControl() == gv_tradeDialogItems[11])) {
        gv_buySellVariable[EventPlayer()] = 2;
    }

    if ((EventDialogControl() == gv_tradeDialogItems[12])) {
        gv_buySellVariable[EventPlayer()] = 3;
    }

    if ((EventDialogControl() == gv_tradeDialogItems[13])) {
        gv_buySellVariable[EventPlayer()] = 4;
    }

    if ((EventDialogControl() == gv_tradeDialogItems[14])) {
        gv_buySellVariable[EventPlayer()] = 5;
    }

    if ((EventDialogControl() == gv_tradeDialogItems[15])) {
        gv_buySellVariable[EventPlayer()] = 6;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BuySell_Init () {
    gt_BuySell = TriggerCreate("gt_BuySell_Func");
    TriggerAddEventDialogControl(gt_BuySell, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SendBuy/SellToVariables
//--------------------------------------------------------------------------------------------------
bool gt_SendBuySellToVariables_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_quantity;
    int lv_price;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_manualTradeDialogItems[2])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_quantity = StringToInt(libNtve_gf_DialogItemEditValue(gv_manualTradeDialogItems[0], EventPlayer()));
    lv_price = StringToInt(libNtve_gf_DialogItemEditValue(gv_manualTradeDialogItems[1], EventPlayer()));
    gv_buySellQuantity[EventPlayer()] = lv_quantity;
    gv_buySellPrice[EventPlayer()] = lv_price;
    DialogSetVisible(gv_manualTradeDialog, PlayerGroupSingle(EventPlayer()), false);
    TriggerExecute(gt_ExecuteBuySell, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SendBuySellToVariables_Init () {
    gt_SendBuySellToVariables = TriggerCreate("gt_SendBuySellToVariables_Func");
    TriggerAddEventDialogControl(gt_SendBuySellToVariables, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ExecuteBuy/Sell
//--------------------------------------------------------------------------------------------------
bool gt_ExecuteBuySell_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto45291C69_g;
    int auto45291C69_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto45291C69_g = gv_users;
    auto45291C69_var = -1;
    while (true) {
        auto45291C69_var = PlayerGroupNextPlayer(auto45291C69_g, auto45291C69_var);
        if (auto45291C69_var < 0) { break; }
        if ((gv_buySellVariable[auto45291C69_var] == 1) && (gv_buySellQuantity[auto45291C69_var] > 0)) {
            gf_BuyResources(auto45291C69_var, gv_buySellQuantity[auto45291C69_var], gv_buySellPrice[auto45291C69_var], 1, false);
        }

        if ((gv_buySellVariable[auto45291C69_var] == 2) && (gv_buySellQuantity[auto45291C69_var] > 0)) {
            gf_BuyResources(auto45291C69_var, gv_buySellQuantity[auto45291C69_var], gv_buySellPrice[auto45291C69_var], 2, false);
        }

        if ((gv_buySellVariable[auto45291C69_var] == 3) && (gv_buySellQuantity[auto45291C69_var] > 0)) {
            gf_BuyResources(auto45291C69_var, gv_buySellQuantity[auto45291C69_var], gv_buySellPrice[auto45291C69_var], 3, false);
        }

        if ((gv_buySellVariable[auto45291C69_var] == 4) && (gv_buySellQuantity[auto45291C69_var] > 0)) {
            gf_SellResources(auto45291C69_var, gv_buySellQuantity[auto45291C69_var], gv_buySellPrice[auto45291C69_var], 1, false, true);
        }

        if ((gv_buySellVariable[auto45291C69_var] == 5) && (gv_buySellQuantity[auto45291C69_var] > 0)) {
            gf_SellResources(auto45291C69_var, gv_buySellQuantity[auto45291C69_var], gv_buySellPrice[auto45291C69_var], 2, false, true);
        }

        if ((gv_buySellVariable[auto45291C69_var] == 6) && (gv_buySellQuantity[auto45291C69_var] > 0)) {
            gf_SellResources(auto45291C69_var, gv_buySellQuantity[auto45291C69_var], gv_buySellPrice[auto45291C69_var], 3, false, true);
        }

        gf_ResetBuySell(auto45291C69_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ExecuteBuySell_Init () {
    gt_ExecuteBuySell = TriggerCreate("gt_ExecuteBuySell_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: RealTimeSliders
//--------------------------------------------------------------------------------------------------
bool gt_RealTimeSliders_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_UpdateMainTradeScreen();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RealTimeSliders_Init () {
    gt_RealTimeSliders = TriggerCreate("gt_RealTimeSliders_Func");
    TriggerAddEventTimePeriodic(gt_RealTimeSliders, 0.7, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TradeModes
//--------------------------------------------------------------------------------------------------
bool gt_TradeModes_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_tradeDialogItems[22]) || (EventDialogControl() == gv_tradeDialogItems[24]) || (EventDialogControl() == gv_tradeDialogItems[26]) || (EventDialogControl() == gv_tradeDialogItems[27]) || (EventDialogControl() == gv_tradeDialogItems[29]) || (EventDialogControl() == gv_tradeDialogItems[30]) || (EventDialogControl() == gv_tradeDialogItems[37]) || (EventDialogControl() == gv_tradeDialogItems[38]) || (EventDialogControl() == gv_tradeDialogItems[39]) || (EventDialogControl() == gv_tradeDialogItems[40]) || (EventDialogControl() == gv_tradeDialogItems[41]) || (EventDialogControl() == gv_tradeDialogItems[42]) || (EventDialogControl() == gv_tradeDialogItems[43]) || (EventDialogControl() == gv_tradeDialogItems[44]) || (EventDialogControl() == gv_tradeDialogItems[45]) || (EventDialogControl() == gv_tradeDialogItems[46])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventDialogControl() == gv_tradeDialogItems[22])) {
        gv_autoImportMode[EventPlayer()][1] = 0;
        DialogControlSetEnabled(gv_tradeDialogItems[22], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetEnabled(gv_tradeDialogItems[26], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetEnabled(gv_tradeDialogItems[29], PlayerGroupSingle(EventPlayer()), true);
    }

    if ((EventDialogControl() == gv_tradeDialogItems[24])) {
        gv_autoImportMode[EventPlayer()][3] = 0;
        DialogControlSetEnabled(gv_tradeDialogItems[24], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetEnabled(gv_tradeDialogItems[27], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetEnabled(gv_tradeDialogItems[30], PlayerGroupSingle(EventPlayer()), true);
    }

    if ((EventDialogControl() == gv_tradeDialogItems[26])) {
        gv_autoImportMode[EventPlayer()][1] = 1;
        DialogControlSetEnabled(gv_tradeDialogItems[22], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetEnabled(gv_tradeDialogItems[26], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetEnabled(gv_tradeDialogItems[29], PlayerGroupSingle(EventPlayer()), true);
    }

    if ((EventDialogControl() == gv_tradeDialogItems[27])) {
        gv_autoImportMode[EventPlayer()][3] = 1;
        DialogControlSetEnabled(gv_tradeDialogItems[24], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetEnabled(gv_tradeDialogItems[27], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetEnabled(gv_tradeDialogItems[30], PlayerGroupSingle(EventPlayer()), true);
    }

    if ((EventDialogControl() == gv_tradeDialogItems[29])) {
        gv_autoImportMode[EventPlayer()][1] = 2;
        DialogControlSetEnabled(gv_tradeDialogItems[22], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetEnabled(gv_tradeDialogItems[26], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetEnabled(gv_tradeDialogItems[29], PlayerGroupSingle(EventPlayer()), false);
    }

    if ((EventDialogControl() == gv_tradeDialogItems[30])) {
        gv_autoImportMode[EventPlayer()][3] = 2;
        DialogControlSetEnabled(gv_tradeDialogItems[24], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetEnabled(gv_tradeDialogItems[27], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetEnabled(gv_tradeDialogItems[30], PlayerGroupSingle(EventPlayer()), false);
    }

    if ((EventDialogControl() == gv_tradeDialogItems[37])) {
        gv_autoExportsMode[EventPlayer()][1] = 0;
        DialogControlSetEnabled(gv_tradeDialogItems[37], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetEnabled(gv_tradeDialogItems[40], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetEnabled(gv_tradeDialogItems[43], PlayerGroupSingle(EventPlayer()), true);
    }

    if ((EventDialogControl() == gv_tradeDialogItems[38])) {
        gv_autoExportsMode[EventPlayer()][2] = 0;
        DialogControlSetEnabled(gv_tradeDialogItems[38], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetEnabled(gv_tradeDialogItems[41], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetEnabled(gv_tradeDialogItems[44], PlayerGroupSingle(EventPlayer()), true);
    }

    if ((EventDialogControl() == gv_tradeDialogItems[39])) {
        gv_autoExportsMode[EventPlayer()][3] = 0;
        DialogControlSetEnabled(gv_tradeDialogItems[39], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetEnabled(gv_tradeDialogItems[42], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetEnabled(gv_tradeDialogItems[45], PlayerGroupSingle(EventPlayer()), true);
    }

    if ((EventDialogControl() == gv_tradeDialogItems[40])) {
        gv_autoExportsMode[EventPlayer()][1] = 1;
        DialogControlSetEnabled(gv_tradeDialogItems[37], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetEnabled(gv_tradeDialogItems[40], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetEnabled(gv_tradeDialogItems[43], PlayerGroupSingle(EventPlayer()), true);
    }

    if ((EventDialogControl() == gv_tradeDialogItems[41])) {
        gv_autoExportsMode[EventPlayer()][2] = 1;
        DialogControlSetEnabled(gv_tradeDialogItems[38], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetEnabled(gv_tradeDialogItems[41], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetEnabled(gv_tradeDialogItems[44], PlayerGroupSingle(EventPlayer()), true);
    }

    if ((EventDialogControl() == gv_tradeDialogItems[42])) {
        gv_autoExportsMode[EventPlayer()][3] = 1;
        DialogControlSetEnabled(gv_tradeDialogItems[39], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetEnabled(gv_tradeDialogItems[42], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetEnabled(gv_tradeDialogItems[45], PlayerGroupSingle(EventPlayer()), true);
    }

    if ((EventDialogControl() == gv_tradeDialogItems[43])) {
        gv_autoExportsMode[EventPlayer()][1] = 2;
        DialogControlSetEnabled(gv_tradeDialogItems[37], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetEnabled(gv_tradeDialogItems[40], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetEnabled(gv_tradeDialogItems[43], PlayerGroupSingle(EventPlayer()), false);
    }

    if ((EventDialogControl() == gv_tradeDialogItems[44])) {
        gv_autoExportsMode[EventPlayer()][2] = 2;
        DialogControlSetEnabled(gv_tradeDialogItems[38], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetEnabled(gv_tradeDialogItems[41], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetEnabled(gv_tradeDialogItems[44], PlayerGroupSingle(EventPlayer()), false);
    }

    if ((EventDialogControl() == gv_tradeDialogItems[45])) {
        gv_autoExportsMode[EventPlayer()][3] = 2;
        DialogControlSetEnabled(gv_tradeDialogItems[39], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetEnabled(gv_tradeDialogItems[42], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetEnabled(gv_tradeDialogItems[45], PlayerGroupSingle(EventPlayer()), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TradeModes_Init () {
    gt_TradeModes = TriggerCreate("gt_TradeModes_Func");
    TriggerAddEventDialogControl(gt_TradeModes, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tabs
//--------------------------------------------------------------------------------------------------
bool gt_Tabs_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_economicTabsDialogItems[1]) || (EventDialogControl() == gv_economicTabsDialogItems[2]) || (EventDialogControl() == gv_economicTabsDialogItems[3]) || (EventDialogControl() == gv_economicTabsDialogItems[4])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventDialogControl() == gv_economicTabsDialogItems[1])) {
        DialogSetVisible(gv_economyTabsMainDialog, PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_tradeMainDialog, PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_corporationMainDialog, PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_corporationMainsSideDialog, PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_economicPolicyMainDialog, PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_economicInternalPolicyDialog, PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_economicExternalPolicyDialog, PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_economicDebtPolicy, PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_privateLoanUI, PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_repayLoanUI, PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_manualTradeDialog, PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetEnabled(gv_economicTabsDialogItems[2], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetEnabled(gv_economicTabsDialogItems[3], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetEnabled(gv_economicTabsDialogItems[4], PlayerGroupSingle(EventPlayer()), true);
    }

    if ((EventDialogControl() == gv_economicTabsDialogItems[2])) {
        DialogSetVisible(gv_tradeMainDialog, PlayerGroupSingle(EventPlayer()), true);
        DialogSetVisible(gv_corporationMainDialog, PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_corporationMainsSideDialog, PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_economicPolicyMainDialog, PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_economicInternalPolicyDialog, PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_economicExternalPolicyDialog, PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_economicDebtPolicy, PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_privateLoanUI, PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_repayLoanUI, PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_manualTradeDialog, PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetEnabled(gv_economicTabsDialogItems[2], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetEnabled(gv_economicTabsDialogItems[3], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetEnabled(gv_economicTabsDialogItems[4], PlayerGroupSingle(EventPlayer()), true);
    }

    if ((EventDialogControl() == gv_economicTabsDialogItems[3])) {
        DialogSetVisible(gv_tradeMainDialog, PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_corporationMainDialog, PlayerGroupSingle(EventPlayer()), true);
        DialogSetVisible(gv_corporationMainsSideDialog, PlayerGroupSingle(EventPlayer()), true);
        DialogSetVisible(gv_economicPolicyMainDialog, PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_economicInternalPolicyDialog, PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_economicExternalPolicyDialog, PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_economicDebtPolicy, PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_privateLoanUI, PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_repayLoanUI, PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_manualTradeDialog, PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetEnabled(gv_economicTabsDialogItems[2], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetEnabled(gv_economicTabsDialogItems[3], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetEnabled(gv_economicTabsDialogItems[4], PlayerGroupSingle(EventPlayer()), true);
    }

    if ((EventDialogControl() == gv_economicTabsDialogItems[4])) {
        DialogSetVisible(gv_tradeMainDialog, PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_corporationMainDialog, PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_corporationMainsSideDialog, PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_economicPolicyMainDialog, PlayerGroupSingle(EventPlayer()), true);
        DialogSetVisible(gv_economicInternalPolicyDialog, PlayerGroupSingle(EventPlayer()), true);
        DialogSetVisible(gv_economicExternalPolicyDialog, PlayerGroupSingle(EventPlayer()), true);
        DialogSetVisible(gv_economicDebtPolicy, PlayerGroupSingle(EventPlayer()), true);
        DialogSetVisible(gv_privateLoanUI, PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_repayLoanUI, PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_manualTradeDialog, PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetEnabled(gv_economicTabsDialogItems[2], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetEnabled(gv_economicTabsDialogItems[3], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetEnabled(gv_economicTabsDialogItems[4], PlayerGroupSingle(EventPlayer()), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Tabs_Init () {
    gt_Tabs = TriggerCreate("gt_Tabs_Func");
    TriggerAddEventDialogControl(gt_Tabs, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: EmbargoButton
//--------------------------------------------------------------------------------------------------
bool gt_EmbargoButton_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_sliderValue;
    int lv_clickedDialog;

    // Automatic Variable Declarations
    const int autoF1A25200_ae = 15;
    const int autoF1A25200_ai = 1;
    playergroup auto5132DE4E_g;
    int auto5132DE4E_var;
    playergroup autoE67E79B8_g;
    int autoE67E79B8_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_subjugated[EventPlayer()] == false))) {
            return false;
        }

        if (!(((EventDialogControl() == gv_economicExternalPolicyDialogItems[8]) || (EventDialogControl() == gv_economicExternalPolicyDialogItems[9]) || (EventDialogControl() == gv_economicExternalPolicyDialogItems[10]) || (EventDialogControl() == gv_economicExternalPolicyDialogItems[11]) || (EventDialogControl() == gv_economicExternalPolicyDialogItems[12]) || (EventDialogControl() == gv_economicExternalPolicyDialogItems[13]) || (EventDialogControl() == gv_economicExternalPolicyDialogItems[14]) || (EventDialogControl() == gv_economicExternalPolicyDialogItems[15])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_clickedDialog = 1;
    for ( ; ( (autoF1A25200_ai >= 0 && lv_clickedDialog <= autoF1A25200_ae) || (autoF1A25200_ai < 0 && lv_clickedDialog >= autoF1A25200_ae) ) ; lv_clickedDialog += autoF1A25200_ai ) {
        if ((EventDialogControl() == gv_economicExternalPolicyDialogItems[lv_clickedDialog])) {
            break;
        }

    }
    if ((lv_clickedDialog < 15) && (EventPlayer() != PlayerGroupPlayer(gv_users, (lv_clickedDialog - 7)))) {
        if ((gv_embargo[EventPlayer()][PlayerGroupPlayer(gv_users, (lv_clickedDialog - 7))] == true)) {
            gv_embargo[EventPlayer()][PlayerGroupPlayer(gv_users, (lv_clickedDialog - 7))] = false;
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, ((PlayerName(EventPlayer()) + StringExternal("Param/Value/713A4B2C")) + gf_NationOfPlayer(PlayerGroupPlayer(gv_users, (lv_clickedDialog - 7)))));
            autoE67E79B8_g = gv_users;
            autoE67E79B8_var = -1;
            while (true) {
                autoE67E79B8_var = PlayerGroupNextPlayer(autoE67E79B8_g, autoE67E79B8_var);
                if (autoE67E79B8_var < 0) { break; }
                if ((gv_subjugator[autoE67E79B8_var] == EventPlayer()) && (autoE67E79B8_var != PlayerGroupPlayer(gv_users, (lv_clickedDialog - 7)))) {
                    gv_embargo[autoE67E79B8_var][PlayerGroupPlayer(gv_users, (lv_clickedDialog - 7))] = false;
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, ((PlayerName(autoE67E79B8_var) + StringExternal("Param/Value/BD86ED1E")) + gf_NationOfPlayer(PlayerGroupPlayer(gv_users, (lv_clickedDialog - 7)))));
                }

            }
        }
        else {
            gv_embargo[EventPlayer()][PlayerGroupPlayer(gv_users, (lv_clickedDialog - 7))] = true;
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, ((gf_NationOfPlayer(EventPlayer()) + StringExternal("Param/Value/A7052FB7")) + gf_NationOfPlayer(PlayerGroupPlayer(gv_users, (lv_clickedDialog - 7)))));
            auto5132DE4E_g = gv_users;
            auto5132DE4E_var = -1;
            while (true) {
                auto5132DE4E_var = PlayerGroupNextPlayer(auto5132DE4E_g, auto5132DE4E_var);
                if (auto5132DE4E_var < 0) { break; }
                if ((gv_subjugator[auto5132DE4E_var] == EventPlayer()) && (auto5132DE4E_var != PlayerGroupPlayer(gv_users, (lv_clickedDialog - 7)))) {
                    gv_embargo[auto5132DE4E_var][PlayerGroupPlayer(gv_users, (lv_clickedDialog - 7))] = true;
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, ((gf_NationOfPlayer(auto5132DE4E_var) + StringExternal("Param/Value/6D26F66B")) + gf_NationOfPlayer(PlayerGroupPlayer(gv_users, (lv_clickedDialog - 7)))));
                }

            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EmbargoButton_Init () {
    gt_EmbargoButton = TriggerCreate("gt_EmbargoButton_Func");
    TriggerAddEventDialogControl(gt_EmbargoButton, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TradeUI
//--------------------------------------------------------------------------------------------------
bool gt_TradeUI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(590, 50, c_anchorTopLeft, 145, 60, true);
    DialogSetImage(DialogLastCreated(), "Assets\\Declare War, Neutral, Peace\\Transparent Box.tga");
    gv_economyTabsMainDialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 50, c_anchorTopLeft, 10, 0, StringExternal("Param/Value/B28632CD"), StringExternal("Param/Value/1C4F15AD"), "");
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
    gv_economicTabsDialogItems[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 50, c_anchorTopLeft, 200, 0, StringExternal("Param/Value/24A6CA24"), StringExternal("Param/Value/1A43EBCF"), "");
    gv_economicTabsDialogItems[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 50, c_anchorTopLeft, 390, 0, StringExternal("Param/Value/296F4CC9"), StringExternal("Param/Value/F03F6D7F"), "");
    gv_economicTabsDialogItems[4] = DialogControlLastCreated();
    DialogCreate(1050, 370, c_anchorTopLeft, 150, 95, true);
    DialogSetImage(DialogLastCreated(), "Assets\\Textures\\ui_scrollbar_frame.dds");
    gv_tradeMainDialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 120, 50, c_anchorTopLeft, 30, 40, StringExternal("Param/Value/79B426FE"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/D35E843E"), PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Void_BoldMedium1", PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 120, 50, c_anchorTopLeft, 130, 40, StringExternal("Param/Value/BBF353A1"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Void_BoldMedium1", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/6F498EE1"), PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 120, 50, c_anchorTopLeft, 200, 40, StringExternal("Param/Value/87DA842F"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Void_BoldMedium1", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/CC3669AC"), PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 120, 50, c_anchorTopLeft, 360, 40, StringExternal("Param/Value/AA7E3E09"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Void_BoldMedium1", PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, 540, 10, StringExternal("Param/Value/9EE10863"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Void_BoldMedium1", PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, 810, 10, StringExternal("Param/Value/179E91B3"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Void_BoldMedium1", PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 120, 50, c_anchorTopLeft, 30, 100, StringExternal("Param/Value/AA28DADF"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_tradeDialogItems[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 120, 50, c_anchorTopLeft, 30, 190, StringExternal("Param/Value/72DDAFFB"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_tradeDialogItems[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 120, 50, c_anchorTopLeft, 30, 280, StringExternal("Param/Value/F2ED5F9A"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_tradeDialogItems[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 120, 50, c_anchorTopLeft, 135, 100, StringExternal("Param/Value/530A077D"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_tradeDialogItems[4] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 120, 50, c_anchorTopLeft, 135, 190, StringExternal("Param/Value/4EB1EFB7"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_tradeDialogItems[5] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 120, 50, c_anchorTopLeft, 135, 280, StringExternal("Param/Value/96C12A34"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_tradeDialogItems[6] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 120, 50, c_anchorTopLeft, 215, 100, StringExternal("Param/Value/C6BBD70B"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 120, 50, c_anchorTopLeft, 210, 190, StringExternal("Param/Value/FBF6DB8B"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 120, 50, c_anchorTopLeft, 223, 280, StringExternal("Param/Value/F9F84CAA"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 70, 40, c_anchorTopLeft, 320, 87, StringToText(""), StringExternal("Param/Value/CDE2B53E"), "");
    gv_tradeDialogItems[10] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 70, 40, c_anchorTopLeft, 320, 177, StringToText(""), StringExternal("Param/Value/6493A80B"), "");
    gv_tradeDialogItems[11] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 70, 40, c_anchorTopLeft, 320, 267, StringToText(""), StringExternal("Param/Value/BA14C3AA"), "");
    gv_tradeDialogItems[12] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 70, 40, c_anchorTopLeft, 400, 87, StringToText(""), StringExternal("Param/Value/B220F9CA"), "");
    gv_tradeDialogItems[13] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 70, 40, c_anchorTopLeft, 400, 177, StringToText(""), StringExternal("Param/Value/E796F9F8"), "");
    gv_tradeDialogItems[14] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 70, 40, c_anchorTopLeft, 400, 267, StringToText(""), StringExternal("Param/Value/DF250D1E"), "");
    gv_tradeDialogItems[15] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 150, 60, c_anchorTopLeft, 565, 175, StringExternal("Param/Value/DB89F799"), ColorWithAlpha(0,0,0,0), false, 2.0);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeSlider);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 200, 50);
    libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), 100.0, PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 530, 70);
    gv_tradeDialogItems[16] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeSlider);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 200, 50);
    libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), 500.0, PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 530, 250);
    gv_tradeDialogItems[18] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 60, 40, c_anchorTopLeft, 530, 60, StringExternal("Param/Value/A9C594B4"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/A398A447"), PlayerGroupAll());
    gv_tradeDialogItems[19] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 60, 40, c_anchorTopLeft, 530, 240, StringExternal("Param/Value/AA82EE6C"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/539A1F6C"), PlayerGroupAll());
    gv_tradeDialogItems[21] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 66, 40, c_anchorTopLeft, 530, 110, StringToText(""), StringExternal("Param/Value/00B8B198"), "");
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
    gv_tradeDialogItems[22] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 66, 40, c_anchorTopLeft, 530, 290, StringToText(""), StringExternal("Param/Value/282E1F75"), "");
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
    gv_tradeDialogItems[24] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 76, 40, c_anchorTopLeft, 591, 110, StringToText(""), StringExternal("Param/Value/4FC0BC34"), "");
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/B74551E9"), PlayerGroupAll());
    gv_tradeDialogItems[26] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 76, 40, c_anchorTopLeft, 591, 290, StringToText(""), StringExternal("Param/Value/9C9F66C4"), "");
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/3A695824"), PlayerGroupAll());
    gv_tradeDialogItems[27] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 66, 40, c_anchorTopLeft, 662, 110, StringToText(""), StringExternal("Param/Value/1BEC4D58"), "");
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/2C2C8A1E"), PlayerGroupAll());
    gv_tradeDialogItems[29] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 66, 40, c_anchorTopLeft, 662, 290, StringToText(""), StringExternal("Param/Value/012F115D"), "");
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/0D6F87A8"), PlayerGroupAll());
    gv_tradeDialogItems[30] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeSlider);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 200, 50);
    libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), 100.0, PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 800, 70);
    gv_tradeDialogItems[31] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeSlider);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 200, 50);
    libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), 500.0, PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 800, 160);
    gv_tradeDialogItems[32] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeSlider);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 200, 50);
    libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), 500.0, PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 800, 250);
    gv_tradeDialogItems[33] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 60, 40, c_anchorTopLeft, 800, 60, StringExternal("Param/Value/D42613DB"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/B482681B"), PlayerGroupAll());
    gv_tradeDialogItems[34] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 60, 40, c_anchorTopLeft, 800, 150, StringExternal("Param/Value/80363B5B"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/BCED989E"), PlayerGroupAll());
    gv_tradeDialogItems[35] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 60, 40, c_anchorTopLeft, 800, 240, StringExternal("Param/Value/754F2413"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/97525726"), PlayerGroupAll());
    gv_tradeDialogItems[36] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 66, 40, c_anchorTopLeft, 800, 110, StringToText(""), StringExternal("Param/Value/2CA776BD"), "");
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
    gv_tradeDialogItems[37] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 66, 40, c_anchorTopLeft, 800, 200, StringToText(""), StringExternal("Param/Value/E5771CFF"), "");
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
    gv_tradeDialogItems[38] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 66, 40, c_anchorTopLeft, 800, 290, StringToText(""), StringExternal("Param/Value/D2A6654F"), "");
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
    gv_tradeDialogItems[39] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 76, 40, c_anchorTopLeft, 861, 110, StringToText(""), StringExternal("Param/Value/D89560C8"), "");
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/EE4207BE"), PlayerGroupAll());
    gv_tradeDialogItems[40] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 76, 40, c_anchorTopLeft, 861, 200, StringToText(""), StringExternal("Param/Value/C63C2712"), "");
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/43443520"), PlayerGroupAll());
    gv_tradeDialogItems[41] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 76, 40, c_anchorTopLeft, 861, 290, StringToText(""), StringExternal("Param/Value/420B0992"), "");
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/564E612D"), PlayerGroupAll());
    gv_tradeDialogItems[42] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 66, 40, c_anchorTopLeft, 932, 110, StringToText(""), StringExternal("Param/Value/F8AC5C36"), "");
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/13FA5809"), PlayerGroupAll());
    gv_tradeDialogItems[43] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 66, 40, c_anchorTopLeft, 932, 200, StringToText(""), StringExternal("Param/Value/301AAFCF"), "");
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/C6219351"), PlayerGroupAll());
    gv_tradeDialogItems[44] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 66, 40, c_anchorTopLeft, 932, 290, StringToText(""), StringExternal("Param/Value/42A30EC2"), "");
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/E8EFD5DF"), PlayerGroupAll());
    gv_tradeDialogItems[45] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeCheckBox);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 40, 20);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 20, 20);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/17362387"), PlayerGroupAll());
    gv_tradeDialogItems[46] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 150, 40, c_anchorTopLeft, 70, 20, StringExternal("Param/Value/8FBD0036"), ColorWithAlpha(0,0,0,0), false, 2.0);
    DialogCreate(700, 620, c_anchorTopLeft, 150, 95, true);
    DialogSetImage(DialogLastCreated(), "Assets\\Textures\\ui_scrollbar_frame.dds");
    gv_corporationMainDialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 550, 50, c_anchorTopLeft, 50, 20, StringExternal("Param/Value/415386CD"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_corporationDialogItems[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ObjectiveDisplay", PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(100.00, 0.00, 0.00), PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 450, 1, c_anchorTopLeft, 50, 55, StringToText(""), "Assets\\EU\\ArisBlackBox.tga", c_triggerImageTypeNormal, true, Color(100.00, 0.00, 0.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 260, 40, c_anchorTopLeft, 40, 60, StringExternal("Param/Value/F896D8D7"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Void_BoldExtendedMedium1", PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 80, 40, c_anchorTopLeft, 80, 100, StringExternal("Param/Value/5A83ADC5"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 80, 40, c_anchorTopLeft, 40, 160, StringExternal("Param/Value/5D3AAAE6"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 80, 40, c_anchorTopLeft, 40, 190, StringExternal("Param/Value/394D5033"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 95, 40, c_anchorTopLeft, 40, 220, StringExternal("Param/Value/984616CE"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 40, c_anchorTopLeft, 50, 250, StringExternal("Param/Value/D98C8950"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 120, 40, c_anchorTopLeft, 80, 290, StringExternal("Param/Value/86B9F3A8"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 100, 40, c_anchorTopLeft, 40, 320, StringExternal("Param/Value/21231823"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 80, 40, c_anchorTopLeft, 40, 380, StringExternal("Param/Value/AE88DEF5"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 80, 40, c_anchorTopLeft, 40, 410, StringExternal("Param/Value/8BAE9E7B"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 100, 40, c_anchorTopLeft, 40, 440, StringExternal("Param/Value/1A07B017"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 100, 40, c_anchorTopLeft, 40, 470, StringExternal("Param/Value/884FD611"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/FB962E09"), PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 120, 40, c_anchorTopLeft, 40, 500, StringExternal("Param/Value/A494BAB6"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/4582FF5E"), PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 40, c_anchorTopLeft, 50, 530, StringExternal("Param/Value/712F24F2"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 40, c_anchorTopLeft, 70, 570, StringExternal("Param/Value/4637A6FE"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 120, 40, c_anchorTopLeft, 151, 160, StringExternal("Param/Value/BDB0B412"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_corporationDialogItems[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 120, 40, c_anchorTopLeft, 151, 190, StringExternal("Param/Value/B0C82785"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_corporationDialogItems[4] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 120, 40, c_anchorTopLeft, 151, 220, StringExternal("Param/Value/651E0F4B"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_corporationDialogItems[5] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 120, 40, c_anchorTopLeft, 220, 250, StringExternal("Param/Value/1DF5C38E"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_corporationDialogItems[6] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 70, 1, c_anchorTopLeft, 218, 268, StringToText(""), "Assets\\EU\\ArisBlackBox.tga", c_triggerImageTypeNormal, true, Color(100.00, 0.00, 0.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 120, 40, c_anchorTopLeft, 151, 320, StringExternal("Param/Value/68D484F6"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_corporationDialogItems[7] = DialogControlLastCreated();
    gv_corporationDialogItems[8] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 120, 40, c_anchorTopLeft, 151, 380, StringExternal("Param/Value/11608D05"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_corporationDialogItems[9] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 120, 40, c_anchorTopLeft, 151, 410, StringExternal("Param/Value/46E51947"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_corporationDialogItems[10] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 120, 40, c_anchorTopLeft, 151, 440, StringExternal("Param/Value/676DC635"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_corporationDialogItems[11] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 120, 40, c_anchorTopLeft, 151, 470, StringExternal("Param/Value/F7CD0D56"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_corporationDialogItems[12] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 120, 40, c_anchorTopLeft, 151, 500, StringExternal("Param/Value/BB4C7A5E"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_corporationDialogItems[13] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 120, 40, c_anchorTopLeft, 220, 530, StringExternal("Param/Value/AEDB186B"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_corporationDialogItems[14] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 70, 1, c_anchorTopLeft, 218, 548, StringToText(""), "Assets\\EU\\ArisBlackBox.tga", c_triggerImageTypeNormal, true, Color(100.00, 0.00, 0.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 80, 40, c_anchorTopLeft, 250, 570, StringExternal("Param/Value/69338189"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_corporationDialogItems[15] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 70, 1, c_anchorTopLeft, 248, 589, StringToText(""), "Assets\\EU\\ArisBlackBox.tga", c_triggerImageTypeNormal, true, Color(100.00, 0.00, 0.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 70, 1, c_anchorTopLeft, 248, 591, StringToText(""), "Assets\\EU\\ArisBlackBox.tga", c_triggerImageTypeNormal, true, Color(100.00, 0.00, 0.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 3, 500, c_anchorTopLeft, 330, 85, StringToText(""), "Assets\\EU\\ArisBlackBox.tga", c_triggerImageTypeNormal, true, Color(100.00, 0.00, 0.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 220, 40, c_anchorTopLeft, 420, 60, StringExternal("Param/Value/B71FD808"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Void_BoldExtendedMedium1", PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 120, 40, c_anchorTopLeft, 410, 120, StringExternal("Param/Value/B6ED7C22"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 120, 40, c_anchorTopLeft, 480, 120, StringExternal("Param/Value/53FF0651"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/A3D58E5B"), PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 120, 40, c_anchorTopLeft, 570, 120, StringExternal("Param/Value/90E9E604"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/5B568EE6"), PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 120, 40, c_anchorTopLeft, 340, 200, StringExternal("Param/Value/12B0B61A"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 120, 40, c_anchorTopLeft, 340, 240, StringExternal("Param/Value/89440124"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_corporationDialogItems[16] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 80, 40, c_anchorTopLeft, 413, 200, StringExternal("Param/Value/CEB3C66B"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_corporationDialogItems[17] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 80, 40, c_anchorTopLeft, 413, 240, StringExternal("Param/Value/F6E7062F"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_corporationDialogItems[18] = DialogControlLastCreated();
    gv_corporationDialogItems[19] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 80, 40, c_anchorTopLeft, 482, 200, StringExternal("Param/Value/D1A35A5F"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_corporationDialogItems[20] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 80, 40, c_anchorTopLeft, 482, 240, StringExternal("Param/Value/4032D37A"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_corporationDialogItems[21] = DialogControlLastCreated();
    gv_corporationDialogItems[22] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 80, 40, c_anchorTopLeft, 575, 200, StringExternal("Param/Value/45391E12"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_corporationDialogItems[23] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 80, 40, c_anchorTopLeft, 575, 240, StringExternal("Param/Value/C38538E6"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_corporationDialogItems[24] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 330, 2, c_anchorTopLeft, 330, 270, StringToText(""), "Assets\\EU\\ArisBlackBox.tga", c_triggerImageTypeNormal, true, Color(100.00, 0.00, 0.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 220, 40, c_anchorTopLeft, 430, 270, StringExternal("Param/Value/B2088A38"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Void_BoldExtendedMedium1", PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 300, 30, c_anchorTopLeft, 340, 400, StringExternal("Param/Value/45D4D3D9"), "Assets\\EU\\ArisBlackBox.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_corporationDialogItems[25] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 270, 30, c_anchorTopLeft, 340, 400, StringExternal("Param/Value/97175E0B"), "Diplomatic Policies\\Progress Bar\\BlueBox.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_corporationDialogItems[26] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 50, 30, c_anchorTopLeft, 340, 400, StringExternal("Param/Value/D28D900D"), "Assets\\Declare War, Neutral, Peace\\GreenBox.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_corporationDialogItems[27] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 30, c_anchorTopLeft, 400, 405, StringExternal("Param/Value/D1033358"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_corporationDialogItems[28] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeSlider);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 319, 30);
    libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), 10000.0, PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 331, 430);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/8A632B22"), PlayerGroupAll());
    gv_corporationDialogItems[29] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 220, 40, c_anchorTopLeft, 340, 310, StringExternal("Param/Value/175C0457"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/57A37A7D"), PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 220, 40, c_anchorTopLeft, 340, 340, StringExternal("Param/Value/8BCEAE4F"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/9318C29E"), PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 220, 40, c_anchorTopLeft, 340, 370, StringExternal("Param/Value/0CB1CD58"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/DEECD57B"), PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 220, 40, c_anchorTopLeft, 470, 310, StringExternal("Param/Value/3DB1E2E0"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_corporationDialogItems[30] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 220, 40, c_anchorTopLeft, 470, 340, StringExternal("Param/Value/AE317C82"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_corporationDialogItems[31] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 220, 40, c_anchorTopLeft, 470, 370, StringExternal("Param/Value/5A882D3F"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_corporationDialogItems[32] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 220, 40, c_anchorTopLeft, 420, 460, StringExternal("Param/Value/799E1790"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Void_BoldExtendedMedium1", PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 330, 3, c_anchorTopLeft, 330, 465, StringToText(""), "Assets\\EU\\ArisBlackBox.tga", c_triggerImageTypeNormal, true, Color(100.00, 0.00, 0.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 280, 50, c_anchorTopLeft, 365, 490, StringExternal("Param/Value/99F1553D"), StringExternal("Param/Value/EEF8044E"), "");
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
    gv_corporationDialogItems[33] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 280, 50, c_anchorTopLeft, 365, 540, StringExternal("Param/Value/E4C52E71"), StringExternal("Param/Value/0F491926"), "");
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
    gv_corporationDialogItems[34] = DialogControlLastCreated();
    DialogCreate(350, 310, c_anchorTopLeft, 830, 95, true);
    DialogSetImage(DialogLastCreated(), "Assets\\Textures\\ui_scrollbar_frame.dds");
    gv_corporationMainsSideDialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 100, 40, c_anchorTopLeft, 20, 20, StringExternal("Param/Value/257684AD"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 100, 40, c_anchorTopLeft, 145, 20, StringExternal("Param/Value/33ED6A8A"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 100, 40, c_anchorTopLeft, 240, 20, StringExternal("Param/Value/D360B397"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 320, 45, c_anchorTopLeft, 10, 40, StringToText(""), StringToText(""), "");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Declare War, Neutral, Peace\\Transparent Box.tga", PlayerGroupAll());
    gv_corporationMainsSideDialogItems[8] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 320, 45, c_anchorTopLeft, 10, 75, StringToText(""), StringToText(""), "");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Declare War, Neutral, Peace\\Transparent Box.tga", PlayerGroupAll());
    gv_corporationMainsSideDialogItems[9] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 320, 45, c_anchorTopLeft, 10, 110, StringToText(""), StringToText(""), "");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Declare War, Neutral, Peace\\Transparent Box.tga", PlayerGroupAll());
    gv_corporationMainsSideDialogItems[10] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 320, 45, c_anchorTopLeft, 10, 145, StringToText(""), StringToText(""), "");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Declare War, Neutral, Peace\\Transparent Box.tga", PlayerGroupAll());
    gv_corporationMainsSideDialogItems[11] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 320, 45, c_anchorTopLeft, 10, 180, StringToText(""), StringToText(""), "");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Declare War, Neutral, Peace\\Transparent Box.tga", PlayerGroupAll());
    gv_corporationMainsSideDialogItems[12] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 320, 45, c_anchorTopLeft, 10, 215, StringToText(""), StringToText(""), "");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Declare War, Neutral, Peace\\Transparent Box.tga", PlayerGroupAll());
    gv_corporationMainsSideDialogItems[13] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 320, 45, c_anchorTopLeft, 10, 250, StringToText(""), StringToText(""), "");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Declare War, Neutral, Peace\\Transparent Box.tga", PlayerGroupAll());
    gv_corporationMainsSideDialogItems[14] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 100, 40, c_anchorTopLeft, 25, 55, StringExternal("Param/Value/44E1DEC4"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_corporationMainsSideDialogItems[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 100, 40, c_anchorTopLeft, 25, 90, StringExternal("Param/Value/ADBB572E"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_corporationMainsSideDialogItems[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 100, 40, c_anchorTopLeft, 25, 125, StringExternal("Param/Value/CAE234CC"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_corporationMainsSideDialogItems[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 100, 40, c_anchorTopLeft, 25, 160, StringExternal("Param/Value/368C15E6"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_corporationMainsSideDialogItems[4] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 100, 40, c_anchorTopLeft, 25, 195, StringExternal("Param/Value/FA69F02C"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_corporationMainsSideDialogItems[5] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 100, 40, c_anchorTopLeft, 25, 230, StringExternal("Param/Value/117D335A"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_corporationMainsSideDialogItems[6] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 100, 40, c_anchorTopLeft, 25, 265, StringExternal("Param/Value/22A0EC05"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_corporationMainsSideDialogItems[7] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 100, 40, c_anchorTopLeft, 145, 55, StringExternal("Param/Value/07610394"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_corporationMainsSideDialogItems[15] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 100, 40, c_anchorTopLeft, 145, 90, StringExternal("Param/Value/CDE6B07E"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_corporationMainsSideDialogItems[16] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 100, 40, c_anchorTopLeft, 145, 125, StringExternal("Param/Value/71BFAD01"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_corporationMainsSideDialogItems[17] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 100, 40, c_anchorTopLeft, 145, 160, StringExternal("Param/Value/F26C1BC3"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_corporationMainsSideDialogItems[18] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 100, 40, c_anchorTopLeft, 145, 195, StringExternal("Param/Value/7CA392FB"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_corporationMainsSideDialogItems[19] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 100, 40, c_anchorTopLeft, 145, 230, StringExternal("Param/Value/EFDAA3F3"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_corporationMainsSideDialogItems[20] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 100, 40, c_anchorTopLeft, 145, 265, StringExternal("Param/Value/CD9ADE93"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_corporationMainsSideDialogItems[21] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 100, 40, c_anchorTopLeft, 245, 55, StringExternal("Param/Value/B868D1A3"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_corporationMainsSideDialogItems[22] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 100, 40, c_anchorTopLeft, 245, 90, StringExternal("Param/Value/5CE5DCF2"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_corporationMainsSideDialogItems[23] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 100, 40, c_anchorTopLeft, 245, 125, StringExternal("Param/Value/03123EC4"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_corporationMainsSideDialogItems[24] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 100, 40, c_anchorTopLeft, 245, 160, StringExternal("Param/Value/BAF458E4"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_corporationMainsSideDialogItems[25] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 100, 40, c_anchorTopLeft, 245, 195, StringExternal("Param/Value/AE8A279A"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_corporationMainsSideDialogItems[26] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 100, 40, c_anchorTopLeft, 245, 230, StringExternal("Param/Value/A3D1B9E0"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_corporationMainsSideDialogItems[27] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 100, 40, c_anchorTopLeft, 245, 265, StringExternal("Param/Value/60CA4A2F"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_corporationMainsSideDialogItems[28] = DialogControlLastCreated();
    DialogCreate(350, 620, c_anchorTopLeft, 150, 95, true);
    DialogSetImage(DialogLastCreated(), "Assets\\Textures\\ui_scrollbar_frame.dds");
    gv_economicPolicyMainDialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 260, 40, c_anchorTopLeft, 35, 20, StringExternal("Param/Value/C1AD4BD8"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/95765A27"), PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Void_BoldExtendedMedium1", PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 80, 40, c_anchorTopLeft, 90, 60, StringExternal("Param/Value/08FE9297"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 120, 40, c_anchorTopLeft, 40, 90, StringExternal("Param/Value/4E61533B"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 120, 40, c_anchorTopLeft, 40, 120, StringExternal("Param/Value/2D841AC7"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 120, 40, c_anchorTopLeft, 40, 150, StringExternal("Param/Value/C37BC1DD"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 140, 40, c_anchorTopLeft, 40, 180, StringExternal("Param/Value/9E4AB89B"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 120, 40, c_anchorTopLeft, 40, 210, StringExternal("Param/Value/AD521AA4"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 40, c_anchorTopLeft, 50, 240, StringExternal("Param/Value/FA757DFF"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 120, 40, c_anchorTopLeft, 85, 280, StringExternal("Param/Value/0028DC46"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 120, 40, c_anchorTopLeft, 40, 310, StringExternal("Param/Value/162AA177"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 120, 40, c_anchorTopLeft, 40, 340, StringExternal("Param/Value/87E62A92"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 120, 40, c_anchorTopLeft, 40, 370, StringExternal("Param/Value/208763E4"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 120, 40, c_anchorTopLeft, 40, 400, StringExternal("Param/Value/6BCA7C68"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 120, 40, c_anchorTopLeft, 40, 430, StringExternal("Param/Value/220AC28B"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 120, 40, c_anchorTopLeft, 40, 460, StringExternal("Param/Value/FEAABB55"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 120, 40, c_anchorTopLeft, 40, 490, StringExternal("Param/Value/43EAAAF8"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 40, c_anchorTopLeft, 50, 520, StringExternal("Param/Value/5853F344"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 40, c_anchorTopLeft, 70, 560, StringExternal("Param/Value/70D72CE6"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 100, 40, c_anchorTopLeft, 170, 92, StringExternal("Param/Value/A411E59D"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_economicPolicyDialogItems[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 100, 40, c_anchorTopLeft, 170, 122, StringExternal("Param/Value/08C53C3F"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_economicPolicyDialogItems[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 100, 40, c_anchorTopLeft, 170, 152, StringExternal("Param/Value/B27B313E"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_economicPolicyDialogItems[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 100, 40, c_anchorTopLeft, 170, 182, StringExternal("Param/Value/F7111AD7"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_economicPolicyDialogItems[4] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 100, 40, c_anchorTopLeft, 170, 212, StringExternal("Param/Value/7C7EB531"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_economicPolicyDialogItems[5] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 100, 40, c_anchorTopLeft, 230, 242, StringExternal("Param/Value/8DF94AF1"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_economicPolicyDialogItems[6] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 70, 1, c_anchorTopLeft, 228, 261, StringToText(""), "Assets\\EU\\ArisBlackBox.tga", c_triggerImageTypeNormal, true, Color(100.00, 0.00, 0.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 100, 40, c_anchorTopLeft, 170, 312, StringExternal("Param/Value/464E056B"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_economicPolicyDialogItems[7] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 100, 40, c_anchorTopLeft, 170, 342, StringExternal("Param/Value/9F8DCE62"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_economicPolicyDialogItems[8] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 100, 40, c_anchorTopLeft, 170, 372, StringExternal("Param/Value/E8F5CC64"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_economicPolicyDialogItems[9] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 100, 40, c_anchorTopLeft, 170, 402, StringExternal("Param/Value/C4797912"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_economicPolicyDialogItems[10] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 100, 40, c_anchorTopLeft, 170, 432, StringExternal("Param/Value/2C647651"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_economicPolicyDialogItems[11] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 100, 40, c_anchorTopLeft, 170, 462, StringExternal("Param/Value/4BD67E7F"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_economicPolicyDialogItems[12] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 100, 40, c_anchorTopLeft, 170, 492, StringExternal("Param/Value/0FC8D2FC"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_economicPolicyDialogItems[13] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 100, 40, c_anchorTopLeft, 230, 522, StringExternal("Param/Value/5E52F3B2"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_economicPolicyDialogItems[14] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 70, 1, c_anchorTopLeft, 228, 541, StringToText(""), "Assets\\EU\\ArisBlackBox.tga", c_triggerImageTypeNormal, true, Color(100.00, 0.00, 0.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 80, 40, c_anchorTopLeft, 250, 562, StringExternal("Param/Value/220934E9"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_economicPolicyDialogItems[15] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 70, 1, c_anchorTopLeft, 248, 581, StringToText(""), "Assets\\EU\\ArisBlackBox.tga", c_triggerImageTypeNormal, true, Color(100.00, 0.00, 0.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 70, 1, c_anchorTopLeft, 248, 583, StringToText(""), "Assets\\EU\\ArisBlackBox.tga", c_triggerImageTypeNormal, true, Color(100.00, 0.00, 0.00), c_triggerBlendModeNormal);
    DialogCreate(320, 620, c_anchorTopLeft, 480, 95, true);
    DialogSetImage(DialogLastCreated(), "Assets\\Textures\\ui_scrollbar_frame.dds");
    gv_economicInternalPolicyDialog = DialogLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Void_BoldExtendedMedium1", PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 150, 40, c_anchorTopLeft, 75, 30, StringExternal("Param/Value/77024249"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/35530748"), PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 150, 40, c_anchorTopLeft, 75, 100, StringExternal("Param/Value/313AC0EE"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/E634D8E8"), PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 150, 40, c_anchorTopLeft, 85, 170, StringExternal("Param/Value/0C4D06F6"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/97C31BC9"), PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 250, 40, c_anchorTopLeft, 60, 240, StringExternal("Param/Value/F863FAD0"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/21270C22"), PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 150, 40, c_anchorTopLeft, 85, 310, StringExternal("Param/Value/42AEA359"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/3D444B22"), PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 150, 40, c_anchorTopLeft, 85, 380, StringExternal("Param/Value/1F4139BB"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/04CA4D37"), PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 40, c_anchorTopLeft, 70, 450, StringExternal("Param/Value/69CF8090"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/8F297DA2"), PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 40, c_anchorTopLeft, 70, 520, StringExternal("Param/Value/65CC80E8"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/A699361C"), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeSlider);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 250, 50);
    libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), 1000.0, PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 25, 60);
    gv_economicInternalPolicyDialogItems[1] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeSlider);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 250, 50);
    libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), 100.0, PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 25, 130);
    gv_economicInternalPolicyDialogItems[2] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeSlider);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 250, 50);
    libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), 100.0, PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 25, 200);
    gv_economicInternalPolicyDialogItems[3] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeSlider);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 250, 50);
    libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), 100.0, PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 25, 270);
    gv_economicInternalPolicyDialogItems[4] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeSlider);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 250, 50);
    libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), 100.0, PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 25, 340);
    gv_economicInternalPolicyDialogItems[5] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeSlider);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 250, 50);
    libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), 100.0, PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 25, 410);
    gv_economicInternalPolicyDialogItems[6] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeSlider);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 250, 50);
    libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), 100.0, PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 25, 480);
    gv_economicInternalPolicyDialogItems[7] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeSlider);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 250, 50);
    libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), 100.0, PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 25, 550);
    gv_economicInternalPolicyDialogItems[15] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 40, c_anchorTopLeft, 25, 50, StringExternal("Param/Value/4B1DFC54"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_economicInternalPolicyDialogItems[8] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 40, c_anchorTopLeft, 25, 120, StringExternal("Param/Value/104FC60F"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_economicInternalPolicyDialogItems[9] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 40, c_anchorTopLeft, 25, 190, StringExternal("Param/Value/A8FCFF70"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_economicInternalPolicyDialogItems[10] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 40, c_anchorTopLeft, 25, 260, StringExternal("Param/Value/13A17635"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_economicInternalPolicyDialogItems[11] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 40, c_anchorTopLeft, 25, 330, StringExternal("Param/Value/3CD7747B"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_economicInternalPolicyDialogItems[12] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 40, c_anchorTopLeft, 25, 400, StringExternal("Param/Value/730B205C"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_economicInternalPolicyDialogItems[13] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 40, c_anchorTopLeft, 25, 470, StringExternal("Param/Value/DDD0F762"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_economicInternalPolicyDialogItems[14] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 40, c_anchorTopLeft, 25, 540, StringExternal("Param/Value/7F1D4AA3"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_economicInternalPolicyDialogItems[16] = DialogControlLastCreated();
    DialogCreate(650, 520, c_anchorTopLeft, 780, 95, true);
    DialogSetImage(DialogLastCreated(), "Assets\\Textures\\ui_scrollbar_frame.dds");
    gv_economicExternalPolicyDialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 220, 40, c_anchorTopLeft, 40, 20, StringExternal("Param/Value/10C055A3"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Void_BoldExtendedMedium1", PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 220, 40, c_anchorTopLeft, 60, 70, StringExternal("Param/Value/C3B140D5"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Void_BoldSmall", PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 220, 40, c_anchorTopLeft, 180, 70, StringExternal("Param/Value/98CFBBF6"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Void_BoldSmall", PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 220, 40, c_anchorTopLeft, 310, 70, StringExternal("Param/Value/79268A96"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/66297C4E"), PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Void_BoldSmall", PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 220, 40, c_anchorTopLeft, 492, 70, StringExternal("Param/Value/ABBE233B"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/66084212"), PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Void_BoldSmall", PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 220, 40, c_anchorTopLeft, 20, 100, StringExternal("Param/Value/25BA1688"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Void_RegularSmall", PlayerGroupAll());
    gv_economicExternalPolicyDialogItems[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Void_RegularSmall", PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 220, 40, c_anchorTopLeft, 20, 160, StringExternal("Param/Value/3D1C45B7"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_economicExternalPolicyDialogItems[2] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Void_RegularSmall", PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 220, 40, c_anchorTopLeft, 20, 220, StringExternal("Param/Value/503816B2"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_economicExternalPolicyDialogItems[3] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Void_RegularSmall", PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 220, 40, c_anchorTopLeft, 20, 280, StringExternal("Param/Value/A5073384"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_economicExternalPolicyDialogItems[4] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Void_RegularSmall", PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 220, 40, c_anchorTopLeft, 20, 640, StringExternal("Param/Value/C0CDBBBC"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_economicExternalPolicyDialogItems[5] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Void_RegularSmall", PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 220, 40, c_anchorTopLeft, 20, 400, StringExternal("Param/Value/D6F2C932"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_economicExternalPolicyDialogItems[6] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Void_RegularSmall", PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 220, 40, c_anchorTopLeft, 20, 460, StringExternal("Param/Value/9CCBB158"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_economicExternalPolicyDialogItems[7] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Void_RegularSmall", PlayerGroupAll());
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 70, 30, c_anchorTopLeft, 180, 103, StringToText(""), StringToText(""), "");
    gv_economicExternalPolicyDialogItems[8] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 70, 30, c_anchorTopLeft, 180, 163, StringToText(""), StringToText(""), "");
    gv_economicExternalPolicyDialogItems[9] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 70, 30, c_anchorTopLeft, 180, 223, StringToText(""), StringToText(""), "");
    gv_economicExternalPolicyDialogItems[10] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 70, 30, c_anchorTopLeft, 180, 283, StringToText(""), StringToText(""), "");
    gv_economicExternalPolicyDialogItems[11] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 70, 30, c_anchorTopLeft, 180, 343, StringToText(""), StringToText(""), "");
    gv_economicExternalPolicyDialogItems[12] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 70, 30, c_anchorTopLeft, 180, 403, StringToText(""), StringToText(""), "");
    gv_economicExternalPolicyDialogItems[13] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 70, 30, c_anchorTopLeft, 180, 463, StringToText(""), StringToText(""), "");
    gv_economicExternalPolicyDialogItems[14] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 25, 25, c_anchorTopLeft, 170, 112, StringToText(""), "Military\\Screenshots\\PossibleScreenshots\\Yes\\Yes\\Research\\Special\\Research\\Special\\Symbols\\SmallCheck.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_economicExternalPolicyDialogItems[15] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 25, 25, c_anchorTopLeft, 170, 172, StringToText(""), "Military\\Screenshots\\PossibleScreenshots\\Yes\\Yes\\Research\\Special\\Research\\Special\\Symbols\\SmallCheck.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_economicExternalPolicyDialogItems[16] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 25, 25, c_anchorTopLeft, 170, 232, StringToText(""), "Military\\Screenshots\\PossibleScreenshots\\Yes\\Yes\\Research\\Special\\Research\\Special\\Symbols\\SmallCheck.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_economicExternalPolicyDialogItems[17] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 25, 25, c_anchorTopLeft, 170, 292, StringToText(""), "Military\\Screenshots\\PossibleScreenshots\\Yes\\Yes\\Research\\Special\\Research\\Special\\Symbols\\SmallCheck.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_economicExternalPolicyDialogItems[18] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 25, 25, c_anchorTopLeft, 170, 352, StringToText(""), "Military\\Screenshots\\PossibleScreenshots\\Yes\\Yes\\Research\\Special\\Research\\Special\\Symbols\\SmallCheck.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_economicExternalPolicyDialogItems[19] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 25, 25, c_anchorTopLeft, 170, 412, StringToText(""), "Military\\Screenshots\\PossibleScreenshots\\Yes\\Yes\\Research\\Special\\Research\\Special\\Symbols\\SmallCheck.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_economicExternalPolicyDialogItems[20] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 25, 25, c_anchorTopLeft, 170, 472, StringToText(""), "Military\\Screenshots\\PossibleScreenshots\\Yes\\Yes\\Research\\Special\\Research\\Special\\Symbols\\SmallCheck.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_economicExternalPolicyDialogItems[21] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 25, 25, c_anchorTopLeft, 235, 112, StringToText(""), "Military\\Screenshots\\PossibleScreenshots\\Yes\\Yes\\Research\\Special\\Research\\Special\\Symbols\\SmallCheck.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_economicExternalPolicyDialogItems[22] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 25, 25, c_anchorTopLeft, 235, 172, StringToText(""), "Military\\Screenshots\\PossibleScreenshots\\Yes\\Yes\\Research\\Special\\Research\\Special\\Symbols\\SmallCheck.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_economicExternalPolicyDialogItems[23] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 25, 25, c_anchorTopLeft, 235, 232, StringToText(""), "Military\\Screenshots\\PossibleScreenshots\\Yes\\Yes\\Research\\Special\\Research\\Special\\Symbols\\SmallCheck.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_economicExternalPolicyDialogItems[24] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 25, 25, c_anchorTopLeft, 235, 292, StringToText(""), "Military\\Screenshots\\PossibleScreenshots\\Yes\\Yes\\Research\\Special\\Research\\Special\\Symbols\\SmallCheck.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_economicExternalPolicyDialogItems[25] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 25, 25, c_anchorTopLeft, 235, 352, StringToText(""), "Military\\Screenshots\\PossibleScreenshots\\Yes\\Yes\\Research\\Special\\Research\\Special\\Symbols\\SmallCheck.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_economicExternalPolicyDialogItems[26] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 25, 25, c_anchorTopLeft, 235, 412, StringToText(""), "Military\\Screenshots\\PossibleScreenshots\\Yes\\Yes\\Research\\Special\\Research\\Special\\Symbols\\SmallCheck.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_economicExternalPolicyDialogItems[27] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 25, 25, c_anchorTopLeft, 235, 472, StringToText(""), "Military\\Screenshots\\PossibleScreenshots\\Yes\\Yes\\Research\\Special\\Research\\Special\\Symbols\\SmallCheck.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_economicExternalPolicyDialogItems[28] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeSlider);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 140, 50);
    libNtve_gf_SetDialogItemMinimumValue(DialogControlLastCreated(), -100.0, PlayerGroupAll());
    libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), 100.0, PlayerGroupAll());
    libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), 0.0, PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 290, 90);
    gv_economicExternalPolicyDialogItems[29] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeSlider);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 140, 50);
    libNtve_gf_SetDialogItemMinimumValue(DialogControlLastCreated(), -100.0, PlayerGroupAll());
    libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), 100.0, PlayerGroupAll());
    libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), 0.0, PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 290, 150);
    gv_economicExternalPolicyDialogItems[30] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeSlider);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 140, 50);
    libNtve_gf_SetDialogItemMinimumValue(DialogControlLastCreated(), -100.0, PlayerGroupAll());
    libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), 100.0, PlayerGroupAll());
    libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), 0.0, PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 290, 210);
    gv_economicExternalPolicyDialogItems[31] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeSlider);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 140, 50);
    libNtve_gf_SetDialogItemMinimumValue(DialogControlLastCreated(), -100.0, PlayerGroupAll());
    libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), 100.0, PlayerGroupAll());
    libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), 0.0, PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 290, 270);
    gv_economicExternalPolicyDialogItems[32] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeSlider);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 140, 50);
    libNtve_gf_SetDialogItemMinimumValue(DialogControlLastCreated(), -100.0, PlayerGroupAll());
    libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), 100.0, PlayerGroupAll());
    libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), 0.0, PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 290, 330);
    gv_economicExternalPolicyDialogItems[33] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeSlider);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 140, 50);
    libNtve_gf_SetDialogItemMinimumValue(DialogControlLastCreated(), -100.0, PlayerGroupAll());
    libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), 100.0, PlayerGroupAll());
    libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), 0.0, PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 290, 390);
    gv_economicExternalPolicyDialogItems[34] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeSlider);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 140, 50);
    libNtve_gf_SetDialogItemMinimumValue(DialogControlLastCreated(), -100.0, PlayerGroupAll());
    libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), 100.0, PlayerGroupAll());
    libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), 0.0, PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 290, 450);
    gv_economicExternalPolicyDialogItems[35] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 60, 40, c_anchorTopLeft, 280, 117, StringExternal("Param/Value/F0C43583"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Void_RegularSmall", PlayerGroupAll());
    gv_economicExternalPolicyDialogItems[36] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 60, 40, c_anchorTopLeft, 280, 177, StringExternal("Param/Value/4E3A7F9A"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Void_RegularSmall", PlayerGroupAll());
    gv_economicExternalPolicyDialogItems[37] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 60, 40, c_anchorTopLeft, 280, 237, StringExternal("Param/Value/73D1E783"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Void_RegularSmall", PlayerGroupAll());
    gv_economicExternalPolicyDialogItems[38] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 60, 40, c_anchorTopLeft, 280, 297, StringExternal("Param/Value/1DD24C8E"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Void_RegularSmall", PlayerGroupAll());
    gv_economicExternalPolicyDialogItems[39] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 60, 40, c_anchorTopLeft, 280, 357, StringExternal("Param/Value/2D165899"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Void_RegularSmall", PlayerGroupAll());
    gv_economicExternalPolicyDialogItems[40] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 60, 40, c_anchorTopLeft, 280, 417, StringExternal("Param/Value/8C41AEAF"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Void_RegularSmall", PlayerGroupAll());
    gv_economicExternalPolicyDialogItems[41] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 60, 40, c_anchorTopLeft, 280, 477, StringExternal("Param/Value/A35EC2F6"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Void_RegularSmall", PlayerGroupAll());
    gv_economicExternalPolicyDialogItems[42] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 60, 40, c_anchorTopLeft, 400, 117, StringExternal("Param/Value/10C133FD"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Void_RegularSmall", PlayerGroupAll());
    gv_economicExternalPolicyDialogItems[43] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 60, 40, c_anchorTopLeft, 400, 177, StringExternal("Param/Value/69FF2E35"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Void_RegularSmall", PlayerGroupAll());
    gv_economicExternalPolicyDialogItems[44] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 60, 40, c_anchorTopLeft, 400, 237, StringExternal("Param/Value/FDC638EB"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Void_RegularSmall", PlayerGroupAll());
    gv_economicExternalPolicyDialogItems[45] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 60, 40, c_anchorTopLeft, 400, 297, StringExternal("Param/Value/77D2443D"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Void_RegularSmall", PlayerGroupAll());
    gv_economicExternalPolicyDialogItems[46] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 60, 40, c_anchorTopLeft, 400, 357, StringExternal("Param/Value/9B17E431"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Void_RegularSmall", PlayerGroupAll());
    gv_economicExternalPolicyDialogItems[47] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 60, 40, c_anchorTopLeft, 400, 417, StringExternal("Param/Value/D7CB18EF"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Void_RegularSmall", PlayerGroupAll());
    gv_economicExternalPolicyDialogItems[48] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 60, 40, c_anchorTopLeft, 400, 477, StringExternal("Param/Value/294BDF10"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Void_RegularSmall", PlayerGroupAll());
    gv_economicExternalPolicyDialogItems[49] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeSlider);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 140, 50);
    libNtve_gf_SetDialogItemMinimumValue(DialogControlLastCreated(), -100.0, PlayerGroupAll());
    libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), 100.0, PlayerGroupAll());
    libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), 0.0, PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 480, 90);
    gv_economicExternalPolicyDialogItems[50] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeSlider);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 140, 50);
    libNtve_gf_SetDialogItemMinimumValue(DialogControlLastCreated(), -100.0, PlayerGroupAll());
    libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), 100.0, PlayerGroupAll());
    libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), 0.0, PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 480, 150);
    gv_economicExternalPolicyDialogItems[51] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeSlider);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 140, 50);
    libNtve_gf_SetDialogItemMinimumValue(DialogControlLastCreated(), -100.0, PlayerGroupAll());
    libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), 100.0, PlayerGroupAll());
    libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), 0.0, PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 480, 210);
    gv_economicExternalPolicyDialogItems[52] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeSlider);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 140, 50);
    libNtve_gf_SetDialogItemMinimumValue(DialogControlLastCreated(), -100.0, PlayerGroupAll());
    libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), 100.0, PlayerGroupAll());
    libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), 0.0, PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 480, 270);
    gv_economicExternalPolicyDialogItems[53] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeSlider);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 140, 50);
    libNtve_gf_SetDialogItemMinimumValue(DialogControlLastCreated(), -100.0, PlayerGroupAll());
    libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), 100.0, PlayerGroupAll());
    libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), 0.0, PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 480, 330);
    gv_economicExternalPolicyDialogItems[54] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeSlider);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 140, 50);
    libNtve_gf_SetDialogItemMinimumValue(DialogControlLastCreated(), -100.0, PlayerGroupAll());
    libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), 100.0, PlayerGroupAll());
    libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), 0.0, PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 480, 390);
    gv_economicExternalPolicyDialogItems[55] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeSlider);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 140, 50);
    libNtve_gf_SetDialogItemMinimumValue(DialogControlLastCreated(), -100.0, PlayerGroupAll());
    libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), 100.0, PlayerGroupAll());
    libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), 0.0, PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 480, 450);
    gv_economicExternalPolicyDialogItems[56] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 60, 40, c_anchorTopLeft, 470, 117, StringExternal("Param/Value/C9426F56"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Void_RegularSmall", PlayerGroupAll());
    gv_economicExternalPolicyDialogItems[57] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 60, 40, c_anchorTopLeft, 470, 177, StringExternal("Param/Value/0BB2DD79"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Void_RegularSmall", PlayerGroupAll());
    gv_economicExternalPolicyDialogItems[58] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 60, 40, c_anchorTopLeft, 470, 237, StringExternal("Param/Value/890631BE"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Void_RegularSmall", PlayerGroupAll());
    gv_economicExternalPolicyDialogItems[59] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 60, 40, c_anchorTopLeft, 470, 297, StringExternal("Param/Value/D0DC8666"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Void_RegularSmall", PlayerGroupAll());
    gv_economicExternalPolicyDialogItems[60] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 60, 40, c_anchorTopLeft, 470, 357, StringExternal("Param/Value/E5168369"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Void_RegularSmall", PlayerGroupAll());
    gv_economicExternalPolicyDialogItems[61] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 60, 40, c_anchorTopLeft, 470, 417, StringExternal("Param/Value/E52EB195"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Void_RegularSmall", PlayerGroupAll());
    gv_economicExternalPolicyDialogItems[62] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 60, 40, c_anchorTopLeft, 470, 477, StringExternal("Param/Value/AA2CB496"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Void_RegularSmall", PlayerGroupAll());
    gv_economicExternalPolicyDialogItems[63] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 60, 40, c_anchorTopLeft, 580, 117, StringExternal("Param/Value/C3DAB6BC"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Void_RegularSmall", PlayerGroupAll());
    gv_economicExternalPolicyDialogItems[64] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 60, 40, c_anchorTopLeft, 580, 177, StringExternal("Param/Value/040ED041"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Void_RegularSmall", PlayerGroupAll());
    gv_economicExternalPolicyDialogItems[65] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 60, 40, c_anchorTopLeft, 580, 237, StringExternal("Param/Value/9C9752C9"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Void_RegularSmall", PlayerGroupAll());
    gv_economicExternalPolicyDialogItems[66] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 60, 40, c_anchorTopLeft, 580, 297, StringExternal("Param/Value/3D8CAA79"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Void_RegularSmall", PlayerGroupAll());
    gv_economicExternalPolicyDialogItems[67] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 60, 40, c_anchorTopLeft, 580, 357, StringExternal("Param/Value/CAD1F8B4"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Void_RegularSmall", PlayerGroupAll());
    gv_economicExternalPolicyDialogItems[68] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 60, 40, c_anchorTopLeft, 580, 417, StringExternal("Param/Value/9163B144"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Void_RegularSmall", PlayerGroupAll());
    gv_economicExternalPolicyDialogItems[69] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 60, 40, c_anchorTopLeft, 580, 477, StringExternal("Param/Value/1348131B"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Void_RegularSmall", PlayerGroupAll());
    gv_economicExternalPolicyDialogItems[70] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeCheckBox);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 40, 40);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 250, 10);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/57365AA2"), PlayerGroupAll());
    gv_economicExternalPolicyDialogItems[71] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 50, c_anchorTopLeft, 300, 22, StringExternal("Param/Value/959FCFD7"), ColorWithAlpha(0,0,0,0), false, 2.0);
    DialogCreate(650, 170, c_anchorTopLeft, 780, 595, true);
    DialogSetImage(DialogLastCreated(), "Assets\\Textures\\ui_scrollbar_frame.dds");
    gv_economicDebtPolicy = DialogLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 180, 50, c_anchorTopLeft, 20, 20, StringExternal("Param/Value/315B8063"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 180, 50, c_anchorTopLeft, 20, 50, StringExternal("Param/Value/5970E3A9"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_economicDebtPolicyDialogItems[10] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 180, 50, c_anchorTopLeft, 20, 80, StringExternal("Param/Value/8A6C90E1"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/322B5F35"), PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 180, 50, c_anchorTopLeft, 20, 110, StringExternal("Param/Value/BCA8F605"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/77CFDFDF"), PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 180, 100, c_anchorTopLeft, 510, 30, StringExternal("Param/Value/B99B83D3"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/4B836667"), PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 180, 50, c_anchorTopLeft, 180, 21, StringExternal("Param/Value/3BA66FB5"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_economicDebtPolicyDialogItems[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 180, 50, c_anchorTopLeft, 180, 51, StringExternal("Param/Value/C7828BE9"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_economicDebtPolicyDialogItems[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 180, 50, c_anchorTopLeft, 180, 81, StringExternal("Param/Value/539E5925"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_economicDebtPolicyDialogItems[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 180, 50, c_anchorTopLeft, 180, 111, StringExternal("Param/Value/C8B2B427"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_economicDebtPolicyDialogItems[9] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 50, c_anchorTopLeft, 300, 20, StringToText(""), StringExternal("Param/Value/E52CD756"), "");
    gv_economicDebtPolicyDialogItems[5] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 50, c_anchorTopLeft, 300, 80, StringToText(""), StringExternal("Param/Value/05D38230"), "");
    gv_economicDebtPolicyDialogItems[6] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 180, 50, c_anchorTopLeft, 520, 80, StringExternal("Param/Value/DB0DC62F"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_economicDebtPolicyDialogItems[7] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 130, 50, c_anchorBottomRight, 15, 15, StringExternal("Param/Value/9E23AFA4"), StringExternal("Param/Value/8E110887"), "");
    gv_economicDebtPolicyDialogItems[8] = DialogControlLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TradeUI_Init () {
    gt_TradeUI = TriggerCreate("gt_TradeUI_Func");
    TriggerAddEventMapInit(gt_TradeUI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Buy/Sell UI
//--------------------------------------------------------------------------------------------------
bool gt_BuySellUI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(200, 300, c_anchorTopLeft, 1180, 96, true);
    DialogSetImage(DialogLastCreated(), "Assets\\Textures\\ui_scrollbar_frame.dds");
    gv_manualTradeDialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 100, 50, c_anchorTop, 0, 30, StringExternal("Param/Value/4FB7E5BC"), ColorWithAlpha(0,0,0,0), false, 2.0);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeEditBox);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 120, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, 0, 80);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_scrollbar_frame.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    gv_manualTradeDialogItems[0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 90, 50, c_anchorTop, 4, 130, StringExternal("Param/Value/A83EBFA0"), ColorWithAlpha(0,0,0,0), false, 2.0);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeEditBox);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 120, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, 0, 165);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_scrollbar_frame.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    gv_manualTradeDialogItems[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 90, 50, c_anchorTop, 0, 215, StringExternal("Param/Value/1AFA7077"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 140, 45, c_anchorTop, 0, 240, StringExternal("Param/Value/1912BB35"), StringExternal("Param/Value/33E3D011"), "");
    gv_manualTradeDialogItems[2] = DialogControlLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BuySellUI_Init () {
    gt_BuySellUI = TriggerCreate("gt_BuySellUI_Func");
    TriggerAddEventMapInit(gt_BuySellUI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SetResourceHarvestorPrices
//--------------------------------------------------------------------------------------------------
bool gt_SetResourceHarvestorPrices_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_metalMineCost[0] = 1000;
    gv_metalMineCost[1] = 5000;
    gv_metalMineCost[2] = 20000;
    gv_metalMineCost[3] = 40000;
    gv_metalMineCost[4] = 60000;
    gv_metalMineCost[5] = 80000;
    gv_metalMineUpkeep[0] = 50;
    gv_metalMineUpkeep[1] = 100;
    gv_metalMineUpkeep[2] = 200;
    gv_metalMineUpkeep[3] = 300;
    gv_metalMineUpkeep[4] = 400;
    gv_metalMineUpkeep[5] = 500;
    gv_metalBoreholeCost[1] = 100000;
    gv_metalBoreholeCost[2] = 200000;
    gv_metalBoreholeCost[3] = 300000;
    gv_metalBoreholeCost[4] = 400000;
    gv_metalBoreholeCost[5] = 500000;
    gv_metalBoreholeUpkeep[1] = 1000;
    gv_metalBoreholeUpkeep[2] = 2000;
    gv_metalBoreholeUpkeep[3] = 3000;
    gv_metalBoreholeUpkeep[4] = 4000;
    gv_metalBoreholeUpkeep[5] = 5000;
    gv_oilWellCost[0] = 4000;
    gv_oilWellCost[1] = 8000;
    gv_oilWellCost[2] = 80000;
    gv_oilWellUpkeep[0] = 50;
    gv_oilWellUpkeep[1] = 400;
    gv_oilWellUpkeep[2] = 2000;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SetResourceHarvestorPrices_Init () {
    gt_SetResourceHarvestorPrices = TriggerCreate("gt_SetResourceHarvestorPrices_Func");
    TriggerAddEventMapInit(gt_SetResourceHarvestorPrices);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SelectCorporation
//--------------------------------------------------------------------------------------------------
bool gt_SelectCorporation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_corporationMainsSideDialogItems[8]) || (EventDialogControl() == gv_corporationMainsSideDialogItems[9]) || (EventDialogControl() == gv_corporationMainsSideDialogItems[10]) || (EventDialogControl() == gv_corporationMainsSideDialogItems[11]) || (EventDialogControl() == gv_corporationMainsSideDialogItems[12]) || (EventDialogControl() == gv_corporationMainsSideDialogItems[13]) || (EventDialogControl() == gv_corporationMainsSideDialogItems[14])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventDialogControl() == gv_corporationMainsSideDialogItems[8])) {
        gv_selectedCorporation[EventPlayer()] = 1;
    }

    if ((EventDialogControl() == gv_corporationMainsSideDialogItems[9])) {
        gv_selectedCorporation[EventPlayer()] = 2;
    }

    if ((EventDialogControl() == gv_corporationMainsSideDialogItems[10])) {
        gv_selectedCorporation[EventPlayer()] = 3;
    }

    if ((EventDialogControl() == gv_corporationMainsSideDialogItems[11])) {
        gv_selectedCorporation[EventPlayer()] = 4;
    }

    if ((EventDialogControl() == gv_corporationMainsSideDialogItems[12])) {
        gv_selectedCorporation[EventPlayer()] = 5;
    }

    if ((EventDialogControl() == gv_corporationMainsSideDialogItems[13])) {
        gv_selectedCorporation[EventPlayer()] = 6;
    }

    if ((EventDialogControl() == gv_corporationMainsSideDialogItems[14])) {
        gv_selectedCorporation[EventPlayer()] = 7;
    }

    gf_RefreshCorpUI(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SelectCorporation_Init () {
    gt_SelectCorporation = TriggerCreate("gt_SelectCorporation_Func");
    TriggerAddEventDialogControl(gt_SelectCorporation, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UpdateCorporationLedger
//--------------------------------------------------------------------------------------------------
bool gt_UpdateCorporationLedger_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_corporation;

    // Automatic Variable Declarations
    playergroup autoDDC5D86B_g;
    int autoDDC5D86B_var;
    const int autoA21D46CE_ae = 7;
    const int autoA21D46CE_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoDDC5D86B_g = gv_users;
    autoDDC5D86B_var = -1;
    while (true) {
        autoDDC5D86B_var = PlayerGroupNextPlayer(autoDDC5D86B_g, autoDDC5D86B_var);
        if (autoDDC5D86B_var < 0) { break; }
        lv_corporation = 1;
        for ( ; ( (autoA21D46CE_ai >= 0 && lv_corporation <= autoA21D46CE_ae) || (autoA21D46CE_ai < 0 && lv_corporation >= autoA21D46CE_ae) ) ; lv_corporation += autoA21D46CE_ai ) {
            libNtve_gf_SetDialogItemText(gv_corporationMainsSideDialogItems[lv_corporation], TextWithColor(StringToText(gv_corpTicker[lv_corporation]), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_corporation, false))), PlayerGroupSingle(autoDDC5D86B_var));
            libNtve_gf_SetDialogItemText(gv_corporationMainsSideDialogItems[(lv_corporation + 14)], gf_MakeUIPresentable((gv_stockPrice[lv_corporation] * 10000)), PlayerGroupSingle(autoDDC5D86B_var));
            libNtve_gf_SetDialogItemText(gv_corporationMainsSideDialogItems[(lv_corporation + 21)], gf_MakeUIPresentable((gv_stockOwned[autoDDC5D86B_var][lv_corporation] * gv_stockPrice[lv_corporation])), PlayerGroupSingle(autoDDC5D86B_var));
            DialogControlSetVisible(gv_corporationMainsSideDialogItems[lv_corporation], PlayerGroupSingle(autoDDC5D86B_var), true);
            DialogControlSetVisible(gv_corporationMainsSideDialogItems[(lv_corporation + 7)], PlayerGroupSingle(autoDDC5D86B_var), true);
            DialogControlSetVisible(gv_corporationMainsSideDialogItems[(lv_corporation + 14)], PlayerGroupSingle(autoDDC5D86B_var), true);
            DialogControlSetVisible(gv_corporationMainsSideDialogItems[(lv_corporation + 21)], PlayerGroupSingle(autoDDC5D86B_var), true);
            if ((gv_corpTicker[lv_corporation] == "N")) {
                DialogControlSetVisible(gv_corporationMainsSideDialogItems[lv_corporation], PlayerGroupSingle(autoDDC5D86B_var), false);
                DialogControlSetVisible(gv_corporationMainsSideDialogItems[(lv_corporation + 7)], PlayerGroupSingle(autoDDC5D86B_var), false);
                DialogControlSetVisible(gv_corporationMainsSideDialogItems[(lv_corporation + 14)], PlayerGroupSingle(autoDDC5D86B_var), false);
                DialogControlSetVisible(gv_corporationMainsSideDialogItems[(lv_corporation + 21)], PlayerGroupSingle(autoDDC5D86B_var), false);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpdateCorporationLedger_Init () {
    gt_UpdateCorporationLedger = TriggerCreate("gt_UpdateCorporationLedger_Func");
    TriggerAddEventTimePeriodic(gt_UpdateCorporationLedger, 10.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CorpTicks v1.0
//--------------------------------------------------------------------------------------------------
bool gt_CorpTicksv10_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_corp;
    int[10] lv_income;

    // Automatic Variable Declarations
    playergroup auto35B6F434_g;
    int auto35B6F434_var;
    const int auto169DD325_ae = 7;
    const int auto169DD325_ai = 1;
    playergroup autoEBA4D0C2_g;
    int autoEBA4D0C2_var;
    unitgroup auto2E0886E4_g;
    int auto2E0886E4_u;
    unit auto2E0886E4_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto35B6F434_g = gv_users;
    auto35B6F434_var = -1;
    while (true) {
        auto35B6F434_var = PlayerGroupNextPlayer(auto35B6F434_g, auto35B6F434_var);
        if (auto35B6F434_var < 0) { break; }
        gv_fOOD_PURCHASED[auto35B6F434_var] = 0;
    }
    Wait(0.5, c_timeGame);
    gf_UpdateResourceUnitGroup();
    gv_linesGotThrough += 1;
    gf_RotMarketFoodStockpile();
    gv_linesGotThrough += 1;
    gf_UpdateCheapestFoodArray();
    gv_linesGotThrough += 1;
    gf_ResourceCollection();
    gv_linesGotThrough += 1;
    gf_MeetPlayerDemandandCorpExports();
    gv_linesGotThrough += 1;
    Wait(5.0, c_timeGame);
    gf_HeadquartersFortheHeadquarterless();
    gv_linesGotThrough += 1;
    gf_PushDownCVariables(true);
    gv_linesGotThrough += 1;
    gv_corpTicksStage = 1;
    lv_corp = 1;
    for ( ; ( (auto169DD325_ai >= 0 && lv_corp <= auto169DD325_ae) || (auto169DD325_ai < 0 && lv_corp >= auto169DD325_ae) ) ; lv_corp += auto169DD325_ai ) {
        if ((StringLength(gv_corpName[lv_corp]) > 0)) {
            gf_IntraCorporationTrading(lv_corp);
        }

    }
    Wait(0.5, c_timeGame);
    gv_linesGotThrough += 1;
    gf_MeetCivilianMetalOilDemand();
    gv_linesGotThrough += 1;
    Wait(0.5, c_timeGame);
    gf_SetPricesGetSuppliesGetMeanGDPRotFood(0);
    gv_linesGotThrough += 1;
    gv_corpTicksStage = 2;
    gf_FinalizeVariablesSetDividendsPayDividendsGetBalanceTransfercostsIfNationalizedInterestMilitaryExpense();
    gv_linesGotThrough += 1;
    Wait(0.5, c_timeGame);
    gf_CCalculateAssetValue();
    gv_linesGotThrough += 1;
    gf_CSetStockPricesPlayerStockTargets();
    gv_linesGotThrough += 1;
    gf_AggregatePrice();
    gv_linesGotThrough += 1;
    Wait(0.5, c_timeGame);
    gf_CheckForBuyOutsorNationalizings();
    gv_linesGotThrough += 1;
    gf_CorporationAIBudgetAllocation();
    gv_linesGotThrough += 1;
    gf_NoResourceTooMuchSupply();
    gv_linesGotThrough += 1;
    Wait(0.5, c_timeGame);
    autoEBA4D0C2_g = gv_users;
    autoEBA4D0C2_var = -1;
    while (true) {
        autoEBA4D0C2_var = PlayerGroupNextPlayer(autoEBA4D0C2_g, autoEBA4D0C2_var);
        if (autoEBA4D0C2_var < 0) { break; }
        if ((gv_selectedCorporation[autoEBA4D0C2_var] > 0)) {
            gf_RefreshCorpUI(autoEBA4D0C2_var);
        }

    }
    gv_linesGotThrough += 1;
    gf_PushDownCVariables(false);
    gv_corpTicksStage = 0;
    gv_linesGotThrough += 1;
    gv_linesGotThrough += 1;
    auto2E0886E4_g = gv_allResources;
    auto2E0886E4_u = UnitGroupCount(auto2E0886E4_g, c_unitCountAll);
    for (;; auto2E0886E4_u -= 1) {
        auto2E0886E4_var = UnitGroupUnitFromEnd(auto2E0886E4_g, auto2E0886E4_u);
        if (auto2E0886E4_var == null) { break; }
        gf_WipeResourceAdditionalDemand(auto2E0886E4_var);
    }
    gv_linesGotThrough += 1;
    Wait(1.0, c_timeGame);
    gf_RealizeImports();
    gv_linesGotThrough += 1;
    gv_reachedCorporationEnd = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CorpTicksv10_Init () {
    gt_CorpTicksv10 = TriggerCreate("gt_CorpTicksv10_Func");
    TriggerAddEventTimePeriodic(gt_CorpTicksv10, 10.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Guard Dies
//--------------------------------------------------------------------------------------------------
bool gt_GuardDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_responsible;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "ParamilitaryForces"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_responsible = UnitGroupClosestToPoint(gv_corpResources[UnitGetOwner(EventUnit())], UnitGetPosition(EventUnit()));
    UnitSetCustomValue(lv_responsible, 15, (UnitGetCustomValue(lv_responsible, 15) + 10.0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GuardDies_Init () {
    gt_GuardDies = TriggerCreate("gt_GuardDies_Func");
    TriggerAddEventUnitDied(gt_GuardDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ExpeditionGuardIdle
//--------------------------------------------------------------------------------------------------
bool gt_ExpeditionGuardIdle_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto1908AA1A_g;
    int auto1908AA1A_u;
    unit auto1908AA1A_var;

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "ParamilitaryForces"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetCustomValue(EventUnit(), 17) == 3.0)) {
        UnitSetCustomValue(EventUnit(), 17, 1.0);
        auto1908AA1A_g = UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto1908AA1A_u = UnitGroupCount(auto1908AA1A_g, c_unitCountAll);
        for (;; auto1908AA1A_u -= 1) {
            auto1908AA1A_var = UnitGroupUnitFromEnd(auto1908AA1A_g, auto1908AA1A_u);
            if (auto1908AA1A_var == null) { break; }
            if ((gf_GetResourceType(auto1908AA1A_var) > 1)) {
                if ((UnitGetCustomValue(auto1908AA1A_var, 10) != UnitGetOwner(EventUnit()))) {
                    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/D31D32AF"));
                    MinimapPing(PlayerGroupSingle(EventPlayer()), UnitGetPosition(EventUnit()), 2.0, Color(0.00, 100.00, 0.00));
                }

                UnitSetOwner(auto1908AA1A_var, EventPlayer(), true);
                UnitSetCustomValue(auto1908AA1A_var, 10, IntToFixed(EventPlayer()));
            }

        }
        if ((RandomInt(0, 100) < 50)) {
            UnitKill(EventUnit());
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ExpeditionGuardIdle_Init () {
    gt_ExpeditionGuardIdle = TriggerCreate("gt_ExpeditionGuardIdle_Func");
    TriggerAddEventUnitBecomesIdle(gt_ExpeditionGuardIdle, null, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NationalizeBuyoutFunctionality
//--------------------------------------------------------------------------------------------------
bool gt_NationalizeBuyoutFunctionality_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_corporationDialogItems[33]) || (EventDialogControl() == gv_corporationDialogItems[34])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventDialogControl() == gv_corporationDialogItems[33])) {
        gv_buyOut[EventPlayer()][gv_selectedCorporation[EventPlayer()]] = true;
    }

    if ((EventDialogControl() == gv_corporationDialogItems[34])) {
        gv_nationalizitions[gv_selectedCorporation[EventPlayer()]] = true;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NationalizeBuyoutFunctionality_Init () {
    gt_NationalizeBuyoutFunctionality = TriggerCreate("gt_NationalizeBuyoutFunctionality_Func");
    TriggerAddEventDialogControl(gt_NationalizeBuyoutFunctionality, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SetMiddleEastOilPrice
//--------------------------------------------------------------------------------------------------
bool gt_SetMiddleEastOilPrice_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(UnitGroup("SMGenericMaleOfficer022", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 1)) {
        UnitSetCustomValue(UnitFromId(1189982933), 14, IntToFixed(((gv_year - 2305) * 5)));
        UnitSetCustomValue(UnitFromId(1189982933), 12, 1000.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SetMiddleEastOilPrice_Init () {
    gt_SetMiddleEastOilPrice = TriggerCreate("gt_SetMiddleEastOilPrice_Func");
    TriggerAddEventTimeElapsed(gt_SetMiddleEastOilPrice, 0.5, c_timeGame);
    TriggerAddEventTimePeriodic(gt_SetMiddleEastOilPrice, 120.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Desert
//--------------------------------------------------------------------------------------------------
bool gt_Desert_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "DesertTerrain", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Desert_Init () {
    gt_Desert = TriggerCreate("gt_Desert_Func");
    TriggerAddEventUnitRegion(gt_Desert, null, RegionFromId(66), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Snow
//--------------------------------------------------------------------------------------------------
bool gt_Snow_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) < 8))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "SnowTerrain", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Snow_Init () {
    gt_Snow = TriggerCreate("gt_Snow_Func");
    TriggerAddEventUnitRegion(gt_Snow, null, RegionFromId(65), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: HarshSnow
//--------------------------------------------------------------------------------------------------
bool gt_HarshSnow_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) < 8))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "HarshSnow", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HarshSnow_Init () {
    gt_HarshSnow = TriggerCreate("gt_HarshSnow_Func");
    TriggerAddEventUnitRegion(gt_HarshSnow, null, RegionFromId(197), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mountains
//--------------------------------------------------------------------------------------------------
bool gt_Mountains_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "MountainTerrain", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Mountains_Init () {
    gt_Mountains = TriggerCreate("gt_Mountains_Func");
    TriggerAddEventUnitRegion(gt_Mountains, null, RegionFromId(67), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: RDesert
//--------------------------------------------------------------------------------------------------
bool gt_RDesert_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(EventUnit(), "DesertTerrain", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RDesert_Init () {
    gt_RDesert = TriggerCreate("gt_RDesert_Func");
    TriggerAddEventUnitRegion(gt_RDesert, null, RegionFromId(66), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: RSnow
//--------------------------------------------------------------------------------------------------
bool gt_RSnow_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(EventUnit(), "SnowTerrain", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RSnow_Init () {
    gt_RSnow = TriggerCreate("gt_RSnow_Func");
    TriggerAddEventUnitRegion(gt_RSnow, null, RegionFromId(65), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: RHarshSnow
//--------------------------------------------------------------------------------------------------
bool gt_RHarshSnow_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(EventUnit(), "HarshSnow", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RHarshSnow_Init () {
    gt_RHarshSnow = TriggerCreate("gt_RHarshSnow_Func");
    TriggerAddEventUnitRegion(gt_RHarshSnow, null, RegionFromId(197), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: RMountains
//--------------------------------------------------------------------------------------------------
bool gt_RMountains_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(EventUnit(), "MountainTerrain", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RMountains_Init () {
    gt_RMountains = TriggerCreate("gt_RMountains_Func");
    TriggerAddEventUnitRegion(gt_RMountains, null, RegionFromId(67), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DeclareBankruptcy
//--------------------------------------------------------------------------------------------------
bool gt_DeclareBankruptcy_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_economicDebtPolicyDialogItems[8]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_year < 2312)) {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/06279F0D"));
    }
    else {
        if ((gv_yearsSinceLastBankruptcy[EventPlayer()] < 7)) {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/58C46548"));
        }
        else {
            gv_concurrentBankruptMonths[EventPlayer()] += 7;
            gf_PlayerBankrupt(EventPlayer());
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DeclareBankruptcy_Init () {
    gt_DeclareBankruptcy = TriggerCreate("gt_DeclareBankruptcy_Func");
    TriggerAddEventDialogControl(gt_DeclareBankruptcy, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Income v2.0
//--------------------------------------------------------------------------------------------------
bool gt_Incomev20_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int[10] lv_income;

    // Automatic Variable Declarations
    const int auto2EF560CA_ae = 15;
    const int auto2EF560CA_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(1.0, c_timeGame);
    gv_brokenIncomeLine += 1;
    lv_player = 0;
    for ( ; ( (auto2EF560CA_ai >= 0 && lv_player <= auto2EF560CA_ae) || (auto2EF560CA_ai < 0 && lv_player >= auto2EF560CA_ae) ) ; lv_player += auto2EF560CA_ai ) {
        gf_PushDownVariables(lv_player, true);
    }
    gv_incomeTicksStage = 1;
    gf_EUTaxSubjectTax();
    gv_brokenIncomeLine += 1;
    gf_SubjectIncomeGibReparations();
    gv_brokenIncomeLine += 1;
    gf_GetIncomeComputeCivilianIncomeDeInvestment();
    Wait(0.5, c_timeGame);
    gv_brokenIncomeLine += 1;
    gf_GetMilitaryCompleteUpkeep();
    gv_brokenIncomeLine += 1;
    gf_GetElectricityBalanceComputePunish();
    Wait(0.5, c_timeGame);
    gv_brokenIncomeLine += 1;
    gf_FoodStuff();
    Wait(0.5, c_timeGame);
    gv_brokenIncomeLine += 1;
    gf_GetCivilianDemand();
    Wait(0.5, c_timeGame);
    gv_brokenIncomeLine += 1;
    gf_GetResearchSpeedUpkeep();
    gv_brokenIncomeLine += 1;
    gf_RedistributeEUFood();
    Wait(0.5, c_timeGame);
    gv_brokenIncomeLine += 1;
    gf_GetMostExpensesGibReparations();
    gv_brokenIncomeLine += 1;
    gf_GetBalanceAndBankrupt();
    gv_brokenIncomeLine += 1;
    gf_FinalizeResourceValuesEUFoodRedistribution();
    Wait(0.5, c_timeGame);
    gv_brokenIncomeLine += 1;
    gf_FoodConsumptionStarvationPopulationCountNoOilMaxSupplyFoodDecay();
    Wait(0.5, c_timeGame);
    gv_brokenIncomeLine += 1;
    gf_CalculateGDPPerCapitaEconomyHealthEffectCapitolHealthAutofundCorpNationalBank();
    gv_brokenIncomeLine += 1;
    gf_SetAllowedDebtCreditRating();
    Wait(0.5, c_timeGame);
    gv_brokenIncomeLine += 1;
    gf_UpdateUIGetMonthlyAveragesLedgerFigures();
    gv_brokenIncomeLine += 1;
    gf_Erase0ArrayValues();
    gv_brokenIncomeLine += 1;
    gv_reachedIncomeEnd = true;
    gv_incomeTicksStage = 0;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Incomev20_Init () {
    gt_Incomev20 = TriggerCreate("gt_Incomev20_Func");
    TriggerAddEventTimeElapsed(gt_Incomev20, 1.0, c_timeGame);
    TriggerAddEventTimePeriodic(gt_Incomev20, 10.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NationalizeResource
//--------------------------------------------------------------------------------------------------
bool gt_NationalizeResource_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_victim;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_victim = FixedToInt(UnitGetCustomValue(EventUnit(), 10));

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_deadCorp[EventPlayer()] == true)) {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/075C3914"));
    }
    else {
        if ((lv_victim == EventPlayer())) {
            UIDisplayMessage(PlayerGroupSingle(lv_victim), c_messageAreaSubtitle, StringExternal("Param/Value/11136B82"));
        }
        else {
            if ((lv_victim == gv_subjugator[EventPlayer()]) && (gv_subjugated[EventPlayer()] == true)) {
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/F4D2342F"));
            }
            else {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextWithColor((gf_NationOfPlayer(EventPlayer()) + (StringExternal("Param/Value/9AE5A25C") + (UnitGetName(EventUnit()) + (StringExternal("Param/Value/1BDC9D00") + (gf_NationOfPlayer(FixedToInt(UnitGetCustomValue(EventUnit(), 10))) + StringExternal("Param/Value/ED33E380")))))), Color(100.00, 0.00, 0.00)));
                UnitSetCustomValue(EventUnit(), 10, IntToFixed(EventPlayer()));
                UnitSetCustomValue(EventUnit(), 42, 100.0);
                CameraPan(lv_victim, UnitGetPosition(EventUnit()), 2.0, -1, 80.0, false);
                MinimapPing(PlayerGroupSingle(lv_victim), UnitGetPosition(EventUnit()), 8.0, Color(100.00, 0.00, 0.00));
                MinimapPing(PlayerGroupSingle(lv_victim), UnitGetPosition(EventUnit()), 8.0, Color(100.00, 0.00, 0.00));
                MinimapPing(PlayerGroupSingle(lv_victim), UnitGetPosition(EventUnit()), 8.0, Color(100.00, 0.00, 0.00));
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NationalizeResource_Init () {
    gt_NationalizeResource = TriggerCreate("gt_NationalizeResource_Func");
    TriggerAddEventUnitAbility(gt_NationalizeResource, null, AbilityCommand("Nationalize", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SELL_RESROUCES_DEBUG
//--------------------------------------------------------------------------------------------------
bool gt_SELL_RESROUCES_DEBUG_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.0001, c_timeGame);
    if (((gv_sELL_RESOURCE_DEBUG_VARIABLE != "") || (gv_sELL_RESOURCE_DEBUG_VARIABLE != "Finished selling resources") || (gv_sELL_RESOURCE_DEBUG_VARIABLE != "Running Sell Resources"))) {
    }
    else {
        UIDisplayMessage(gv_debugPlayers, c_messageAreaSubtitle, (StringExternal("Param/Value/691C3986") + StringToText(gv_sELL_RESOURCE_DEBUG_VARIABLE)));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SELL_RESROUCES_DEBUG_Init () {
    gt_SELL_RESROUCES_DEBUG = TriggerCreate("gt_SELL_RESROUCES_DEBUG_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: HercDespawn
//--------------------------------------------------------------------------------------------------
bool gt_HercDespawn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "HerculesLanderFlying"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitRemove(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HercDespawn_Init () {
    gt_HercDespawn = TriggerCreate("gt_HercDespawn_Func");
    TriggerAddEventUnitBecomesIdle(gt_HercDespawn, null, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dialolg
//--------------------------------------------------------------------------------------------------
bool gt_Dialolg_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(200, 345, c_anchorTopLeft, -25, 180, true);
    gv_dialolg = DialogLastCreated();
    DialogSetVisible(gv_dialolg, PlayerGroupAll(), true);
    libNtve_gf_CreateDialogItemLabel(gv_dialolg, 225, 30, c_anchorTopLeft, 30, 30, (StringExternal("Param/Value/360E1FBE") + IntToText(gv_population[0])), Color(67.06, 72.94, 74.51), false, 2.0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/5B0E704A"), PlayerGroupAll());
    gv_dialolgItems[0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_dialolg, 225, 30, c_anchorTopLeft, 30, 50, (StringExternal("Param/Value/1A68EF0B") + IntToText(50)), Color(98.82, 85.10, 42.75), false, 2.0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/99FACE2D"), PlayerGroupAll());
    gv_dialolgItems[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_dialolg, 225, 30, c_anchorTopLeft, 30, 70, (StringExternal("Param/Value/4965CCDB") + StringExternal("Param/Value/8BAB6658")), Color(99.22, 91.37, 66.67), false, 2.0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/E19DF5B9"), PlayerGroupAll());
    gv_dialolgItems[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_dialolg, 225, 30, c_anchorTopLeft, 30, 90, (StringExternal("Param/Value/4787F40E") + IntToText(50)), Color(83.53, 99.22, 60.00), false, 2.0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/88BFB156"), PlayerGroupAll());
    gv_dialolgItems[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_dialolg, 225, 30, c_anchorTopLeft, 30, 110, (StringExternal("Param/Value/36BDE6EF") + IntToText(50)), Color(0.00, 43.53, 0.00), false, 2.0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/4106B6E8"), PlayerGroupAll());
    gv_dialolgItems[4] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_dialolg, 225, 30, c_anchorTopLeft, 30, 130, (StringExternal("Param/Value/24B46F0A") + IntToText(50)), Color(70.59, 70.59, 70.59), false, 2.0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/81DF99B1"), PlayerGroupAll());
    gv_dialolgItems[5] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_dialolg, 225, 30, c_anchorTopLeft, 30, 150, (StringExternal("Param/Value/2D3CA9D5") + IntToText(gv_techIncome[0])), Color(95.29, 73.33, 100.00), false, 2.0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/F5301E63"), PlayerGroupAll());
    gv_dialolgItems[6] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_dialolg, 225, 30, c_anchorTopLeft, 30, 170, (StringExternal("Param/Value/5C14C307") + IntToText(50)), Color(85.10, 95.69, 100.00), false, 2.0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/A3CF28B6"), PlayerGroupAll());
    gv_dialolgItems[7] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_dialolg, 225, 30, c_anchorTopLeft, 30, 190, (StringExternal("Param/Value/13E7B3B9") + IntToText(gv_oil[0])), Color(85.49, 81.57, 81.18), false, 2.0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/30D6500E"), PlayerGroupAll());
    gv_dialolgItems[8] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_dialolg, 225, 30, c_anchorTopLeft, 30, 210, (StringExternal("Param/Value/F98FA5E2") + IntToText(50)), Color(74.90, 68.24, 67.45), false, 2.0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/8A8E6324"), PlayerGroupAll());
    gv_dialolgItems[9] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_dialolg, 225, 30, c_anchorTopLeft, 30, 230, (StringExternal("Param/Value/6F1DE989") + IntToText(50)), Color(0.00, 20.00, 0.00), false, 2.0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/3E27C710"), PlayerGroupAll());
    gv_dialolgItems[10] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_dialolg, 225, 30, c_anchorTopLeft, 30, 250, (StringExternal("Param/Value/521E2A98") + IntToText(50)), Color(62.75, 31.37, 31.37), false, 2.0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/38F37CBE"), PlayerGroupAll());
    gv_dialolgItems[11] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_dialolg, 225, 30, c_anchorTopLeft, 30, 270, (StringExternal("Param/Value/0F79B514") + StringExternal("Param/Value/934493BB")), Color(100.00, 50.20, 0.00), false, 2.0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/AAA1CBFC"), PlayerGroupAll());
    gv_dialolgItems[12] = DialogControlLastCreated();
    DialogSetImage(gv_dialolg, "Assets\\Textures\\ui_scrollbar_frame.dds");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Dialolg_Init () {
    gt_Dialolg = TriggerCreate("gt_Dialolg_Func");
    TriggerAddEventMapInit(gt_Dialolg);
}

//--------------------------------------------------------------------------------------------------
// Trigger: No Wandering Tags
//--------------------------------------------------------------------------------------------------
bool gt_NoWanderingTags_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TextTagDestroy(libHots_gf_TextTagForUnit(EventUnit(), 1));
    TextTagDestroy(libHots_gf_TextTagForUnit(EventUnit(), 2));
    TextTagDestroy(libHots_gf_TextTagForUnit(EventUnit(), 3));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NoWanderingTags_Init () {
    gt_NoWanderingTags = TriggerCreate("gt_NoWanderingTags_Func");
    TriggerAddEventUnitDied(gt_NoWanderingTags, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: RunHighwayCentralization
//--------------------------------------------------------------------------------------------------
bool gt_RunHighwayCentralization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnitProgressUnit()) == "SupplyDepotLowered")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_HighwayAdminstration(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RunHighwayCentralization_Init () {
    gt_RunHighwayCentralization = TriggerCreate("gt_RunHighwayCentralization_Func");
    TriggerAddEventUnitConstructProgress(gt_RunHighwayCentralization, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: --Centralization of ALL UNITS--
//--------------------------------------------------------------------------------------------------
bool gt_CentralizationofALLUNITS_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto494C5319_g;
    int auto494C5319_var;
    playergroup autoF078818D_g;
    int autoF078818D_var;
    unitgroup autoA21676F7_g;
    int autoA21676F7_u;
    unit autoA21676F7_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gf_UpdateCapitals();
    gf_UpdateRegionalCapitals();
    auto494C5319_g = gv_users;
    auto494C5319_var = -1;
    while (true) {
        auto494C5319_var = PlayerGroupNextPlayer(auto494C5319_g, auto494C5319_var);
        if (auto494C5319_var < 0) { break; }
        gf_HighwayAdminstration(auto494C5319_var);
    }
    gf_UpdateHighways();
    autoF078818D_g = gv_users;
    autoF078818D_var = -1;
    while (true) {
        autoF078818D_var = PlayerGroupNextPlayer(autoF078818D_g, autoF078818D_var);
        if (autoF078818D_var < 0) { break; }
        autoA21676F7_g = UnitGroup(null, autoF078818D_var, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoA21676F7_u = UnitGroupCount(autoA21676F7_g, c_unitCountAll);
        for (;; autoA21676F7_u -= 1) {
            autoA21676F7_var = UnitGroupUnitFromEnd(autoA21676F7_g, autoA21676F7_u);
            if (autoA21676F7_var == null) { break; }
            UnitBehaviorRemove(autoA21676F7_var, "PowerUserQueue", 1);
            if (((UnitGetType(autoA21676F7_var) == "Capital") || (UnitGetType(autoA21676F7_var) == "DataCore"))) {
                UnitSetCustomValue(autoA21676F7_var, 0, 2.0);
            }
            else {
                gf_GetUnitCentralization(autoA21676F7_var, gv_capitals[autoF078818D_var], gv_regionalCapitals[autoF078818D_var], gv_highways[autoF078818D_var]);
            }
            Wait(0.05, c_timeGame);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CentralizationofALLUNITS_Init () {
    gt_CentralizationofALLUNITS = TriggerCreate("gt_CentralizationofALLUNITS_Func");
    TriggerAddEventTimePeriodic(gt_CentralizationofALLUNITS, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UnitBuilt
//--------------------------------------------------------------------------------------------------
bool gt_UnitBuilt_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(EventUnitCreatedUnit()), c_unitAttributeStructure) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnitCreatedUnit()) == "SupplyDepotLowered")) {
        gf_HighwayAdminstration(UnitGetOwner(EventUnitCreatedUnit()));
        gf_UpdateHighways();
    }
    else {
        if ((UnitGetType(EventUnitCreatedUnit()) == "DataCore")) {
            gf_UpdateRegionalCapitals();
        }
        else {
            gf_GetUnitCentralization(EventUnitCreatedUnit(), gv_capitals[UnitGetOwner(EventUnitCreatedUnit())], gv_regionalCapitals[UnitGetOwner(EventUnitCreatedUnit())], UnitGroupEmpty());
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitBuilt_Init () {
    gt_UnitBuilt = TriggerCreate("gt_UnitBuilt_Func");
    TriggerAddEventUnitCreated(gt_UnitBuilt, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ShowMeTheCentralization
//--------------------------------------------------------------------------------------------------
bool gt_ShowMeTheCentralization_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_textTag;

    // Automatic Variable Declarations
    unitgroup auto73CE8826_g;
    int auto73CE8826_u;
    unit auto73CE8826_var;

    // Variable Initialization
    lv_textTag = c_textTagNone;

    // Conditions
    if (testConds) {
        if (!((gv_showingCentralization[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_showingCentralization[EventPlayer()] = true;
    auto73CE8826_g = UnitGroup(null, EventPlayer(), RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto73CE8826_u = UnitGroupCount(auto73CE8826_g, c_unitCountAll);
    for (;; auto73CE8826_u -= 1) {
        auto73CE8826_var = UnitGroupUnitFromEnd(auto73CE8826_g, auto73CE8826_u);
        if (auto73CE8826_var == null) { break; }
        TextTagCreate(FixedToText(UnitGetCustomValue(auto73CE8826_var, 0), 2), 24, UnitGetPosition(auto73CE8826_var), 1.0, true, false, PlayerGroupSingle(EventPlayer()));
        if ((UnitGetCustomValue(auto73CE8826_var, 0) > 1)) {
            TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 100.00, 100.00));
        }
        else {
            if ((UnitGetCustomValue(auto73CE8826_var, 0) == 1)) {
                TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(0.00, 100.00, 0.00));
            }
            else {
                if ((UnitGetCustomValue(auto73CE8826_var, 0) > 0.95)) {
                    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(0.00, 25.10, 0.00));
                }
                else {
                    if ((UnitGetCustomValue(auto73CE8826_var, 0) > 0.85)) {
                        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(0.00, 0.00, 100.00));
                    }
                    else {
                        if ((UnitGetCustomValue(auto73CE8826_var, 0) > 0.65)) {
                            TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 100.00, 0.00));
                        }
                        else {
                            if ((UnitGetCustomValue(auto73CE8826_var, 0) > 0.45)) {
                                TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 50.20, 0.00));
                            }
                            else {
                                if ((UnitGetCustomValue(auto73CE8826_var, 0) > 0.25)) {
                                    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 0.00, 0.00));
                                }
                                else {
                                    if ((UnitGetCustomValue(auto73CE8826_var, 0) > 0.5)) {
                                        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(50.20, 0.00, 0.00));
                                    }
                                    else {
                                        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(0.00, 0.00, 0.00));
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 25.0);
    }
    Wait(20.0, c_timeGame);
    gv_showingCentralization[EventPlayer()] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShowMeTheCentralization_Init () {
    gt_ShowMeTheCentralization = TriggerCreate("gt_ShowMeTheCentralization_Func");
    TriggerAddEventUnitAbility(gt_ShowMeTheCentralization, null, AbilityCommand("ShowCentralizationValues", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Research
//--------------------------------------------------------------------------------------------------
bool gt_Research_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_TriggeringProgressUpgrade() == "ImprovedFarming")) {
        gv_foodIncomeModifier[UnitGetOwner(EventUnit())] += 10;
        gv_foodUpgrade[UnitGetOwner(EventUnit())] += 10;
    }

    if ((libNtve_gf_TriggeringProgressUpgrade() == "ImprovedMining")) {
        gv_metalIncomeModifier[UnitGetOwner(EventUnit())] += 10;
        gv_metalUpgrade[UnitGetOwner(EventUnit())] += 10;
    }

    if ((libNtve_gf_TriggeringProgressUpgrade() == "AppliedScience")) {
        gv_techIncomeModifier[UnitGetOwner(EventUnit())] += 25;
        gv_techUpgrade[UnitGetOwner(EventUnit())] += 25;
    }

    if ((libNtve_gf_TriggeringProgressUpgrade() == "ImprovedTurbines")) {
        gv_electricityIncomeModifier[UnitGetOwner(EventUnit())] += 10;
        gv_electricityUpgrade[UnitGetOwner(EventUnit())] += 10;
    }

    if ((libNtve_gf_TriggeringProgressUpgrade() == "ImprovedRefining")) {
        gv_oilIncomeModifier[UnitGetOwner(EventUnit())] += 10;
    }

    if ((libNtve_gf_TriggeringProgressUpgrade() == "Cloning")) {
        gv_popGrowth[UnitGetOwner(EventUnit())] += 0.015;
    }

    if ((libNtve_gf_TriggeringProgressUpgrade() == "GeneticScreening")) {
        gv_popGrowth[UnitGetOwner(EventUnit())] += 0.01;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Research_Init () {
    gt_Research = TriggerCreate("gt_Research_Func");
    TriggerAddEventUnitResearchProgress(gt_Research, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Disband/Demolish
//--------------------------------------------------------------------------------------------------
bool gt_DisbandDemolish_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == EventPlayer()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitHasBehavior2(EventUnit(), "Occupation") == true) || (UnitHasBehavior2(EventUnit(), "Separatists") == true))) {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/5B02BCE2"));
        UnitBehaviorAdd(EventUnit(), "Razing", EventUnit(), 1);
    }
    else {
        UnitRemove(EventUnit());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DisbandDemolish_Init () {
    gt_DisbandDemolish = TriggerCreate("gt_DisbandDemolish_Func");
    TriggerAddEventUnitAbility(gt_DisbandDemolish, null, AbilityCommand("DisbandDemolish", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Place Capital
//--------------------------------------------------------------------------------------------------
bool gt_PlaceCapital_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnitCreatedUnit()) == "Politics")) {
        if ((gf_CloseToOtherCapitol(EventUnitCreatedUnit()) == true)) {
            gf_UndoCapitol(EventUnitCreatedUnit());
            return true;
        }

        if ((gf_NotEnoughSpace(EventUnitCreatedUnit()) == true)) {
            gf_UndoCapitol(EventUnitCreatedUnit());
            return true;
        }

        MinimapPing(PlayerGroupAll(), UnitGetPosition(EventUnitCreatedUnit()), 4.0, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(EventUnitCreatedUnit()), false)));
        gf_ResetModifiers(UnitGetOwner(EventUnitCreatedUnit()));
        gv_creditIncomeModifier[UnitGetOwner(EventUnit())] += 15;
        gv_popGrowth[UnitGetOwner(EventUnit())] += 0.005;
        libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "DefensiveWar", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "ChangeWarPolicy", 1);
        TriggerExecute(gt_CentralizationofALLUNITS, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlaceCapital_Init () {
    gt_PlaceCapital = TriggerCreate("gt_PlaceCapital_Func");
    TriggerAddEventUnitCreated(gt_PlaceCapital, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UpgradetoMD
//--------------------------------------------------------------------------------------------------
bool gt_UpgradetoMD_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int[11] lv_coreCount;
    fixed lv_oldCentral;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == true))) {
            return false;
        }

        if (!(((EventUnitAbility() == AbilityCommand("UpgradetoMDHousing", 0)) || (EventUnitAbility() == AbilityCommand("UpgradetoHDHousing", 0)) || (EventUnitAbility() == AbilityCommand("UpgradetoVHDHousing", 0)) || (EventUnitAbility() == AbilityCommand("FarmII", 0)) || (EventUnitAbility() == AbilityCommand("FarmIII", 0)) || (EventUnitAbility() == AbilityCommand("FarmIV", 0)) || (EventUnitAbility() == AbilityCommand("FarmV", 0)) || (EventUnitAbility() == AbilityCommand("LaboratoryII", 0)) || (EventUnitAbility() == AbilityCommand("LaboratoryIII", 0)) || (EventUnitAbility() == AbilityCommand("LaboratoryIV", 0)) || (EventUnitAbility() == AbilityCommand("LaboratoryV", 0)) || (EventUnitAbility() == AbilityCommand("MineII", 0)) || (EventUnitAbility() == AbilityCommand("MineIII", 0)) || (EventUnitAbility() == AbilityCommand("MineIV", 0)) || (EventUnitAbility() == AbilityCommand("MineV", 0)) || (EventUnitAbility() == AbilityCommand("UpgradetoHydrofarm", 0)) || (EventUnitAbility() == AbilityCommand("HydrofarmII", 0)) || (EventUnitAbility() == AbilityCommand("HydrofarmIII", 0)) || (EventUnitAbility() == AbilityCommand("HydrofarmIV", 0)) || (EventUnitAbility() == AbilityCommand("HydrofarmV", 0)) || (EventUnitAbility() == AbilityCommand("UpgradetoBorehole", 0)) || (EventUnitAbility() == AbilityCommand("BoreholeII", 0)) || (EventUnitAbility() == AbilityCommand("BoreholeIII", 0)) || (EventUnitAbility() == AbilityCommand("BoreholeIV", 0)) || (EventUnitAbility() == AbilityCommand("BoreholeV", 0)) || (EventUnitAbility() == AbilityCommand("MineI", 0)) || (EventUnitAbility() == AbilityCommand("UpgradetoOilWell", 0)) || (EventUnitAbility() == AbilityCommand("OilWellII", 0)) || (EventUnitAbility() == AbilityCommand("CPGII", 0)) || (EventUnitAbility() == AbilityCommand("CPGIII", 0)) || (EventUnitAbility() == AbilityCommand("UpgradetoResearchComplex", 0)) || (EventUnitAbility() == AbilityCommand("ResearchComplexII", 0)) || (EventUnitAbility() == AbilityCommand("ResearchComplexIII", 0)) || (EventUnitAbility() == AbilityCommand("ResearchComplexIV", 0)) || (EventUnitAbility() == AbilityCommand("ResearchComplexV", 0)) || (EventUnitAbility() == AbilityCommand("UpgradetoGeothermalPowerPlant", 0))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_oldCentral = UnitGetCustomValue(EventUnit(), 0);
    lv_coreCount[0] = UnitTechTreeBehaviorCount(EventUnit(), "Occupation", c_techCountCompleteOnly);
    lv_coreCount[1] = UnitTechTreeBehaviorCount(EventUnit(), "Core1", c_techCountCompleteOnly);
    lv_coreCount[2] = UnitTechTreeBehaviorCount(EventUnit(), "Core2", c_techCountCompleteOnly);
    lv_coreCount[3] = UnitTechTreeBehaviorCount(EventUnit(), "CoreTerritoryPlayer13", c_techCountCompleteOnly);
    lv_coreCount[4] = UnitTechTreeBehaviorCount(EventUnit(), "CoreTerritoryPlayer14", c_techCountCompleteOnly);
    lv_coreCount[5] = UnitTechTreeBehaviorCount(EventUnit(), "CoreTerritoryPlayer15", c_techCountCompleteOnly);
    lv_coreCount[6] = UnitTechTreeBehaviorCount(EventUnit(), "CoreTerritoryPlayer16", c_techCountCompleteOnly);
    lv_coreCount[7] = UnitTechTreeBehaviorCount(EventUnit(), "CoreTerritoryPlayer17", c_techCountCompleteOnly);
    lv_coreCount[8] = UnitTechTreeBehaviorCount(EventUnit(), "CoreTerritoryPlayer18", c_techCountCompleteOnly);
    lv_coreCount[9] = UnitTechTreeBehaviorCount(EventUnit(), "CoreTerritoryPlayer19", c_techCountCompleteOnly);
    lv_coreCount[10] = UnitTechTreeBehaviorCount(EventUnit(), "Separatists", c_techCountCompleteOnly);
    gf_TransferCustomValuesTake(EventUnit());
    if ((EventUnitAbility() == AbilityCommand("UpgradetoMDHousing", 0))) {
        libNtve_gf_ReplaceUnit(EventUnit(), "Flats", libNtve_ge_ReplaceUnitOptions_OldUnits);
        UnitSetCustomValue(libNtve_gf_LastReplacedUnit(), 0, lv_oldCentral);
        gf_TransferCores(libNtve_gf_LastReplacedUnit(), lv_coreCount[0], lv_coreCount[1], lv_coreCount[2], lv_coreCount[3], lv_coreCount[4], lv_coreCount[5], lv_coreCount[6], lv_coreCount[7], lv_coreCount[8], lv_coreCount[9], lv_coreCount[10]);
    }

    if ((EventUnitAbility() == AbilityCommand("UpgradetoHDHousing", 0))) {
        libNtve_gf_ReplaceUnit(EventUnit(), "Highrise", libNtve_ge_ReplaceUnitOptions_OldUnits);
        UnitSetCustomValue(libNtve_gf_LastReplacedUnit(), 0, lv_oldCentral);
        gf_TransferCores(libNtve_gf_LastReplacedUnit(), lv_coreCount[0], lv_coreCount[1], lv_coreCount[2], lv_coreCount[3], lv_coreCount[4], lv_coreCount[5], lv_coreCount[6], lv_coreCount[7], lv_coreCount[8], lv_coreCount[9], lv_coreCount[10]);
    }

    if ((EventUnitAbility() == AbilityCommand("UpgradetoVHDHousing", 0))) {
        libNtve_gf_ReplaceUnit(EventUnit(), "Cloudscraper", libNtve_ge_ReplaceUnitOptions_OldUnits);
        UnitSetCustomValue(libNtve_gf_LastReplacedUnit(), 0, lv_oldCentral);
        gf_TransferCores(libNtve_gf_LastReplacedUnit(), lv_coreCount[0], lv_coreCount[1], lv_coreCount[2], lv_coreCount[3], lv_coreCount[4], lv_coreCount[5], lv_coreCount[6], lv_coreCount[7], lv_coreCount[8], lv_coreCount[9], lv_coreCount[10]);
    }

    if ((EventUnitAbility() == AbilityCommand("FarmII", 0))) {
        UnitRemove(EventUnit());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "FarmII", c_unitCreateIgnorePlacement, UnitGetOwner(EventUnit()), UnitGetPosition(EventUnit()));
        UnitSetCustomValue(libNtve_gf_LastReplacedUnit(), 0, lv_oldCentral);
        gf_TransferCores(libNtve_gf_LastReplacedUnit(), lv_coreCount[0], lv_coreCount[1], lv_coreCount[2], lv_coreCount[3], lv_coreCount[4], lv_coreCount[5], lv_coreCount[6], lv_coreCount[7], lv_coreCount[8], lv_coreCount[9], lv_coreCount[10]);
    }

    if ((EventUnitAbility() == AbilityCommand("FarmIII", 0))) {
        UnitRemove(EventUnit());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "FarmIII", c_unitCreateIgnorePlacement, UnitGetOwner(EventUnit()), UnitGetPosition(EventUnit()));
        UnitSetCustomValue(libNtve_gf_LastReplacedUnit(), 0, lv_oldCentral);
        gf_TransferCores(libNtve_gf_LastReplacedUnit(), lv_coreCount[0], lv_coreCount[1], lv_coreCount[2], lv_coreCount[3], lv_coreCount[4], lv_coreCount[5], lv_coreCount[6], lv_coreCount[7], lv_coreCount[8], lv_coreCount[9], lv_coreCount[10]);
    }

    if ((EventUnitAbility() == AbilityCommand("FarmIV", 0))) {
        UnitRemove(EventUnit());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "FarmIV", c_unitCreateIgnorePlacement, UnitGetOwner(EventUnit()), UnitGetPosition(EventUnit()));
        UnitSetCustomValue(libNtve_gf_LastReplacedUnit(), 0, lv_oldCentral);
        gf_TransferCores(libNtve_gf_LastReplacedUnit(), lv_coreCount[0], lv_coreCount[1], lv_coreCount[2], lv_coreCount[3], lv_coreCount[4], lv_coreCount[5], lv_coreCount[6], lv_coreCount[7], lv_coreCount[8], lv_coreCount[9], lv_coreCount[10]);
    }

    if ((EventUnitAbility() == AbilityCommand("FarmV", 0))) {
        UnitRemove(EventUnit());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "FarmV", c_unitCreateIgnorePlacement, UnitGetOwner(EventUnit()), UnitGetPosition(EventUnit()));
        UnitSetCustomValue(libNtve_gf_LastReplacedUnit(), 0, lv_oldCentral);
        gf_TransferCores(libNtve_gf_LastReplacedUnit(), lv_coreCount[0], lv_coreCount[1], lv_coreCount[2], lv_coreCount[3], lv_coreCount[4], lv_coreCount[5], lv_coreCount[6], lv_coreCount[7], lv_coreCount[8], lv_coreCount[9], lv_coreCount[10]);
    }

    if ((EventUnitAbility() == AbilityCommand("LaboratoryII", 0))) {
        UnitRemove(EventUnit());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "LaboratoryII", c_unitCreateIgnorePlacement, UnitGetOwner(EventUnit()), UnitGetPosition(EventUnit()));
        UnitSetCustomValue(libNtve_gf_LastReplacedUnit(), 0, lv_oldCentral);
        gf_TransferCores(libNtve_gf_LastReplacedUnit(), lv_coreCount[0], lv_coreCount[1], lv_coreCount[2], lv_coreCount[3], lv_coreCount[4], lv_coreCount[5], lv_coreCount[6], lv_coreCount[7], lv_coreCount[8], lv_coreCount[9], lv_coreCount[10]);
    }

    if ((EventUnitAbility() == AbilityCommand("LaboratoryIII", 0))) {
        UnitRemove(EventUnit());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "LaboratoryIII", c_unitCreateIgnorePlacement, UnitGetOwner(EventUnit()), UnitGetPosition(EventUnit()));
        UnitSetCustomValue(libNtve_gf_LastReplacedUnit(), 0, lv_oldCentral);
        gf_TransferCores(libNtve_gf_LastReplacedUnit(), lv_coreCount[0], lv_coreCount[1], lv_coreCount[2], lv_coreCount[3], lv_coreCount[4], lv_coreCount[5], lv_coreCount[6], lv_coreCount[7], lv_coreCount[8], lv_coreCount[9], lv_coreCount[10]);
    }

    if ((EventUnitAbility() == AbilityCommand("LaboratoryIV", 0))) {
        UnitRemove(EventUnit());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "LaboratoryIV", c_unitCreateIgnorePlacement, UnitGetOwner(EventUnit()), UnitGetPosition(EventUnit()));
        UnitSetCustomValue(libNtve_gf_LastReplacedUnit(), 0, lv_oldCentral);
        gf_TransferCores(libNtve_gf_LastReplacedUnit(), lv_coreCount[0], lv_coreCount[1], lv_coreCount[2], lv_coreCount[3], lv_coreCount[4], lv_coreCount[5], lv_coreCount[6], lv_coreCount[7], lv_coreCount[8], lv_coreCount[9], lv_coreCount[10]);
    }

    if ((EventUnitAbility() == AbilityCommand("LaboratoryV", 0))) {
        UnitRemove(EventUnit());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "LaboratoryV", c_unitCreateIgnorePlacement, UnitGetOwner(EventUnit()), UnitGetPosition(EventUnit()));
        UnitSetCustomValue(libNtve_gf_LastReplacedUnit(), 0, lv_oldCentral);
        gf_TransferCores(libNtve_gf_LastReplacedUnit(), lv_coreCount[0], lv_coreCount[1], lv_coreCount[2], lv_coreCount[3], lv_coreCount[4], lv_coreCount[5], lv_coreCount[6], lv_coreCount[7], lv_coreCount[8], lv_coreCount[9], lv_coreCount[10]);
    }

    if ((EventUnitAbility() == AbilityCommand("MineII", 0))) {
        UnitRemove(EventUnit());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "MineII", c_unitCreateIgnorePlacement, UnitGetOwner(EventUnit()), UnitGetPosition(EventUnit()));
        UnitSetCustomValue(libNtve_gf_LastReplacedUnit(), 0, lv_oldCentral);
        gf_TransferCores(libNtve_gf_LastReplacedUnit(), lv_coreCount[0], lv_coreCount[1], lv_coreCount[2], lv_coreCount[3], lv_coreCount[4], lv_coreCount[5], lv_coreCount[6], lv_coreCount[7], lv_coreCount[8], lv_coreCount[9], lv_coreCount[10]);
    }

    if ((EventUnitAbility() == AbilityCommand("MineIII", 0))) {
        UnitRemove(EventUnit());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "MineIII", c_unitCreateIgnorePlacement, UnitGetOwner(EventUnit()), UnitGetPosition(EventUnit()));
        UnitSetCustomValue(libNtve_gf_LastReplacedUnit(), 0, lv_oldCentral);
        gf_TransferCores(libNtve_gf_LastReplacedUnit(), lv_coreCount[0], lv_coreCount[1], lv_coreCount[2], lv_coreCount[3], lv_coreCount[4], lv_coreCount[5], lv_coreCount[6], lv_coreCount[7], lv_coreCount[8], lv_coreCount[9], lv_coreCount[10]);
    }

    if ((EventUnitAbility() == AbilityCommand("MineIV", 0))) {
        UnitRemove(EventUnit());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "MineIV", c_unitCreateIgnorePlacement, UnitGetOwner(EventUnit()), UnitGetPosition(EventUnit()));
        UnitSetCustomValue(libNtve_gf_LastReplacedUnit(), 0, lv_oldCentral);
        gf_TransferCores(libNtve_gf_LastReplacedUnit(), lv_coreCount[0], lv_coreCount[1], lv_coreCount[2], lv_coreCount[3], lv_coreCount[4], lv_coreCount[5], lv_coreCount[6], lv_coreCount[7], lv_coreCount[8], lv_coreCount[9], lv_coreCount[10]);
    }

    if ((EventUnitAbility() == AbilityCommand("MineV", 0))) {
        UnitRemove(EventUnit());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "MineV", c_unitCreateIgnorePlacement, UnitGetOwner(EventUnit()), UnitGetPosition(EventUnit()));
        UnitSetCustomValue(libNtve_gf_LastReplacedUnit(), 0, lv_oldCentral);
        gf_TransferCores(libNtve_gf_LastReplacedUnit(), lv_coreCount[0], lv_coreCount[1], lv_coreCount[2], lv_coreCount[3], lv_coreCount[4], lv_coreCount[5], lv_coreCount[6], lv_coreCount[7], lv_coreCount[8], lv_coreCount[9], lv_coreCount[10]);
    }

    if ((EventUnitAbility() == AbilityCommand("UpgradetoHydrofarm", 0))) {
        UnitRemove(EventUnit());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HydrofarmI", c_unitCreateIgnorePlacement, UnitGetOwner(EventUnit()), UnitGetPosition(EventUnit()));
        UnitSetCustomValue(libNtve_gf_LastReplacedUnit(), 0, lv_oldCentral);
        gf_TransferCores(libNtve_gf_LastReplacedUnit(), lv_coreCount[0], lv_coreCount[1], lv_coreCount[2], lv_coreCount[3], lv_coreCount[4], lv_coreCount[5], lv_coreCount[6], lv_coreCount[7], lv_coreCount[8], lv_coreCount[9], lv_coreCount[10]);
    }

    if ((EventUnitAbility() == AbilityCommand("HydrofarmII", 0))) {
        UnitRemove(EventUnit());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HydrofarmII", c_unitCreateIgnorePlacement, UnitGetOwner(EventUnit()), UnitGetPosition(EventUnit()));
        UnitSetCustomValue(libNtve_gf_LastReplacedUnit(), 0, lv_oldCentral);
        gf_TransferCores(libNtve_gf_LastReplacedUnit(), lv_coreCount[0], lv_coreCount[1], lv_coreCount[2], lv_coreCount[3], lv_coreCount[4], lv_coreCount[5], lv_coreCount[6], lv_coreCount[7], lv_coreCount[8], lv_coreCount[9], lv_coreCount[10]);
    }

    if ((EventUnitAbility() == AbilityCommand("HydrofarmIII", 0))) {
        UnitRemove(EventUnit());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HydrofarmIII", c_unitCreateIgnorePlacement, UnitGetOwner(EventUnit()), UnitGetPosition(EventUnit()));
        UnitSetCustomValue(libNtve_gf_LastReplacedUnit(), 0, lv_oldCentral);
        gf_TransferCores(libNtve_gf_LastReplacedUnit(), lv_coreCount[0], lv_coreCount[1], lv_coreCount[2], lv_coreCount[3], lv_coreCount[4], lv_coreCount[5], lv_coreCount[6], lv_coreCount[7], lv_coreCount[8], lv_coreCount[9], lv_coreCount[10]);
    }

    if ((EventUnitAbility() == AbilityCommand("HydrofarmIV", 0))) {
        UnitRemove(EventUnit());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HydrofarmIV", c_unitCreateIgnorePlacement, UnitGetOwner(EventUnit()), UnitGetPosition(EventUnit()));
        UnitSetCustomValue(libNtve_gf_LastReplacedUnit(), 0, lv_oldCentral);
        gf_TransferCores(libNtve_gf_LastReplacedUnit(), lv_coreCount[0], lv_coreCount[1], lv_coreCount[2], lv_coreCount[3], lv_coreCount[4], lv_coreCount[5], lv_coreCount[6], lv_coreCount[7], lv_coreCount[8], lv_coreCount[9], lv_coreCount[10]);
    }

    if ((EventUnitAbility() == AbilityCommand("HydrofarmV", 0))) {
        UnitRemove(EventUnit());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HydrofarmV", c_unitCreateIgnorePlacement, UnitGetOwner(EventUnit()), UnitGetPosition(EventUnit()));
        UnitSetCustomValue(libNtve_gf_LastReplacedUnit(), 0, lv_oldCentral);
        gf_TransferCores(libNtve_gf_LastReplacedUnit(), lv_coreCount[0], lv_coreCount[1], lv_coreCount[2], lv_coreCount[3], lv_coreCount[4], lv_coreCount[5], lv_coreCount[6], lv_coreCount[7], lv_coreCount[8], lv_coreCount[9], lv_coreCount[10]);
    }

    if ((EventUnitAbility() == AbilityCommand("UpgradetoBorehole", 0))) {
        UnitRemove(EventUnit());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "BoreholeI", c_unitCreateIgnorePlacement, UnitGetOwner(EventUnit()), UnitGetPosition(EventUnit()));
        UnitSetCustomValue(libNtve_gf_LastReplacedUnit(), 0, lv_oldCentral);
    }

    if ((EventUnitAbility() == AbilityCommand("BoreholeII", 0))) {
        UnitRemove(EventUnit());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "BoreholeII", c_unitCreateIgnorePlacement, UnitGetOwner(EventUnit()), UnitGetPosition(EventUnit()));
        UnitSetCustomValue(libNtve_gf_LastReplacedUnit(), 0, lv_oldCentral);
    }

    if ((EventUnitAbility() == AbilityCommand("BoreholeIII", 0))) {
        UnitRemove(EventUnit());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "BoreholeIII", c_unitCreateIgnorePlacement, UnitGetOwner(EventUnit()), UnitGetPosition(EventUnit()));
        UnitSetCustomValue(libNtve_gf_LastReplacedUnit(), 0, lv_oldCentral);
    }

    if ((EventUnitAbility() == AbilityCommand("BoreholeIV", 0))) {
        UnitRemove(EventUnit());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "BoreholeIV", c_unitCreateIgnorePlacement, UnitGetOwner(EventUnit()), UnitGetPosition(EventUnit()));
        UnitSetCustomValue(libNtve_gf_LastReplacedUnit(), 0, lv_oldCentral);
    }

    if ((EventUnitAbility() == AbilityCommand("BoreholeV", 0))) {
        UnitRemove(EventUnit());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "BoreholeV", c_unitCreateIgnorePlacement, UnitGetOwner(EventUnit()), UnitGetPosition(EventUnit()));
        UnitSetCustomValue(libNtve_gf_LastReplacedUnit(), 0, lv_oldCentral);
    }

    if ((EventUnitAbility() == AbilityCommand("MineI", 0))) {
        UnitRemove(EventUnit());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "MineI", c_unitCreateIgnorePlacement, UnitGetOwner(EventUnit()), UnitGetPosition(EventUnit()));
        UnitSetCustomValue(libNtve_gf_LastReplacedUnit(), 0, lv_oldCentral);
    }

    if ((EventUnitAbility() == AbilityCommand("UpgradetoOilWell", 0))) {
        UnitRemove(EventUnit());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "OilWellI", c_unitCreateIgnorePlacement, UnitGetOwner(EventUnit()), UnitGetPosition(EventUnit()));
        UnitSetCustomValue(libNtve_gf_LastReplacedUnit(), 0, lv_oldCentral);
    }

    if ((EventUnitAbility() == AbilityCommand("OilWellII", 0))) {
        UnitRemove(EventUnit());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "OilWellII", c_unitCreateIgnorePlacement, UnitGetOwner(EventUnit()), UnitGetPosition(EventUnit()));
        UnitSetCustomValue(libNtve_gf_LastReplacedUnit(), 0, lv_oldCentral);
    }

    if ((EventUnitAbility() == AbilityCommand("CPGII", 0))) {
        UnitRemove(EventUnit());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "CPGII", c_unitCreateIgnorePlacement, UnitGetOwner(EventUnit()), UnitGetPosition(EventUnit()));
        UnitSetCustomValue(libNtve_gf_LastReplacedUnit(), 0, lv_oldCentral);
        gf_TransferCores(libNtve_gf_LastReplacedUnit(), lv_coreCount[0], lv_coreCount[1], lv_coreCount[2], lv_coreCount[3], lv_coreCount[4], lv_coreCount[5], lv_coreCount[6], lv_coreCount[7], lv_coreCount[8], lv_coreCount[9], lv_coreCount[10]);
    }

    if ((EventUnitAbility() == AbilityCommand("CPGIII", 0))) {
        UnitRemove(EventUnit());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "CPGIII", c_unitCreateIgnorePlacement, UnitGetOwner(EventUnit()), UnitGetPosition(EventUnit()));
        UnitSetCustomValue(libNtve_gf_LastReplacedUnit(), 0, lv_oldCentral);
        gf_TransferCores(libNtve_gf_LastReplacedUnit(), lv_coreCount[0], lv_coreCount[1], lv_coreCount[2], lv_coreCount[3], lv_coreCount[4], lv_coreCount[5], lv_coreCount[6], lv_coreCount[7], lv_coreCount[8], lv_coreCount[9], lv_coreCount[10]);
    }

    if ((EventUnitAbility() == AbilityCommand("UpgradetoResearchComplex", 0))) {
        UnitRemove(EventUnit());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ResearchComplexI", c_unitCreateIgnorePlacement, UnitGetOwner(EventUnit()), UnitGetPosition(EventUnit()));
        UnitSetCustomValue(libNtve_gf_LastReplacedUnit(), 0, lv_oldCentral);
    }

    if ((EventUnitAbility() == AbilityCommand("ResearchComplexII", 0))) {
        UnitRemove(EventUnit());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ResearchComplexII", c_unitCreateIgnorePlacement, UnitGetOwner(EventUnit()), UnitGetPosition(EventUnit()));
        UnitSetCustomValue(libNtve_gf_LastReplacedUnit(), 0, lv_oldCentral);
    }

    if ((EventUnitAbility() == AbilityCommand("ResearchComplexIII", 0))) {
        UnitRemove(EventUnit());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ResearchComplexIII", c_unitCreateIgnorePlacement, UnitGetOwner(EventUnit()), UnitGetPosition(EventUnit()));
        UnitSetCustomValue(libNtve_gf_LastReplacedUnit(), 0, lv_oldCentral);
    }

    if ((EventUnitAbility() == AbilityCommand("ResearchComplexIV", 0))) {
        UnitRemove(EventUnit());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ResearchComplexIV", c_unitCreateIgnorePlacement, UnitGetOwner(EventUnit()), UnitGetPosition(EventUnit()));
        UnitSetCustomValue(libNtve_gf_LastReplacedUnit(), 0, lv_oldCentral);
    }

    if ((EventUnitAbility() == AbilityCommand("ResearchComplexV", 0))) {
        UnitRemove(EventUnit());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ResearchComplexV", c_unitCreateIgnorePlacement, UnitGetOwner(EventUnit()), UnitGetPosition(EventUnit()));
        UnitSetCustomValue(libNtve_gf_LastReplacedUnit(), 0, lv_oldCentral);
    }

    if ((EventUnitAbility() == AbilityCommand("UpgradetoGeothermalPowerPlant", 0))) {
        UnitRemove(EventUnit());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "GeothermalPowerPlant", c_unitCreateIgnorePlacement, UnitGetOwner(EventUnit()), UnitGetPosition(EventUnit()));
        UnitSetCustomValue(libNtve_gf_LastReplacedUnit(), 0, lv_oldCentral);
    }

    gf_TransferCustomValuesGive(libNtve_gf_LastReplacedUnit());
    gf_TransferCores(libNtve_gf_LastReplacedUnit(), lv_coreCount[0], lv_coreCount[1], lv_coreCount[2], lv_coreCount[3], lv_coreCount[4], lv_coreCount[5], lv_coreCount[6], lv_coreCount[7], lv_coreCount[8], lv_coreCount[9], lv_coreCount[10]);
    UnitSelect(UnitLastCreated(), EventPlayer(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpgradetoMD_Init () {
    gt_UpgradetoMD = TriggerCreate("gt_UpgradetoMD_Func");
    TriggerAddEventUnitAbility(gt_UpgradetoMD, null, null, c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CreateCores
//--------------------------------------------------------------------------------------------------
bool gt_CreateCores_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoD8BEFCF4_g;
    int autoD8BEFCF4_u;
    unit autoD8BEFCF4_var;

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.02, c_timeGame);
    autoD8BEFCF4_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterPsionic) | (1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD8BEFCF4_u = UnitGroupCount(autoD8BEFCF4_g, c_unitCountAll);
    for (;; autoD8BEFCF4_u -= 1) {
        autoD8BEFCF4_var = UnitGroupUnitFromEnd(autoD8BEFCF4_g, autoD8BEFCF4_u);
        if (autoD8BEFCF4_var == null) { break; }
        if ((UnitHasBehavior2(autoD8BEFCF4_var, "Separatists") == false) && (UnitHasBehavior2(autoD8BEFCF4_var, "Occupation") == false)) {
            if ((UnitGetOwner(autoD8BEFCF4_var) == 1)) {
                UnitBehaviorAdd(autoD8BEFCF4_var, "Core1", autoD8BEFCF4_var, 1);
            }

            if ((UnitGetOwner(autoD8BEFCF4_var) == 2)) {
                UnitBehaviorAdd(autoD8BEFCF4_var, "Core2", autoD8BEFCF4_var, 1);
            }

            if ((UnitGetOwner(autoD8BEFCF4_var) == 3)) {
                UnitBehaviorAdd(autoD8BEFCF4_var, "CoreTerritoryPlayer13", autoD8BEFCF4_var, 1);
            }

            if ((UnitGetOwner(autoD8BEFCF4_var) == 4)) {
                UnitBehaviorAdd(autoD8BEFCF4_var, "CoreTerritoryPlayer14", autoD8BEFCF4_var, 1);
            }

            if ((UnitGetOwner(autoD8BEFCF4_var) == 5)) {
                UnitBehaviorAdd(autoD8BEFCF4_var, "CoreTerritoryPlayer15", autoD8BEFCF4_var, 1);
            }

            if ((UnitGetOwner(autoD8BEFCF4_var) == 6)) {
                UnitBehaviorAdd(autoD8BEFCF4_var, "CoreTerritoryPlayer16", autoD8BEFCF4_var, 1);
            }

            if ((UnitGetOwner(autoD8BEFCF4_var) == 7)) {
                UnitBehaviorAdd(autoD8BEFCF4_var, "CoreTerritoryPlayer17", autoD8BEFCF4_var, 1);
            }

            if ((UnitGetOwner(autoD8BEFCF4_var) == 8)) {
                UnitBehaviorAdd(autoD8BEFCF4_var, "CoreTerritoryPlayer18", autoD8BEFCF4_var, 1);
            }

            if ((UnitGetOwner(autoD8BEFCF4_var) == 9)) {
                UnitBehaviorAdd(autoD8BEFCF4_var, "CoreTerritoryPlayer19", autoD8BEFCF4_var, 1);
            }

        }
        else {
            UnitBehaviorRemove(autoD8BEFCF4_var, "Separatists", 1);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateCores_Init () {
    gt_CreateCores = TriggerCreate("gt_CreateCores_Func");
    TriggerAddEventTimePeriodic(gt_CreateCores, 120.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: EndDialogue
//--------------------------------------------------------------------------------------------------
bool gt_EndDialogue_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(260, 90, c_anchorTopRight, -5, 460, true);
    gv_endDialogue = DialogLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_endDialogue, 240, 70, c_anchorLeft, 10, 0, StringToText(""), StringExternal("Param/Value/7B33B1FA"), "Assets\\Textures\\075.dds");
    gv_endDialogueItems[1] = DialogControlLastCreated();
    DialogSetImage(DialogLastCreated(), "Assets\\Textures\\ui_scrollbar_frame.dds");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EndDialogue_Init () {
    gt_EndDialogue = TriggerCreate("gt_EndDialogue_Func");
    TriggerAddEventMapInit(gt_EndDialogue);
}

//--------------------------------------------------------------------------------------------------
// Trigger: EndDialogueButtinz
//--------------------------------------------------------------------------------------------------
bool gt_EndDialogueButtinz_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto7F9BAC07_g;
    int auto7F9BAC07_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventDialogControl() == gv_endDialogueItems[1])) {
        auto7F9BAC07_g = PlayerGroupAll();
        auto7F9BAC07_var = -1;
        while (true) {
            auto7F9BAC07_var = PlayerGroupNextPlayer(auto7F9BAC07_g, auto7F9BAC07_var);
            if (auto7F9BAC07_var < 0) { break; }
            PlayerSetAlliance(auto7F9BAC07_var, c_allianceIdVision, 1, true);
        }
        GameOver(EventPlayer(), c_gameOverVictory, true, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EndDialogueButtinz_Init () {
    gt_EndDialogueButtinz = TriggerCreate("gt_EndDialogueButtinz_Func");
    TriggerAddEventDialogControl(gt_EndDialogueButtinz, c_playerAny, EventDialogControl(), c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Select Low Density
//--------------------------------------------------------------------------------------------------
bool gt_SelectLowDensity_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_select;

    // Automatic Variable Declarations
    unitgroup auto4A414821_g;
    int auto4A414821_u;
    unit auto4A414821_var;

    // Variable Initialization
    lv_select = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupRemoveUnitGroup(lv_select, lv_select);
    auto4A414821_g = UnitGroup(null, EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4A414821_u = UnitGroupCount(auto4A414821_g, c_unitCountAll);
    for (;; auto4A414821_u -= 1) {
        auto4A414821_var = UnitGroupUnitFromEnd(auto4A414821_g, auto4A414821_u);
        if (auto4A414821_var == null) { break; }
        if (((UnitGetType(auto4A414821_var) == "SmallHouse") || (UnitGetType(auto4A414821_var) == "MediumHouse") || (UnitGetType(auto4A414821_var) == "LargeHouse") || (UnitGetType(auto4A414821_var) == "Manor"))) {
            UnitGroupAdd(lv_select, auto4A414821_var);
        }

    }
    UnitGroupSelect(lv_select, EventPlayer(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SelectLowDensity_Init () {
    gt_SelectLowDensity = TriggerCreate("gt_SelectLowDensity_Func");
    TriggerAddEventChatMessage(gt_SelectLowDensity, c_playerAny, "-select LD", false);
    TriggerAddEventChatMessage(gt_SelectLowDensity, c_playerAny, "-select low density", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Select Medium Density
//--------------------------------------------------------------------------------------------------
bool gt_SelectMediumDensity_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_select;

    // Automatic Variable Declarations
    unitgroup auto04EC2E79_g;
    int auto04EC2E79_u;
    unit auto04EC2E79_var;

    // Variable Initialization
    lv_select = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupRemoveUnitGroup(lv_select, lv_select);
    auto04EC2E79_g = UnitGroup(null, EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto04EC2E79_u = UnitGroupCount(auto04EC2E79_g, c_unitCountAll);
    for (;; auto04EC2E79_u -= 1) {
        auto04EC2E79_var = UnitGroupUnitFromEnd(auto04EC2E79_g, auto04EC2E79_u);
        if (auto04EC2E79_var == null) { break; }
        if (((UnitGetType(auto04EC2E79_var) == "Flats") || (UnitGetType(auto04EC2E79_var) == "Block") || (UnitGetType(auto04EC2E79_var) == "Tower") || (UnitGetType(auto04EC2E79_var) == "Condo"))) {
            UnitGroupAdd(lv_select, auto04EC2E79_var);
        }

    }
    UnitGroupSelect(lv_select, EventPlayer(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SelectMediumDensity_Init () {
    gt_SelectMediumDensity = TriggerCreate("gt_SelectMediumDensity_Func");
    TriggerAddEventChatMessage(gt_SelectMediumDensity, c_playerAny, "-select MD", false);
    TriggerAddEventChatMessage(gt_SelectMediumDensity, c_playerAny, "-select medium density", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Select High Density
//--------------------------------------------------------------------------------------------------
bool gt_SelectHighDensity_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_select;

    // Automatic Variable Declarations
    unitgroup auto8DA1F245_g;
    int auto8DA1F245_u;
    unit auto8DA1F245_var;

    // Variable Initialization
    lv_select = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupRemoveUnitGroup(lv_select, lv_select);
    auto8DA1F245_g = UnitGroup(null, EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto8DA1F245_u = UnitGroupCount(auto8DA1F245_g, c_unitCountAll);
    for (;; auto8DA1F245_u -= 1) {
        auto8DA1F245_var = UnitGroupUnitFromEnd(auto8DA1F245_g, auto8DA1F245_u);
        if (auto8DA1F245_var == null) { break; }
        if (((UnitGetType(auto8DA1F245_var) == "Highrise") || (UnitGetType(auto8DA1F245_var) == "Supertower") || (UnitGetType(auto8DA1F245_var) == "Skyrise") || (UnitGetType(auto8DA1F245_var) == "Skyscraper") || (UnitGetType(auto8DA1F245_var) == "Skytower"))) {
            UnitGroupAdd(lv_select, auto8DA1F245_var);
        }

    }
    UnitGroupSelect(lv_select, EventPlayer(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SelectHighDensity_Init () {
    gt_SelectHighDensity = TriggerCreate("gt_SelectHighDensity_Func");
    TriggerAddEventChatMessage(gt_SelectHighDensity, c_playerAny, "-select HD", false);
    TriggerAddEventChatMessage(gt_SelectHighDensity, c_playerAny, "-select high density", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Select Very High Density
//--------------------------------------------------------------------------------------------------
bool gt_SelectVeryHighDensity_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_select;

    // Automatic Variable Declarations
    unitgroup autoF84F19F0_g;
    int autoF84F19F0_u;
    unit autoF84F19F0_var;

    // Variable Initialization
    lv_select = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupRemoveUnitGroup(lv_select, lv_select);
    autoF84F19F0_g = UnitGroup(null, EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF84F19F0_u = UnitGroupCount(autoF84F19F0_g, c_unitCountAll);
    for (;; autoF84F19F0_u -= 1) {
        autoF84F19F0_var = UnitGroupUnitFromEnd(autoF84F19F0_g, autoF84F19F0_u);
        if (autoF84F19F0_var == null) { break; }
        if (((UnitGetType(autoF84F19F0_var) == "Cloudscraper") || (UnitGetType(autoF84F19F0_var) == "Stratostower") || (UnitGetType(autoF84F19F0_var) == "Ark") || (UnitGetType(autoF84F19F0_var) == "Nimbuspillar"))) {
            UnitGroupAdd(lv_select, autoF84F19F0_var);
        }

    }
    UnitGroupSelect(lv_select, EventPlayer(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SelectVeryHighDensity_Init () {
    gt_SelectVeryHighDensity = TriggerCreate("gt_SelectVeryHighDensity_Func");
    TriggerAddEventChatMessage(gt_SelectVeryHighDensity, c_playerAny, "-select VHD", false);
    TriggerAddEventChatMessage(gt_SelectVeryHighDensity, c_playerAny, "-select very high density", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Select All Homes
//--------------------------------------------------------------------------------------------------
bool gt_SelectAllHomes_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_select;

    // Automatic Variable Declarations
    unitgroup auto4179A229_g;
    int auto4179A229_u;
    unit auto4179A229_var;

    // Variable Initialization
    lv_select = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupRemoveUnitGroup(lv_select, lv_select);
    auto4179A229_g = UnitGroup(null, EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4179A229_u = UnitGroupCount(auto4179A229_g, c_unitCountAll);
    for (;; auto4179A229_u -= 1) {
        auto4179A229_var = UnitGroupUnitFromEnd(auto4179A229_g, auto4179A229_u);
        if (auto4179A229_var == null) { break; }
        if (((UnitGetType(auto4179A229_var) == "Nimbuspillar") || (UnitGetType(auto4179A229_var) == "Ark") || (UnitGetType(auto4179A229_var) == "Stratostower") || (UnitGetType(auto4179A229_var) == "Cloudscraper") || (UnitGetType(auto4179A229_var) == "Skytower") || (UnitGetType(auto4179A229_var) == "Skyscraper") || (UnitGetType(auto4179A229_var) == "Skyrise") || (UnitGetType(auto4179A229_var) == "Supertower") || (UnitGetType(auto4179A229_var) == "Highrise") || (UnitGetType(auto4179A229_var) == "Condo") || (UnitGetType(auto4179A229_var) == "Tower") || (UnitGetType(auto4179A229_var) == "Block") || (UnitGetType(auto4179A229_var) == "Flats") || (UnitGetType(auto4179A229_var) == "Manor") || (UnitGetType(auto4179A229_var) == "LargeHouse") || (UnitGetType(auto4179A229_var) == "MediumHouse") || (UnitGetType(auto4179A229_var) == "SmallHouse"))) {
            UnitGroupAdd(lv_select, auto4179A229_var);
        }

    }
    UnitGroupSelect(lv_select, EventPlayer(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SelectAllHomes_Init () {
    gt_SelectAllHomes = TriggerCreate("gt_SelectAllHomes_Func");
    TriggerAddEventChatMessage(gt_SelectAllHomes, c_playerAny, "-select homes", false);
    TriggerAddEventChatMessage(gt_SelectAllHomes, c_playerAny, "-select all homes", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Select Farm
//--------------------------------------------------------------------------------------------------
bool gt_SelectFarm_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_select;

    // Automatic Variable Declarations
    unitgroup autoB796D533_g;
    int autoB796D533_u;
    unit autoB796D533_var;

    // Variable Initialization
    lv_select = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupRemoveUnitGroup(lv_select, lv_select);
    autoB796D533_g = UnitGroup(null, EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB796D533_u = UnitGroupCount(autoB796D533_g, c_unitCountAll);
    for (;; autoB796D533_u -= 1) {
        autoB796D533_var = UnitGroupUnitFromEnd(autoB796D533_g, autoB796D533_u);
        if (autoB796D533_var == null) { break; }
        if (((UnitGetType(autoB796D533_var) == "FarmI") || (UnitGetType(autoB796D533_var) == "FarmII") || (UnitGetType(autoB796D533_var) == "FarmIII") || (UnitGetType(autoB796D533_var) == "FarmIV") || (UnitGetType(autoB796D533_var) == "FarmV"))) {
            UnitGroupAdd(lv_select, autoB796D533_var);
        }

    }
    UnitGroupSelect(lv_select, EventPlayer(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SelectFarm_Init () {
    gt_SelectFarm = TriggerCreate("gt_SelectFarm_Func");
    TriggerAddEventChatMessage(gt_SelectFarm, c_playerAny, "-select farm", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Select Hydrofarm
//--------------------------------------------------------------------------------------------------
bool gt_SelectHydrofarm_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_select;

    // Automatic Variable Declarations
    unitgroup autoCDE2798F_g;
    int autoCDE2798F_u;
    unit autoCDE2798F_var;

    // Variable Initialization
    lv_select = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupRemoveUnitGroup(lv_select, lv_select);
    autoCDE2798F_g = UnitGroup(null, EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoCDE2798F_u = UnitGroupCount(autoCDE2798F_g, c_unitCountAll);
    for (;; autoCDE2798F_u -= 1) {
        autoCDE2798F_var = UnitGroupUnitFromEnd(autoCDE2798F_g, autoCDE2798F_u);
        if (autoCDE2798F_var == null) { break; }
        if (((UnitGetType(autoCDE2798F_var) == "HydrofarmI") || (UnitGetType(autoCDE2798F_var) == "HydrofarmII") || (UnitGetType(autoCDE2798F_var) == "HydrofarmIII") || (UnitGetType(autoCDE2798F_var) == "HydrofarmIV") || (UnitGetType(autoCDE2798F_var) == "HydrofarmV"))) {
            UnitGroupAdd(lv_select, autoCDE2798F_var);
        }

    }
    UnitGroupSelect(lv_select, EventPlayer(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SelectHydrofarm_Init () {
    gt_SelectHydrofarm = TriggerCreate("gt_SelectHydrofarm_Func");
    TriggerAddEventChatMessage(gt_SelectHydrofarm, c_playerAny, "-select hydrofarm", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Select All Farms
//--------------------------------------------------------------------------------------------------
bool gt_SelectAllFarms_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_select;

    // Automatic Variable Declarations
    unitgroup autoF51B776C_g;
    int autoF51B776C_u;
    unit autoF51B776C_var;

    // Variable Initialization
    lv_select = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupRemoveUnitGroup(lv_select, lv_select);
    autoF51B776C_g = UnitGroup(null, EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF51B776C_u = UnitGroupCount(autoF51B776C_g, c_unitCountAll);
    for (;; autoF51B776C_u -= 1) {
        autoF51B776C_var = UnitGroupUnitFromEnd(autoF51B776C_g, autoF51B776C_u);
        if (autoF51B776C_var == null) { break; }
        if (((UnitGetType(autoF51B776C_var) == "FarmI") || (UnitGetType(autoF51B776C_var) == "FarmII") || (UnitGetType(autoF51B776C_var) == "FarmIII") || (UnitGetType(autoF51B776C_var) == "FarmIV") || (UnitGetType(autoF51B776C_var) == "FarmV") || (UnitGetType(autoF51B776C_var) == "HydrofarmI") || (UnitGetType(autoF51B776C_var) == "HydrofarmII") || (UnitGetType(autoF51B776C_var) == "HydrofarmIII") || (UnitGetType(autoF51B776C_var) == "HydrofarmIV") || (UnitGetType(autoF51B776C_var) == "HydrofarmV"))) {
            UnitGroupAdd(lv_select, autoF51B776C_var);
        }

    }
    UnitGroupSelect(lv_select, EventPlayer(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SelectAllFarms_Init () {
    gt_SelectAllFarms = TriggerCreate("gt_SelectAllFarms_Func");
    TriggerAddEventChatMessage(gt_SelectAllFarms, c_playerAny, "-select hydrofarm", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Select Coal
//--------------------------------------------------------------------------------------------------
bool gt_SelectCoal_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_select;

    // Automatic Variable Declarations
    unitgroup auto961B8335_g;
    int auto961B8335_u;
    unit auto961B8335_var;

    // Variable Initialization
    lv_select = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupRemoveUnitGroup(lv_select, lv_select);
    auto961B8335_g = UnitGroup(null, EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto961B8335_u = UnitGroupCount(auto961B8335_g, c_unitCountAll);
    for (;; auto961B8335_u -= 1) {
        auto961B8335_var = UnitGroupUnitFromEnd(auto961B8335_g, auto961B8335_u);
        if (auto961B8335_var == null) { break; }
        if (((UnitGetType(auto961B8335_var) == "WindTurbine"))) {
            UnitGroupAdd(lv_select, auto961B8335_var);
        }

    }
    UnitGroupSelect(lv_select, EventPlayer(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SelectCoal_Init () {
    gt_SelectCoal = TriggerCreate("gt_SelectCoal_Func");
    TriggerAddEventChatMessage(gt_SelectCoal, c_playerAny, "-select coal", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Select Metal
//--------------------------------------------------------------------------------------------------
bool gt_SelectMetal_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_select;

    // Automatic Variable Declarations
    unitgroup auto638579D0_g;
    int auto638579D0_u;
    unit auto638579D0_var;

    // Variable Initialization
    lv_select = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupRemoveUnitGroup(lv_select, lv_select);
    auto638579D0_g = UnitGroup(null, EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto638579D0_u = UnitGroupCount(auto638579D0_g, c_unitCountAll);
    for (;; auto638579D0_u -= 1) {
        auto638579D0_var = UnitGroupUnitFromEnd(auto638579D0_g, auto638579D0_u);
        if (auto638579D0_var == null) { break; }
        if (((UnitGetType(auto638579D0_var) == "Metal"))) {
            UnitGroupAdd(lv_select, auto638579D0_var);
        }

    }
    UnitGroupSelect(lv_select, EventPlayer(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SelectMetal_Init () {
    gt_SelectMetal = TriggerCreate("gt_SelectMetal_Func");
    TriggerAddEventChatMessage(gt_SelectMetal, c_playerAny, "-select metal", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Select Mine
//--------------------------------------------------------------------------------------------------
bool gt_SelectMine_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_select;

    // Automatic Variable Declarations
    unitgroup auto206E4C13_g;
    int auto206E4C13_u;
    unit auto206E4C13_var;

    // Variable Initialization
    lv_select = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupRemoveUnitGroup(lv_select, lv_select);
    auto206E4C13_g = UnitGroup(null, EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto206E4C13_u = UnitGroupCount(auto206E4C13_g, c_unitCountAll);
    for (;; auto206E4C13_u -= 1) {
        auto206E4C13_var = UnitGroupUnitFromEnd(auto206E4C13_g, auto206E4C13_u);
        if (auto206E4C13_var == null) { break; }
        if (((UnitGetType(auto206E4C13_var) == "MineI") || (UnitGetType(auto206E4C13_var) == "MineII") || (UnitGetType(auto206E4C13_var) == "MineIII") || (UnitGetType(auto206E4C13_var) == "MineIV") || (UnitGetType(auto206E4C13_var) == "MineV"))) {
            UnitGroupAdd(lv_select, auto206E4C13_var);
        }

    }
    UnitGroupSelect(lv_select, EventPlayer(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SelectMine_Init () {
    gt_SelectMine = TriggerCreate("gt_SelectMine_Func");
    TriggerAddEventChatMessage(gt_SelectMine, c_playerAny, "-select mine", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Select Bore
//--------------------------------------------------------------------------------------------------
bool gt_SelectBore_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_select;

    // Automatic Variable Declarations
    unitgroup auto64094EB5_g;
    int auto64094EB5_u;
    unit auto64094EB5_var;

    // Variable Initialization
    lv_select = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupRemoveUnitGroup(lv_select, lv_select);
    auto64094EB5_g = UnitGroup(null, EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto64094EB5_u = UnitGroupCount(auto64094EB5_g, c_unitCountAll);
    for (;; auto64094EB5_u -= 1) {
        auto64094EB5_var = UnitGroupUnitFromEnd(auto64094EB5_g, auto64094EB5_u);
        if (auto64094EB5_var == null) { break; }
        if (((UnitGetType(auto64094EB5_var) == "BoreholeI") || (UnitGetType(auto64094EB5_var) == "BoreholeII") || (UnitGetType(auto64094EB5_var) == "BoreholeIII") || (UnitGetType(auto64094EB5_var) == "BoreholeIV") || (UnitGetType(auto64094EB5_var) == "BoreholeV"))) {
            UnitGroupAdd(lv_select, auto64094EB5_var);
        }

    }
    UnitGroupSelect(lv_select, EventPlayer(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SelectBore_Init () {
    gt_SelectBore = TriggerCreate("gt_SelectBore_Func");
    TriggerAddEventChatMessage(gt_SelectBore, c_playerAny, "-select bore", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Select All Metal
//--------------------------------------------------------------------------------------------------
bool gt_SelectAllMetal_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_select;

    // Automatic Variable Declarations
    unitgroup auto94ACB59E_g;
    int auto94ACB59E_u;
    unit auto94ACB59E_var;

    // Variable Initialization
    lv_select = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupRemoveUnitGroup(lv_select, lv_select);
    auto94ACB59E_g = UnitGroup(null, EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto94ACB59E_u = UnitGroupCount(auto94ACB59E_g, c_unitCountAll);
    for (;; auto94ACB59E_u -= 1) {
        auto94ACB59E_var = UnitGroupUnitFromEnd(auto94ACB59E_g, auto94ACB59E_u);
        if (auto94ACB59E_var == null) { break; }
        if (((UnitGetType(auto94ACB59E_var) == "BoreholeI") || (UnitGetType(auto94ACB59E_var) == "BoreholeII") || (UnitGetType(auto94ACB59E_var) == "BoreholeIII") || (UnitGetType(auto94ACB59E_var) == "BoreholeIV") || (UnitGetType(auto94ACB59E_var) == "BoreholeV") || (UnitGetType(auto94ACB59E_var) == "MineI") || (UnitGetType(auto94ACB59E_var) == "MineII") || (UnitGetType(auto94ACB59E_var) == "MineIII") || (UnitGetType(auto94ACB59E_var) == "MineIV") || (UnitGetType(auto94ACB59E_var) == "MineV") || (UnitGetType(auto94ACB59E_var) == "Metal"))) {
            UnitGroupAdd(lv_select, auto94ACB59E_var);
        }

    }
    UnitGroupSelect(lv_select, EventPlayer(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SelectAllMetal_Init () {
    gt_SelectAllMetal = TriggerCreate("gt_SelectAllMetal_Func");
    TriggerAddEventChatMessage(gt_SelectAllMetal, c_playerAny, "-select all metal", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Select Oil
//--------------------------------------------------------------------------------------------------
bool gt_SelectOil_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_select;

    // Automatic Variable Declarations
    unitgroup autoE749DB86_g;
    int autoE749DB86_u;
    unit autoE749DB86_var;

    // Variable Initialization
    lv_select = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupRemoveUnitGroup(lv_select, lv_select);
    autoE749DB86_g = UnitGroup(null, EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE749DB86_u = UnitGroupCount(autoE749DB86_g, c_unitCountAll);
    for (;; autoE749DB86_u -= 1) {
        autoE749DB86_var = UnitGroupUnitFromEnd(autoE749DB86_g, autoE749DB86_u);
        if (autoE749DB86_var == null) { break; }
        if (((UnitGetType(autoE749DB86_var) == "Oil") || (UnitGetType(autoE749DB86_var) == "OilWellI") || (UnitGetType(autoE749DB86_var) == "OilWellII"))) {
            UnitGroupAdd(lv_select, autoE749DB86_var);
        }

    }
    UnitGroupSelect(lv_select, EventPlayer(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SelectOil_Init () {
    gt_SelectOil = TriggerCreate("gt_SelectOil_Func");
    TriggerAddEventChatMessage(gt_SelectOil, c_playerAny, "-select oil", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Select Geo
//--------------------------------------------------------------------------------------------------
bool gt_SelectGeo_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_select;

    // Automatic Variable Declarations
    unitgroup autoA633855F_g;
    int autoA633855F_u;
    unit autoA633855F_var;

    // Variable Initialization
    lv_select = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupRemoveUnitGroup(lv_select, lv_select);
    autoA633855F_g = UnitGroup(null, EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA633855F_u = UnitGroupCount(autoA633855F_g, c_unitCountAll);
    for (;; autoA633855F_u -= 1) {
        autoA633855F_var = UnitGroupUnitFromEnd(autoA633855F_g, autoA633855F_u);
        if (autoA633855F_var == null) { break; }
        if (((UnitGetType(autoA633855F_var) == "GeothermalFissure") || (UnitGetType(autoA633855F_var) == "GeothermalPowerPlant"))) {
            UnitGroupAdd(lv_select, autoA633855F_var);
        }

    }
    UnitGroupSelect(lv_select, EventPlayer(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SelectGeo_Init () {
    gt_SelectGeo = TriggerCreate("gt_SelectGeo_Func");
    TriggerAddEventChatMessage(gt_SelectGeo, c_playerAny, "-select geo", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: HowFarAwayAreEmpiresFromEachOther
//--------------------------------------------------------------------------------------------------
bool gt_HowFarAwayAreEmpiresFromEachOther_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__1stPlayer;
    unitgroup lv__1stPlayerUnitGroup;
    unitgroup lv__2ndPlayerUnitGroup;
    point lv__1stPlayerPosition;
    point lv__2ndPlayerPosition;

    // Automatic Variable Declarations
    playergroup auto574C146B_g;
    unitgroup auto50D16DB4_g;
    int auto50D16DB4_u;
    unit auto50D16DB4_var;
    playergroup autoAA94D94A_g;
    int autoAA94D94A_var;
    unitgroup autoEBD94D4F_g;
    int autoEBD94D4F_u;
    unit autoEBD94D4F_var;

    // Variable Initialization
    lv__1stPlayerUnitGroup = UnitGroupEmpty();
    lv__2ndPlayerUnitGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    auto574C146B_g = gv_users;
    lv__1stPlayer = -1;
    while (true) {
        lv__1stPlayer = PlayerGroupNextPlayer(auto574C146B_g, lv__1stPlayer);
        if (lv__1stPlayer < 0) { break; }
        UnitGroupRemoveUnitGroup(lv__1stPlayerUnitGroup, lv__1stPlayerUnitGroup);
        auto50D16DB4_g = UnitGroup(null, lv__1stPlayer, RegionEntireMap(), UnitFilter((1 << c_targetFilterPsionic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto50D16DB4_u = UnitGroupCount(auto50D16DB4_g, c_unitCountAll);
        for (;; auto50D16DB4_u -= 1) {
            auto50D16DB4_var = UnitGroupUnitFromEnd(auto50D16DB4_g, auto50D16DB4_u);
            if (auto50D16DB4_var == null) { break; }
            UnitGroupAdd(lv__1stPlayerUnitGroup, auto50D16DB4_var);
        }
        lv__1stPlayerPosition = UnitGroupCenterOfGroup(lv__1stPlayerUnitGroup);
        autoAA94D94A_g = gv_users;
        autoAA94D94A_var = -1;
        while (true) {
            autoAA94D94A_var = PlayerGroupNextPlayer(autoAA94D94A_g, autoAA94D94A_var);
            if (autoAA94D94A_var < 0) { break; }
            if ((lv__1stPlayer == autoAA94D94A_var)) {
            }
            else {
                UnitGroupRemoveUnitGroup(lv__2ndPlayerUnitGroup, lv__2ndPlayerUnitGroup);
                autoEBD94D4F_g = UnitGroup(null, autoAA94D94A_var, RegionEntireMap(), UnitFilter((1 << c_targetFilterPsionic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                autoEBD94D4F_u = UnitGroupCount(autoEBD94D4F_g, c_unitCountAll);
                for (;; autoEBD94D4F_u -= 1) {
                    autoEBD94D4F_var = UnitGroupUnitFromEnd(autoEBD94D4F_g, autoEBD94D4F_u);
                    if (autoEBD94D4F_var == null) { break; }
                    UnitGroupAdd(lv__2ndPlayerUnitGroup, autoEBD94D4F_var);
                }
                lv__2ndPlayerPosition = UnitGroupCenterOfGroup(lv__2ndPlayerUnitGroup);
                gv_distanceBetweenEmpires[lv__1stPlayer][autoAA94D94A_var] = FixedToInt(DistanceBetweenPoints(lv__1stPlayerPosition, lv__2ndPlayerPosition));
                if ((PlayerGetAlliance(lv__1stPlayer, c_allianceIdPassive, autoAA94D94A_var) == true)) {
                    gv_statusBetweenEmpires[lv__1stPlayer][autoAA94D94A_var] = 1.5;
                }
                else {
                    if ((PlayerGroupHasPlayer(gv_theEuroCrew, lv__1stPlayer) == true) && (PlayerGroupHasPlayer(gv_theEuroCrew, autoAA94D94A_var) == true)) {
                        gv_statusBetweenEmpires[lv__1stPlayer][autoAA94D94A_var] = 3.5;
                    }
                    else {
                        if ((PlayerGetAlliance(lv__1stPlayer, c_allianceIdChat, autoAA94D94A_var) == true)) {
                            gv_statusBetweenEmpires[lv__1stPlayer][autoAA94D94A_var] = 3.0;
                        }
                        else {
                            if ((PlayerGroupHasPlayer(PlayerGroupAlliance(c_playerGroupEnemy, autoAA94D94A_var), lv__1stPlayer) == true)) {
                                gv_statusBetweenEmpires[lv__1stPlayer][autoAA94D94A_var] = 2.0;
                            }
                            else {
                                gv_statusBetweenEmpires[lv__1stPlayer][autoAA94D94A_var] = 1.0;
                            }
                        }
                    }
                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HowFarAwayAreEmpiresFromEachOther_Init () {
    gt_HowFarAwayAreEmpiresFromEachOther = TriggerCreate("gt_HowFarAwayAreEmpiresFromEachOther_Func");
    TriggerAddEventTimePeriodic(gt_HowFarAwayAreEmpiresFromEachOther, 110.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Research Diffusion
//--------------------------------------------------------------------------------------------------
bool gt_ResearchDiffusion_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_researchCount;
    int lv_luckyDonator;
    fixed lv_distance;
    fixed lv_statusWarPeace;
    fixed lv_diplomaticPolicy;
    fixed lv_donatedTech;
    fixed lv_playersInGame;

    // Automatic Variable Declarations
    playergroup auto46B55A86_g;
    int auto46B55A86_var;
    int autoDE1A24F2_ae;
    const int autoDE1A24F2_ai = 1;
    playergroup autoCBDD3022_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_playersInGame = (IntToFixed(PlayerGroupCount(gv_users)) / 2.0);
    auto46B55A86_g = gv_users;
    auto46B55A86_var = -1;
    while (true) {
        auto46B55A86_var = PlayerGroupNextPlayer(auto46B55A86_g, auto46B55A86_var);
        if (auto46B55A86_var < 0) { break; }
        if ((TechTreeUpgradeCount(auto46B55A86_var, "Isolationisim", c_techCountCompleteOnly) > 0)) {
            lv_diplomaticPolicy = 0.5;
        }
        else {
            if ((TechTreeUpgradeCount(auto46B55A86_var, "Pacifisim", c_techCountCompleteOnly) > 0)) {
                lv_diplomaticPolicy = 1.5;
            }
            else {
                lv_diplomaticPolicy = 1.0;
            }
        }
        autoDE1A24F2_ae = gv_researchesAvailable;
        lv_researchCount = 1;
        for ( ; ( (autoDE1A24F2_ai >= 0 && lv_researchCount <= autoDE1A24F2_ae) || (autoDE1A24F2_ai < 0 && lv_researchCount >= autoDE1A24F2_ae) ) ; lv_researchCount += autoDE1A24F2_ai ) {
            gv_donatedTechRate[auto46B55A86_var][lv_researchCount] = 0;
            if ((gv_researchInvested[auto46B55A86_var][lv_researchCount] < gv_researchCost[lv_researchCount])) {
                autoCBDD3022_g = gv_users;
                lv_luckyDonator = -1;
                while (true) {
                    lv_luckyDonator = PlayerGroupNextPlayer(autoCBDD3022_g, lv_luckyDonator);
                    if (lv_luckyDonator < 0) { break; }
                    if ((gv_researchInvested[lv_luckyDonator][lv_researchCount] >= gv_researchCost[lv_researchCount]) && (lv_luckyDonator != auto46B55A86_var)) {
                        lv_distance = gv_distanceBetweenEmpires[auto46B55A86_var][lv_luckyDonator];
                        if ((lv_distance > 200.0)) {
                            lv_distance = 0.0;
                        }
                        else {
                            if ((lv_distance < 50.0)) {
                                lv_distance = ((lv_distance * -0.2) + 16.0);
                            }
                            else {
                                lv_distance = ((500.0 / lv_distance) - (200.0 / lv_distance));
                            }
                        }
                        lv_statusWarPeace = gv_statusBetweenEmpires[auto46B55A86_var][lv_luckyDonator];
                        lv_donatedTech = ((lv_distance * lv_statusWarPeace) * (lv_diplomaticPolicy * (95.0 / IntToFixed(gv_researchTime[lv_researchCount]))));
                        lv_donatedTech = (lv_donatedTech / lv_playersInGame);
                        gv_researchInvested[auto46B55A86_var][lv_researchCount] += FixedToInt(lv_donatedTech);
                        gv_donatedTechRate[auto46B55A86_var][lv_researchCount] += FixedToInt((lv_donatedTech / 3.0));
                        gv_donatedTechTotal[auto46B55A86_var][lv_researchCount] += FixedToInt(lv_donatedTech);
                    }

                }
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ResearchDiffusion_Init () {
    gt_ResearchDiffusion = TriggerCreate("gt_ResearchDiffusion_Func");
    TriggerAddEventTimePeriodic(gt_ResearchDiffusion, 30.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Research Completed
//--------------------------------------------------------------------------------------------------
bool gt_ResearchCompleted_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_bool;
    int lv_theCompletedResearc;
    int lv_plsNoCounting;
    int lv_zePlayer;

    // Automatic Variable Declarations
    playergroup auto0D1096D6_g;
    int auto0D1096D6_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_theCompletedResearc = gv_completedResearchQ;
    lv_zePlayer = gv_completedResearch;
    lv_plsNoCounting = 0;
    lv_plsNoCounting += 1;
    if ((lv_theCompletedResearc == lv_plsNoCounting)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_zePlayer, "AdministrativeHierarchyResearched", 1);
        DialogControlSetEnabled(gv_techTreeDialogItems[3][0], PlayerGroupSingle(lv_zePlayer), true);
        DialogControlSetEnabled(gv_techTreeDialogItems[2][0], PlayerGroupSingle(lv_zePlayer), true);
    }

    lv_plsNoCounting += 1;
    if ((lv_theCompletedResearc == lv_plsNoCounting)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_zePlayer, "UrbanPlanning", 1);
        DialogControlSetEnabled(gv_techTreeDialogItems[4][0], PlayerGroupSingle(lv_zePlayer), true);
    }

    lv_plsNoCounting += 1;
    if ((lv_theCompletedResearc == lv_plsNoCounting)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_zePlayer, "NationalHighway", 1);
        DialogControlSetEnabled(gv_techTreeDialogItems[5][0], PlayerGroupSingle(lv_zePlayer), true);
    }

    lv_plsNoCounting += 1;
    if ((lv_theCompletedResearc == lv_plsNoCounting)) {
        gv_centralization[lv_zePlayer] += 5;
        gv_centralizationUpgrade[lv_zePlayer] += 5;
        DialogControlSetEnabled(gv_techTreeDialogItems[13][0], PlayerGroupSingle(lv_zePlayer), true);
    }

    lv_plsNoCounting += 1;
    if ((lv_theCompletedResearc == lv_plsNoCounting)) {
        gv_taxUpgrade[lv_zePlayer] += 45;
        gv_creditIncomeModifier[lv_zePlayer] += 45;
        DialogControlSetEnabled(gv_techTreeDialogItems[6][0], PlayerGroupSingle(lv_zePlayer), true);
    }

    lv_plsNoCounting += 1;
    if ((lv_theCompletedResearc == lv_plsNoCounting)) {
        gv_centralization[lv_zePlayer] += 15;
        gv_centralizationUpgrade[lv_zePlayer] += 15;
    }

    lv_plsNoCounting += 1;
    if ((lv_theCompletedResearc == lv_plsNoCounting)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_zePlayer, "MassVaccine", 1);
        gv_popGrowth[lv_zePlayer] += 0.005;
        DialogControlSetEnabled(gv_techTreeDialogItems[8][0], PlayerGroupSingle(lv_zePlayer), true);
        DialogControlSetEnabled(gv_techTreeDialogItems[65][0], PlayerGroupSingle(lv_zePlayer), true);
    }

    lv_plsNoCounting += 1;
    if ((lv_theCompletedResearc == lv_plsNoCounting)) {
        gv_popGrowth[lv_zePlayer] += 0.02;
        DialogControlSetEnabled(gv_techTreeDialogItems[9][0], PlayerGroupSingle(lv_zePlayer), true);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_zePlayer, "GeneticallyModifiedHumans", 1);
    }

    lv_plsNoCounting += 1;
    if ((lv_theCompletedResearc == lv_plsNoCounting)) {
        gv_popGrowth[lv_zePlayer] += 0.01;
        DialogControlSetEnabled(gv_techTreeDialogItems[10][0], PlayerGroupSingle(lv_zePlayer), true);
        gv_electricityUpgrade[lv_zePlayer] -= 5;
        gv_electricityIncomeModifier[lv_zePlayer] -= 5;
    }

    lv_plsNoCounting += 1;
    if ((lv_theCompletedResearc == lv_plsNoCounting)) {
        gv_popGrowth[lv_zePlayer] += 0.1;
        gv_electricityUpgrade[lv_zePlayer] -= 35;
        gv_electricityIncomeModifier[lv_zePlayer] -= 35;
    }

    lv_plsNoCounting += 1;
    if ((lv_theCompletedResearc == lv_plsNoCounting)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_zePlayer, "OptionalConscription", 1);
        DialogControlSetEnabled(gv_techTreeDialogItems[12][0], PlayerGroupSingle(lv_zePlayer), true);
        gv_popGrowth[lv_zePlayer] -= 0.005;
    }

    lv_plsNoCounting += 1;
    if ((lv_theCompletedResearc == lv_plsNoCounting)) {
        gv_popGrowth[lv_zePlayer] -= 0.05;
        libNtve_gf_SetUpgradeLevelForPlayer(lv_zePlayer, "CompulsoryConscriptionRegistration", 1);
        DialogControlSetEnabled(gv_techTreeDialogItems[80][0], PlayerGroupSingle(lv_zePlayer), true);
    }

    lv_plsNoCounting += 1;
    if ((lv_theCompletedResearc == lv_plsNoCounting)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_zePlayer, "ResearchNationalUnions", 1);
    }

    lv_plsNoCounting += 1;
    if ((lv_theCompletedResearc == lv_plsNoCounting)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_zePlayer, "Nationalism", 1);
        DialogControlSetEnabled(gv_techTreeDialogItems[15][0], PlayerGroupSingle(lv_zePlayer), true);
    }

    lv_plsNoCounting += 1;
    if ((lv_theCompletedResearc == lv_plsNoCounting)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_zePlayer, "UnconditionalVictory", 1);
    }

    lv_plsNoCounting += 1;
    if ((lv_theCompletedResearc == lv_plsNoCounting)) {
        gv_foodUpgrade[lv_zePlayer] += 50;
        gv_foodIncomeModifier[lv_zePlayer] += 50;
        DialogControlSetEnabled(gv_techTreeDialogItems[17][0], PlayerGroupSingle(lv_zePlayer), true);
    }

    lv_plsNoCounting += 1;
    if ((lv_theCompletedResearc == lv_plsNoCounting)) {
        gv_foodUpgrade[lv_zePlayer] += 150;
        gv_foodIncomeModifier[lv_zePlayer] += 150;
        DialogControlSetEnabled(gv_techTreeDialogItems[18][0], PlayerGroupSingle(lv_zePlayer), true);
    }

    lv_plsNoCounting += 1;
    if ((lv_theCompletedResearc == lv_plsNoCounting)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_zePlayer, "ResearchArtificalFarming", 1);
    }

    lv_plsNoCounting += 1;
    if ((lv_theCompletedResearc == lv_plsNoCounting)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_zePlayer, "ResearchElectricity", 1);
        DialogControlSetEnabled(gv_techTreeDialogItems[20][0], PlayerGroupSingle(lv_zePlayer), true);
    }

    lv_plsNoCounting += 1;
    if ((lv_theCompletedResearc == lv_plsNoCounting)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_zePlayer, "ResearchAlternateElectricity", 1);
        DialogControlSetEnabled(gv_techTreeDialogItems[21][0], PlayerGroupSingle(lv_zePlayer), true);
        DialogControlSetEnabled(gv_techTreeDialogItems[18][0], PlayerGroupSingle(lv_zePlayer), true);
    }

    lv_plsNoCounting += 1;
    if ((lv_theCompletedResearc == lv_plsNoCounting)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_zePlayer, "NuclearFission", 1);
        DialogControlSetEnabled(gv_techTreeDialogItems[22][0], PlayerGroupSingle(lv_zePlayer), true);
        DialogControlSetEnabled(gv_techTreeDialogItems[23][0], PlayerGroupSingle(lv_zePlayer), true);
        DialogControlSetEnabled(gv_techTreeDialogItems[75][0], PlayerGroupSingle(lv_zePlayer), true);
    }

    lv_plsNoCounting += 1;
    if ((lv_theCompletedResearc == lv_plsNoCounting)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_zePlayer, "NuclearFusion", 1);
    }

    lv_plsNoCounting += 1;
    if ((lv_theCompletedResearc == lv_plsNoCounting)) {
        gv_foodUpgrade[lv_zePlayer] += 40;
        gv_foodIncomeModifier[lv_zePlayer] += 40;
        gv_oilIncomeModifier[lv_zePlayer] += 40;
        gv_metalUpgrade[lv_zePlayer] += 40;
        gv_metalIncomeModifier[lv_zePlayer] += 40;
    }

    lv_plsNoCounting += 1;
    if ((lv_theCompletedResearc == lv_plsNoCounting)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_zePlayer, "CoalGasification", 1);
        DialogControlSetEnabled(gv_techTreeDialogItems[25][0], PlayerGroupSingle(lv_zePlayer), true);
    }

    lv_plsNoCounting += 1;
    if ((lv_theCompletedResearc == lv_plsNoCounting)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_zePlayer, "ImprovedGasification", 1);
        DialogControlSetEnabled(gv_techTreeDialogItems[26][0], PlayerGroupSingle(lv_zePlayer), true);
    }

    lv_plsNoCounting += 1;
    if ((lv_theCompletedResearc == lv_plsNoCounting)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_zePlayer, "AdvancedGasification", 1);
    }

    lv_plsNoCounting += 1;
    if ((lv_theCompletedResearc == lv_plsNoCounting)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_zePlayer, "ResearchEconomicBailouts", 1);
        DialogControlSetEnabled(gv_techTreeDialogItems[28][0], PlayerGroupSingle(lv_zePlayer), true);
        DialogControlSetEnabled(gv_techTreeDialogItems[29][0], PlayerGroupSingle(lv_zePlayer), true);
    }

    lv_plsNoCounting += 1;
    if ((lv_theCompletedResearc == lv_plsNoCounting)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_zePlayer, "ResearchTradeRegulations", 1);
    }

    lv_plsNoCounting += 1;
    if ((lv_theCompletedResearc == lv_plsNoCounting)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_zePlayer, "ResearchDeficitManagement", 1);
    }

    lv_plsNoCounting += 1;
    if ((lv_theCompletedResearc == lv_plsNoCounting)) {
        DialogControlSetEnabled(gv_techTreeDialogItems[31][0], PlayerGroupSingle(lv_zePlayer), true);
    }

    lv_plsNoCounting += 1;
    if ((lv_theCompletedResearc == lv_plsNoCounting)) {
        lv_bool = false;
        auto0D1096D6_g = gv_users;
        auto0D1096D6_var = -1;
        while (true) {
            auto0D1096D6_var = PlayerGroupNextPlayer(auto0D1096D6_g, auto0D1096D6_var);
            if (auto0D1096D6_var < 0) { break; }
            if ((TechTreeUpgradeCount(auto0D1096D6_var, "FullyAutomatedEconomyProject", c_techCountCompleteOnly) == 1)) {
                lv_bool = true;
            }

        }
        if ((lv_bool == true)) {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextWithColor(((StringExternal("Param/Value/801BA5A9") + gf_NationOfPlayer(lv_zePlayer)) + StringExternal("Param/Value/387255CC")), Color(100.00, 0.00, 0.00)));
        }
        else {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextWithColor(((StringExternal("Param/Value/3560FDCB") + gf_NationOfPlayer(lv_zePlayer)) + StringExternal("Param/Value/22C09ACA")), Color(100.00, 0.00, 0.00)));
        }
        gv_foodUpgrade[lv_zePlayer] -= 200;
        gv_foodIncomeModifier[lv_zePlayer] -= 200;
        gv_creditIncomeModifier[lv_zePlayer] -= 270;
        gv_taxUpgrade[lv_zePlayer] -= 270;
        libNtve_gf_SetUpgradeLevelForPlayer(lv_zePlayer, "FullyAutomatedEconomyProject", 1);
        DialogControlSetEnabled(gv_techTreeDialogItems[32][0], PlayerGroupSingle(lv_zePlayer), true);
    }

    lv_plsNoCounting += 1;
    if ((lv_theCompletedResearc == lv_plsNoCounting)) {
        gv_foodUpgrade[lv_zePlayer] += 300;
        gv_foodIncomeModifier[lv_zePlayer] += 300;
        gv_creditIncomeModifier[lv_zePlayer] += 450;
        gv_taxUpgrade[lv_zePlayer] += 450;
        libNtve_gf_SetUpgradeLevelForPlayer(lv_zePlayer, "FullyAutomatedEconomyProject", 0);
    }

    lv_plsNoCounting += 1;
    lv_plsNoCounting += 1;
    if ((lv_theCompletedResearc == lv_plsNoCounting)) {
        TechTreeUpgradeAddLevel(lv_zePlayer, "InfantryDamageUP", 5);
        DialogControlSetEnabled(gv_techTreeDialogItems[35][0], PlayerGroupSingle(lv_zePlayer), true);
    }

    lv_plsNoCounting += 1;
    if ((lv_theCompletedResearc == lv_plsNoCounting)) {
        TechTreeUpgradeAddLevel(lv_zePlayer, "InfantryDamageUP", 5);
        DialogControlSetEnabled(gv_techTreeDialogItems[36][0], PlayerGroupSingle(lv_zePlayer), true);
    }

    lv_plsNoCounting += 1;
    if ((lv_theCompletedResearc == lv_plsNoCounting)) {
        TechTreeUpgradeAddLevel(lv_zePlayer, "InfantryDamageUP", 5);
        DialogControlSetEnabled(gv_techTreeDialogItems[37][0], PlayerGroupSingle(lv_zePlayer), true);
    }

    lv_plsNoCounting += 1;
    if ((lv_theCompletedResearc == lv_plsNoCounting)) {
        TechTreeUpgradeAddLevel(lv_zePlayer, "InfantryDamageUP", 5);
    }

    lv_plsNoCounting += 1;
    if ((lv_theCompletedResearc == lv_plsNoCounting)) {
        TechTreeUpgradeAddLevel(lv_zePlayer, "InfantryArmourUP", 3);
        DialogControlSetEnabled(gv_techTreeDialogItems[39][0], PlayerGroupSingle(lv_zePlayer), true);
    }

    lv_plsNoCounting += 1;
    if ((lv_theCompletedResearc == lv_plsNoCounting)) {
        TechTreeUpgradeAddLevel(lv_zePlayer, "InfantryArmourUP", 5);
        DialogControlSetEnabled(gv_techTreeDialogItems[40][0], PlayerGroupSingle(lv_zePlayer), true);
        DialogControlSetEnabled(gv_techTreeDialogItems[42][0], PlayerGroupSingle(lv_zePlayer), true);
    }

    lv_plsNoCounting += 1;
    if ((lv_theCompletedResearc == lv_plsNoCounting)) {
        TechTreeUpgradeAddLevel(lv_zePlayer, "PowerArmour", 1);
        DialogControlSetEnabled(gv_techTreeDialogItems[41][0], PlayerGroupSingle(lv_zePlayer), true);
    }

    lv_plsNoCounting += 1;
    if ((lv_theCompletedResearc == lv_plsNoCounting)) {
        TechTreeUpgradeAddLevel(lv_zePlayer, "AdvancedPowerArmour", 1);
    }

    lv_plsNoCounting += 1;
    if ((lv_theCompletedResearc == lv_plsNoCounting)) {
        TechTreeUpgradeAddLevel(lv_zePlayer, "InfantryArmourUP", 5);
        DialogControlSetEnabled(gv_techTreeDialogItems[43][0], PlayerGroupSingle(lv_zePlayer), true);
    }

    lv_plsNoCounting += 1;
    if ((lv_theCompletedResearc == lv_plsNoCounting)) {
        TechTreeUpgradeAddLevel(lv_zePlayer, "InfantryArmourUP", 5);
    }

    lv_plsNoCounting += 1;
    if ((lv_theCompletedResearc == lv_plsNoCounting)) {
        TechTreeUpgradeAddLevel(lv_zePlayer, "BasicEngine", 1);
        DialogControlSetEnabled(gv_techTreeDialogItems[45][0], PlayerGroupSingle(lv_zePlayer), true);
        DialogControlSetEnabled(gv_techTreeDialogItems[48][0], PlayerGroupSingle(lv_zePlayer), true);
    }

    lv_plsNoCounting += 1;
    if ((lv_theCompletedResearc == lv_plsNoCounting)) {
        TechTreeUpgradeAddLevel(lv_zePlayer, "HeavyTanks", 1);
        DialogControlSetEnabled(gv_techTreeDialogItems[46][0], PlayerGroupSingle(lv_zePlayer), true);
    }

    lv_plsNoCounting += 1;
    if ((lv_theCompletedResearc == lv_plsNoCounting)) {
        DialogControlSetEnabled(gv_techTreeDialogItems[47][0], PlayerGroupSingle(lv_zePlayer), true);
        TechTreeUpgradeAddLevel(lv_zePlayer, "FuturisticEngine", 1);
        TechTreeUpgradeAddLevel(lv_zePlayer, "VehicleSpeedUP", 1);
    }

    lv_plsNoCounting += 1;
    if ((lv_theCompletedResearc == lv_plsNoCounting)) {
        TechTreeUpgradeAddLevel(lv_zePlayer, "ModernVehicles", 1);
    }

    lv_plsNoCounting += 1;
    if ((lv_theCompletedResearc == lv_plsNoCounting)) {
        TechTreeUpgradeAddLevel(lv_zePlayer, "BasicAircraft", 1);
        DialogControlSetEnabled(gv_techTreeDialogItems[49][0], PlayerGroupSingle(lv_zePlayer), true);
    }

    lv_plsNoCounting += 1;
    if ((lv_theCompletedResearc == lv_plsNoCounting)) {
        TechTreeUpgradeAddLevel(lv_zePlayer, "AdvancedAircraft", 1);
        DialogControlSetEnabled(gv_techTreeDialogItems[50][0], PlayerGroupSingle(lv_zePlayer), true);
        DialogControlSetEnabled(gv_techTreeDialogItems[59][0], PlayerGroupSingle(lv_zePlayer), true);
    }

    lv_plsNoCounting += 1;
    if ((lv_theCompletedResearc == lv_plsNoCounting)) {
        TechTreeUpgradeAddLevel(lv_zePlayer, "TheA110Project", 1);
    }

    lv_plsNoCounting += 1;
    if ((lv_theCompletedResearc == lv_plsNoCounting)) {
        TechTreeUpgradeAddLevel(lv_zePlayer, "LaserConcept", 1);
        DialogControlSetEnabled(gv_techTreeDialogItems[52][0], PlayerGroupSingle(lv_zePlayer), true);
    }

    lv_plsNoCounting += 1;
    if ((lv_theCompletedResearc == lv_plsNoCounting)) {
        TechTreeUpgradeAddLevel(lv_zePlayer, "FocusedLaser", 1);
        DialogControlSetEnabled(gv_techTreeDialogItems[53][0], PlayerGroupSingle(lv_zePlayer), true);
    }

    lv_plsNoCounting += 1;
    if ((lv_theCompletedResearc == lv_plsNoCounting)) {
        TechTreeUpgradeAddLevel(lv_zePlayer, "FocusedKinetics", 1);
        DialogControlSetEnabled(gv_techTreeDialogItems[54][0], PlayerGroupSingle(lv_zePlayer), true);
    }

    lv_plsNoCounting += 1;
    if ((lv_theCompletedResearc == lv_plsNoCounting)) {
        TechTreeUpgradeAddLevel(lv_zePlayer, "AdvancedKinetics", 1);
        TechTreeUpgradeAddLevel(lv_zePlayer, "VehicleDamageUP", 5);
    }

    lv_plsNoCounting += 1;
    if ((lv_theCompletedResearc == lv_plsNoCounting)) {
        TechTreeUpgradeAddLevel(lv_zePlayer, "Plascrete", 1);
        DialogControlSetEnabled(gv_techTreeDialogItems[56][0], PlayerGroupSingle(lv_zePlayer), true);
    }

    lv_plsNoCounting += 1;
    if ((lv_theCompletedResearc == lv_plsNoCounting)) {
        TechTreeUpgradeAddLevel(lv_zePlayer, "NanorepairTechnology", 1);
        DialogControlSetEnabled(gv_techTreeDialogItems[57][0], PlayerGroupSingle(lv_zePlayer), true);
    }

    lv_plsNoCounting += 1;
    if ((lv_theCompletedResearc == lv_plsNoCounting)) {
        TechTreeUpgradeAddLevel(lv_zePlayer, "ReinforcedFortifications", 1);
        DialogControlSetEnabled(gv_techTreeDialogItems[58][0], PlayerGroupSingle(lv_zePlayer), true);
    }

    lv_plsNoCounting += 1;
    if ((lv_theCompletedResearc == lv_plsNoCounting)) {
        TechTreeUpgradeAddLevel(lv_zePlayer, "TheWallProject", 1);
    }

    lv_plsNoCounting += 1;
    if ((lv_theCompletedResearc == lv_plsNoCounting)) {
        TechTreeUpgradeAddLevel(lv_zePlayer, "MissileTechnology", 1);
        DialogControlSetEnabled(gv_techTreeDialogItems[60][0], PlayerGroupSingle(lv_zePlayer), true);
        DialogControlSetEnabled(gv_techTreeDialogItems[63][0], PlayerGroupSingle(lv_zePlayer), true);
    }

    lv_plsNoCounting += 1;
    if ((lv_theCompletedResearc == lv_plsNoCounting)) {
        TechTreeUpgradeAddLevel(lv_zePlayer, "NuclearTippedPayloads", 1);
        DialogControlSetEnabled(gv_techTreeDialogItems[61][0], PlayerGroupSingle(lv_zePlayer), true);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextWithColor(((StringExternal("Param/Value/3F56E874") + gf_NationOfPlayer(lv_zePlayer)) + StringExternal("Param/Value/0763F22D")), Color(100.00, 0.00, 0.00)));
    }

    lv_plsNoCounting += 1;
    if ((lv_theCompletedResearc == lv_plsNoCounting)) {
        TechTreeUpgradeAddLevel(lv_zePlayer, "HydrogenBasedMissiles", 1);
        DialogControlSetEnabled(gv_techTreeDialogItems[62][0], PlayerGroupSingle(lv_zePlayer), true);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextWithColor(((StringExternal("Param/Value/AC77CD23") + gf_NationOfPlayer(lv_zePlayer)) + StringExternal("Param/Value/D311D564")), Color(100.00, 0.00, 0.00)));
    }

    lv_plsNoCounting += 1;
    if ((lv_theCompletedResearc == lv_plsNoCounting)) {
        TechTreeUpgradeAddLevel(lv_zePlayer, "HalcyonBasedMissiles", 1);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextWithColor(((StringExternal("Param/Value/56772069") + gf_NationOfPlayer(lv_zePlayer)) + StringExternal("Param/Value/3638F4D3")), Color(100.00, 0.00, 0.00)));
    }

    lv_plsNoCounting += 1;
    if ((lv_theCompletedResearc == lv_plsNoCounting)) {
        TechTreeUpgradeAddLevel(lv_zePlayer, "HighVelocityMissiles", 1);
        DialogControlSetEnabled(gv_techTreeDialogItems[64][0], PlayerGroupSingle(lv_zePlayer), true);
    }

    lv_plsNoCounting += 1;
    if ((lv_theCompletedResearc == lv_plsNoCounting)) {
        TechTreeUpgradeAddLevel(lv_zePlayer, "LaserInterception", 1);
        DialogControlSetEnabled(gv_techTreeDialogItems[74][0], PlayerGroupSingle(lv_zePlayer), true);
    }

    lv_plsNoCounting += 1;
    if ((lv_theCompletedResearc == lv_plsNoCounting)) {
        TechTreeUpgradeAddLevel(lv_zePlayer, "BiologicalResearch", 1);
        DialogControlSetEnabled(gv_techTreeDialogItems[66][0], PlayerGroupSingle(lv_zePlayer), true);
        DialogControlSetEnabled(gv_techTreeDialogItems[69][0], PlayerGroupSingle(lv_zePlayer), true);
    }

    lv_plsNoCounting += 1;
    if ((lv_theCompletedResearc == lv_plsNoCounting)) {
        TechTreeUpgradeAddLevel(lv_zePlayer, "ZombieConcept", 1);
        DialogControlSetEnabled(gv_techTreeDialogItems[67][0], PlayerGroupSingle(lv_zePlayer), true);
    }

    lv_plsNoCounting += 1;
    if ((lv_theCompletedResearc == lv_plsNoCounting)) {
        TechTreeUpgradeAddLevel(lv_zePlayer, "AutonomousZombies", 1);
        DialogControlSetEnabled(gv_techTreeDialogItems[68][0], PlayerGroupSingle(lv_zePlayer), true);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextWithColor(((StringExternal("Param/Value/A2D11B73") + gf_NationOfPlayer(lv_zePlayer)) + StringExternal("Param/Value/699523D4")), Color(100.00, 0.00, 0.00)));
    }

    lv_plsNoCounting += 1;
    if ((lv_theCompletedResearc == lv_plsNoCounting)) {
        TechTreeUpgradeAddLevel(lv_zePlayer, "OmegaZombies", 1);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextWithColor(((StringExternal("Param/Value/20835BA5") + gf_NationOfPlayer(lv_zePlayer)) + StringExternal("Param/Value/B843AFC6")), Color(100.00, 0.00, 0.00)));
    }

    lv_plsNoCounting += 1;
    if ((lv_theCompletedResearc == lv_plsNoCounting)) {
        TechTreeUpgradeAddLevel(lv_zePlayer, "WeaponizedDiseases", 1);
        DialogControlSetEnabled(gv_techTreeDialogItems[70][0], PlayerGroupSingle(lv_zePlayer), true);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextWithColor(((StringExternal("Param/Value/A199DDED") + gf_NationOfPlayer(lv_zePlayer)) + StringExternal("Param/Value/56DF1247")), Color(100.00, 0.00, 0.00)));
    }

    lv_plsNoCounting += 1;
    if ((lv_theCompletedResearc == lv_plsNoCounting)) {
        TechTreeUpgradeAddLevel(lv_zePlayer, "ModifiedDiseases", 1);
        DialogControlSetEnabled(gv_techTreeDialogItems[71][0], PlayerGroupSingle(lv_zePlayer), true);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextWithColor(((StringExternal("Param/Value/D70FAE11") + gf_NationOfPlayer(lv_zePlayer)) + StringExternal("Param/Value/C9924ED9")), Color(100.00, 0.00, 0.00)));
    }

    lv_plsNoCounting += 1;
    if ((lv_theCompletedResearc == lv_plsNoCounting)) {
        TechTreeUpgradeAddLevel(lv_zePlayer, "TheWorldeaterProject", 1);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextWithColor(((StringExternal("Param/Value/F0962B53") + gf_NationOfPlayer(lv_zePlayer)) + StringExternal("Param/Value/AFB8CF2E")), Color(100.00, 0.00, 0.00)));
    }

    lv_plsNoCounting += 1;
    if ((lv_theCompletedResearc == lv_plsNoCounting)) {
        TechTreeUpgradeAddLevel(lv_zePlayer, "AdvancedRadarStation", 1);
        DialogControlSetEnabled(gv_techTreeDialogItems[73][0], PlayerGroupSingle(lv_zePlayer), true);
    }

    lv_plsNoCounting += 1;
    if ((lv_theCompletedResearc == lv_plsNoCounting)) {
        TechTreeUpgradeAddLevel(lv_zePlayer, "AdvancedRadarRefraction", 1);
    }

    lv_plsNoCounting += 1;
    if ((lv_theCompletedResearc == lv_plsNoCounting)) {
        TechTreeUpgradeAddLevel(lv_zePlayer, "ShieldGeneration", 1);
    }

    lv_plsNoCounting += 1;
    if ((lv_theCompletedResearc == lv_plsNoCounting)) {
        TechTreeUpgradeAddLevel(lv_zePlayer, "ElectricTanks", 1);
        DialogControlSetEnabled(gv_techTreeDialogItems[76][0], PlayerGroupSingle(lv_zePlayer), true);
        DialogControlSetEnabled(gv_techTreeDialogItems[79][0], PlayerGroupSingle(lv_zePlayer), true);
    }

    lv_plsNoCounting += 1;
    if ((lv_theCompletedResearc == lv_plsNoCounting)) {
        TechTreeUpgradeAddLevel(lv_zePlayer, "AITargetingSystems", 1);
        DialogControlSetEnabled(gv_techTreeDialogItems[77][0], PlayerGroupSingle(lv_zePlayer), true);
    }

    lv_plsNoCounting += 1;
    if ((lv_theCompletedResearc == lv_plsNoCounting)) {
        TechTreeUpgradeAddLevel(lv_zePlayer, "PredictiveAISystems", 1);
        DialogControlSetEnabled(gv_techTreeDialogItems[78][0], PlayerGroupSingle(lv_zePlayer), true);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextWithColor(((StringExternal("Param/Value/97D401F4") + gf_NationOfPlayer(lv_zePlayer)) + StringExternal("Param/Value/4AD218A6")), Color(100.00, 0.00, 0.00)));
    }

    lv_plsNoCounting += 1;
    if ((lv_theCompletedResearc == lv_plsNoCounting)) {
        TechTreeUpgradeAddLevel(lv_zePlayer, "CollaborativeAINetwork", 1);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextWithColor(((StringExternal("Param/Value/34867FBF") + gf_NationOfPlayer(lv_zePlayer)) + StringExternal("Param/Value/E3AB89F2")), Color(100.00, 0.00, 0.00)));
    }

    lv_plsNoCounting += 1;
    if ((lv_theCompletedResearc == lv_plsNoCounting)) {
        TechTreeUpgradeAddLevel(lv_zePlayer, "SelfPoweredTanks", 1);
    }

    lv_plsNoCounting += 1;
    if ((lv_theCompletedResearc == lv_plsNoCounting)) {
        TechTreeUpgradeAddLevel(lv_zePlayer, "ExtensiveReservesTraining", 1);
    }

    lv_plsNoCounting += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ResearchCompleted_Init () {
    gt_ResearchCompleted = TriggerCreate("gt_ResearchCompleted_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Do The Research
//--------------------------------------------------------------------------------------------------
bool gt_DoTheResearch_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_pickedResearch;
    int lv_maxResearchPerTick;
    int lv_spentResearch;
    int lv_totalSpent;
    int lv_researchFocusedOn;
    int lv_researchVariable;
    int lv_researchVariableCost;

    // Automatic Variable Declarations
    playergroup auto2D059123_g;
    int auto2D059123_var;
    int auto3D7D895B_ae;
    const int auto3D7D895B_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto2D059123_g = gv_users;
    auto2D059123_var = -1;
    while (true) {
        auto2D059123_var = PlayerGroupNextPlayer(auto2D059123_g, auto2D059123_var);
        if (auto2D059123_var < 0) { break; }
        gv_researchQRate[auto2D059123_var][0] = 0;
        gv_researchQRate[auto2D059123_var][1] = 0;
        if ((gv_researchQ[auto2D059123_var][1] > 0) && (gv_researchQ[auto2D059123_var][0] < 1)) {
            gv_researchQ[auto2D059123_var][0] = gv_researchQ[auto2D059123_var][1];
            gv_researchQ[auto2D059123_var][1] = 0;
        }

        if ((gv_researchInvested[auto2D059123_var][gv_researchQ[auto2D059123_var][0]] >= gv_researchCost[gv_researchQ[auto2D059123_var][0]]) && (gv_researchQ[auto2D059123_var][0] > 0)) {
            gv_researchQ[auto2D059123_var][0] = 0;
        }

        if ((gv_researchInvested[auto2D059123_var][gv_researchQ[auto2D059123_var][1]] >= gv_researchCost[gv_researchQ[auto2D059123_var][1]]) && (gv_researchQ[auto2D059123_var][1] > 0)) {
            gv_researchQ[auto2D059123_var][1] = 0;
        }

        lv_totalSpent = PlayerGetPropertyInt(auto2D059123_var, c_playerPropCustom);
        if ((gv_researchQ[auto2D059123_var][0] > 0)) {
            lv_maxResearchPerTick = (gv_researchCost[gv_researchQ[auto2D059123_var][0]] / gv_researchTime[gv_researchQ[auto2D059123_var][0]]);
            lv_maxResearchPerTick = (lv_maxResearchPerTick * gv_researchSpeed[auto2D059123_var]);
            lv_maxResearchPerTick = (lv_maxResearchPerTick / 100);
            if ((PlayerGetPropertyInt(auto2D059123_var, c_playerPropCustom) < lv_maxResearchPerTick)) {
                gv_researchInvested[auto2D059123_var][gv_researchQ[auto2D059123_var][0]] += PlayerGetPropertyInt(auto2D059123_var, c_playerPropCustom);
                PlayerModifyPropertyInt(auto2D059123_var, c_playerPropCustom, c_playerPropOperSetTo, 0);
            }
            else {
                gv_researchInvested[auto2D059123_var][gv_researchQ[auto2D059123_var][0]] += lv_maxResearchPerTick;
                PlayerModifyPropertyInt(auto2D059123_var, c_playerPropCustom, c_playerPropOperSubtract, lv_maxResearchPerTick);
            }
        }

        if ((gv_researchQ[auto2D059123_var][1] > 0)) {
            lv_maxResearchPerTick = (gv_researchCost[gv_researchQ[auto2D059123_var][1]] / gv_researchTime[gv_researchQ[auto2D059123_var][1]]);
            lv_maxResearchPerTick = (lv_maxResearchPerTick * gv_researchSpeed[auto2D059123_var]);
            lv_maxResearchPerTick = (lv_maxResearchPerTick / 100);
            if ((PlayerGetPropertyInt(auto2D059123_var, c_playerPropCustom) < lv_maxResearchPerTick)) {
                gv_researchInvested[auto2D059123_var][gv_researchQ[auto2D059123_var][1]] += PlayerGetPropertyInt(auto2D059123_var, c_playerPropCustom);
                PlayerModifyPropertyInt(auto2D059123_var, c_playerPropCustom, c_playerPropOperSetTo, 0);
            }
            else {
                gv_researchInvested[auto2D059123_var][gv_researchQ[auto2D059123_var][1]] += lv_maxResearchPerTick;
                PlayerModifyPropertyInt(auto2D059123_var, c_playerPropCustom, c_playerPropOperSubtract, lv_maxResearchPerTick);
            }
        }

        lv_totalSpent = (lv_totalSpent - PlayerGetPropertyInt(auto2D059123_var, c_playerPropCustom));
        libNtve_gf_SetDialogItemText(gv_researchFundingDialogItems[6], IntToText(lv_totalSpent), PlayerGroupSingle(auto2D059123_var));
        libNtve_gf_SetDialogItemText(gv_researchFundingDialogItems[7], IntToText((gv_grossResearchGlobal[auto2D059123_var] - lv_totalSpent)), PlayerGroupSingle(auto2D059123_var));
        auto3D7D895B_ae = gv_researchesAvailable;
        lv_pickedResearch = 1;
        for ( ; ( (auto3D7D895B_ai >= 0 && lv_pickedResearch <= auto3D7D895B_ae) || (auto3D7D895B_ai < 0 && lv_pickedResearch >= auto3D7D895B_ae) ) ; lv_pickedResearch += auto3D7D895B_ai ) {
            if ((gv_isThisResearchCompleted[auto2D059123_var][lv_pickedResearch] == false) && (gv_researchInvested[auto2D059123_var][lv_pickedResearch] >= gv_researchCost[lv_pickedResearch])) {
                gv_researchInvested[auto2D059123_var][lv_pickedResearch] = gv_researchCost[lv_pickedResearch];
                libNtve_gf_SetDialogItemImage(gv_techTreeDialogItems[lv_pickedResearch][1], "Assets\\Declare War, Neutral, Peace\\GreenBox.tga", PlayerGroupSingle(auto2D059123_var));
                DialogControlSetEnabled(gv_techTreeDialogItems[lv_pickedResearch][0], PlayerGroupSingle(auto2D059123_var), false);
                if ((StringLength(gv_researchName[lv_pickedResearch]) < 1)) {
                    UIDisplayMessage(PlayerGroupSingle(auto2D059123_var), c_messageAreaSubtitle, TextWithColor((StringExternal("Param/Value/47ECA7BF") + StringExternal("Param/Value/5F4AAE6E")), Color(50.20, 0.00, 50.20)));
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(auto2D059123_var), c_messageAreaSubtitle, TextWithColor((StringExternal("Param/Value/A00BD1DA") + StringToText(gv_researchName[lv_pickedResearch])), Color(50.20, 0.00, 50.20)));
                }
                SoundPlayForPlayer(SoundLink("Alert_TerranResearchComplete", 0), c_maxPlayers, PlayerGroupSingle(auto2D059123_var), 100.0, 0.0);
                DialogControlFadeTransparency(gv_techTreeDialogItems[lv_pickedResearch][0], PlayerGroupSingle(auto2D059123_var), 0.5, 0.0);
                gv_completedResearch = auto2D059123_var;
                gv_completedResearchQ = lv_pickedResearch;
                TriggerExecute(gt_ResearchCompleted, true, true);
                Wait(0.01, c_timeGame);
                gv_isThisResearchCompleted[auto2D059123_var][lv_pickedResearch] = true;
            }
            else {
                if ((gv_halfResearched[auto2D059123_var][lv_pickedResearch] == false) && (gv_researchInvested[auto2D059123_var][lv_pickedResearch] >= (gv_researchCost[lv_pickedResearch] / 2)) && (gv_researchInvested[auto2D059123_var][lv_pickedResearch] < gv_researchCost[lv_pickedResearch])) {
                    gv_halfResearched[auto2D059123_var][lv_pickedResearch] = true;
                    if ((lv_pickedResearch == 31)) {
                        UIDisplayMessage(PlayerGroupSingle(auto2D059123_var), c_messageAreaSubtitle, (gf_NationOfPlayer(auto2D059123_var) + (StringExternal("Param/Value/659DFC3E") + StringToText(""))));
                    }
                    else {
                        if ((lv_pickedResearch == 60)) {
                            UIDisplayMessage(PlayerGroupSingle(auto2D059123_var), c_messageAreaSubtitle, (StringExternal("Param/Value/DD71B03B") + (gf_NationOfPlayer(auto2D059123_var) + TextWithColor(StringExternal("Param/Value/CDA1C3D7"), Color(100.00, 0.00, 0.00)))));
                        }
                        else {
                            if ((lv_pickedResearch == 61)) {
                                UIDisplayMessage(PlayerGroupSingle(auto2D059123_var), c_messageAreaSubtitle, (StringExternal("Param/Value/0C90DA8C") + (gf_NationOfPlayer(auto2D059123_var) + TextWithColor(StringExternal("Param/Value/C1E15CE9"), Color(100.00, 0.00, 0.00)))));
                            }
                            else {
                                if ((lv_pickedResearch == 62)) {
                                    UIDisplayMessage(PlayerGroupSingle(auto2D059123_var), c_messageAreaSubtitle, (StringExternal("Param/Value/ACA98398") + (gf_NationOfPlayer(auto2D059123_var) + TextWithColor(StringExternal("Param/Value/2EB78BF2"), Color(100.00, 0.00, 0.00)))));
                                }
                                else {
                                    if ((lv_pickedResearch == 67)) {
                                        UIDisplayMessage(PlayerGroupSingle(auto2D059123_var), c_messageAreaSubtitle, (StringExternal("Param/Value/3729755E") + (gf_NationOfPlayer(auto2D059123_var) + TextWithColor(StringExternal("Param/Value/9756852C"), Color(100.00, 0.00, 0.00)))));
                                    }
                                    else {
                                        if ((lv_pickedResearch == 68)) {
                                            UIDisplayMessage(PlayerGroupSingle(auto2D059123_var), c_messageAreaSubtitle, (StringExternal("Param/Value/5DAD2D46") + (gf_NationOfPlayer(auto2D059123_var) + TextWithColor(StringExternal("Param/Value/8E8652E2"), Color(100.00, 0.00, 0.00)))));
                                        }
                                        else {
                                            if ((lv_pickedResearch == 69)) {
                                                UIDisplayMessage(PlayerGroupSingle(auto2D059123_var), c_messageAreaSubtitle, (StringExternal("Param/Value/AB31C2A7") + (gf_NationOfPlayer(auto2D059123_var) + TextWithColor(StringExternal("Param/Value/D08A8F41"), Color(100.00, 0.00, 0.00)))));
                                            }
                                            else {
                                                if ((lv_pickedResearch == 70)) {
                                                    UIDisplayMessage(PlayerGroupSingle(auto2D059123_var), c_messageAreaSubtitle, (StringExternal("Param/Value/EB0EBF18") + (gf_NationOfPlayer(auto2D059123_var) + TextWithColor(StringExternal("Param/Value/BDD4E489"), Color(100.00, 0.00, 0.00)))));
                                                }
                                                else {
                                                    if ((lv_pickedResearch == 71)) {
                                                        UIDisplayMessage(PlayerGroupSingle(auto2D059123_var), c_messageAreaSubtitle, (StringExternal("Param/Value/7E587F2F") + (gf_NationOfPlayer(auto2D059123_var) + TextWithColor(StringExternal("Param/Value/AAA043FC"), Color(100.00, 0.00, 0.00)))));
                                                    }
                                                    else {
                                                        if ((lv_pickedResearch == 77)) {
                                                            UIDisplayMessage(PlayerGroupSingle(auto2D059123_var), c_messageAreaSubtitle, (StringExternal("Param/Value/0186A43F") + (gf_NationOfPlayer(auto2D059123_var) + TextWithColor(StringExternal("Param/Value/5BFF14AE"), Color(100.00, 0.00, 0.00)))));
                                                        }
                                                        else {
                                                            if ((lv_pickedResearch == 78)) {
                                                                UIDisplayMessage(PlayerGroupSingle(auto2D059123_var), c_messageAreaSubtitle, (StringExternal("Param/Value/2285331F") + (gf_NationOfPlayer(auto2D059123_var) + TextWithColor(StringExternal("Param/Value/370B88A1"), Color(100.00, 0.00, 0.00)))));
                                                            }

                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DoTheResearch_Init () {
    gt_DoTheResearch = TriggerCreate("gt_DoTheResearch_Func");
    TriggerAddEventTimePeriodic(gt_DoTheResearch, 10.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Research Calculation
//--------------------------------------------------------------------------------------------------
bool gt_ResearchCalculation_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed[10] lv_baseResearch;
    int[10] lv_grossResearch;
    int[10] lv_researchExpenses;

    // Automatic Variable Declarations
    playergroup autoFE4EF159_g;
    int autoFE4EF159_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(2.0, c_timeGame);
    autoFE4EF159_g = gv_users;
    autoFE4EF159_var = -1;
    while (true) {
        autoFE4EF159_var = PlayerGroupNextPlayer(autoFE4EF159_g, autoFE4EF159_var);
        if (autoFE4EF159_var < 0) { break; }
        libNtve_gf_SetDialogItemText(gv_researchFundingDialogItems[2], IntToText(gv_commitedResearchMonthly[autoFE4EF159_var]), PlayerGroupSingle(autoFE4EF159_var));
        lv_baseResearch[autoFE4EF159_var] = FixedToInt(Pow(IntToFixed(gv_commitedResearchMonthly[autoFE4EF159_var]), 0.63));
        libNtve_gf_SetDialogItemText(gv_researchFundingDialogItems[3], FixedToText(lv_baseResearch[autoFE4EF159_var], c_fixedPrecisionAny), PlayerGroupSingle(autoFE4EF159_var));
        libNtve_gf_SetDialogItemText(gv_researchFundingDialogItems[4], FixedToText(gv_researchSpeed[autoFE4EF159_var], c_fixedPrecisionAny), PlayerGroupSingle(autoFE4EF159_var));
        lv_grossResearch[autoFE4EF159_var] = (gv_techIncomeModifier[autoFE4EF159_var] * FixedToInt(lv_baseResearch[autoFE4EF159_var]));
        lv_grossResearch[autoFE4EF159_var] = (lv_grossResearch[autoFE4EF159_var] / 100);
        gv_grossResearchGlobal[autoFE4EF159_var] = (lv_grossResearch[autoFE4EF159_var] * 1);
        PlayerModifyPropertyInt(autoFE4EF159_var, c_playerPropCustom, c_playerPropOperAdd, lv_grossResearch[autoFE4EF159_var]);
        libNtve_gf_SetDialogItemText(gv_researchFundingDialogItems[5], FixedToText(lv_grossResearch[autoFE4EF159_var], c_fixedPrecisionAny), PlayerGroupSingle(autoFE4EF159_var));
        gv_netResearch[autoFE4EF159_var] = (lv_grossResearch[autoFE4EF159_var] - lv_researchExpenses[autoFE4EF159_var]);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ResearchCalculation_Init () {
    gt_ResearchCalculation = TriggerCreate("gt_ResearchCalculation_Func");
    TriggerAddEventTimePeriodic(gt_ResearchCalculation, 10.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Research Menu Frame
//--------------------------------------------------------------------------------------------------
bool gt_ResearchMenuFrame_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_noEnableForYou;

    // Automatic Variable Declarations
    const int autoC15CCC75_n = 80;
    int autoC15CCC75_i;

    // Variable Initialization
    lv_noEnableForYou = 1;

    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(300, 220, c_anchorTopLeft, 1070, 60, true);
    gv_current = DialogLastCreated();
    DialogSetImage(DialogLastCreated(), "Assets\\Textures\\ui_scrollbar_frame.dds");
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 60, c_anchorTopLeft, 45, 15, StringExternal("Param/Value/86524071"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 150, 50, c_anchorTopLeft, 20, 50, StringToText(""), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_currentDialogItems[0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 60, 50, c_anchorTopLeft, 25, 75, StringExternal("Param/Value/55A863A8"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Void_RegularSmall", PlayerGroupAll());
    gv_currentDialogItems[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 150, 50, c_anchorTopLeft, 20, 140, StringToText(""), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_currentDialogItems[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 60, 50, c_anchorTopLeft, 25, 165, StringExternal("Param/Value/63D0F3D0"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Void_RegularSmall", PlayerGroupAll());
    gv_currentDialogItems[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 25, 25, c_anchorTopLeft, 200, 50, StringToText(""), "Diplomatic Policies\\Xmarksthespot.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 25, 25, c_anchorTopLeft, 200, 50, StringExternal("Param/Value/06EC98E4"), StringToText(""), "");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_scrollbar_frame.dds", PlayerGroupAll());
    gv_currentDialogItems[4] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 25, 25, c_anchorTopLeft, 200, 140, StringToText(""), "Diplomatic Policies\\Xmarksthespot.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 25, 25, c_anchorTopLeft, 200, 140, StringExternal("Param/Value/DCF1F8A3"), StringToText(""), "");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_scrollbar_frame.dds", PlayerGroupAll());
    gv_currentDialogItems[5] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 25, 25, c_anchorTopLeft, 200, 170, StringToText(""), "Diplomatic Policies\\UpArrow.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 25, 25, c_anchorTopLeft, 200, 170, StringExternal("Param/Value/9A82A4A4"), StringToText(""), "");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_scrollbar_frame.dds", PlayerGroupAll());
    gv_currentDialogItems[6] = DialogControlLastCreated();
    DialogCreate(940, 110, c_anchorTopLeft, 150, 550, true);
    gv_researchMenuSelected = DialogLastCreated();
    gv_researchMenuSelectedDialogItems[0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 600, 20, c_anchorTopLeft, 75, 75, StringToText(""), "Assets\\Declare War, Neutral, Peace\\GreyBox.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 1, 20, c_anchorTopLeft, 75, 75, StringToText(""), "Assets\\Declare War, Neutral, Peace\\GreenBox.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_researchMenuSelectedDialogItems[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, 20, 75, StringExternal("Param/Value/DD7A85B4"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_researchMenuSelectedDialogItems[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 400, 50, c_anchorTopLeft, 25, 15, StringExternal("Param/Value/4452C0A3"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Void_RegularExtendedMedium1", PlayerGroupAll());
    gv_researchMenuSelectedDialogItems[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, 680, 75, StringExternal("Param/Value/5EFCE751"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, 840, 75, StringExternal("Param/Value/42926A34"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_researchMenuSelectedDialogItems[4] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, 680, 50, StringExternal("Param/Value/AE345BC4"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, 840, 50, StringExternal("Param/Value/BF07305E"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_researchMenuSelectedDialogItems[5] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 240, 40, c_anchorTopLeft, 680, 10, StringExternal("Param/Value/D43587C9"), StringExternal("Param/Value/00B462EA"), "");
    gv_researchMenuSelectedDialogItems[6] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 1, 20, c_anchorTopLeft, 75, 75, StringToText(""), "Diplomatic Policies\\Progress Bar\\BlueBox.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_researchMenuSelectedDialogItems[7] = DialogControlLastCreated();
    DialogSetImage(gv_researchMenuSelected, "Assets\\Textures\\ui_scrollbar_frame.dds");
    DialogCreate(160, 510, c_anchorTopLeft, 150, 60, true);
    gv_researchMenuFrame = DialogLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 150, 60, c_anchorTopLeft, 5, 5, StringToText(""), StringExternal("Param/Value/B97671F0"), "");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_scrollbar_frame.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    gv_researchMenuFrameDialogItems[0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 150, 60, c_anchorTopLeft, 5, 65, StringToText(""), StringExternal("Param/Value/7CBE4C4C"), "");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_scrollbar_frame.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    gv_researchMenuFrameDialogItems[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 150, 60, c_anchorTopLeft, 5, 125, StringToText(""), StringExternal("Param/Value/71C97CED"), "");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_scrollbar_frame.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    gv_researchMenuFrameDialogItems[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 150, 60, c_anchorTopLeft, 5, 185, StringToText(""), StringExternal("Param/Value/C66F8ECE"), "");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_scrollbar_frame.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    gv_researchMenuFrameDialogItems[3] = DialogControlLastCreated();
    DialogSetImage(gv_researchMenuFrame, "Assets\\Textures\\ui_scrollbar_frame.dds");
    DialogCreate(800, 510, c_anchorTopLeft, 290, 60, true);
    gv_governmentTechTree = DialogLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 60, 60, c_anchorTopLeft, 20, 50, StringExternal("Param/Value/1F5EBBDF"), StringToText(""), "");
    gv_techTreeDialogItems[1][0] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Declare War, Neutral, Peace\\Transparent Box.tga", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 60, 60, c_anchorTopLeft, 20, 50, StringToText(""), "Assets\\Declare War, Neutral, Peace\\001.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_techTreeDialogItems[1][1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 60, 60, c_anchorTopLeft, 90, 90, StringExternal("Param/Value/1CE31B5B"), StringToText(""), "");
    gv_techTreeDialogItems[2][0] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Declare War, Neutral, Peace\\Transparent Box.tga", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 60, 60, c_anchorTopLeft, 90, 90, StringToText(""), "Assets\\Declare War, Neutral, Peace\\002.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_techTreeDialogItems[2][1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 60, 60, c_anchorTopLeft, 90, 10, StringExternal("Param/Value/2D3471E1"), StringToText(""), "");
    gv_techTreeDialogItems[3][0] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Declare War, Neutral, Peace\\Transparent Box.tga", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 60, 60, c_anchorTopLeft, 90, 10, StringToText(""), "Assets\\Declare War, Neutral, Peace\\003.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_techTreeDialogItems[3][1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 60, 60, c_anchorTopLeft, 160, 90, StringExternal("Param/Value/BBBFB2ED"), StringToText(""), "");
    gv_techTreeDialogItems[4][0] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Declare War, Neutral, Peace\\Transparent Box.tga", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 60, 60, c_anchorTopLeft, 160, 90, StringToText(""), "Assets\\Declare War, Neutral, Peace\\005.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_techTreeDialogItems[4][1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 60, 60, c_anchorTopLeft, 160, 10, StringExternal("Param/Value/1B64BB38"), StringToText(""), "");
    gv_techTreeDialogItems[5][0] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Declare War, Neutral, Peace\\Transparent Box.tga", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 60, 60, c_anchorTopLeft, 160, 10, StringToText(""), "Assets\\Declare War, Neutral, Peace\\004.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_techTreeDialogItems[5][1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 60, 60, c_anchorTopLeft, 230, 10, StringExternal("Param/Value/547432F5"), StringToText(""), "");
    gv_techTreeDialogItems[6][0] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Declare War, Neutral, Peace\\Transparent Box.tga", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 60, 60, c_anchorTopLeft, 230, 10, StringToText(""), "Assets\\Declare War, Neutral, Peace\\006.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_techTreeDialogItems[6][1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 60, 60, c_anchorTopLeft, 20, 190, StringExternal("Param/Value/8567DDC9"), StringToText(""), "");
    gv_techTreeDialogItems[7][0] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Declare War, Neutral, Peace\\Transparent Box.tga", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 60, 60, c_anchorTopLeft, 20, 190, StringToText(""), "Assets\\Declare War, Neutral, Peace\\007.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_techTreeDialogItems[7][1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 60, 60, c_anchorTopLeft, 90, 190, StringExternal("Param/Value/CE782572"), StringToText(""), "");
    gv_techTreeDialogItems[8][0] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Declare War, Neutral, Peace\\Transparent Box.tga", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 60, 60, c_anchorTopLeft, 90, 190, StringToText(""), "Assets\\Declare War, Neutral, Peace\\008.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_techTreeDialogItems[8][1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 60, 60, c_anchorTopLeft, 160, 190, StringExternal("Param/Value/E9D925C5"), StringToText(""), "");
    gv_techTreeDialogItems[9][0] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Declare War, Neutral, Peace\\Transparent Box.tga", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 60, 60, c_anchorTopLeft, 160, 190, StringToText(""), "Assets\\Declare War, Neutral, Peace\\009.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_techTreeDialogItems[9][1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 60, 60, c_anchorTopLeft, 230, 190, StringExternal("Param/Value/0B6F9EEA"), StringToText(""), "");
    gv_techTreeDialogItems[10][0] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Declare War, Neutral, Peace\\Transparent Box.tga", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 60, 60, c_anchorTopLeft, 230, 190, StringToText(""), "Assets\\Declare War, Neutral, Peace\\010.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_techTreeDialogItems[10][1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 60, 60, c_anchorTopLeft, 20, 290, StringExternal("Param/Value/F24707F5"), StringToText(""), "");
    gv_techTreeDialogItems[11][0] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Declare War, Neutral, Peace\\Transparent Box.tga", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 60, 60, c_anchorTopLeft, 20, 290, StringToText(""), "Assets\\Declare War, Neutral, Peace\\011.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_techTreeDialogItems[11][1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 60, 60, c_anchorTopLeft, 90, 290, StringExternal("Param/Value/AD3919A6"), StringToText(""), "");
    gv_techTreeDialogItems[12][0] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Declare War, Neutral, Peace\\Transparent Box.tga", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 60, 60, c_anchorTopLeft, 90, 290, StringToText(""), "Assets\\Declare War, Neutral, Peace\\012.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_techTreeDialogItems[12][1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 60, 60, c_anchorTopLeft, 160, 290, StringExternal("Param/Value/634D2C1D"), StringToText(""), "");
    gv_techTreeDialogItems[80][0] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Declare War, Neutral, Peace\\Transparent Box.tga", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 60, 60, c_anchorTopLeft, 160, 290, StringToText(""), "Military\\Research\\Government\\080.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_techTreeDialogItems[80][1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 60, 60, c_anchorTopLeft, 230, 90, StringExternal("Param/Value/F728C208"), StringToText(""), "");
    gv_techTreeDialogItems[13][0] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Declare War, Neutral, Peace\\Transparent Box.tga", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 60, 60, c_anchorTopLeft, 230, 90, StringToText(""), "Assets\\Declare War, Neutral, Peace\\Government\\Government\\013.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_techTreeDialogItems[13][1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 60, 60, c_anchorTopLeft, 20, 390, StringExternal("Param/Value/BE5105CC"), StringToText(""), "");
    gv_techTreeDialogItems[14][0] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Declare War, Neutral, Peace\\Transparent Box.tga", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 60, 60, c_anchorTopLeft, 20, 390, StringToText(""), "Assets\\Declare War, Neutral, Peace\\Government\\014.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_techTreeDialogItems[14][1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 60, 60, c_anchorTopLeft, 90, 390, StringExternal("Param/Value/02D26B83"), StringToText(""), "");
    gv_techTreeDialogItems[15][0] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Declare War, Neutral, Peace\\Transparent Box.tga", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 60, 60, c_anchorTopLeft, 90, 390, StringToText(""), "Assets\\Declare War, Neutral, Peace\\Government\\015.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_techTreeDialogItems[15][1] = DialogControlLastCreated();
    DialogSetImage(DialogLastCreated(), "Assets\\Textures\\ui_scrollbar_frame.dds");
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    DialogCreate(800, 510, c_anchorTopLeft, 290, 60, true);
    gv_economyTechTree = DialogLastCreated();
    DialogSetImage(DialogLastCreated(), "Assets\\Textures\\ui_scrollbar_frame.dds");
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 60, 60, c_anchorTopLeft, 20, 50, StringExternal("Param/Value/BEC2EEDD"), StringToText(""), "");
    gv_techTreeDialogItems[16][0] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Declare War, Neutral, Peace\\Transparent Box.tga", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 60, 60, c_anchorTopLeft, 20, 50, StringToText(""), "Assets\\Economy\\016.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_techTreeDialogItems[16][1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 60, 60, c_anchorTopLeft, 90, 50, StringExternal("Param/Value/E72C9933"), StringToText(""), "");
    gv_techTreeDialogItems[17][0] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Declare War, Neutral, Peace\\Transparent Box.tga", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 60, 60, c_anchorTopLeft, 90, 50, StringToText(""), "Assets\\Economy\\017.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_techTreeDialogItems[17][1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 60, 60, c_anchorTopLeft, 160, 105, StringExternal("Param/Value/B0993D6D"), StringToText(""), "");
    gv_techTreeDialogItems[18][0] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Declare War, Neutral, Peace\\Transparent Box.tga", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 60, 60, c_anchorTopLeft, 160, 105, StringToText(""), "Assets\\Economy\\018.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_techTreeDialogItems[18][1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 60, 60, c_anchorTopLeft, 20, 190, StringExternal("Param/Value/F91A6A71"), StringToText(""), "");
    gv_techTreeDialogItems[19][0] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Declare War, Neutral, Peace\\Transparent Box.tga", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 60, 60, c_anchorTopLeft, 20, 190, StringToText(""), "Assets\\Economy\\020.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_techTreeDialogItems[19][1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 60, 60, c_anchorTopLeft, 90, 160, StringExternal("Param/Value/994CFB37"), StringToText(""), "");
    gv_techTreeDialogItems[20][0] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Declare War, Neutral, Peace\\Transparent Box.tga", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 60, 60, c_anchorTopLeft, 90, 160, StringToText(""), "Assets\\Economy\\019.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_techTreeDialogItems[20][1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 60, 60, c_anchorTopLeft, 160, 190, StringExternal("Param/Value/D3956B65"), StringToText(""), "");
    gv_techTreeDialogItems[21][0] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Declare War, Neutral, Peace\\Transparent Box.tga", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 60, 60, c_anchorTopLeft, 160, 190, StringToText(""), "Assets\\Economy\\021.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_techTreeDialogItems[21][1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 60, 60, c_anchorTopLeft, 230, 155, StringExternal("Param/Value/D4F94CA5"), StringToText(""), "");
    gv_techTreeDialogItems[22][0] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Declare War, Neutral, Peace\\Transparent Box.tga", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 60, 60, c_anchorTopLeft, 230, 155, StringToText(""), "Assets\\Economy\\022.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_techTreeDialogItems[22][1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 60, 60, c_anchorTopLeft, 230, 225, StringExternal("Param/Value/53E4623E"), StringToText(""), "");
    gv_techTreeDialogItems[23][0] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Declare War, Neutral, Peace\\Transparent Box.tga", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 60, 60, c_anchorTopLeft, 230, 225, StringToText(""), "Assets\\Economy\\023.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_techTreeDialogItems[23][1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 60, 60, c_anchorTopLeft, 20, 330, StringExternal("Param/Value/118CE2F2"), StringToText(""), "");
    gv_techTreeDialogItems[27][0] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Declare War, Neutral, Peace\\Transparent Box.tga", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 60, 60, c_anchorTopLeft, 20, 330, StringToText(""), "Assets\\Economy\\027.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_techTreeDialogItems[27][1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 60, 60, c_anchorTopLeft, 90, 290, StringExternal("Param/Value/F4AA1C5B"), StringToText(""), "");
    gv_techTreeDialogItems[28][0] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Declare War, Neutral, Peace\\Transparent Box.tga", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 60, 60, c_anchorTopLeft, 90, 290, StringToText(""), "Assets\\Economy\\028.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_techTreeDialogItems[28][1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 60, 60, c_anchorTopLeft, 90, 370, StringExternal("Param/Value/0751F926"), StringToText(""), "");
    gv_techTreeDialogItems[29][0] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Declare War, Neutral, Peace\\Transparent Box.tga", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 60, 60, c_anchorTopLeft, 90, 370, StringToText(""), "Assets\\Economy\\029.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_techTreeDialogItems[29][1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 60, 60, c_anchorTopRight, 20, 50, StringExternal("Param/Value/8EEEB6D5"), StringToText(""), "");
    gv_techTreeDialogItems[24][0] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Declare War, Neutral, Peace\\Transparent Box.tga", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 60, 60, c_anchorTopRight, 20, 50, StringToText(""), "Assets\\Economy\\024.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_techTreeDialogItems[24][1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 60, 60, c_anchorTopRight, 90, 50, StringExternal("Param/Value/3CD4A2CF"), StringToText(""), "");
    gv_techTreeDialogItems[25][0] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Declare War, Neutral, Peace\\Transparent Box.tga", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 60, 60, c_anchorTopRight, 90, 50, StringToText(""), "Assets\\Economy\\025.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_techTreeDialogItems[25][1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 60, 60, c_anchorTopRight, 160, 50, StringExternal("Param/Value/3A5A6711"), StringToText(""), "");
    gv_techTreeDialogItems[26][0] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Declare War, Neutral, Peace\\Transparent Box.tga", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 60, 60, c_anchorTopRight, 160, 50, StringToText(""), "Assets\\Economy\\026.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_techTreeDialogItems[26][1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 60, 60, c_anchorTopRight, 20, 190, StringExternal("Param/Value/E24A100C"), StringToText(""), "");
    gv_techTreeDialogItems[30][0] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Declare War, Neutral, Peace\\Transparent Box.tga", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 60, 60, c_anchorTopRight, 20, 190, StringToText(""), "Assets\\Economy\\030.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_techTreeDialogItems[30][1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 60, 60, c_anchorTopRight, 90, 190, StringExternal("Param/Value/5D21FF88"), StringToText(""), "");
    gv_techTreeDialogItems[31][0] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Declare War, Neutral, Peace\\Transparent Box.tga", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 60, 60, c_anchorTopRight, 90, 190, StringToText(""), "Assets\\Economy\\031.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_techTreeDialogItems[31][1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 60, 60, c_anchorTopRight, 160, 190, StringExternal("Param/Value/660283FA"), StringToText(""), "");
    gv_techTreeDialogItems[32][0] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Declare War, Neutral, Peace\\Transparent Box.tga", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 60, 60, c_anchorTopRight, 160, 190, StringToText(""), "Assets\\Economy\\032.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_techTreeDialogItems[32][1] = DialogControlLastCreated();
    DialogCreate(800, 510, c_anchorTopLeft, 290, 60, true);
    gv_militaryTechTree = DialogLastCreated();
    DialogSetImage(DialogLastCreated(), "Assets\\Textures\\ui_scrollbar_frame.dds");
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 60, 60, c_anchorTopLeft, 20, 50, StringExternal("Param/Value/11616F77"), StringToText(""), "");
    gv_techTreeDialogItems[34][0] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Declare War, Neutral, Peace\\Transparent Box.tga", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 60, 60, c_anchorTopLeft, 20, 50, StringToText(""), "Military\\034.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_techTreeDialogItems[34][1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 60, 60, c_anchorTopLeft, 90, 50, StringExternal("Param/Value/F313D589"), StringToText(""), "");
    gv_techTreeDialogItems[35][0] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Declare War, Neutral, Peace\\Transparent Box.tga", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 60, 60, c_anchorTopLeft, 90, 50, StringToText(""), "Military\\035.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_techTreeDialogItems[35][1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 60, 60, c_anchorTopLeft, 160, 50, StringExternal("Param/Value/577AB600"), StringToText(""), "");
    gv_techTreeDialogItems[36][0] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Declare War, Neutral, Peace\\Transparent Box.tga", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 60, 60, c_anchorTopLeft, 160, 50, StringToText(""), "Military\\036.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_techTreeDialogItems[36][1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 60, 60, c_anchorTopLeft, 230, 50, StringExternal("Param/Value/8AC200BF"), StringToText(""), "");
    gv_techTreeDialogItems[37][0] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Declare War, Neutral, Peace\\Transparent Box.tga", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 60, 60, c_anchorTopLeft, 230, 50, StringToText(""), "Military\\037.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_techTreeDialogItems[37][1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 60, 60, c_anchorTopLeft, 20, 190, StringExternal("Param/Value/880D5FE7"), StringToText(""), "");
    gv_techTreeDialogItems[38][0] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Declare War, Neutral, Peace\\Transparent Box.tga", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 60, 60, c_anchorTopLeft, 20, 190, StringToText(""), "Military\\038.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_techTreeDialogItems[38][1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 60, 60, c_anchorTopLeft, 90, 190, StringExternal("Param/Value/9D9DADAB"), StringToText(""), "");
    gv_techTreeDialogItems[39][0] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Declare War, Neutral, Peace\\Transparent Box.tga", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 60, 60, c_anchorTopLeft, 90, 190, StringToText(""), "Military\\039.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_techTreeDialogItems[39][1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 60, 60, c_anchorTopLeft, 160, 150, StringExternal("Param/Value/59EE27A4"), StringToText(""), "");
    gv_techTreeDialogItems[40][0] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Declare War, Neutral, Peace\\Transparent Box.tga", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 60, 60, c_anchorTopLeft, 160, 150, StringToText(""), "Military\\040.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_techTreeDialogItems[40][1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 60, 60, c_anchorTopLeft, 230, 150, StringExternal("Param/Value/49D06121"), StringToText(""), "");
    gv_techTreeDialogItems[41][0] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Declare War, Neutral, Peace\\Transparent Box.tga", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 60, 60, c_anchorTopLeft, 230, 150, StringToText(""), "Military\\041.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_techTreeDialogItems[41][1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 60, 60, c_anchorTopLeft, 160, 230, StringExternal("Param/Value/0F129FF8"), StringToText(""), "");
    gv_techTreeDialogItems[42][0] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Declare War, Neutral, Peace\\Transparent Box.tga", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 60, 60, c_anchorTopLeft, 160, 230, StringToText(""), "Military\\042.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_techTreeDialogItems[42][1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 60, 60, c_anchorTopLeft, 230, 230, StringExternal("Param/Value/156925AB"), StringToText(""), "");
    gv_techTreeDialogItems[43][0] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Declare War, Neutral, Peace\\Transparent Box.tga", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 60, 60, c_anchorTopLeft, 230, 230, StringToText(""), "Military\\043.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_techTreeDialogItems[43][1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 60, 60, c_anchorTopLeft, 20, 380, StringExternal("Param/Value/AF01B1C7"), StringToText(""), "");
    gv_techTreeDialogItems[44][0] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Declare War, Neutral, Peace\\Transparent Box.tga", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 60, 60, c_anchorTopLeft, 20, 380, StringToText(""), "Military\\044.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_techTreeDialogItems[44][1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 60, 60, c_anchorTopLeft, 90, 330, StringExternal("Param/Value/61B6C4C3"), StringToText(""), "");
    gv_techTreeDialogItems[45][0] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Declare War, Neutral, Peace\\Transparent Box.tga", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 60, 60, c_anchorTopLeft, 90, 330, StringToText(""), "Military\\045.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_techTreeDialogItems[45][1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 60, 60, c_anchorTopLeft, 160, 330, StringExternal("Param/Value/8F379E1B"), StringToText(""), "");
    gv_techTreeDialogItems[46][0] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Declare War, Neutral, Peace\\Transparent Box.tga", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 60, 60, c_anchorTopLeft, 160, 330, StringToText(""), "Military\\046.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_techTreeDialogItems[46][1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 60, 60, c_anchorTopLeft, 230, 330, StringExternal("Param/Value/32597B3A"), StringToText(""), "");
    gv_techTreeDialogItems[47][0] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Declare War, Neutral, Peace\\Transparent Box.tga", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 60, 60, c_anchorTopLeft, 230, 330, StringToText(""), "Military\\047.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_techTreeDialogItems[47][1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 60, 60, c_anchorTopLeft, 90, 430, StringExternal("Param/Value/3C8FBA4A"), StringToText(""), "");
    gv_techTreeDialogItems[48][0] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Declare War, Neutral, Peace\\Transparent Box.tga", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 60, 60, c_anchorTopLeft, 90, 430, StringToText(""), "Military\\048.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_techTreeDialogItems[48][1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 60, 60, c_anchorTopLeft, 160, 430, StringExternal("Param/Value/82CF6B38"), StringToText(""), "");
    gv_techTreeDialogItems[49][0] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Declare War, Neutral, Peace\\Transparent Box.tga", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 60, 60, c_anchorTopLeft, 160, 430, StringToText(""), "Military\\049.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_techTreeDialogItems[49][1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 60, 60, c_anchorTopLeft, 230, 430, StringExternal("Param/Value/56E76F0C"), StringToText(""), "");
    gv_techTreeDialogItems[50][0] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Declare War, Neutral, Peace\\Transparent Box.tga", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 60, 60, c_anchorTopLeft, 230, 430, StringToText(""), "Military\\050.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_techTreeDialogItems[50][1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 60, 60, c_anchorTopRight, 20, 50, StringExternal("Param/Value/4632BC0B"), StringToText(""), "");
    gv_techTreeDialogItems[51][0] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Declare War, Neutral, Peace\\Transparent Box.tga", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 60, 60, c_anchorTopRight, 20, 50, StringToText(""), "Military\\051.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_techTreeDialogItems[51][1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 60, 60, c_anchorTopRight, 90, 50, StringExternal("Param/Value/2905053C"), StringToText(""), "");
    gv_techTreeDialogItems[52][0] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Declare War, Neutral, Peace\\Transparent Box.tga", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 60, 60, c_anchorTopRight, 90, 50, StringToText(""), "Military\\052.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_techTreeDialogItems[52][1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 60, 60, c_anchorTopRight, 160, 50, StringExternal("Param/Value/2828590C"), StringToText(""), "");
    gv_techTreeDialogItems[53][0] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Declare War, Neutral, Peace\\Transparent Box.tga", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 60, 60, c_anchorTopRight, 160, 50, StringToText(""), "Military\\053.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_techTreeDialogItems[53][1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 60, 60, c_anchorTopRight, 230, 50, StringExternal("Param/Value/9E1D9269"), StringToText(""), "");
    gv_techTreeDialogItems[54][0] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Declare War, Neutral, Peace\\Transparent Box.tga", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 60, 60, c_anchorTopRight, 230, 50, StringToText(""), "Military\\054.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_techTreeDialogItems[54][1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 60, 60, c_anchorTopRight, 20, 150, StringExternal("Param/Value/7B276E23"), StringToText(""), "");
    gv_techTreeDialogItems[55][0] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Declare War, Neutral, Peace\\Transparent Box.tga", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 60, 60, c_anchorTopRight, 20, 150, StringToText(""), "Military\\055.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_techTreeDialogItems[55][1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 60, 60, c_anchorTopRight, 90, 150, StringExternal("Param/Value/8A78F8F9"), StringToText(""), "");
    gv_techTreeDialogItems[56][0] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Declare War, Neutral, Peace\\Transparent Box.tga", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 60, 60, c_anchorTopRight, 90, 150, StringToText(""), "Military\\056.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_techTreeDialogItems[56][1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 60, 60, c_anchorTopRight, 160, 150, StringExternal("Param/Value/3347E82E"), StringToText(""), "");
    gv_techTreeDialogItems[57][0] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Declare War, Neutral, Peace\\Transparent Box.tga", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 60, 60, c_anchorTopRight, 160, 150, StringToText(""), "Military\\057.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_techTreeDialogItems[57][1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 60, 60, c_anchorTopRight, 230, 150, StringExternal("Param/Value/19CBDF90"), StringToText(""), "");
    gv_techTreeDialogItems[58][0] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Declare War, Neutral, Peace\\Transparent Box.tga", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 60, 60, c_anchorTopRight, 230, 150, StringToText(""), "Military\\058.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_techTreeDialogItems[58][1] = DialogControlLastCreated();
    DialogCreate(800, 510, c_anchorTopLeft, 290, 60, true);
    gv_specialTechTree = DialogLastCreated();
    DialogSetImage(DialogLastCreated(), "Assets\\Textures\\ui_scrollbar_frame.dds");
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 60, 60, c_anchorTopLeft, 20, 50, StringExternal("Param/Value/5AF0DAFD"), StringToText(""), "");
    gv_techTreeDialogItems[59][0] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Declare War, Neutral, Peace\\Transparent Box.tga", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 60, 60, c_anchorTopLeft, 20, 50, StringToText(""), "Diplomatic Policies\\Research\\Special\\059.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_techTreeDialogItems[59][1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 60, 60, c_anchorTopLeft, 90, 10, StringExternal("Param/Value/29CFD038"), StringToText(""), "");
    gv_techTreeDialogItems[60][0] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Declare War, Neutral, Peace\\Transparent Box.tga", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 60, 60, c_anchorTopLeft, 90, 10, StringToText(""), "Diplomatic Policies\\Research\\Special\\060.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_techTreeDialogItems[60][1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 60, 60, c_anchorTopLeft, 160, 10, StringExternal("Param/Value/2FC5A83B"), StringToText(""), "");
    gv_techTreeDialogItems[61][0] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Declare War, Neutral, Peace\\Transparent Box.tga", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 60, 60, c_anchorTopLeft, 160, 10, StringToText(""), "Diplomatic Policies\\Research\\Special\\061.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_techTreeDialogItems[61][1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 60, 60, c_anchorTopLeft, 230, 10, StringExternal("Param/Value/5C597D34"), StringToText(""), "");
    gv_techTreeDialogItems[62][0] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Declare War, Neutral, Peace\\Transparent Box.tga", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 60, 60, c_anchorTopLeft, 230, 10, StringToText(""), "Diplomatic Policies\\Research\\Special\\062.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_techTreeDialogItems[62][1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 60, 60, c_anchorTopLeft, 90, 90, StringExternal("Param/Value/5CDE243B"), StringToText(""), "");
    gv_techTreeDialogItems[63][0] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Declare War, Neutral, Peace\\Transparent Box.tga", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 60, 60, c_anchorTopLeft, 90, 90, StringToText(""), "Diplomatic Policies\\Research\\Special\\063.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_techTreeDialogItems[63][1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 60, 60, c_anchorTopLeft, 160, 90, StringExternal("Param/Value/D94FCC03"), StringToText(""), "");
    gv_techTreeDialogItems[64][0] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Declare War, Neutral, Peace\\Transparent Box.tga", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 60, 60, c_anchorTopLeft, 160, 90, StringToText(""), "Diplomatic Policies\\Research\\Special\\064.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_techTreeDialogItems[64][1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 60, 60, c_anchorTopLeft, 20, 230, StringExternal("Param/Value/14D78501"), StringToText(""), "");
    gv_techTreeDialogItems[65][0] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Declare War, Neutral, Peace\\Transparent Box.tga", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 60, 60, c_anchorTopLeft, 20, 230, StringToText(""), "Diplomatic Policies\\Research\\Special\\065.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_techTreeDialogItems[65][1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 60, 60, c_anchorTopLeft, 90, 190, StringExternal("Param/Value/EA01B2A4"), StringToText(""), "");
    gv_techTreeDialogItems[66][0] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Declare War, Neutral, Peace\\Transparent Box.tga", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 60, 60, c_anchorTopLeft, 90, 190, StringToText(""), "Diplomatic Policies\\Research\\Special\\066.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_techTreeDialogItems[66][1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 60, 60, c_anchorTopLeft, 160, 190, StringExternal("Param/Value/48902DEB"), StringToText(""), "");
    gv_techTreeDialogItems[67][0] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Declare War, Neutral, Peace\\Transparent Box.tga", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 60, 60, c_anchorTopLeft, 160, 190, StringToText(""), "Diplomatic Policies\\Research\\Special\\067.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_techTreeDialogItems[67][1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 60, 60, c_anchorTopLeft, 230, 190, StringExternal("Param/Value/52347BC0"), StringToText(""), "");
    gv_techTreeDialogItems[68][0] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Declare War, Neutral, Peace\\Transparent Box.tga", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 60, 60, c_anchorTopLeft, 230, 190, StringToText(""), "Diplomatic Policies\\Research\\Special\\068.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_techTreeDialogItems[68][1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 60, 60, c_anchorTopLeft, 90, 270, StringExternal("Param/Value/991A0B70"), StringToText(""), "");
    gv_techTreeDialogItems[69][0] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Declare War, Neutral, Peace\\Transparent Box.tga", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 60, 60, c_anchorTopLeft, 90, 270, StringToText(""), "Diplomatic Policies\\Research\\Special\\069.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_techTreeDialogItems[69][1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 60, 60, c_anchorTopLeft, 160, 270, StringExternal("Param/Value/5DF94F59"), StringToText(""), "");
    gv_techTreeDialogItems[70][0] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Declare War, Neutral, Peace\\Transparent Box.tga", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 60, 60, c_anchorTopLeft, 160, 270, StringToText(""), "Diplomatic Policies\\Research\\Special\\070.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_techTreeDialogItems[70][1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 60, 60, c_anchorTopLeft, 230, 270, StringExternal("Param/Value/F17B8405"), StringToText(""), "");
    gv_techTreeDialogItems[71][0] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Declare War, Neutral, Peace\\Transparent Box.tga", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 60, 60, c_anchorTopLeft, 230, 270, StringToText(""), "Diplomatic Policies\\Research\\Special\\071.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_techTreeDialogItems[71][1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 60, 60, c_anchorTopLeft, 20, 370, StringExternal("Param/Value/79259F03"), StringToText(""), "");
    gv_techTreeDialogItems[72][0] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Declare War, Neutral, Peace\\Transparent Box.tga", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 60, 60, c_anchorTopLeft, 20, 370, StringToText(""), "Diplomatic Policies\\Research\\Special\\072.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_techTreeDialogItems[72][1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 60, 60, c_anchorTopLeft, 90, 370, StringExternal("Param/Value/8C097A4C"), StringToText(""), "");
    gv_techTreeDialogItems[73][0] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Declare War, Neutral, Peace\\Transparent Box.tga", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 60, 60, c_anchorTopLeft, 90, 370, StringToText(""), "Diplomatic Policies\\Research\\Special\\073.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_techTreeDialogItems[73][1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 60, 60, c_anchorTopLeft, 230, 90, StringExternal("Param/Value/7168545E"), StringToText(""), "");
    gv_techTreeDialogItems[74][0] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Declare War, Neutral, Peace\\Transparent Box.tga", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 60, 60, c_anchorTopLeft, 230, 90, StringToText(""), "Research\\Special\\074.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_techTreeDialogItems[74][1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 60, 60, c_anchorTopRight, 20, 50, StringExternal("Param/Value/80C67E9B"), StringToText(""), "");
    gv_techTreeDialogItems[75][0] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Declare War, Neutral, Peace\\Transparent Box.tga", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 60, 60, c_anchorTopRight, 20, 50, StringToText(""), "Military\\Screenshots\\PossibleScreenshots\\Yes\\Yes\\Research\\Special\\Research\\Special\\075.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_techTreeDialogItems[75][1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 60, 60, c_anchorTopRight, 90, 90, StringExternal("Param/Value/9D7F9DF1"), StringToText(""), "");
    gv_techTreeDialogItems[76][0] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Declare War, Neutral, Peace\\Transparent Box.tga", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 60, 60, c_anchorTopRight, 90, 90, StringToText(""), "Military\\Screenshots\\PossibleScreenshots\\Yes\\Yes\\Research\\Special\\Research\\Special\\076.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_techTreeDialogItems[76][1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 60, 60, c_anchorTopRight, 160, 90, StringExternal("Param/Value/4A261C7E"), StringToText(""), "");
    gv_techTreeDialogItems[77][0] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Declare War, Neutral, Peace\\Transparent Box.tga", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 60, 60, c_anchorTopRight, 160, 90, StringToText(""), "Military\\Screenshots\\PossibleScreenshots\\Yes\\Yes\\Research\\Special\\Research\\Special\\077.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_techTreeDialogItems[77][1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 60, 60, c_anchorTopRight, 230, 90, StringExternal("Param/Value/ECBC4FAA"), StringToText(""), "");
    gv_techTreeDialogItems[78][0] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Declare War, Neutral, Peace\\Transparent Box.tga", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 60, 60, c_anchorTopRight, 230, 90, StringToText(""), "Military\\Screenshots\\PossibleScreenshots\\Yes\\Yes\\Research\\Special\\Research\\Special\\078.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_techTreeDialogItems[78][1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 60, 60, c_anchorTopRight, 90, 10, StringExternal("Param/Value/B6E96593"), StringToText(""), "");
    gv_techTreeDialogItems[79][0] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Declare War, Neutral, Peace\\Transparent Box.tga", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 60, 60, c_anchorTopRight, 90, 10, StringToText(""), "Military\\Screenshots\\PossibleScreenshots\\Yes\\Yes\\Research\\Special\\Research\\Special\\079.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_techTreeDialogItems[79][1] = DialogControlLastCreated();
    for (autoC15CCC75_i = 1; autoC15CCC75_i <= autoC15CCC75_n; autoC15CCC75_i += 1) {
        DialogControlSetEnabled(gv_techTreeDialogItems[lv_noEnableForYou][0], PlayerGroupAll(), false);
        lv_noEnableForYou += 1;
    }
    DialogControlSetEnabled(gv_techTreeDialogItems[14][0], PlayerGroupAll(), true);
    DialogControlSetEnabled(gv_techTreeDialogItems[11][0], PlayerGroupAll(), true);
    DialogControlSetEnabled(gv_techTreeDialogItems[7][0], PlayerGroupAll(), true);
    DialogControlSetEnabled(gv_techTreeDialogItems[1][0], PlayerGroupAll(), true);
    DialogControlSetEnabled(gv_techTreeDialogItems[30][0], PlayerGroupAll(), true);
    DialogControlSetEnabled(gv_techTreeDialogItems[24][0], PlayerGroupAll(), true);
    DialogControlSetEnabled(gv_techTreeDialogItems[27][0], PlayerGroupAll(), true);
    DialogControlSetEnabled(gv_techTreeDialogItems[19][0], PlayerGroupAll(), true);
    DialogControlSetEnabled(gv_techTreeDialogItems[16][0], PlayerGroupAll(), true);
    DialogControlSetEnabled(gv_techTreeDialogItems[34][0], PlayerGroupAll(), true);
    DialogControlSetEnabled(gv_techTreeDialogItems[38][0], PlayerGroupAll(), true);
    DialogControlSetEnabled(gv_techTreeDialogItems[44][0], PlayerGroupAll(), true);
    DialogControlSetEnabled(gv_techTreeDialogItems[51][0], PlayerGroupAll(), true);
    DialogControlSetEnabled(gv_techTreeDialogItems[55][0], PlayerGroupAll(), true);
    DialogControlSetEnabled(gv_techTreeDialogItems[72][0], PlayerGroupAll(), true);
    DialogCreate(300, 400, c_anchorTopLeft, 1070, 260, true);
    gv_researchFunding = DialogLastCreated();
    DialogSetImage(DialogLastCreated(), "Assets\\Textures\\ui_scrollbar_frame.dds");
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 250, 200, c_anchorCenter, 0, -100, StringExternal("Param/Value/488E8733"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_researchFundingDialogItems[0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 240, 80, c_anchorCenter, -10, 20, StringExternal("Param/Value/EA4053A7"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 240, 80, c_anchorCenter, 120, 20, StringExternal("Param/Value/255A73ED"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_researchFundingDialogItems[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 240, 80, c_anchorCenter, -10, 50, StringExternal("Param/Value/CC0038D2"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 240, 80, c_anchorCenter, 120, 50, StringExternal("Param/Value/AF5BDA78"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_researchFundingDialogItems[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 240, 80, c_anchorCenter, -10, 80, StringExternal("Param/Value/1B6D87CA"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 240, 80, c_anchorCenter, 120, 80, StringExternal("Param/Value/2C00427A"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_researchFundingDialogItems[4] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 240, 80, c_anchorCenter, -10, 110, StringExternal("Param/Value/7218F0A3"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 240, 80, c_anchorCenter, 120, 110, StringExternal("Param/Value/13A1721C"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_researchFundingDialogItems[5] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 240, 80, c_anchorCenter, -10, 140, StringExternal("Param/Value/59881E82"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 240, 80, c_anchorCenter, 120, 140, StringExternal("Param/Value/AE0C9DD9"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_researchFundingDialogItems[6] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 240, 80, c_anchorCenter, -10, 170, StringExternal("Param/Value/6BD3A619"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 240, 80, c_anchorCenter, 120, 170, StringExternal("Param/Value/129A6876"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_researchFundingDialogItems[7] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 48, 48, c_anchorBottomRight, 10, 10, StringToText(""), "Assets\\Textures\\ui_glues_helpmenu_commandcardicon.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/45376776"), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ResearchMenuFrame_Init () {
    gt_ResearchMenuFrame = TriggerCreate("gt_ResearchMenuFrame_Func");
    TriggerAddEventMapInit(gt_ResearchMenuFrame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tab Functionality
//--------------------------------------------------------------------------------------------------
bool gt_TabFunctionality_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_researchMenuFrameDialogItems[0]) || (EventDialogControl() == gv_researchMenuFrameDialogItems[1]) || (EventDialogControl() == gv_researchMenuFrameDialogItems[2]) || (EventDialogControl() == gv_researchMenuFrameDialogItems[3]) || (EventDialogControl() == gv_researchMenuFrameDialogItems[4])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetEnabled(gv_researchMenuFrameDialogItems[0], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetEnabled(gv_researchMenuFrameDialogItems[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetEnabled(gv_researchMenuFrameDialogItems[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetEnabled(gv_researchMenuFrameDialogItems[3], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetEnabled(gv_researchMenuFrameDialogItems[4], PlayerGroupSingle(EventPlayer()), true);
    DialogSetVisible(gv_specialTechTree, PlayerGroupSingle(EventPlayer()), false);
    DialogSetVisible(gv_militaryTechTree, PlayerGroupSingle(EventPlayer()), false);
    DialogSetVisible(gv_governmentTechTree, PlayerGroupSingle(EventPlayer()), false);
    DialogSetVisible(gv_economyTechTree, PlayerGroupSingle(EventPlayer()), false);
    if ((EventDialogControl() == gv_researchMenuFrameDialogItems[0])) {
        DialogControlSetEnabled(gv_researchMenuFrameDialogItems[0], PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_governmentTechTree, PlayerGroupSingle(EventPlayer()), true);
    }

    if ((EventDialogControl() == gv_researchMenuFrameDialogItems[1])) {
        DialogControlSetEnabled(gv_researchMenuFrameDialogItems[1], PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_economyTechTree, PlayerGroupSingle(EventPlayer()), true);
    }

    if ((EventDialogControl() == gv_researchMenuFrameDialogItems[2])) {
        DialogControlSetEnabled(gv_researchMenuFrameDialogItems[2], PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_militaryTechTree, PlayerGroupSingle(EventPlayer()), true);
    }

    if ((EventDialogControl() == gv_researchMenuFrameDialogItems[3])) {
        DialogControlSetEnabled(gv_researchMenuFrameDialogItems[3], PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_specialTechTree, PlayerGroupSingle(EventPlayer()), true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TabFunctionality_Init () {
    gt_TabFunctionality = TriggerCreate("gt_TabFunctionality_Func");
    TriggerAddEventDialogControl(gt_TabFunctionality, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Selected Icon
//--------------------------------------------------------------------------------------------------
bool gt_SelectedIcon_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_iDontWantToCountToday;
    int lv_researchCost;
    int lv_researchTimeL;
    int lv_researchLeftToDo;
    int lv_costPerTick;
    int lv_normalTimeLength;
    int lv_researchAfterNormalTime;
    int lv_limitedTimeLength;

    // Automatic Variable Declarations
    int autoDEB9A917_n;
    int autoDEB9A917_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_iDontWantToCountToday = 1;
    autoDEB9A917_n = gv_researchesAvailable;
    for (autoDEB9A917_i = 1; autoDEB9A917_i <= autoDEB9A917_n; autoDEB9A917_i += 1) {
        if ((EventDialogControl() == gv_techTreeDialogItems[lv_iDontWantToCountToday][0])) {
            gv_selectedIconResearch[EventPlayer()] = lv_iDontWantToCountToday;
            DialogControlSetSize(gv_researchMenuSelectedDialogItems[1], PlayerGroupSingle(EventPlayer()), 1, 20);
            libNtve_gf_SetDialogItemText(gv_researchMenuSelectedDialogItems[3], StringToText(gv_researchName[lv_iDontWantToCountToday]), PlayerGroupSingle(EventPlayer()));
            lv_researchCost = gv_researchCost[lv_iDontWantToCountToday];
            lv_researchTimeL = (lv_researchCost / gv_researchTime[lv_iDontWantToCountToday]);
            lv_researchTimeL = (lv_researchTimeL * gv_researchSpeed[EventPlayer()]);
            lv_researchTimeL = (lv_researchTimeL / 100);
            lv_costPerTick = lv_researchTimeL;
            lv_researchLeftToDo = (lv_researchCost - gv_researchInvested[EventPlayer()][lv_iDontWantToCountToday]);
            if ((lv_costPerTick == 0)) {
                lv_researchTimeL = FixedToInt((IntToFixed(lv_researchLeftToDo) / 0.001));
            }
            else {
                lv_researchTimeL = (lv_researchLeftToDo / lv_costPerTick);
            }
            DialogControlSetSize(gv_researchMenuSelectedDialogItems[1], PlayerGroupSingle(EventPlayer()), FixedToInt(((IntToFixed(gv_researchInvested[EventPlayer()][lv_iDontWantToCountToday]) / IntToFixed(lv_researchCost)) * 600.0)), 20);
            if (((gv_researchQ[EventPlayer()][0] == lv_iDontWantToCountToday) || (gv_researchQ[EventPlayer()][1] == lv_iDontWantToCountToday))) {
                libNtve_gf_SetDialogItemTooltip(gv_researchMenuSelectedDialogItems[1], TextWithColor((StringExternal("Param/Value/1ABA0BC6") + (FixedToText(((IntToFixed(lv_costPerTick) / IntToFixed(lv_researchCost)) * 100.0), 2) + StringExternal("Param/Value/8BDEC3D8"))), Color(0.00, 100.00, 0.00)), PlayerGroupSingle(EventPlayer()));
            }

            DialogControlSetSize(gv_researchMenuSelectedDialogItems[7], PlayerGroupSingle(EventPlayer()), 1, 20);
            DialogControlSetSize(gv_researchMenuSelectedDialogItems[7], PlayerGroupSingle(EventPlayer()), FixedToInt(((IntToFixed(gv_donatedTechTotal[EventPlayer()][lv_iDontWantToCountToday]) / IntToFixed(lv_researchCost)) * 600.0)), 20);
            libNtve_gf_SetDialogItemText(gv_researchMenuSelectedDialogItems[2], (FixedToText(((IntToFixed(gv_researchInvested[EventPlayer()][lv_iDontWantToCountToday]) / IntToFixed(lv_researchCost)) * 100.0), 0) + StringExternal("Param/Value/26D93EEE")), PlayerGroupSingle(EventPlayer()));
            libNtve_gf_SetDialogItemTooltip(gv_researchMenuSelectedDialogItems[7], TextWithColor((StringExternal("Param/Value/87D6B1FF") + (FixedToText(((IntToFixed(gv_donatedTechRate[EventPlayer()][lv_iDontWantToCountToday]) / IntToFixed(lv_researchCost)) * 100.0), 2) + StringExternal("Param/Value/C2F26ECE"))), Color(0.00, 0.00, 100.00)), PlayerGroupSingle(EventPlayer()));
            if ((lv_researchTimeL > 24)) {
                if ((lv_researchTimeL > 3600)) {
                    lv_researchTimeL = (lv_researchTimeL / 1200);
                    libNtve_gf_SetDialogItemText(gv_researchMenuSelectedDialogItems[4], (IntToText(lv_researchTimeL) + StringExternal("Param/Value/78801818")), PlayerGroupSingle(EventPlayer()));
                }
                else {
                    lv_researchTimeL = (lv_researchTimeL / 12);
                    libNtve_gf_SetDialogItemText(gv_researchMenuSelectedDialogItems[4], (IntToText(lv_researchTimeL) + StringExternal("Param/Value/1C97E51A")), PlayerGroupSingle(EventPlayer()));
                }
            }
            else {
                libNtve_gf_SetDialogItemText(gv_researchMenuSelectedDialogItems[4], (IntToText(lv_researchTimeL) + StringExternal("Param/Value/93082770")), PlayerGroupSingle(EventPlayer()));
            }
            libNtve_gf_SetDialogItemText(gv_researchMenuSelectedDialogItems[5], IntToText(((lv_researchCost - gv_researchInvested[EventPlayer()][lv_iDontWantToCountToday]) * 1)), PlayerGroupSingle(EventPlayer()));
            gv_selectedResearch[EventPlayer()] = lv_iDontWantToCountToday;
            break;
        }

        lv_iDontWantToCountToday += 1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SelectedIcon_Init () {
    gt_SelectedIcon = TriggerCreate("gt_SelectedIcon_Func");
    TriggerAddEventDialogControl(gt_SelectedIcon, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: RefresehSelectedIcon
//--------------------------------------------------------------------------------------------------
bool gt_RefresehSelectedIcon_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_iDontWantToCountToday;
    int lv_researchCost;
    int lv_researchTimeL;
    int lv_costPerTick;

    // Automatic Variable Declarations
    playergroup auto89F97D51_g;
    int auto89F97D51_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto89F97D51_g = gv_users;
    auto89F97D51_var = -1;
    while (true) {
        auto89F97D51_var = PlayerGroupNextPlayer(auto89F97D51_g, auto89F97D51_var);
        if (auto89F97D51_var < 0) { break; }
        lv_iDontWantToCountToday = gv_selectedIconResearch[auto89F97D51_var];
        DialogControlSetSize(gv_researchMenuSelectedDialogItems[1], PlayerGroupSingle(auto89F97D51_var), 1, 20);
        libNtve_gf_SetDialogItemText(gv_researchMenuSelectedDialogItems[3], StringToText(gv_researchName[lv_iDontWantToCountToday]), PlayerGroupSingle(auto89F97D51_var));
        lv_researchCost = gv_researchCost[lv_iDontWantToCountToday];
        lv_researchTimeL = (lv_researchCost / gv_researchTime[lv_iDontWantToCountToday]);
        lv_researchTimeL = (lv_researchTimeL * gv_researchSpeed[auto89F97D51_var]);
        lv_researchTimeL = (lv_researchTimeL / 100);
        lv_costPerTick = lv_researchTimeL;
        lv_researchTimeL = (lv_researchCost - gv_researchInvested[auto89F97D51_var][lv_iDontWantToCountToday]);
        if ((lv_costPerTick == 0)) {
            lv_researchTimeL = FixedToInt((IntToFixed(lv_researchTimeL) / 0.001));
        }
        else {
            lv_researchTimeL = (lv_researchTimeL / lv_costPerTick);
        }
        DialogControlSetSize(gv_researchMenuSelectedDialogItems[1], PlayerGroupSingle(auto89F97D51_var), FixedToInt(((IntToFixed(gv_researchInvested[auto89F97D51_var][lv_iDontWantToCountToday]) / IntToFixed(lv_researchCost)) * 600.0)), 20);
        if (((gv_researchQ[auto89F97D51_var][0] == lv_iDontWantToCountToday) || (gv_researchQ[auto89F97D51_var][1] == lv_iDontWantToCountToday))) {
            libNtve_gf_SetDialogItemTooltip(gv_researchMenuSelectedDialogItems[1], TextWithColor((StringExternal("Param/Value/6EA9EA5B") + (FixedToText(((IntToFixed(lv_costPerTick) / IntToFixed(lv_researchCost)) * 100.0), 2) + StringExternal("Param/Value/FF01A0E5"))), Color(0.00, 100.00, 0.00)), PlayerGroupSingle(auto89F97D51_var));
        }

        DialogControlSetSize(gv_researchMenuSelectedDialogItems[7], PlayerGroupSingle(EventPlayer()), 1, 20);
        DialogControlSetSize(gv_researchMenuSelectedDialogItems[7], PlayerGroupSingle(auto89F97D51_var), FixedToInt(((IntToFixed(gv_donatedTechTotal[auto89F97D51_var][lv_iDontWantToCountToday]) / IntToFixed(lv_researchCost)) * 600.0)), 20);
        libNtve_gf_SetDialogItemText(gv_researchMenuSelectedDialogItems[2], (FixedToText(((IntToFixed(gv_researchInvested[auto89F97D51_var][lv_iDontWantToCountToday]) / IntToFixed(lv_researchCost)) * 100.0), 0) + StringExternal("Param/Value/690D4B18")), PlayerGroupSingle(auto89F97D51_var));
        libNtve_gf_SetDialogItemTooltip(gv_researchMenuSelectedDialogItems[7], TextWithColor((StringExternal("Param/Value/AED7DCCE") + (FixedToText(((IntToFixed(gv_donatedTechRate[auto89F97D51_var][lv_iDontWantToCountToday]) / IntToFixed(lv_researchCost)) * 100.0), 2) + StringExternal("Param/Value/6F3FAC83"))), Color(0.00, 0.00, 100.00)), PlayerGroupSingle(auto89F97D51_var));
        libNtve_gf_SetDialogItemText(gv_researchMenuSelectedDialogItems[5], IntToText(((lv_researchCost - gv_researchInvested[auto89F97D51_var][lv_iDontWantToCountToday]) * 1)), PlayerGroupSingle(auto89F97D51_var));
        if ((lv_researchTimeL > 24)) {
            if ((lv_researchTimeL > 3600)) {
                lv_researchTimeL = (lv_researchTimeL / 1200);
                libNtve_gf_SetDialogItemText(gv_researchMenuSelectedDialogItems[4], (IntToText(lv_researchTimeL) + StringExternal("Param/Value/C81B7D63")), PlayerGroupSingle(EventPlayer()));
            }
            else {
                lv_researchTimeL = (lv_researchTimeL / 12);
                libNtve_gf_SetDialogItemText(gv_researchMenuSelectedDialogItems[4], (IntToText(lv_researchTimeL) + StringExternal("Param/Value/1398C5B6")), PlayerGroupSingle(EventPlayer()));
            }
        }
        else {
            libNtve_gf_SetDialogItemText(gv_researchMenuSelectedDialogItems[4], (IntToText(lv_researchTimeL) + StringExternal("Param/Value/917C9BB1")), PlayerGroupSingle(EventPlayer()));
        }
        gv_selectedResearch[auto89F97D51_var] = lv_iDontWantToCountToday;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RefresehSelectedIcon_Init () {
    gt_RefresehSelectedIcon = TriggerCreate("gt_RefresehSelectedIcon_Func");
    TriggerAddEventTimePeriodic(gt_RefresehSelectedIcon, 0.9, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Commit to Research
//--------------------------------------------------------------------------------------------------
bool gt_CommittoResearch_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_qBeingUsed;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_researchMenuSelectedDialogItems[6]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((gv_researchQ[EventPlayer()][0] == gv_selectedResearch[EventPlayer()]) || (gv_researchQ[EventPlayer()][1] == gv_selectedResearch[EventPlayer()]))) {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/D2744323"));
    }
    else {
        if ((gv_researchQ[EventPlayer()][0] > 0)) {
            if ((gv_researchQ[EventPlayer()][1] > 0)) {
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/87740EBB"));
                TriggerStop(TriggerGetCurrent());
            }
            else {
                lv_qBeingUsed = 1;
                gv_researchQ[EventPlayer()][lv_qBeingUsed] = gv_selectedResearch[EventPlayer()];
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/82CC1CFC"));
            }
        }
        else {
            lv_qBeingUsed = 0;
            gv_researchQ[EventPlayer()][lv_qBeingUsed] = gv_selectedResearch[EventPlayer()];
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/5D87AC7B"));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CommittoResearch_Init () {
    gt_CommittoResearch = TriggerCreate("gt_CommittoResearch_Func");
    TriggerAddEventDialogControl(gt_CommittoResearch, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Set Research Costs - Research List -
//--------------------------------------------------------------------------------------------------
bool gt_SetResearchCostsResearchList_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_iDontWantToCountToday;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_researchName[lv_iDontWantToCountToday] = "Settlers";
    lv_iDontWantToCountToday += 1;
    gv_researchCost[lv_iDontWantToCountToday] = 200;
    gv_researchTime[lv_iDontWantToCountToday] = 6;
    gv_researchName[lv_iDontWantToCountToday] = "Administrative Hierarchy";
    lv_iDontWantToCountToday += 1;
    gv_researchCost[lv_iDontWantToCountToday] = 300;
    gv_researchTime[lv_iDontWantToCountToday] = 6;
    gv_researchName[lv_iDontWantToCountToday] = "Urban Planning";
    lv_iDontWantToCountToday += 1;
    gv_researchCost[lv_iDontWantToCountToday] = 300;
    gv_researchTime[lv_iDontWantToCountToday] = 6;
    gv_researchName[lv_iDontWantToCountToday] = "National Highway";
    lv_iDontWantToCountToday += 1;
    gv_researchCost[lv_iDontWantToCountToday] = 500;
    gv_researchTime[lv_iDontWantToCountToday] = 12;
    gv_researchName[lv_iDontWantToCountToday] = "Governmental Delegation";
    lv_iDontWantToCountToday += 1;
    gv_researchCost[lv_iDontWantToCountToday] = 500;
    gv_researchTime[lv_iDontWantToCountToday] = 12;
    gv_researchName[lv_iDontWantToCountToday] = "Global Governmental Network";
    lv_iDontWantToCountToday += 1;
    gv_researchCost[lv_iDontWantToCountToday] = 2500;
    gv_researchTime[lv_iDontWantToCountToday] = 48;
    gv_researchName[lv_iDontWantToCountToday] = "Efficient Government";
    lv_iDontWantToCountToday += 1;
    gv_researchCost[lv_iDontWantToCountToday] = 200;
    gv_researchTime[lv_iDontWantToCountToday] = 12;
    gv_researchName[lv_iDontWantToCountToday] = "Mass Vaccinations";
    lv_iDontWantToCountToday += 1;
    gv_researchCost[lv_iDontWantToCountToday] = 1500;
    gv_researchTime[lv_iDontWantToCountToday] = 36;
    gv_researchName[lv_iDontWantToCountToday] = "Genetically Modified Humans";
    lv_iDontWantToCountToday += 1;
    gv_researchCost[lv_iDontWantToCountToday] = 3000;
    gv_researchTime[lv_iDontWantToCountToday] = 48;
    gv_researchName[lv_iDontWantToCountToday] = "Experimental Cloning";
    lv_iDontWantToCountToday += 1;
    gv_researchCost[lv_iDontWantToCountToday] = 2000;
    gv_researchTime[lv_iDontWantToCountToday] = 128;
    gv_researchName[lv_iDontWantToCountToday] = "Mass Cloning";
    lv_iDontWantToCountToday += 1;
    gv_researchCost[lv_iDontWantToCountToday] = 200;
    gv_researchTime[lv_iDontWantToCountToday] = 12;
    gv_researchName[lv_iDontWantToCountToday] = "Optional Conscription Registration";
    lv_iDontWantToCountToday += 1;
    gv_researchCost[lv_iDontWantToCountToday] = 500;
    gv_researchTime[lv_iDontWantToCountToday] = 36;
    gv_researchName[lv_iDontWantToCountToday] = "Compulsory Conscription Registration";
    lv_iDontWantToCountToday += 1;
    gv_researchCost[lv_iDontWantToCountToday] = 750;
    gv_researchTime[lv_iDontWantToCountToday] = 12;
    gv_researchName[lv_iDontWantToCountToday] = "International Union";
    lv_iDontWantToCountToday += 1;
    gv_researchCost[lv_iDontWantToCountToday] = 100;
    gv_researchTime[lv_iDontWantToCountToday] = 24;
    gv_researchName[lv_iDontWantToCountToday] = "Nationalism";
    lv_iDontWantToCountToday += 1;
    gv_researchCost[lv_iDontWantToCountToday] = 200;
    gv_researchTime[lv_iDontWantToCountToday] = 48;
    gv_researchName[lv_iDontWantToCountToday] = "Unconditional Victory";
    lv_iDontWantToCountToday += 1;
    gv_researchCost[lv_iDontWantToCountToday] = 750;
    gv_researchTime[lv_iDontWantToCountToday] = 32;
    gv_researchName[lv_iDontWantToCountToday] = "Basic Farming Practices";
    lv_iDontWantToCountToday += 1;
    gv_researchCost[lv_iDontWantToCountToday] = 1250;
    gv_researchTime[lv_iDontWantToCountToday] = 40;
    gv_researchName[lv_iDontWantToCountToday] = "Mechanized Farming";
    lv_iDontWantToCountToday += 1;
    gv_researchCost[lv_iDontWantToCountToday] = 3000;
    gv_researchTime[lv_iDontWantToCountToday] = 80;
    gv_researchName[lv_iDontWantToCountToday] = "Artificial Farming";
    lv_iDontWantToCountToday += 1;
    gv_researchCost[lv_iDontWantToCountToday] = 500;
    gv_researchTime[lv_iDontWantToCountToday] = 12;
    gv_researchName[lv_iDontWantToCountToday] = "Rudimentary Electricity";
    lv_iDontWantToCountToday += 1;
    gv_researchCost[lv_iDontWantToCountToday] = 1500;
    gv_researchTime[lv_iDontWantToCountToday] = 32;
    gv_researchName[lv_iDontWantToCountToday] = "Oil Power";
    lv_iDontWantToCountToday += 1;
    gv_researchCost[lv_iDontWantToCountToday] = 5000;
    gv_researchTime[lv_iDontWantToCountToday] = 64;
    gv_researchName[lv_iDontWantToCountToday] = "Nuclear Fission";
    lv_iDontWantToCountToday += 1;
    gv_researchCost[lv_iDontWantToCountToday] = 10000;
    gv_researchTime[lv_iDontWantToCountToday] = 80;
    gv_researchName[lv_iDontWantToCountToday] = "Nuclear Fusion";
    lv_iDontWantToCountToday += 1;
    gv_researchCost[lv_iDontWantToCountToday] = 8000;
    gv_researchTime[lv_iDontWantToCountToday] = 112;
    gv_researchName[lv_iDontWantToCountToday] = "AI-Integrated Workforce";
    lv_iDontWantToCountToday += 1;
    gv_researchCost[lv_iDontWantToCountToday] = 500;
    gv_researchTime[lv_iDontWantToCountToday] = 24;
    gv_researchName[lv_iDontWantToCountToday] = "CPG Concept";
    lv_iDontWantToCountToday += 1;
    gv_researchCost[lv_iDontWantToCountToday] = 750;
    gv_researchTime[lv_iDontWantToCountToday] = 36;
    gv_researchName[lv_iDontWantToCountToday] = "CPG Implementation";
    lv_iDontWantToCountToday += 1;
    gv_researchCost[lv_iDontWantToCountToday] = 1500;
    gv_researchTime[lv_iDontWantToCountToday] = 48;
    gv_researchName[lv_iDontWantToCountToday] = "Advanced Oil Extraction";
    lv_iDontWantToCountToday += 1;
    gv_researchCost[lv_iDontWantToCountToday] = 250;
    gv_researchTime[lv_iDontWantToCountToday] = 48;
    gv_researchName[lv_iDontWantToCountToday] = "Economic Bailouts";
    lv_iDontWantToCountToday += 1;
    gv_researchCost[lv_iDontWantToCountToday] = 500;
    gv_researchTime[lv_iDontWantToCountToday] = 65;
    gv_researchName[lv_iDontWantToCountToday] = "Trade Regulations";
    lv_iDontWantToCountToday += 1;
    gv_researchCost[lv_iDontWantToCountToday] = 500;
    gv_researchTime[lv_iDontWantToCountToday] = 64;
    gv_researchName[lv_iDontWantToCountToday] = "Deficit Management";
    lv_iDontWantToCountToday += 1;
    gv_researchCost[lv_iDontWantToCountToday] = 15000;
    gv_researchTime[lv_iDontWantToCountToday] = 12;
    gv_researchName[lv_iDontWantToCountToday] = "Fully Automated Economy Concept";
    lv_iDontWantToCountToday += 1;
    gv_researchCost[lv_iDontWantToCountToday] = 2500;
    gv_researchTime[lv_iDontWantToCountToday] = 12;
    gv_researchName[lv_iDontWantToCountToday] = "Fully Automated Economy Project";
    lv_iDontWantToCountToday += 1;
    gv_researchCost[lv_iDontWantToCountToday] = 250;
    gv_researchTime[lv_iDontWantToCountToday] = 186;
    gv_researchName[lv_iDontWantToCountToday] = "Fully Automated Economy Transition";
    lv_iDontWantToCountToday += 1;
    lv_iDontWantToCountToday += 1;
    gv_researchCost[lv_iDontWantToCountToday] = 150;
    gv_researchTime[lv_iDontWantToCountToday] = 6;
    gv_researchName[lv_iDontWantToCountToday] = "Improved Infantry Weapons";
    lv_iDontWantToCountToday += 1;
    gv_researchCost[lv_iDontWantToCountToday] = 1500;
    gv_researchTime[lv_iDontWantToCountToday] = 12;
    gv_researchName[lv_iDontWantToCountToday] = "Power Based Weapons";
    lv_iDontWantToCountToday += 1;
    gv_researchCost[lv_iDontWantToCountToday] = 1000;
    gv_researchTime[lv_iDontWantToCountToday] = 32;
    gv_researchName[lv_iDontWantToCountToday] = "Improved Power Weapons";
    lv_iDontWantToCountToday += 1;
    gv_researchCost[lv_iDontWantToCountToday] = 2500;
    gv_researchTime[lv_iDontWantToCountToday] = 64;
    gv_researchName[lv_iDontWantToCountToday] = "Futuristic Weapons";
    lv_iDontWantToCountToday += 1;
    gv_researchCost[lv_iDontWantToCountToday] = 100;
    gv_researchTime[lv_iDontWantToCountToday] = 18;
    gv_researchName[lv_iDontWantToCountToday] = "Kevlar Depployment";
    lv_iDontWantToCountToday += 1;
    gv_researchCost[lv_iDontWantToCountToday] = 750;
    gv_researchTime[lv_iDontWantToCountToday] = 24;
    gv_researchName[lv_iDontWantToCountToday] = "Power Armor Concept";
    lv_iDontWantToCountToday += 1;
    gv_researchCost[lv_iDontWantToCountToday] = 250;
    gv_researchTime[lv_iDontWantToCountToday] = 40;
    gv_researchName[lv_iDontWantToCountToday] = "Basic Power Troops";
    lv_iDontWantToCountToday += 1;
    gv_researchCost[lv_iDontWantToCountToday] = 2500;
    gv_researchTime[lv_iDontWantToCountToday] = 64;
    gv_researchName[lv_iDontWantToCountToday] = "Advanced Power Troops";
    lv_iDontWantToCountToday += 1;
    gv_researchCost[lv_iDontWantToCountToday] = 1000;
    gv_researchTime[lv_iDontWantToCountToday] = 32;
    gv_researchName[lv_iDontWantToCountToday] = "Improved Power Armor";
    lv_iDontWantToCountToday += 1;
    gv_researchCost[lv_iDontWantToCountToday] = 2500;
    gv_researchTime[lv_iDontWantToCountToday] = 64;
    gv_researchName[lv_iDontWantToCountToday] = "Futuristic Power Armor";
    lv_iDontWantToCountToday += 1;
    gv_researchCost[lv_iDontWantToCountToday] = 150;
    gv_researchTime[lv_iDontWantToCountToday] = 6;
    gv_researchName[lv_iDontWantToCountToday] = "Basic Engine";
    lv_iDontWantToCountToday += 1;
    gv_researchCost[lv_iDontWantToCountToday] = 1500;
    gv_researchTime[lv_iDontWantToCountToday] = 36;
    gv_researchName[lv_iDontWantToCountToday] = "Advanced Engine";
    lv_iDontWantToCountToday += 1;
    gv_researchCost[lv_iDontWantToCountToday] = 2000;
    gv_researchTime[lv_iDontWantToCountToday] = 36;
    gv_researchName[lv_iDontWantToCountToday] = "Futuristic Engine";
    lv_iDontWantToCountToday += 1;
    gv_researchCost[lv_iDontWantToCountToday] = 7500;
    gv_researchTime[lv_iDontWantToCountToday] = 100;
    gv_researchName[lv_iDontWantToCountToday] = "The Crusader Project";
    lv_iDontWantToCountToday += 1;
    gv_researchCost[lv_iDontWantToCountToday] = 750;
    gv_researchTime[lv_iDontWantToCountToday] = 24;
    gv_researchName[lv_iDontWantToCountToday] = "Basic Flight";
    lv_iDontWantToCountToday += 1;
    gv_researchCost[lv_iDontWantToCountToday] = 1500;
    gv_researchTime[lv_iDontWantToCountToday] = 52;
    gv_researchName[lv_iDontWantToCountToday] = "Advanced Flight";
    lv_iDontWantToCountToday += 1;
    gv_researchCost[lv_iDontWantToCountToday] = 5000;
    gv_researchTime[lv_iDontWantToCountToday] = 100;
    gv_researchName[lv_iDontWantToCountToday] = "The A110 Project";
    lv_iDontWantToCountToday += 1;
    gv_researchCost[lv_iDontWantToCountToday] = 150;
    gv_researchTime[lv_iDontWantToCountToday] = 12;
    gv_researchName[lv_iDontWantToCountToday] = "Laser Concept";
    lv_iDontWantToCountToday += 1;
    gv_researchCost[lv_iDontWantToCountToday] = 750;
    gv_researchTime[lv_iDontWantToCountToday] = 36;
    gv_researchName[lv_iDontWantToCountToday] = "Focused Laser";
    lv_iDontWantToCountToday += 1;
    gv_researchCost[lv_iDontWantToCountToday] = 1000;
    gv_researchTime[lv_iDontWantToCountToday] = 40;
    gv_researchName[lv_iDontWantToCountToday] = "Focused Kinetics";
    lv_iDontWantToCountToday += 1;
    gv_researchCost[lv_iDontWantToCountToday] = 2000;
    gv_researchTime[lv_iDontWantToCountToday] = 64;
    gv_researchName[lv_iDontWantToCountToday] = "Advanced Kinetics";
    lv_iDontWantToCountToday += 1;
    gv_researchCost[lv_iDontWantToCountToday] = 300;
    gv_researchTime[lv_iDontWantToCountToday] = 12;
    gv_researchName[lv_iDontWantToCountToday] = "Improved Fortifications";
    lv_iDontWantToCountToday += 1;
    gv_researchCost[lv_iDontWantToCountToday] = 1500;
    gv_researchTime[lv_iDontWantToCountToday] = 48;
    gv_researchName[lv_iDontWantToCountToday] = "Nanorepair Technology";
    lv_iDontWantToCountToday += 1;
    gv_researchCost[lv_iDontWantToCountToday] = 2000;
    gv_researchTime[lv_iDontWantToCountToday] = 64;
    gv_researchName[lv_iDontWantToCountToday] = "Reinforced Fortifications";
    lv_iDontWantToCountToday += 1;
    gv_researchCost[lv_iDontWantToCountToday] = 3500;
    gv_researchTime[lv_iDontWantToCountToday] = 128;
    gv_researchName[lv_iDontWantToCountToday] = "The Wall Project";
    lv_iDontWantToCountToday += 1;
    gv_researchCost[lv_iDontWantToCountToday] = 2000;
    gv_researchTime[lv_iDontWantToCountToday] = 52;
    gv_researchName[lv_iDontWantToCountToday] = "Missile Technology";
    lv_iDontWantToCountToday += 1;
    gv_researchCost[lv_iDontWantToCountToday] = 2000;
    gv_researchTime[lv_iDontWantToCountToday] = 64;
    gv_researchName[lv_iDontWantToCountToday] = "Nuclear-Tipped Payloads";
    lv_iDontWantToCountToday += 1;
    gv_researchCost[lv_iDontWantToCountToday] = 5000;
    gv_researchTime[lv_iDontWantToCountToday] = 72;
    gv_researchName[lv_iDontWantToCountToday] = "Hydrogen-Based Missiles";
    lv_iDontWantToCountToday += 1;
    gv_researchCost[lv_iDontWantToCountToday] = 10000;
    gv_researchTime[lv_iDontWantToCountToday] = 128;
    gv_researchName[lv_iDontWantToCountToday] = "Halycon Missiles";
    lv_iDontWantToCountToday += 1;
    gv_researchCost[lv_iDontWantToCountToday] = 1500;
    gv_researchTime[lv_iDontWantToCountToday] = 64;
    gv_researchName[lv_iDontWantToCountToday] = "High Velocity Missiles";
    lv_iDontWantToCountToday += 1;
    gv_researchCost[lv_iDontWantToCountToday] = 7500;
    gv_researchTime[lv_iDontWantToCountToday] = 142;
    gv_researchName[lv_iDontWantToCountToday] = "Laser Interception";
    lv_iDontWantToCountToday += 1;
    gv_researchCost[lv_iDontWantToCountToday] = 1500;
    gv_researchTime[lv_iDontWantToCountToday] = 32;
    gv_researchName[lv_iDontWantToCountToday] = "Biological Research";
    lv_iDontWantToCountToday += 1;
    gv_researchCost[lv_iDontWantToCountToday] = 500;
    gv_researchTime[lv_iDontWantToCountToday] = 32;
    gv_researchName[lv_iDontWantToCountToday] = "Zombie Concept";
    lv_iDontWantToCountToday += 1;
    gv_researchCost[lv_iDontWantToCountToday] = 1500;
    gv_researchTime[lv_iDontWantToCountToday] = 64;
    gv_researchName[lv_iDontWantToCountToday] = "Autonomous Zombies";
    lv_iDontWantToCountToday += 1;
    gv_researchCost[lv_iDontWantToCountToday] = 3000;
    gv_researchTime[lv_iDontWantToCountToday] = 64;
    gv_researchName[lv_iDontWantToCountToday] = "Omega Zombies";
    lv_iDontWantToCountToday += 1;
    gv_researchCost[lv_iDontWantToCountToday] = 750;
    gv_researchTime[lv_iDontWantToCountToday] = 82;
    gv_researchName[lv_iDontWantToCountToday] = "Weaponized Diseases";
    lv_iDontWantToCountToday += 1;
    gv_researchCost[lv_iDontWantToCountToday] = 5000;
    gv_researchTime[lv_iDontWantToCountToday] = 92;
    gv_researchName[lv_iDontWantToCountToday] = "Modified Diseases";
    lv_iDontWantToCountToday += 1;
    gv_researchCost[lv_iDontWantToCountToday] = 15000;
    gv_researchTime[lv_iDontWantToCountToday] = 128;
    gv_researchName[lv_iDontWantToCountToday] = "The Worldeater Project";
    lv_iDontWantToCountToday += 1;
    gv_researchCost[lv_iDontWantToCountToday] = 750;
    gv_researchTime[lv_iDontWantToCountToday] = 12;
    gv_researchName[lv_iDontWantToCountToday] = "Advanced Radar Station";
    lv_iDontWantToCountToday += 1;
    gv_researchCost[lv_iDontWantToCountToday] = 1000;
    gv_researchTime[lv_iDontWantToCountToday] = 36;
    gv_researchName[lv_iDontWantToCountToday] = "Advanced Radar Refraction";
    lv_iDontWantToCountToday += 1;
    gv_researchCost[lv_iDontWantToCountToday] = 12500;
    gv_researchTime[lv_iDontWantToCountToday] = 64;
    gv_researchName[lv_iDontWantToCountToday] = "Shield Generation";
    lv_iDontWantToCountToday += 1;
    gv_researchCost[lv_iDontWantToCountToday] = 8000;
    gv_researchTime[lv_iDontWantToCountToday] = 64;
    gv_researchName[lv_iDontWantToCountToday] = "Electric Tanks";
    lv_iDontWantToCountToday += 1;
    gv_researchCost[lv_iDontWantToCountToday] = 2500;
    gv_researchTime[lv_iDontWantToCountToday] = 32;
    gv_researchName[lv_iDontWantToCountToday] = "AI Targetting Systems";
    lv_iDontWantToCountToday += 1;
    gv_researchCost[lv_iDontWantToCountToday] = 7500;
    gv_researchTime[lv_iDontWantToCountToday] = 64;
    gv_researchName[lv_iDontWantToCountToday] = "Predictive AI Systems";
    lv_iDontWantToCountToday += 1;
    gv_researchCost[lv_iDontWantToCountToday] = 10000;
    gv_researchTime[lv_iDontWantToCountToday] = 72;
    gv_researchName[lv_iDontWantToCountToday] = "Collaborative AI Network";
    lv_iDontWantToCountToday += 1;
    gv_researchCost[lv_iDontWantToCountToday] = 10000;
    gv_researchTime[lv_iDontWantToCountToday] = 64;
    gv_researchName[lv_iDontWantToCountToday] = "Self-Powered Tanks";
    lv_iDontWantToCountToday += 1;
    gv_researchCost[lv_iDontWantToCountToday] = 500;
    gv_researchTime[lv_iDontWantToCountToday] = 32;
    gv_researchName[lv_iDontWantToCountToday] = "Extensive Reserves Training";
    gv_researchesAvailable = lv_iDontWantToCountToday;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SetResearchCostsResearchList_Init () {
    gt_SetResearchCostsResearchList = TriggerCreate("gt_SetResearchCostsResearchList_Func");
    TriggerAddEventMapInit(gt_SetResearchCostsResearchList);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Update Current Research in Menu
//--------------------------------------------------------------------------------------------------
bool gt_UpdateCurrentResearchinMenu_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoB79D235E_g;
    int autoB79D235E_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoB79D235E_g = gv_users;
    autoB79D235E_var = -1;
    while (true) {
        autoB79D235E_var = PlayerGroupNextPlayer(autoB79D235E_g, autoB79D235E_var);
        if (autoB79D235E_var < 0) { break; }
        DialogControlSetEnabled(gv_currentDialogItems[4], PlayerGroupAll(), true);
        DialogControlSetEnabled(gv_currentDialogItems[5], PlayerGroupAll(), true);
        DialogControlSetEnabled(gv_currentDialogItems[6], PlayerGroupAll(), true);
        if ((gv_researchQ[autoB79D235E_var][0] > 0)) {
            libNtve_gf_SetDialogItemText(gv_currentDialogItems[0], StringToText(gv_researchName[gv_researchQ[autoB79D235E_var][0]]), PlayerGroupSingle(autoB79D235E_var));
            libNtve_gf_SetDialogItemText(gv_currentDialogItems[1], (FixedToText(((IntToFixed(gv_researchInvested[autoB79D235E_var][gv_researchQ[autoB79D235E_var][0]]) / IntToFixed(gv_researchCost[gv_researchQ[autoB79D235E_var][0]])) * 100.0), 0) + StringExternal("Param/Value/8BB34469")), PlayerGroupSingle(autoB79D235E_var));
        }
        else {
            libNtve_gf_SetDialogItemText(gv_currentDialogItems[0], StringExternal("Param/Value/494B8684"), PlayerGroupSingle(autoB79D235E_var));
            libNtve_gf_SetDialogItemText(gv_currentDialogItems[1], StringToText(""), PlayerGroupSingle(autoB79D235E_var));
        }
        if ((gv_researchQ[autoB79D235E_var][1] > 0)) {
            libNtve_gf_SetDialogItemText(gv_currentDialogItems[2], StringToText(gv_researchName[gv_researchQ[autoB79D235E_var][1]]), PlayerGroupSingle(autoB79D235E_var));
            libNtve_gf_SetDialogItemText(gv_currentDialogItems[3], (FixedToText(((IntToFixed(gv_researchInvested[autoB79D235E_var][gv_researchQ[autoB79D235E_var][1]]) / IntToFixed(gv_researchCost[gv_researchQ[autoB79D235E_var][1]])) * 100.0), 0) + StringExternal("Param/Value/F97C1853")), PlayerGroupSingle(autoB79D235E_var));
        }
        else {
            libNtve_gf_SetDialogItemText(gv_currentDialogItems[2], StringExternal("Param/Value/DA4B8703"), PlayerGroupSingle(autoB79D235E_var));
            libNtve_gf_SetDialogItemText(gv_currentDialogItems[3], StringToText(""), PlayerGroupSingle(autoB79D235E_var));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpdateCurrentResearchinMenu_Init () {
    gt_UpdateCurrentResearchinMenu = TriggerCreate("gt_UpdateCurrentResearchinMenu_Func");
    TriggerAddEventTimePeriodic(gt_UpdateCurrentResearchinMenu, 0.99, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CancelORGivePriorityToResearch
//--------------------------------------------------------------------------------------------------
bool gt_CancelORGivePriorityToResearch_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_researchRAM;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_currentDialogItems[6]) || (EventDialogControl() == gv_currentDialogItems[5]) || (EventDialogControl() == gv_currentDialogItems[4])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventDialogControl() == gv_currentDialogItems[4])) {
        gv_researchQ[EventPlayer()][0] = 0;
        DialogControlSetEnabled(gv_currentDialogItems[4], PlayerGroupSingle(EventPlayer()), false);
    }

    if ((EventDialogControl() == gv_currentDialogItems[5])) {
        gv_researchQ[EventPlayer()][1] = 0;
        DialogControlSetEnabled(gv_currentDialogItems[5], PlayerGroupSingle(EventPlayer()), false);
    }

    if ((EventDialogControl() == gv_currentDialogItems[6])) {
        lv_researchRAM = gv_researchQ[EventPlayer()][0];
        gv_researchQ[EventPlayer()][0] = gv_researchQ[EventPlayer()][1];
        gv_researchQ[EventPlayer()][1] = lv_researchRAM;
        DialogControlSetEnabled(gv_currentDialogItems[6], PlayerGroupSingle(EventPlayer()), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CancelORGivePriorityToResearch_Init () {
    gt_CancelORGivePriorityToResearch = TriggerCreate("gt_CancelORGivePriorityToResearch_Func");
    TriggerAddEventDialogControl(gt_CancelORGivePriorityToResearch, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: RussiaRazeResist
//--------------------------------------------------------------------------------------------------
bool gt_RussiaRazeResist_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((gv_russianCitiesAlive[1] == false) || (gv_russianCitiesAlive[2] == false) || (gv_russianCitiesAlive[3] == false)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_russianCitiesAlive[1] == false) && (UnitHasBehavior2(gv_russianCities[1], "Razing") == true)) {
        gf_RussianRazeRebel(gv_russianCities[1]);
    }

    if ((gv_russianCitiesAlive[2] == false) && (UnitHasBehavior2(gv_russianCities[2], "Razing") == true)) {
        gf_RussianRazeRebel(gv_russianCities[2]);
    }

    if ((gv_russianCitiesAlive[3] == false) && (UnitHasBehavior2(gv_russianCities[3], "Razing") == true)) {
        gf_RussianRazeRebel(gv_russianCities[3]);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RussiaRazeResist_Init () {
    gt_RussiaRazeResist = TriggerCreate("gt_RussiaRazeResist_Func");
    TriggerAddEventTimePeriodic(gt_RussiaRazeResist, 30.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: StartRussia
//--------------------------------------------------------------------------------------------------
bool gt_StartRussia_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_ticker;

    // Automatic Variable Declarations
    unitgroup auto3E3B2405_g;
    int auto3E3B2405_u;
    unit auto3E3B2405_var;
    unitgroup autoE906C3F7_g;
    int autoE906C3F7_u;
    unit autoE906C3F7_var;
    int auto5B7D7014_n;
    int auto5B7D7014_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto3E3B2405_g = UnitGroup(null, 11, RegionEntireMap(), UnitFilter((1 << c_targetFilterPsionic) | (1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto3E3B2405_u = UnitGroupCount(auto3E3B2405_g, c_unitCountAll);
    for (;; auto3E3B2405_u -= 1) {
        auto3E3B2405_var = UnitGroupUnitFromEnd(auto3E3B2405_g, auto3E3B2405_u);
        if (auto3E3B2405_var == null) { break; }
        UnitBehaviorAdd(auto3E3B2405_var, "RussianCity", auto3E3B2405_var, 1);
    }
    Wait(60.0, c_timeGame);
    if ((gv_aIDifficulty == 0)) {

    }
    else {
        lv_ticker = ((200 - gv_arisAIDifficulty) / 10);
        while ((lv_ticker > 0)) {
            Wait(RandomInt(50, 60), c_timeGame);
            lv_ticker -= 1;
            if ((lv_ticker == RandomInt(1, 4)) && (gv_aIDifficulty > 0)) {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/957D6F65"));
            }

        }
    }
    if ((gv_aIDifficulty > 0)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/E5903DC3"));
        libNtve_gf_CreateUnitsWithDefaultFacing(20, "Conscript", 0, 11, PointFromId(205069842));
        SoundPlayForPlayer(SoundLink("zLab01_alarm_scripted", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        Wait(5.0, c_timeGame);
        SoundPlayForPlayer(SoundLink("Stukov_Attack", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        Wait(6.0, c_timeGame);
        SoundPlayForPlayer(SoundLink("Victory_Russia", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        Wait(60.0, c_timeGame);
        autoE906C3F7_g = UnitGroup(null, 11, RegionEntireMap(), UnitFilter((1 << c_targetFilterPsionic) | (1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoE906C3F7_u = UnitGroupCount(autoE906C3F7_g, c_unitCountAll);
        for (;; autoE906C3F7_u -= 1) {
            autoE906C3F7_var = UnitGroupUnitFromEnd(autoE906C3F7_g, autoE906C3F7_u);
            if (autoE906C3F7_var == null) { break; }
            UnitSetPropertyFixed(autoE906C3F7_var, c_unitPropEnergy, 0.0);
        }
        TriggerEnable(gt_RussianEconomy, true);
        auto5B7D7014_n = libNtve_gf_ArithmeticIntClamp((gv_arisAIDifficulty / 40), 1, 4);
        for (auto5B7D7014_i = 1; auto5B7D7014_i <= auto5B7D7014_n; auto5B7D7014_i += 1) {
            TriggerExecute(gt_RussianEconomy, true, false);
            Wait(2.0, c_timeGame);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartRussia_Init () {
    gt_StartRussia = TriggerCreate("gt_StartRussia_Func");
    TriggerAddEventMapInit(gt_StartRussia);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rusinfo
//--------------------------------------------------------------------------------------------------
bool gt_Rusinfo_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/4DC41997") + gf_MakeUIPresentable(gv_russianUnitProductionTargets[1])));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/CAAB0A61") + gf_MakeUIPresentable(gv_russianUnitProductionTargets[2])));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/96406B99") + gf_MakeUIPresentable(gv_russianUnitProductionTargets[3])));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/2A69F203") + gf_MakeUIPresentable(gv_russianUnitProductionTargets[4])));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/4BB7DB3D") + gf_MakeUIPresentable(gv_russianUnitProductionTargets[5])));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/4D351C62") + gf_MakeUIPresentable(gv_russianUnitProductionTargets[6])));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/A3F2CB80") + gf_MakeUIPresentable(gv_russianUnitProductionTargets[7])));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/6A0E3DE7") + gf_MakeUIPresentable(gv_russianDanger)));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/5044640E") + gf_MakeUIPresentable(gv_rTechnology)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Rusinfo_Init () {
    gt_Rusinfo = TriggerCreate("gt_Rusinfo_Func");
    TriggerAddEventChatMessage(gt_Rusinfo, c_playerAny, "rusinfo", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: RussianEconomy
//--------------------------------------------------------------------------------------------------
bool gt_RussianEconomy_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_UpdateRussianDomainFrontier();
    gf_RussianMultiplierUpdate();
    gf_RussianResourceCalculate();
    gf_UnitTypeUpdate();
    gf_RussiaProductionDesignation();
    gf_RussianSpotPlayerUnitsGetDanger();
    gf_RussianUnitDivisonTarget();
    gf_RUForceLimit();
    gf_DoTheNuke();
    gf_RussiaUnbunker();
    if ((RandomInt(0, 100) < 20)) {
        gf_UpgradeUnits();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RussianEconomy_Init () {
    gt_RussianEconomy = TriggerCreate("gt_RussianEconomy_Func");
    TriggerEnable(gt_RussianEconomy, false);
    TriggerAddEventTimePeriodic(gt_RussianEconomy, 30.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UpdateGuerillaTargets
//--------------------------------------------------------------------------------------------------
bool gt_UpdateGuerillaTargets_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_province;

    // Automatic Variable Declarations
    const int auto237708CF_ae = gv_numberOfRegions;
    const int auto237708CF_ai = 1;
    unitgroup autoC29C7615_g;
    int autoC29C7615_u;
    unit autoC29C7615_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupRemoveUnitGroup(gv_guerillaTargets, gv_guerillaTargets);
    lv_province = 1;
    for ( ; ( (auto237708CF_ai >= 0 && lv_province <= auto237708CF_ae) || (auto237708CF_ai < 0 && lv_province >= auto237708CF_ae) ) ; lv_province += auto237708CF_ai ) {
        if ((gv_soverignty[lv_province] == 11)) {
            autoC29C7615_g = UnitGroupAlliance(11, c_unitAllianceEnemy, gv_countRegions[lv_province], UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoC29C7615_u = UnitGroupCount(autoC29C7615_g, c_unitCountAll);
            for (;; autoC29C7615_u -= 1) {
                autoC29C7615_var = UnitGroupUnitFromEnd(autoC29C7615_g, autoC29C7615_u);
                if (autoC29C7615_var == null) { break; }
                UnitGroupAdd(gv_guerillaTargets, autoC29C7615_var);
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpdateGuerillaTargets_Init () {
    gt_UpdateGuerillaTargets = TriggerCreate("gt_UpdateGuerillaTargets_Func");
    TriggerAddEventTimePeriodic(gt_UpdateGuerillaTargets, 9.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: HuntTargets
//--------------------------------------------------------------------------------------------------
bool gt_HuntTargets_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_sniperpoint;
    unit lv_target;

    // Automatic Variable Declarations
    const int auto78A503D1_n = 20;
    int auto78A503D1_i;

    // Variable Initialization
    lv_target = UnitGroupRandomUnit(gv_guerillaTargets, c_unitCountAlive);

    // Conditions
    if (testConds) {
        if (!((gv_guerillaProd > 0))) {
            return false;
        }

        if (!((UnitGroupCount(gv_guerillaTargets, c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    for (auto78A503D1_i = 1; auto78A503D1_i <= auto78A503D1_n; auto78A503D1_i += 1) {
        lv_sniperpoint = RegionRandomPoint(RegionCircle(UnitGetPosition(lv_target), 12.0));
        if ((DistanceBetweenPoints(lv_sniperpoint, UnitGetPosition(UnitGroupClosestToPoint(UnitGroupAlliance(11, c_unitAllianceEnemy, gv_russianDomain, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), lv_sniperpoint))) > 7.0) && (!(((gv_soverignty[gf_GetCountyIDByPoint(lv_sniperpoint)] >= 1) && (gv_soverignty[gf_GetCountyIDByPoint(lv_sniperpoint)] <= 7))))) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "RussianGuerrilla", 0, 11, lv_sniperpoint);
            gv_guerillaProd -= 200;
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HuntTargets_Init () {
    gt_HuntTargets = TriggerCreate("gt_HuntTargets_Func");
    TriggerAddEventTimePeriodic(gt_HuntTargets, 1.1, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: VolgogradBuff
//--------------------------------------------------------------------------------------------------
bool gt_VolgogradBuff_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(gv_russianCities[1]) == true))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "RussianCity", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VolgogradBuff_Init () {
    gt_VolgogradBuff = TriggerCreate("gt_VolgogradBuff_Func");
    TriggerAddEventUnitRegion(gt_VolgogradBuff, null, RegionFromId(187), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MoscowBuff
//--------------------------------------------------------------------------------------------------
bool gt_MoscowBuff_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(gv_russianCities[2]) == true))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "RussianCity", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MoscowBuff_Init () {
    gt_MoscowBuff = TriggerCreate("gt_MoscowBuff_Func");
    TriggerAddEventUnitRegion(gt_MoscowBuff, null, RegionFromId(64), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NizhnevartovskBuff
//--------------------------------------------------------------------------------------------------
bool gt_NizhnevartovskBuff_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(gv_russianCities[3]) == true))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "RussianCity", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NizhnevartovskBuff_Init () {
    gt_NizhnevartovskBuff = TriggerCreate("gt_NizhnevartovskBuff_Func");
    TriggerAddEventUnitRegion(gt_NizhnevartovskBuff, null, RegionFromId(196), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SetRussianBaseStats
//--------------------------------------------------------------------------------------------------
bool gt_SetRussianBaseStats_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoE1CE03E8_g;
    int autoE1CE03E8_u;
    unit autoE1CE03E8_var;
    unitgroup autoC91874C1_g;
    int autoC91874C1_u;
    unit autoC91874C1_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoE1CE03E8_g = UnitGroup(null, 11, RegionEntireMap(), UnitFilter((1 << c_targetFilterPsionic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE1CE03E8_u = UnitGroupCount(autoE1CE03E8_g, c_unitCountAll);
    for (;; autoE1CE03E8_u -= 1) {
        autoE1CE03E8_var = UnitGroupUnitFromEnd(autoE1CE03E8_g, autoE1CE03E8_u);
        if (autoE1CE03E8_var == null) { break; }
        gv_baseRussianSkyscraper += 1;
    }
    gv_russianCities[1] = UnitFromId(954041181);
    gv_russianCities[2] = UnitFromId(176);
    gv_russianCities[3] = UnitFromId(1154574214);
    gv_baseRussianDefenses[1] = gf_GetRussianDefensesAroundBase(gv_russianCities[1]);
    gv_baseRussianDefenses[2] = gf_GetRussianDefensesAroundBase(gv_russianCities[2]);
    gv_baseRussianDefenses[3] = gf_GetRussianDefensesAroundBase(gv_russianCities[3]);
    autoC91874C1_g = UnitGroup("NewRussianFederationPeacekeeper", 11, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC91874C1_u = UnitGroupCount(autoC91874C1_g, c_unitCountAll);
    for (;; autoC91874C1_u -= 1) {
        autoC91874C1_var = UnitGroupUnitFromEnd(autoC91874C1_g, autoC91874C1_u);
        if (autoC91874C1_var == null) { break; }
        UnitBehaviorAdd(autoC91874C1_var, "RussianDivision", autoC91874C1_var, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SetRussianBaseStats_Init () {
    gt_SetRussianBaseStats = TriggerCreate("gt_SetRussianBaseStats_Func");
    TriggerAddEventTimeElapsed(gt_SetRussianBaseStats, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: RussianCityCapture
//--------------------------------------------------------------------------------------------------
bool gt_RussianCityCapture_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_alive;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((UnitGetPropertyFixed(EventUnit(), c_unitPropShields, c_unitPropCurrent) < 500.0) || (UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) < 500.0)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) < 500.0)) {
        lv_alive = false;
    }
    else {
        if ((UnitGetOwner(EventUnitTarget()) == 11)) {
            lv_alive = true;
            UnitAbilitySpendExplicit(EventUnit(), AbilityCommand("RazeCity", 1), c_spendLocationAll, 1.0, 1.0, 1.0, 1.0);
            UnitBehaviorRemove(EventUnit(), "Razing", 1);
        }
        else {
            lv_alive = false;
        }
        UnitSetPropertyFixed(EventUnit(), c_unitPropShieldsPercent, 100.0);
    }
    UnitSetOwner(EventUnit(), UnitGetOwner(EventUnitTarget()), true);
    if ((EventUnit() == gv_russianCities[1])) {
        gv_russianCitiesAlive[1] = lv_alive;
        if ((lv_alive == false)) {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/0F09A4D7"));
        }
        else {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/7B4C7A45"));
        }
    }

    if ((EventUnit() == gv_russianCities[2])) {
        gv_russianCitiesAlive[2] = lv_alive;
        if ((lv_alive == false)) {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/D0B8F712"));
        }
        else {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/D341B0AC"));
        }
    }

    if ((EventUnit() == gv_russianCities[3])) {
        gv_russianCitiesAlive[3] = lv_alive;
        if ((lv_alive == false)) {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/FDCD5F18"));
        }
        else {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/6271E7A9"));
        }
    }

    if ((gv_russianCitiesAlive[1] == false) && (gv_russianCitiesAlive[2] == false) && (gv_russianCitiesAlive[3] == false)) {
        gf_RussianCapiutlate();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RussianCityCapture_Init () {
    gt_RussianCityCapture = TriggerCreate("gt_RussianCityCapture_Func");
    TriggerAddEventUnitAttacked2(gt_RussianCityCapture, UnitRefFromUnit(UnitFromId(176)), null);
    TriggerAddEventUnitAttacked2(gt_RussianCityCapture, UnitRefFromUnit(UnitFromId(1154574214)), null);
    TriggerAddEventUnitAttacked2(gt_RussianCityCapture, UnitRefFromUnit(UnitFromId(954041181)), null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CheckExsistnceOfRussianCities+CheckExsistenceOfAmericanCities
//--------------------------------------------------------------------------------------------------
bool gt_CheckExsistnceOfRussianCitiesCheckExsistenceOfAmericanCities_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_cityInt;
    bool lv_alive;

    // Automatic Variable Declarations
    const int autoDA832F9C_ae = 3;
    const int autoDA832F9C_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_aIDifficulty != 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_cityInt = 1;
    for ( ; ( (autoDA832F9C_ai >= 0 && lv_cityInt <= autoDA832F9C_ae) || (autoDA832F9C_ai < 0 && lv_cityInt >= autoDA832F9C_ae) ) ; lv_cityInt += autoDA832F9C_ai ) {
        if ((gv_russianCitiesAlive[lv_cityInt] == true) && ((gv_russianCities[lv_cityInt] == null) || (UnitGetOwner(gv_russianCities[lv_cityInt]) != 11))) {
            if ((lv_cityInt == 1)) {
                gv_russianCitiesAlive[lv_cityInt] = false;
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/7C1EA874"));
                if ((gv_russianCitiesAlive[1] == false) && (gv_russianCitiesAlive[2] == false) && (gv_russianCitiesAlive[3] == false)) {
                    gf_RussianCapiutlate();
                }

            }

            if ((lv_cityInt == 2)) {
                gv_russianCitiesAlive[lv_cityInt] = false;
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/6B70D189"));
                if ((gv_russianCitiesAlive[1] == false) && (gv_russianCitiesAlive[2] == false) && (gv_russianCitiesAlive[3] == false)) {
                    gf_RussianCapiutlate();
                }

            }

            if ((lv_cityInt == 3)) {
                gv_russianCitiesAlive[lv_cityInt] = false;
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/46FF1611"));
                if ((gv_russianCitiesAlive[1] == false) && (gv_russianCitiesAlive[2] == false) && (gv_russianCitiesAlive[3] == false)) {
                    gf_RussianCapiutlate();
                }

            }

        }

    }
    if ((gv_newYorkAlive == true) && (libNtve_gf_UnitGroupIsDead(libNtve_gf_ConvertUnitToUnitGroup(UnitFromId(431751528))) == true)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/4780A64F"));
        gv_newYorkAlive = false;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CheckExsistnceOfRussianCitiesCheckExsistenceOfAmericanCities_Init () {
    gt_CheckExsistnceOfRussianCitiesCheckExsistenceOfAmericanCities = TriggerCreate("gt_CheckExsistnceOfRussianCitiesCheckExsistenceOfAmericanCities_Func");
    TriggerEnable(gt_CheckExsistnceOfRussianCitiesCheckExsistenceOfAmericanCities, false);
    TriggerAddEventTimePeriodic(gt_CheckExsistnceOfRussianCitiesCheckExsistenceOfAmericanCities, 30.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: RussianCreateGarrison
//--------------------------------------------------------------------------------------------------
bool gt_RussianCreateGarrison_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto6B2F63F4_g;
    int auto6B2F63F4_u;
    unit auto6B2F63F4_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto6B2F63F4_g = UnitGroup(null, 11, RegionEntireMap(), UnitFilter((1 << c_targetFilterPsionic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto6B2F63F4_u = UnitGroupCount(auto6B2F63F4_g, c_unitCountAll);
    for (;; auto6B2F63F4_u -= 1) {
        auto6B2F63F4_var = UnitGroupUnitFromEnd(auto6B2F63F4_g, auto6B2F63F4_u);
        if (auto6B2F63F4_var == null) { break; }
        if ((libNtve_gf_UnitInRegion(auto6B2F63F4_var, RegionFromId(64)) == false) && (libNtve_gf_UnitInRegion(auto6B2F63F4_var, RegionFromId(196)) == false) && (libNtve_gf_UnitInRegion(auto6B2F63F4_var, RegionFromId(187)) == false)) {
            if ((DistanceBetweenPoints(UnitGetPosition(auto6B2F63F4_var), UnitGetPosition(UnitGroupClosestToPoint(UnitGroupAlliance(11, c_unitAllianceEnemy, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(auto6B2F63F4_var)))) > 15.0)) {
                UnitIssueOrder(auto6B2F63F4_var, Order(AbilityCommand("AppartmentBunker", 1)), c_orderQueueReplace);
                if ((RandomInt(0, gv_arisAIDifficulty) > 80)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Hypercannon", 0, 11, UnitGetPosition(auto6B2F63F4_var));
                    if ((RandomInt(0, gv_arisAIDifficulty) > 80)) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Expounder", 0, 11, UnitGetPosition(auto6B2F63F4_var));
                    }

                }

                if ((RandomInt(0, gv_arisAIDifficulty) > 60) && (RandomInt(0, 100) > 90) && (DistanceBetweenPoints(UnitGetPosition(auto6B2F63F4_var), UnitGetPosition(UnitGroupClosestToPoint(UnitGroup("RussianBunker", 11, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(auto6B2F63F4_var)))) > 15.0) && (gf_GetCountyPopulationProportion(gf_GetCountyID(auto6B2F63F4_var)) > 9) && (gf_GetCountyID(auto6B2F63F4_var) > 0)) {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextWithColor(((StringExternal("Param/Value/4404E3D4") + StringToText(gf_GetCountyName(gf_GetCountyID(auto6B2F63F4_var)))) + StringExternal("Param/Value/200EED10")), Color(100.00, 0.00, 0.00)));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "RussianBunker", 0, 11, UnitGetPosition(auto6B2F63F4_var));
                    libNtve_gf_CreateUnitsWithDefaultFacing(5, "RussianRod", 0, 11, UnitGetPosition(auto6B2F63F4_var));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Hypercannon", 0, 11, UnitGetPosition(auto6B2F63F4_var));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Expounder", 0, 11, UnitGetPosition(auto6B2F63F4_var));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NaniteTower", 0, 11, UnitGetPosition(auto6B2F63F4_var));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MissileTurret22", 0, 11, UnitGetPosition(auto6B2F63F4_var));
                    MinimapPing(PlayerGroupAll(), UnitGetPosition(auto6B2F63F4_var), 6.0, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(11, false)));
                    Wait(1.0, c_timeGame);
                    MinimapPing(PlayerGroupAll(), UnitGetPosition(auto6B2F63F4_var), 6.0, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(11, false)));
                    Wait(1.0, c_timeGame);
                    MinimapPing(PlayerGroupAll(), UnitGetPosition(auto6B2F63F4_var), 6.0, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(11, false)));
                    Wait(1.0, c_timeGame);
                }

                if ((RandomInt(0, gv_arisAIDifficulty) < 25)) {
                    UnitRemove(auto6B2F63F4_var);
                }

            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RussianCreateGarrison_Init () {
    gt_RussianCreateGarrison = TriggerCreate("gt_RussianCreateGarrison_Func");
    TriggerAddEventTimePeriodic(gt_RussianCreateGarrison, 60.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: HostileRunAround
//--------------------------------------------------------------------------------------------------
bool gt_HostileRunAround_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto50E30C2B_g;
    int auto50E30C2B_u;
    unit auto50E30C2B_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto50E30C2B_g = UnitGroup(null, 15, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto50E30C2B_u = UnitGroupCount(auto50E30C2B_g, c_unitCountAll);
    for (;; auto50E30C2B_u -= 1) {
        auto50E30C2B_var = UnitGroupUnitFromEnd(auto50E30C2B_g, auto50E30C2B_u);
        if (auto50E30C2B_var == null) { break; }
        UnitIssueOrder(auto50E30C2B_var, OrderTargetingPoint(AbilityCommand("attack2", 0), UnitGetPosition(UnitGroupClosestToPoint(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(auto50E30C2B_var)))), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HostileRunAround_Init () {
    gt_HostileRunAround = TriggerCreate("gt_HostileRunAround_Func");
    TriggerAddEventTimePeriodic(gt_HostileRunAround, 15.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Middle East Confederation Leave
//--------------------------------------------------------------------------------------------------
bool gt_MiddleEastConfederationLeave_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoB7ABABF4_g;
    int autoB7ABABF4_u;
    unit autoB7ABABF4_var;
    unitgroup auto9FC893F4_g;
    int auto9FC893F4_u;
    unit auto9FC893F4_var;

    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(11, c_playerPropSuppliesUsed) > 200))) {
            return false;
        }

        if (!((gv_globalPopulation < 1500000))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/0B3BEDF6"));
    libNtve_gf_SetUpgradeLevelForPlayer(12, "MiddleEastConfederationCanWalk", 1);
    autoB7ABABF4_g = UnitGroup(null, 12, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB7ABABF4_u = UnitGroupCount(autoB7ABABF4_g, c_unitCountAll);
    for (;; autoB7ABABF4_u -= 1) {
        autoB7ABABF4_var = UnitGroupUnitFromEnd(autoB7ABABF4_g, autoB7ABABF4_u);
        if (autoB7ABABF4_var == null) { break; }
        UnitGroupIssueOrder(libNtve_gf_ConvertUnitToUnitGroup(autoB7ABABF4_var), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(143)), c_orderQueueReplace);
    }
    TriggerEnable(gt_KillMiddleEastTroops, true);
    Wait(30.0, c_timeGame);
    TriggerEnable(gt_KillMiddleEastTroops, false);
    TriggerEnable(gt_MiddleEastConfederationLeave, false);
    auto9FC893F4_g = UnitGroup(null, 12, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9FC893F4_u = UnitGroupCount(auto9FC893F4_g, c_unitCountAll);
    for (;; auto9FC893F4_u -= 1) {
        auto9FC893F4_var = UnitGroupUnitFromEnd(auto9FC893F4_g, auto9FC893F4_u);
        if (auto9FC893F4_var == null) { break; }
        UnitRemove(auto9FC893F4_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MiddleEastConfederationLeave_Init () {
    gt_MiddleEastConfederationLeave = TriggerCreate("gt_MiddleEastConfederationLeave_Func");
    TriggerAddEventTimeElapsed(gt_MiddleEastConfederationLeave, 3600.0, c_timeGame);
    TriggerAddEventTimeElapsed(gt_MiddleEastConfederationLeave, 5400.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kill Middle East Troops
//--------------------------------------------------------------------------------------------------
bool gt_KillMiddleEastTroops_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 12))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitRemove(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KillMiddleEastTroops_Init () {
    gt_KillMiddleEastTroops = TriggerCreate("gt_KillMiddleEastTroops_Func");
    TriggerEnable(gt_KillMiddleEastTroops, false);
    TriggerAddEventUnitRangePoint(gt_KillMiddleEastTroops, null, PointFromId(143), 5.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AmericanWar!
//--------------------------------------------------------------------------------------------------
bool gt_AmericanWar_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((RandomInt(0, gv_globalPopulation) > 1200000))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/A16854F3"));
    SoundPlayForPlayer(SoundLink("zLab01_alarm_scripted", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(5.0, c_timeGame);
    SoundPlayForPlayer(SoundLink("AICommunication_TerranAICommand_125", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    TriggerEnable(gt_AmericanScript, true);
    TriggerEnable(gt_KenedysLife, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AmericanWar_Init () {
    gt_AmericanWar = TriggerCreate("gt_AmericanWar_Func");
    TriggerAddEventTimePeriodic(gt_AmericanWar, 50.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: InitAmerica
//--------------------------------------------------------------------------------------------------
bool gt_InitAmerica_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoFF046D0E_g;
    int autoFF046D0E_u;
    unit autoFF046D0E_var;
    unitgroup autoCBA11E07_g;
    int autoCBA11E07_u;
    unit autoCBA11E07_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoFF046D0E_g = UnitGroup("AmericanGuard", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoFF046D0E_u = UnitGroupCount(autoFF046D0E_g, c_unitCountAll);
    for (;; autoFF046D0E_u -= 1) {
        autoFF046D0E_var = UnitGroupUnitFromEnd(autoFF046D0E_g, autoFF046D0E_u);
        if (autoFF046D0E_var == null) { break; }
        gv_initialGuardCount += 1;
    }
    autoCBA11E07_g = UnitGroup("SupplyDepot234223", 10, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoCBA11E07_u = UnitGroupCount(autoCBA11E07_g, c_unitCountAll);
    for (;; autoCBA11E07_u -= 1) {
        autoCBA11E07_var = UnitGroupUnitFromEnd(autoCBA11E07_g, autoCBA11E07_u);
        if (autoCBA11E07_var == null) { break; }
        UnitGroupAdd(gv_uSNukeLocations, autoCBA11E07_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitAmerica_Init () {
    gt_InitAmerica = TriggerCreate("gt_InitAmerica_Func");
    TriggerAddEventTimeElapsed(gt_InitAmerica, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CaptureNewYork
//--------------------------------------------------------------------------------------------------
bool gt_CaptureNewYork_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_alive;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((UnitGetPropertyFixed(EventUnit(), c_unitPropShields, c_unitPropCurrent) < 500.0) || (UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) < 500.0)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) < 500.0)) {
        lv_alive = false;
    }
    else {
        if ((UnitGetOwner(EventUnitTarget()) == 10)) {
            lv_alive = true;
            UnitAbilitySpendExplicit(EventUnit(), AbilityCommand("RazeCity", 1), c_spendLocationAll, 1.0, 1.0, 1.0, 1.0);
            UnitBehaviorRemove(EventUnit(), "Razing", 1);
        }
        else {
            lv_alive = false;
        }
        UnitSetPropertyFixed(EventUnit(), c_unitPropShieldsPercent, 100.0);
        UnitSetOwner(UnitFromId(431751528), UnitGetOwner(EventUnitTarget()), true);
    }
    if ((lv_alive == true)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/4BC330B8"));
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/FC7E2A26"));
    }
    gv_newYorkAlive = lv_alive;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CaptureNewYork_Init () {
    gt_CaptureNewYork = TriggerCreate("gt_CaptureNewYork_Func");
    TriggerAddEventUnitAttacked2(gt_CaptureNewYork, UnitRefFromUnit(UnitFromId(431751528)), null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AmericanScript
//--------------------------------------------------------------------------------------------------
bool gt_AmericanScript_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_capitolSafety;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_capitolSafety = gf_CapitolSafety();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_capitolSafety == 2)) {
        gf_LostCapitolScript();
    }
    else {
        gf_USNuke();
        if ((lv_capitolSafety == 1)) {
            gf_UnsafeCapitolScript();
        }
        else {
            gf_SafeCapitolScript();
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AmericanScript_Init () {
    gt_AmericanScript = TriggerCreate("gt_AmericanScript_Func");
    TriggerEnable(gt_AmericanScript, false);
    TriggerAddEventTimePeriodic(gt_AmericanScript, 40.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kenedy'sLife
//--------------------------------------------------------------------------------------------------
bool gt_KenedysLife_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_CreateEscorts();
    gf_A110Waves();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KenedysLife_Init () {
    gt_KenedysLife = TriggerCreate("gt_KenedysLife_Func");
    TriggerEnable(gt_KenedysLife, false);
    TriggerAddEventTimePeriodic(gt_KenedysLife, 35.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: KenedyShot!
//--------------------------------------------------------------------------------------------------
bool gt_KenedyShot_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_kenedyAlive = false;
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/17EFA11C"));
    gf_USNuke();
    TriggerEnable(gt_KenedysLife, false);
    TriggerEnable(gt_CarrierEscorts, false);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KenedyShot_Init () {
    gt_KenedyShot = TriggerCreate("gt_KenedyShot_Func");
    TriggerAddEventUnitDied(gt_KenedyShot, UnitRefFromUnit(UnitFromId(1664029611)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CarrierEscorts
//--------------------------------------------------------------------------------------------------
bool gt_CarrierEscorts_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto41064EF5_g;
    int auto41064EF5_u;
    unit auto41064EF5_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto41064EF5_g = gv_carrierEscorts;
    auto41064EF5_u = UnitGroupCount(auto41064EF5_g, c_unitCountAll);
    for (;; auto41064EF5_u -= 1) {
        auto41064EF5_var = UnitGroupUnitFromEnd(auto41064EF5_g, auto41064EF5_u);
        if (auto41064EF5_var == null) { break; }
        if ((RandomInt(0, 100) < 40)) {
            UnitIssueOrder(auto41064EF5_var, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(63))), c_orderQueueReplace);
        }
        else {
            UnitIssueOrder(auto41064EF5_var, OrderTargetingPoint(AbilityCommand("attack", 1), RegionRandomPoint(RegionCircle(UnitGetPosition(UnitFromId(1664029611)), 6.0))), c_orderQueueReplace);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CarrierEscorts_Init () {
    gt_CarrierEscorts = TriggerCreate("gt_CarrierEscorts_Func");
    TriggerAddEventTimePeriodic(gt_CarrierEscorts, 4.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI - Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    AICampaignStart(12);
    AICampaignStart(11);
    AISetDifficulty(12, c_diffPressForward, true);
    AISetDifficulty(11, c_diffPressForward, true);
    AIAttackWaveSetTargetPlayer(12, PlayerGroupAlliance(c_playerGroupEnemy, 12));
    AIAttackWaveSetTargetPlayer(11, gv_users);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
    TriggerAddEventMapInit(gt_StartAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Players
//--------------------------------------------------------------------------------------------------
bool gt_Players_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_spawnedResources;
    point lv_selectedPoint;
    int lv_timesToRepeat;

    // Automatic Variable Declarations
    int auto7BA6519E_n;
    int auto7BA6519E_i;

    // Variable Initialization
    lv_spawnedResources = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    gv_resourceType[0] = "Metal";
    gv_resourceType[1] = "Metal";
    gv_resourceType[2] = "Metal";
    gv_resourceType[3] = "Metal";
    gv_resourceType[4] = "Metal";
    gv_resourceType[5] = "Metal";
    gv_resourceType[6] = "Oil";
    gv_resourceType[7] = "Oil";
    gv_resourceType[8] = "GeothermalFissure";
    gv_resourceType[9] = "GeothermalFissure";
    gv_resourceType[10] = "GeothermalFissure";
    gv_resourceType[11] = "GeothermalFissure";
    gv_resourceType[12] = "GeothermalFissure";
    gv_resourceType[13] = "GeothermalFissure";
    gv_resourceType[14] = "GeothermalFissure";
    gv_resourceType[15] = "GeothermalFissure";
    gv_entrypoint[0] = PointFromId(501);
    gv_entrypoint[1] = PointFromId(502);
    gv_entrypoint[2] = PointFromId(503);
    gv_entrypoint[3] = PointFromId(504);
    gv_entrypoint[4] = PointFromId(505);
    gv_entrypoint[5] = PointFromId(159);
    gv_entrypoint[6] = PointFromId(160);
    gv_entrypoint[7] = PointFromId(161);
    gv_entrypoint[8] = PointFromId(143);
    Wait(20.0, c_timeGame);
    lv_timesToRepeat = 0;
    PlayerSetAlliance(1, c_allianceIdVision, 15, true);
    auto7BA6519E_n = ((PlayerGroupCount(gv_users) * 3) + 14);
    for (auto7BA6519E_i = 1; auto7BA6519E_i <= auto7BA6519E_n; auto7BA6519E_i += 1) {
        gv_percents = RandomInt(0, 100);
        lv_selectedPoint = RegionRandomPoint(RegionFromId(200));
        while (true) {
            if (((CliffLevel(lv_selectedPoint) != 1) || (WorldHeight(c_heightMapGround, lv_selectedPoint) < 2.0) || (DistanceBetweenPoints(lv_selectedPoint, UnitGetPosition(UnitGroupClosestToPoint(UnitGroup(null, c_playerAny, RegionFromId(200), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), lv_selectedPoint))) < (15 - (PlayerGroupCount(gv_users) * 1))))) {
                Wait(0.1, c_timeGame);
                lv_selectedPoint = RegionRandomPoint(RegionFromId(200));
                if ((gv_percents <= 20) && (RandomInt(0, 100) <= 25)) {
                    lv_selectedPoint = RegionRandomPoint(RegionFromId(66));
                }

                if ((gv_percents <= 70) && (gv_percents >= 20) && (RandomInt(0, 100) <= 25)) {
                    lv_selectedPoint = RegionRandomPoint(RegionFromId(67));
                }

                if ((gv_percents > 86) && (gv_percents <= 93) && (RandomInt(0, 100) <= 25)) {
                    lv_selectedPoint = RegionRandomPoint(RegionFromId(65));
                    Wait(0.1, c_timeGame);
                }

            }
            else {
                Wait(0.1, c_timeGame);
                break;
            }
        }
        if ((gv_percents <= 20)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Oil", 0, 15, lv_selectedPoint);
        }
        else {
            if ((gv_percents > 20) && (gv_percents <= 70)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Metal", 0, 15, lv_selectedPoint);
            }
            else {
                if ((gv_percents > 70) && (gv_percents <= 86)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "GeothermalFissure", 0, 15, lv_selectedPoint);
                }
                else {
                    if ((gv_percents > 86) && (gv_percents <= 93)) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Silver", 0, 15, lv_selectedPoint);
                    }
                    else {
                        if ((gv_percents > 93) && (gv_percents <= 97)) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Gold", 0, 15, lv_selectedPoint);
                        }
                        else {
                            if ((gv_percents > 97) && (gv_percents <= 100)) {
                                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Platinum", 0, 15, lv_selectedPoint);
                            }

                        }
                    }
                }
            }
        }
        UnitGroupAdd(lv_spawnedResources, UnitLastCreated());
        if ((libNtve_gf_UnitInRegion(UnitLastCreated(), RegionFromId(67)) == true)) {
            UnitBehaviorAdd(UnitLastCreated(), "MountainTerrain", UnitLastCreated(), 1);
        }

        if ((libNtve_gf_UnitInRegion(UnitLastCreated(), RegionFromId(66)) == true)) {
            UnitBehaviorAdd(UnitLastCreated(), "DesertTerrain", UnitLastCreated(), 1);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Players_Init () {
    gt_Players = TriggerCreate("gt_Players_Func");
    TriggerAddEventMapInit(gt_Players);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UnitCreated
//--------------------------------------------------------------------------------------------------
bool gt_UnitCreated_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPropertyFixed(EventUnitCreatedUnit(), c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(EventUnitCreatedUnit(), c_unitPropShieldsPercent, 100.0);
    if (((UnitGetOwner(EventUnitCreatedUnit()) == 9) || (UnitGetOwner(EventUnitCreatedUnit()) == 10) || (UnitGetOwner(EventUnitCreatedUnit()) == 11) || (UnitGetOwner(EventUnitCreatedUnit()) == 12))) {
        AISetUnitSuicide(EventUnitCreatedUnit(), true);
        UnitIssueOrder(EventUnitCreatedUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupClosestToPoint(UnitGroupAlliance(UnitGetOwner(EventUnitCreatedUnit()), c_unitAllianceEnemy, RegionEntireMap(), UnitFilter((1 << c_targetFilterUser1), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(EventUnitCreatedUnit())))), c_orderQueueReplace);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitCreated_Init () {
    gt_UnitCreated = TriggerCreate("gt_UnitCreated_Func");
    TriggerAddEventUnitCreated(gt_UnitCreated, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SetHostiles
//--------------------------------------------------------------------------------------------------
bool gt_SetHostiles_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoE436C3CB_g;
    int autoE436C3CB_u;
    unit autoE436C3CB_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_hOSTILES[0] = null;
    gv_hOSTILES[1] = null;
    autoE436C3CB_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE436C3CB_u = UnitGroupCount(autoE436C3CB_g, c_unitCountAll);
    for (;; autoE436C3CB_u -= 1) {
        autoE436C3CB_var = UnitGroupUnitFromEnd(autoE436C3CB_g, autoE436C3CB_u);
        if (autoE436C3CB_var == null) { break; }
        if (((libNtve_gf_PlayerIsEnemy(11, UnitGetOwner(autoE436C3CB_var), libNtve_ge_PlayerRelation_Enemy) == true) || (libNtve_gf_PlayerIsEnemy(10, UnitGetOwner(autoE436C3CB_var), libNtve_ge_PlayerRelation_Enemy) == true)) && (libNtve_gf_UnitInRegion(autoE436C3CB_var, RegionFromId(47)) == false) && (libNtve_gf_UnitInRegion(autoE436C3CB_var, RegionFromId(39)) == false) && (libNtve_gf_UnitInRegion(autoE436C3CB_var, RegionFromId(34)) == false) && (UnitGetType(autoE436C3CB_var) != "ViperFighter") && (UnitGetType(autoE436C3CB_var) != "ApolloBomber") && (UnitGetType(autoE436C3CB_var) != "AstrosInterceptor") && (UnitGetType(autoE436C3CB_var) != "CourierTH") && (UnitGetType(autoE436C3CB_var) != "JavelinAH") && (UnitGetType(autoE436C3CB_var) != "ScorcherBomber") && (UnitGetType(autoE436C3CB_var) != "StrikerAH")) {
            if ((libNtve_gf_PlayerIsEnemy(11, UnitGetOwner(autoE436C3CB_var), libNtve_ge_PlayerRelation_Enemy) == true)) {
                UnitGroupAdd(gv_hOSTILES[0], autoE436C3CB_var);
            }

            if ((libNtve_gf_PlayerIsEnemy(10, UnitGetOwner(autoE436C3CB_var), libNtve_ge_PlayerRelation_Enemy) == true)) {
                UnitGroupAdd(gv_hOSTILES[1], autoE436C3CB_var);
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SetHostiles_Init () {
    gt_SetHostiles = TriggerCreate("gt_SetHostiles_Func");
    TriggerAddEventTimePeriodic(gt_SetHostiles, 20.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Do not stand still russia or america
//--------------------------------------------------------------------------------------------------
bool gt_Donotstandstillrussiaoramerica_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == 11) || (UnitGetOwner(EventUnit()) == 10)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_AttackNearHostile(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Donotstandstillrussiaoramerica_Init () {
    gt_Donotstandstillrussiaoramerica = TriggerCreate("gt_Donotstandstillrussiaoramerica_Func");
    TriggerAddEventUnitBecomesIdle(gt_Donotstandstillrussiaoramerica, null, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack the Europe, Russia!
//--------------------------------------------------------------------------------------------------
bool gt_AttacktheEuropeRussia_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int lv_selectedDistance;
    unit lv_selectedUnit;
    int lv_unitsPerPlayer;
    int[10] lv_unitsAssigned;
    point[10] lv_attackHere;
    unitgroup[10] lv_personalAttackSquad;

    // Automatic Variable Declarations
    unitgroup auto62B2A36D_g;
    int auto62B2A36D_u;
    unit auto62B2A36D_var;

    // Variable Initialization
    lv_selectedDistance = 999;
    for (init_i = 0; init_i <= 9; init_i += 1) {
        lv_personalAttackSquad[init_i] = UnitGroupEmpty();
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto62B2A36D_g = UnitGroup(null, 11, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto62B2A36D_u = UnitGroupCount(auto62B2A36D_g, c_unitCountAll);
    for (;; auto62B2A36D_u -= 1) {
        auto62B2A36D_var = UnitGroupUnitFromEnd(auto62B2A36D_g, auto62B2A36D_u);
        if (auto62B2A36D_var == null) { break; }
        gf_AttackNearHostile(auto62B2A36D_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttacktheEuropeRussia_Init () {
    gt_AttacktheEuropeRussia = TriggerCreate("gt_AttacktheEuropeRussia_Func");
    TriggerAddEventTimePeriodic(gt_AttacktheEuropeRussia, 20.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack the Europe, America!
//--------------------------------------------------------------------------------------------------
bool gt_AttacktheEuropeAmerica_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto80E1030B_g;
    int auto80E1030B_u;
    unit auto80E1030B_var;
    unitgroup autoA410E0DF_g;
    int autoA410E0DF_u;
    unit autoA410E0DF_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto80E1030B_g = UnitGroup("RaynorLab", 10, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto80E1030B_u = UnitGroupCount(auto80E1030B_g, c_unitCountAll);
    for (;; auto80E1030B_u -= 1) {
        auto80E1030B_var = UnitGroupUnitFromEnd(auto80E1030B_g, auto80E1030B_u);
        if (auto80E1030B_var == null) { break; }
        gf_AttackNearHostile(auto80E1030B_var);
    }
    autoA410E0DF_g = UnitGroup("RaynorCommando", 10, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA410E0DF_u = UnitGroupCount(autoA410E0DF_g, c_unitCountAll);
    for (;; autoA410E0DF_u -= 1) {
        autoA410E0DF_var = UnitGroupUnitFromEnd(autoA410E0DF_g, autoA410E0DF_u);
        if (autoA410E0DF_var == null) { break; }
        gf_AttackNearHostile(autoA410E0DF_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttacktheEuropeAmerica_Init () {
    gt_AttacktheEuropeAmerica = TriggerCreate("gt_AttacktheEuropeAmerica_Func");
    TriggerAddEventTimePeriodic(gt_AttacktheEuropeAmerica, 20.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SendShit
//--------------------------------------------------------------------------------------------------
bool gt_SendShit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_Send, true, false);
    TriggerExecute(gt_SendEvil, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SendShit_Init () {
    gt_SendShit = TriggerCreate("gt_SendShit_Func");
    TriggerAddEventTimePeriodic(gt_SendShit, 30.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Send
//--------------------------------------------------------------------------------------------------
bool gt_Send_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    AIAttackWaveSetTargetPlayer(12, PlayerGroupAlliance(c_playerGroupEnemy, 12));
    AIAttackWaveSend(12, 1, false);
    if (true) {
        AIAttackWaveSetTargetPlayer(10, PlayerGroupAlliance(c_playerGroupEnemy, 10));
        AIAttackWaveSend(10, 1, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Send_Init () {
    gt_Send = TriggerCreate("gt_Send_Func");
    TriggerEnable(gt_Send, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SendEvil
//--------------------------------------------------------------------------------------------------
bool gt_SendEvil_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    AIAttackWaveSetTargetPlayer(11, gv_users);
    AIAttackWaveSend(11, 1, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SendEvil_Init () {
    gt_SendEvil = TriggerCreate("gt_SendEvil_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stop the laggy early game tutorial banners
//--------------------------------------------------------------------------------------------------
bool gt_Stopthelaggyearlygametutorialbanners_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto3292F64E_g;
    int auto3292F64E_var;
    playergroup autoF41AD6C4_g;
    int autoF41AD6C4_var;

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(320.0, c_timeGame);
    TriggerEnable(gt_DontSettleOnSnowDesertMountains, false);
    auto3292F64E_g = gv_users;
    auto3292F64E_var = -1;
    while (true) {
        auto3292F64E_var = PlayerGroupNextPlayer(auto3292F64E_g, auto3292F64E_var);
        if (auto3292F64E_var < 0) { break; }
        gf_RemoveBanner(auto3292F64E_var, 1);
        gf_RemoveBanner(auto3292F64E_var, 31);
    }
    Wait(120.0, c_timeGame);
    TriggerEnable(gt_BuildHomes, false);
    TriggerEnable(gt_BuildFarmsifcapitalnotinsnowdesertmountains, false);
    autoF41AD6C4_g = gv_users;
    autoF41AD6C4_var = -1;
    while (true) {
        autoF41AD6C4_var = PlayerGroupNextPlayer(autoF41AD6C4_g, autoF41AD6C4_var);
        if (autoF41AD6C4_var < 0) { break; }
        gf_RemoveBanner(autoF41AD6C4_var, 2);
        gf_RemoveBanner(autoF41AD6C4_var, 11);
    }
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Stopthelaggyearlygametutorialbanners_Init () {
    gt_Stopthelaggyearlygametutorialbanners = TriggerCreate("gt_Stopthelaggyearlygametutorialbanners_Func");
    TriggerAddEventMapInit(gt_Stopthelaggyearlygametutorialbanners);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Don't Settle On Snow/Desert/Mountains
//--------------------------------------------------------------------------------------------------
bool gt_DontSettleOnSnowDesertMountains_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto94C8C474_g;
    int auto94C8C474_var;
    unitgroup auto3FAC0953_g;
    int auto3FAC0953_u;
    unit auto3FAC0953_var;
    unitgroup auto9EB8564C_g;
    int auto9EB8564C_u;
    unit auto9EB8564C_var;
    unitgroup auto5169EDE9_g;
    int auto5169EDE9_u;
    unit auto5169EDE9_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto94C8C474_g = gv_users;
    auto94C8C474_var = -1;
    while (true) {
        auto94C8C474_var = PlayerGroupNextPlayer(auto94C8C474_g, auto94C8C474_var);
        if (auto94C8C474_var < 0) { break; }
        gf_RemoveBanner(auto94C8C474_var, 1);
    }
    auto3FAC0953_g = UnitGroup("Settler", c_playerAny, RegionFromId(67), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto3FAC0953_u = UnitGroupCount(auto3FAC0953_g, c_unitCountAll);
    for (;; auto3FAC0953_u -= 1) {
        auto3FAC0953_var = UnitGroupUnitFromEnd(auto3FAC0953_g, auto3FAC0953_u);
        if (auto3FAC0953_var == null) { break; }
        gf_CreateBanner(UnitGetOwner(auto3FAC0953_var), 1);
    }
    auto9EB8564C_g = UnitGroup("Settler", c_playerAny, RegionFromId(65), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9EB8564C_u = UnitGroupCount(auto9EB8564C_g, c_unitCountAll);
    for (;; auto9EB8564C_u -= 1) {
        auto9EB8564C_var = UnitGroupUnitFromEnd(auto9EB8564C_g, auto9EB8564C_u);
        if (auto9EB8564C_var == null) { break; }
        gf_CreateBanner(UnitGetOwner(auto9EB8564C_var), 1);
    }
    auto5169EDE9_g = UnitGroup("Settler", c_playerAny, RegionFromId(66), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto5169EDE9_u = UnitGroupCount(auto5169EDE9_g, c_unitCountAll);
    for (;; auto5169EDE9_u -= 1) {
        auto5169EDE9_var = UnitGroupUnitFromEnd(auto5169EDE9_g, auto5169EDE9_u);
        if (auto5169EDE9_var == null) { break; }
        gf_CreateBanner(UnitGetOwner(auto5169EDE9_var), 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DontSettleOnSnowDesertMountains_Init () {
    gt_DontSettleOnSnowDesertMountains = TriggerCreate("gt_DontSettleOnSnowDesertMountains_Func");
    TriggerAddEventTimePeriodic(gt_DontSettleOnSnowDesertMountains, 0.9, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Build Homes
//--------------------------------------------------------------------------------------------------
bool gt_BuildHomes_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int[16] lv_homesByEachPlayer;
    bool[16] lv_hasCapital;

    // Automatic Variable Declarations
    unitgroup auto71B86137_g;
    int auto71B86137_u;
    unit auto71B86137_var;
    unitgroup autoFB485C06_g;
    int autoFB485C06_u;
    unit autoFB485C06_var;
    unitgroup auto9C839184_g;
    int auto9C839184_u;
    unit auto9C839184_var;
    unitgroup auto0E0689A4_g;
    int auto0E0689A4_u;
    unit auto0E0689A4_var;
    playergroup autoC1961515_g;
    int autoC1961515_var;
    playergroup auto7B0DF34C_g;
    int auto7B0DF34C_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto71B86137_g = UnitGroup("SmallHouse", c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto71B86137_u = UnitGroupCount(auto71B86137_g, c_unitCountAll);
    for (;; auto71B86137_u -= 1) {
        auto71B86137_var = UnitGroupUnitFromEnd(auto71B86137_g, auto71B86137_u);
        if (auto71B86137_var == null) { break; }
        lv_homesByEachPlayer[UnitGetOwner(auto71B86137_var)] += 1;
    }
    autoFB485C06_g = UnitGroup("MediumHouse", c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoFB485C06_u = UnitGroupCount(autoFB485C06_g, c_unitCountAll);
    for (;; autoFB485C06_u -= 1) {
        autoFB485C06_var = UnitGroupUnitFromEnd(autoFB485C06_g, autoFB485C06_u);
        if (autoFB485C06_var == null) { break; }
        lv_homesByEachPlayer[UnitGetOwner(autoFB485C06_var)] += 1;
    }
    auto9C839184_g = UnitGroup("LargeHouse", c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9C839184_u = UnitGroupCount(auto9C839184_g, c_unitCountAll);
    for (;; auto9C839184_u -= 1) {
        auto9C839184_var = UnitGroupUnitFromEnd(auto9C839184_g, auto9C839184_u);
        if (auto9C839184_var == null) { break; }
        lv_homesByEachPlayer[UnitGetOwner(auto9C839184_var)] += 1;
    }
    auto0E0689A4_g = UnitGroup("Capital", c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto0E0689A4_u = UnitGroupCount(auto0E0689A4_g, c_unitCountAll);
    for (;; auto0E0689A4_u -= 1) {
        auto0E0689A4_var = UnitGroupUnitFromEnd(auto0E0689A4_g, auto0E0689A4_u);
        if (auto0E0689A4_var == null) { break; }
        lv_hasCapital[UnitGetOwner(auto0E0689A4_var)] = true;
    }
    autoC1961515_g = gv_users;
    autoC1961515_var = -1;
    while (true) {
        autoC1961515_var = PlayerGroupNextPlayer(autoC1961515_g, autoC1961515_var);
        if (autoC1961515_var < 0) { break; }
        if ((lv_hasCapital[autoC1961515_var] == true)) {
            gf_RemoveBanner(autoC1961515_var, 31);
            if ((TechTreeUpgradeCount(autoC1961515_var, "Corporatocracy", c_techCountCompleteOnly) == 1)) {
                lv_hasCapital[autoC1961515_var] = false;
            }

        }

        gf_RemoveBanner(autoC1961515_var, 2);
    }
    auto7B0DF34C_g = gv_users;
    auto7B0DF34C_var = -1;
    while (true) {
        auto7B0DF34C_var = PlayerGroupNextPlayer(auto7B0DF34C_g, auto7B0DF34C_var);
        if (auto7B0DF34C_var < 0) { break; }
        if ((lv_hasCapital[auto7B0DF34C_var] == true) && (lv_homesByEachPlayer[auto7B0DF34C_var] < 2)) {
            gf_CreateBanner(auto7B0DF34C_var, 2);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BuildHomes_Init () {
    gt_BuildHomes = TriggerCreate("gt_BuildHomes_Func");
    TriggerAddEventTimePeriodic(gt_BuildHomes, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Build Farms if capital not in snow/desert/mountains
//--------------------------------------------------------------------------------------------------
bool gt_BuildFarmsifcapitalnotinsnowdesertmountains_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int[10] lv_farmsByEachPlayer;
    bool[10] lv_farmableRegion;

    // Automatic Variable Declarations
    unitgroup auto9B9CA08C_g;
    int auto9B9CA08C_u;
    unit auto9B9CA08C_var;
    unitgroup auto62CB6B27_g;
    int auto62CB6B27_u;
    unit auto62CB6B27_var;
    unitgroup autoAF43C412_g;
    int autoAF43C412_u;
    unit autoAF43C412_var;
    playergroup auto4723B4BA_g;
    int auto4723B4BA_var;
    playergroup auto5ED99B1C_g;
    int auto5ED99B1C_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto9B9CA08C_g = UnitGroup("FarmI", c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9B9CA08C_u = UnitGroupCount(auto9B9CA08C_g, c_unitCountAll);
    for (;; auto9B9CA08C_u -= 1) {
        auto9B9CA08C_var = UnitGroupUnitFromEnd(auto9B9CA08C_g, auto9B9CA08C_u);
        if (auto9B9CA08C_var == null) { break; }
        lv_farmsByEachPlayer[UnitGetOwner(auto9B9CA08C_var)] += 1;
    }
    auto62CB6B27_g = UnitGroup("FarmII", c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto62CB6B27_u = UnitGroupCount(auto62CB6B27_g, c_unitCountAll);
    for (;; auto62CB6B27_u -= 1) {
        auto62CB6B27_var = UnitGroupUnitFromEnd(auto62CB6B27_g, auto62CB6B27_u);
        if (auto62CB6B27_var == null) { break; }
        lv_farmsByEachPlayer[UnitGetOwner(auto62CB6B27_var)] += 1;
    }
    autoAF43C412_g = UnitGroup("Capital", c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoAF43C412_u = UnitGroupCount(autoAF43C412_g, c_unitCountAll);
    for (;; autoAF43C412_u -= 1) {
        autoAF43C412_var = UnitGroupUnitFromEnd(autoAF43C412_g, autoAF43C412_u);
        if (autoAF43C412_var == null) { break; }
        if (((libNtve_gf_UnitInRegion(autoAF43C412_var, RegionFromId(67)) == false) || (libNtve_gf_UnitInRegion(autoAF43C412_var, RegionFromId(65)) == false) || (libNtve_gf_UnitInRegion(autoAF43C412_var, RegionFromId(66)) == false))) {
            lv_farmableRegion[UnitGetOwner(autoAF43C412_var)] = true;
        }
        else {
            lv_farmableRegion[UnitGetOwner(autoAF43C412_var)] = false;
        }
    }
    auto4723B4BA_g = gv_users;
    auto4723B4BA_var = -1;
    while (true) {
        auto4723B4BA_var = PlayerGroupNextPlayer(auto4723B4BA_g, auto4723B4BA_var);
        if (auto4723B4BA_var < 0) { break; }
        gf_RemoveBanner(auto4723B4BA_var, 11);
    }
    auto5ED99B1C_g = gv_users;
    auto5ED99B1C_var = -1;
    while (true) {
        auto5ED99B1C_var = PlayerGroupNextPlayer(auto5ED99B1C_g, auto5ED99B1C_var);
        if (auto5ED99B1C_var < 0) { break; }
        if ((lv_farmsByEachPlayer[auto5ED99B1C_var] == 0) && (lv_farmableRegion[auto5ED99B1C_var] == true)) {
            gf_CreateBanner(auto5ED99B1C_var, 11);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BuildFarmsifcapitalnotinsnowdesertmountains_Init () {
    gt_BuildFarmsifcapitalnotinsnowdesertmountains = TriggerCreate("gt_BuildFarmsifcapitalnotinsnowdesertmountains_Func");
    TriggerAddEventTimePeriodic(gt_BuildFarmsifcapitalnotinsnowdesertmountains, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: You Have Farms in Bad Terrain
//--------------------------------------------------------------------------------------------------
bool gt_YouHaveFarmsinBadTerrain_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoF7D60691_g;
    int autoF7D60691_var;
    unitgroup auto6570AC41_g;
    int auto6570AC41_u;
    unit auto6570AC41_var;
    unitgroup auto3B3E83C7_g;
    int auto3B3E83C7_u;
    unit auto3B3E83C7_var;
    unitgroup autoDCF23566_g;
    int autoDCF23566_u;
    unit autoDCF23566_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoF7D60691_g = gv_users;
    autoF7D60691_var = -1;
    while (true) {
        autoF7D60691_var = PlayerGroupNextPlayer(autoF7D60691_g, autoF7D60691_var);
        if (autoF7D60691_var < 0) { break; }
        gf_RemoveBanner(autoF7D60691_var, 12);
    }
    auto6570AC41_g = UnitGroup(null, c_playerAny, RegionFromId(65), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto6570AC41_u = UnitGroupCount(auto6570AC41_g, c_unitCountAll);
    for (;; auto6570AC41_u -= 1) {
        auto6570AC41_var = UnitGroupUnitFromEnd(auto6570AC41_g, auto6570AC41_u);
        if (auto6570AC41_var == null) { break; }
        if (((UnitGetType(auto6570AC41_var) == "FarmI") || (UnitGetType(auto6570AC41_var) == "FarmII") || (UnitGetType(auto6570AC41_var) == "FarmIII") || (UnitGetType(auto6570AC41_var) == "FarmIV") || (UnitGetType(auto6570AC41_var) == "FarmV"))) {
            gf_CreateBanner(UnitGetOwner(auto6570AC41_var), 12);
        }

    }
    auto3B3E83C7_g = UnitGroup(null, c_playerAny, RegionFromId(67), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto3B3E83C7_u = UnitGroupCount(auto3B3E83C7_g, c_unitCountAll);
    for (;; auto3B3E83C7_u -= 1) {
        auto3B3E83C7_var = UnitGroupUnitFromEnd(auto3B3E83C7_g, auto3B3E83C7_u);
        if (auto3B3E83C7_var == null) { break; }
        if (((UnitGetType(auto3B3E83C7_var) == "FarmI") || (UnitGetType(auto3B3E83C7_var) == "FarmII") || (UnitGetType(auto3B3E83C7_var) == "FarmIII") || (UnitGetType(auto3B3E83C7_var) == "FarmIV") || (UnitGetType(auto3B3E83C7_var) == "FarmV"))) {
            gf_CreateBanner(UnitGetOwner(auto3B3E83C7_var), 12);
        }

    }
    autoDCF23566_g = UnitGroup(null, c_playerAny, RegionFromId(66), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoDCF23566_u = UnitGroupCount(autoDCF23566_g, c_unitCountAll);
    for (;; autoDCF23566_u -= 1) {
        autoDCF23566_var = UnitGroupUnitFromEnd(autoDCF23566_g, autoDCF23566_u);
        if (autoDCF23566_var == null) { break; }
        if (((UnitGetType(autoDCF23566_var) == "FarmI") || (UnitGetType(autoDCF23566_var) == "FarmII") || (UnitGetType(autoDCF23566_var) == "FarmIII") || (UnitGetType(autoDCF23566_var) == "FarmIV") || (UnitGetType(autoDCF23566_var) == "FarmV"))) {
            gf_CreateBanner(UnitGetOwner(autoDCF23566_var), 12);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_YouHaveFarmsinBadTerrain_Init () {
    gt_YouHaveFarmsinBadTerrain = TriggerCreate("gt_YouHaveFarmsinBadTerrain_Func");
    TriggerAddEventTimePeriodic(gt_YouHaveFarmsinBadTerrain, 30.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Empty Research Queue!
//--------------------------------------------------------------------------------------------------
bool gt_EmptyResearchQueue_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoBF02768D_g;
    int autoBF02768D_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoBF02768D_g = gv_users;
    autoBF02768D_var = -1;
    while (true) {
        autoBF02768D_var = PlayerGroupNextPlayer(autoBF02768D_g, autoBF02768D_var);
        if (autoBF02768D_var < 0) { break; }
        if ((gv_netResearch[autoBF02768D_var] > 5) && ((gv_researchQ[autoBF02768D_var][0] == 0) || (gv_researchQ[autoBF02768D_var][1] == 0))) {
            gf_CreateBanner(autoBF02768D_var, 13);
        }
        else {
            gf_RemoveBanner(autoBF02768D_var, 13);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EmptyResearchQueue_Init () {
    gt_EmptyResearchQueue = TriggerCreate("gt_EmptyResearchQueue_Func");
    TriggerAddEventTimePeriodic(gt_EmptyResearchQueue, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Laboratory Upgrades Not High Enough!
//--------------------------------------------------------------------------------------------------
bool gt_LaboratoryUpgradesNotHighEnough_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool[16] lv_noMorePossible;

    // Automatic Variable Declarations
    unitgroup autoCA2C3ED1_g;
    int autoCA2C3ED1_u;
    unit autoCA2C3ED1_var;
    playergroup auto65FAE1E1_g;
    int auto65FAE1E1_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoCA2C3ED1_g = UnitGroup("ResearchComplexV", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoCA2C3ED1_u = UnitGroupCount(autoCA2C3ED1_g, c_unitCountAll);
    for (;; autoCA2C3ED1_u -= 1) {
        autoCA2C3ED1_var = UnitGroupUnitFromEnd(autoCA2C3ED1_g, autoCA2C3ED1_u);
        if (autoCA2C3ED1_var == null) { break; }
        lv_noMorePossible[UnitGetOwner(autoCA2C3ED1_var)] = true;
    }
    auto65FAE1E1_g = gv_users;
    auto65FAE1E1_var = -1;
    while (true) {
        auto65FAE1E1_var = PlayerGroupNextPlayer(auto65FAE1E1_g, auto65FAE1E1_var);
        if (auto65FAE1E1_var < 0) { break; }
        if ((gv_techIncome[auto65FAE1E1_var] > 0)) {
            if ((lv_noMorePossible[auto65FAE1E1_var] == false) && ((PlayerGetPropertyInt(auto65FAE1E1_var, c_playerPropCustom) / gv_techIncome[auto65FAE1E1_var]) > 12) && (gv_techIncome[auto65FAE1E1_var] > 10)) {
                gf_CreateBanner(auto65FAE1E1_var, 15);
            }
            else {
                gf_RemoveBanner(auto65FAE1E1_var, 15);
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LaboratoryUpgradesNotHighEnough_Init () {
    gt_LaboratoryUpgradesNotHighEnough = TriggerCreate("gt_LaboratoryUpgradesNotHighEnough_Func");
    TriggerAddEventTimePeriodic(gt_LaboratoryUpgradesNotHighEnough, 30.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Researching Dangerous Tech!
//--------------------------------------------------------------------------------------------------
bool gt_ResearchingDangerousTech_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoEED97827_g;
    int autoEED97827_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoEED97827_g = gv_users;
    autoEED97827_var = -1;
    while (true) {
        autoEED97827_var = PlayerGroupNextPlayer(autoEED97827_g, autoEED97827_var);
        if (autoEED97827_var < 0) { break; }
        if ((((gv_researchInvested[autoEED97827_var][30] > 1) && (gv_researchInvested[autoEED97827_var][30] < gv_researchCost[30])) || ((gv_researchInvested[autoEED97827_var][31] > 1) && (gv_researchInvested[autoEED97827_var][31] < gv_researchCost[31])) || ((gv_researchInvested[autoEED97827_var][77] > 1) && (gv_researchInvested[autoEED97827_var][77] < gv_researchCost[77])) || ((gv_researchInvested[autoEED97827_var][78] > 1) && (gv_researchInvested[autoEED97827_var][78] < gv_researchCost[78])))) {
            gf_CreateBanner(autoEED97827_var, 4);
        }
        else {
            gf_RemoveBanner(autoEED97827_var, 4);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ResearchingDangerousTech_Init () {
    gt_ResearchingDangerousTech = TriggerCreate("gt_ResearchingDangerousTech_Func");
    TriggerAddEventTimePeriodic(gt_ResearchingDangerousTech, 30.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: You Should Mechanize your Country!
//--------------------------------------------------------------------------------------------------
bool gt_YouShouldMechanizeyourCountry_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto166CA6AC_g;
    int auto166CA6AC_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto166CA6AC_g = gv_users;
    auto166CA6AC_var = -1;
    while (true) {
        auto166CA6AC_var = PlayerGroupNextPlayer(auto166CA6AC_g, auto166CA6AC_var);
        if (auto166CA6AC_var < 0) { break; }
        if ((gv_gDP[auto166CA6AC_var] > 5000) && ((TechTreeUpgradeCount(auto166CA6AC_var, "ResearchElectricity", c_techCountCompleteOnly) == 0) || (TechTreeUpgradeCount(auto166CA6AC_var, "ResearchArtificalFarming", c_techCountCompleteOnly) == 0))) {
            gf_CreateBanner(auto166CA6AC_var, 16);
        }
        else {
            gf_RemoveBanner(auto166CA6AC_var, 16);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_YouShouldMechanizeyourCountry_Init () {
    gt_YouShouldMechanizeyourCountry = TriggerCreate("gt_YouShouldMechanizeyourCountry_Func");
    TriggerAddEventTimePeriodic(gt_YouShouldMechanizeyourCountry, 45.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: You have taken out loans
//--------------------------------------------------------------------------------------------------
bool gt_Youhavetakenoutloans_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto47D15945_g;
    int auto47D15945_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto47D15945_g = gv_users;
    auto47D15945_var = -1;
    while (true) {
        auto47D15945_var = PlayerGroupNextPlayer(auto47D15945_g, auto47D15945_var);
        if (auto47D15945_var < 0) { break; }
        if ((gv_totalDebt[auto47D15945_var] > 0)) {
            gf_CreateBanner(auto47D15945_var, 18);
        }
        else {
            gf_RemoveBanner(auto47D15945_var, 18);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Youhavetakenoutloans_Init () {
    gt_Youhavetakenoutloans = TriggerCreate("gt_Youhavetakenoutloans_Func");
    TriggerAddEventTimePeriodic(gt_Youhavetakenoutloans, 9.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Low Centralization
//--------------------------------------------------------------------------------------------------
bool gt_LowCentralization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto1CA0BA79_g;
    int auto1CA0BA79_var;
    unitgroup auto7BAA13D8_g;
    int auto7BAA13D8_u;
    unit auto7BAA13D8_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto1CA0BA79_g = gv_users;
    auto1CA0BA79_var = -1;
    while (true) {
        auto1CA0BA79_var = PlayerGroupNextPlayer(auto1CA0BA79_g, auto1CA0BA79_var);
        if (auto1CA0BA79_var < 0) { break; }
        gf_RemoveBanner(auto1CA0BA79_var, 20);
    }
    auto7BAA13D8_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto7BAA13D8_u = UnitGroupCount(auto7BAA13D8_g, c_unitCountAll);
    for (;; auto7BAA13D8_u -= 1) {
        auto7BAA13D8_var = UnitGroupUnitFromEnd(auto7BAA13D8_g, auto7BAA13D8_u);
        if (auto7BAA13D8_var == null) { break; }
        if ((UnitGetCustomValue(auto7BAA13D8_var, 0) < 0.4) && (UnitGetCustomValue(auto7BAA13D8_var, 0) > 0.0)) {
            gf_CreateBanner(UnitGetOwner(auto7BAA13D8_var), 20);
        }

        Wait(0.02, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LowCentralization_Init () {
    gt_LowCentralization = TriggerCreate("gt_LowCentralization_Func");
    TriggerAddEventTimePeriodic(gt_LowCentralization, 65.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: You are at war/FoundEU/IncreaseWarStatus/DecreaseWarStatus
//--------------------------------------------------------------------------------------------------
bool gt_YouareatwarFoundEUIncreaseWarStatusDecreaseWarStatus_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_interWars;
    int lv_selectedPlayer;
    bool[10] lv_atWar;

    // Automatic Variable Declarations
    playergroup auto46C38CA1_g;
    int auto46C38CA1_var;
    playergroup auto7A38DE83_g;
    int auto7A38DE83_var;
    int autoF0195129_ae;
    const int autoF0195129_ai = 1;
    playergroup auto738FDB91_g;
    int auto738FDB91_var;
    playergroup autoC583DA24_g;
    int autoC583DA24_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto46C38CA1_g = gv_users;
    auto46C38CA1_var = -1;
    while (true) {
        auto46C38CA1_var = PlayerGroupNextPlayer(auto46C38CA1_g, auto46C38CA1_var);
        if (auto46C38CA1_var < 0) { break; }
        gf_RemoveBanner(auto46C38CA1_var, 8);
        gf_RemoveBanner(auto46C38CA1_var, 21);
    }
    auto7A38DE83_g = gv_users;
    auto7A38DE83_var = -1;
    while (true) {
        auto7A38DE83_var = PlayerGroupNextPlayer(auto7A38DE83_g, auto7A38DE83_var);
        if (auto7A38DE83_var < 0) { break; }
        autoF0195129_ae = PlayerGroupCount(gv_users);
        lv_selectedPlayer = 1;
        for ( ; ( (autoF0195129_ai >= 0 && lv_selectedPlayer <= autoF0195129_ae) || (autoF0195129_ai < 0 && lv_selectedPlayer >= autoF0195129_ae) ) ; lv_selectedPlayer += autoF0195129_ai ) {
            if (((libNtve_gf_PlayerIsEnemy(auto7A38DE83_var, PlayerGroupPlayer(gv_users, lv_selectedPlayer), libNtve_ge_PlayerRelation_Enemy) == true))) {
                gf_CreateBanner(auto7A38DE83_var, 8);
                lv_interWars += 1;
                lv_atWar[auto7A38DE83_var] = true;
                if ((TechTreeUpgradeCount(auto7A38DE83_var, "InhumaneWar", c_techCountCompleteOnly) != 1) && (TechTreeUpgradeCount(auto7A38DE83_var, "TotalWar", c_techCountCompleteOnly) != 1) && (TechTreeUpgradeCount(auto7A38DE83_var, "LimitedWar", c_techCountCompleteOnly) != 1)) {
                    gf_CreateBanner(auto7A38DE83_var, 21);
                }

            }

        }
    }
    auto738FDB91_g = gv_users;
    auto738FDB91_var = -1;
    while (true) {
        auto738FDB91_var = PlayerGroupNextPlayer(auto738FDB91_g, auto738FDB91_var);
        if (auto738FDB91_var < 0) { break; }
        if ((gv_year > 2330) && (lv_interWars < 3) && (gv_gDP[auto738FDB91_var] > 1400) && (PlayerGroupCount(gv_theEuroCrew) == 0) && (TechTreeUpgradeCount(auto738FDB91_var, "ResearchNationalUnions", c_techCountCompleteOnly) == 0)) {
            gf_CreateBanner(auto738FDB91_var, 33);
        }
        else {
            gf_RemoveBanner(auto738FDB91_var, 33);
        }
    }
    autoC583DA24_g = gv_users;
    autoC583DA24_var = -1;
    while (true) {
        autoC583DA24_var = PlayerGroupNextPlayer(autoC583DA24_g, autoC583DA24_var);
        if (autoC583DA24_var < 0) { break; }
        if ((PlayerGroupCount(gv_theEuroCrew) == 0) && (TechTreeUpgradeCount(autoC583DA24_var, "ResearchNationalUnions", c_techCountCompleteOnly) == 1)) {
            gf_CreateBanner(autoC583DA24_var, 34);
        }
        else {
            gf_RemoveBanner(autoC583DA24_var, 34);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_YouareatwarFoundEUIncreaseWarStatusDecreaseWarStatus_Init () {
    gt_YouareatwarFoundEUIncreaseWarStatusDecreaseWarStatus = TriggerCreate("gt_YouareatwarFoundEUIncreaseWarStatusDecreaseWarStatus_Func");
    TriggerAddEventTimePeriodic(gt_YouareatwarFoundEUIncreaseWarStatusDecreaseWarStatus, 65.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: BannerApplication
//--------------------------------------------------------------------------------------------------
bool gt_BannerApplication_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_monthstoBankruptcy;
    int lv_slot1;
    bool lv_rapidSwitch;
    int lv_slot2;
    int lv_slot3;
    int lv_slot4;
    int lv_slot5;
    int lv_slot6;
    int lv_slot7;
    int lv_slot8;
    int lv_slot9;
    int lv_switch;
    int lv_queueSlot;
    int lv_slots19;

    // Automatic Variable Declarations
    playergroup auto56FEDB8E_g;
    int auto56FEDB8E_var;
    const int autoC56B57AA_ae = 9;
    const int autoC56B57AA_ai = 1;
    const int auto59D643E1_ae = 9;
    const int auto59D643E1_ai = 1;
    const int autoE4AB36E0_ae = 9;
    const int autoE4AB36E0_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_rapidSwitch = false;
    auto56FEDB8E_g = gv_users;
    auto56FEDB8E_var = -1;
    while (true) {
        auto56FEDB8E_var = PlayerGroupNextPlayer(auto56FEDB8E_g, auto56FEDB8E_var);
        if (auto56FEDB8E_var < 0) { break; }
        lv_slot9 = gv_bannerQueue[auto56FEDB8E_var][9];
        lv_slot8 = gv_bannerQueue[auto56FEDB8E_var][8];
        lv_slot7 = gv_bannerQueue[auto56FEDB8E_var][7];
        lv_slot6 = gv_bannerQueue[auto56FEDB8E_var][6];
        lv_slot5 = gv_bannerQueue[auto56FEDB8E_var][5];
        lv_slot4 = gv_bannerQueue[auto56FEDB8E_var][4];
        lv_slot3 = gv_bannerQueue[auto56FEDB8E_var][3];
        lv_slot2 = gv_bannerQueue[auto56FEDB8E_var][2];
        lv_slot1 = gv_bannerQueue[auto56FEDB8E_var][1];
        if ((lv_slot1 < lv_slot2)) {
            lv_switch = lv_slot1;
            lv_slot1 = lv_slot2;
            lv_slot2 = lv_switch;
            lv_rapidSwitch = true;
        }

        if ((lv_slot2 < lv_slot3)) {
            lv_switch = lv_slot2;
            lv_slot2 = lv_slot3;
            lv_slot3 = lv_switch;
            lv_rapidSwitch = true;
        }

        if ((lv_slot3 < lv_slot4)) {
            lv_switch = lv_slot3;
            lv_slot3 = lv_slot4;
            lv_slot4 = lv_switch;
            lv_rapidSwitch = true;
        }

        if ((lv_slot4 < lv_slot5)) {
            lv_switch = lv_slot4;
            lv_slot4 = lv_slot5;
            lv_slot5 = lv_switch;
            lv_rapidSwitch = true;
        }

        if ((lv_slot5 < lv_slot6)) {
            lv_switch = lv_slot5;
            lv_slot5 = lv_slot6;
            lv_slot6 = lv_switch;
            lv_rapidSwitch = true;
        }

        if ((lv_slot6 < lv_slot7)) {
            lv_switch = lv_slot6;
            lv_slot6 = lv_slot7;
            lv_slot7 = lv_switch;
            lv_rapidSwitch = true;
        }

        if ((lv_slot7 < lv_slot8)) {
            lv_switch = lv_slot7;
            lv_slot7 = lv_slot8;
            lv_slot8 = lv_switch;
            lv_rapidSwitch = true;
        }

        if ((lv_slot8 < lv_slot9)) {
            lv_switch = lv_slot7;
            lv_slot7 = lv_slot8;
            lv_slot8 = lv_switch;
            lv_rapidSwitch = true;
        }

        gv_bannerQueue[auto56FEDB8E_var][1] = lv_slot1;
        gv_bannerQueue[auto56FEDB8E_var][2] = lv_slot2;
        gv_bannerQueue[auto56FEDB8E_var][3] = lv_slot3;
        gv_bannerQueue[auto56FEDB8E_var][4] = lv_slot4;
        gv_bannerQueue[auto56FEDB8E_var][5] = lv_slot5;
        gv_bannerQueue[auto56FEDB8E_var][6] = lv_slot6;
        gv_bannerQueue[auto56FEDB8E_var][7] = lv_slot7;
        gv_bannerQueue[auto56FEDB8E_var][8] = lv_slot8;
        gv_bannerQueue[auto56FEDB8E_var][9] = lv_slot9;
        lv_slots19 = 1;
        for ( ; ( (autoC56B57AA_ai >= 0 && lv_slots19 <= autoC56B57AA_ae) || (autoC56B57AA_ai < 0 && lv_slots19 >= autoC56B57AA_ae) ) ; lv_slots19 += autoC56B57AA_ai ) {
            if ((gv_bannerQueue[auto56FEDB8E_var][lv_slots19] == 0) && (lv_rapidSwitch == false)) {
                DialogSetVisible(gv_bannerFrame[lv_slots19], PlayerGroupSingle(auto56FEDB8E_var), false);
            }

        }
        lv_slots19 = 1;
        for ( ; ( (auto59D643E1_ai >= 0 && lv_slots19 <= auto59D643E1_ae) || (auto59D643E1_ai < 0 && lv_slots19 >= auto59D643E1_ae) ) ; lv_slots19 += auto59D643E1_ai ) {
            if ((gv_bannerQueue[auto56FEDB8E_var][lv_slots19] == 1) && (lv_rapidSwitch == false)) {
                DialogSetVisible(gv_bannerFrame[lv_slots19], PlayerGroupSingle(auto56FEDB8E_var), true);
            }

        }
        lv_slots19 = 1;
        for ( ; ( (autoE4AB36E0_ai >= 0 && lv_slots19 <= autoE4AB36E0_ae) || (autoE4AB36E0_ai < 0 && lv_slots19 >= autoE4AB36E0_ae) ) ; lv_slots19 += autoE4AB36E0_ai ) {
            if ((gv_bannerQueue[auto56FEDB8E_var][lv_slots19] == 1) && (lv_rapidSwitch == false)) {
                libNtve_gf_SetDialogItemImage(gv_bannerItems[lv_slots19][0], "BadSettle.tga", PlayerGroupSingle(auto56FEDB8E_var));
                libNtve_gf_SetDialogItemTooltip(gv_bannerItems[lv_slots19][1], StringExternal("Param/Value/C454FA0E"), PlayerGroupSingle(auto56FEDB8E_var));
                DialogSetVisible(gv_bannerFrame[lv_slots19], PlayerGroupSingle(auto56FEDB8E_var), true);
            }

            if ((gv_bannerQueue[auto56FEDB8E_var][lv_slots19] == 2) && (lv_rapidSwitch == false)) {
                libNtve_gf_SetDialogItemImage(gv_bannerItems[lv_slots19][0], "BuildHomes.tga", PlayerGroupSingle(auto56FEDB8E_var));
                libNtve_gf_SetDialogItemTooltip(gv_bannerItems[lv_slots19][1], StringExternal("Param/Value/331FA6D1"), PlayerGroupSingle(auto56FEDB8E_var));
                DialogSetVisible(gv_bannerFrame[lv_slots19], PlayerGroupSingle(auto56FEDB8E_var), true);
            }

            if ((gv_bannerQueue[auto56FEDB8E_var][lv_slots19] == 3) && (lv_rapidSwitch == false)) {
                libNtve_gf_SetDialogItemImage(gv_bannerItems[lv_slots19][0], "Starvation.tga", PlayerGroupSingle(auto56FEDB8E_var));
                libNtve_gf_SetDialogItemTooltip(gv_bannerItems[lv_slots19][1], StringExternal("Param/Value/83C4B65F"), PlayerGroupSingle(auto56FEDB8E_var));
                DialogSetVisible(gv_bannerFrame[lv_slots19], PlayerGroupSingle(auto56FEDB8E_var), true);
            }

            if ((gv_bannerQueue[auto56FEDB8E_var][lv_slots19] == 4) && (lv_rapidSwitch == false)) {
                libNtve_gf_SetDialogItemImage(gv_bannerItems[lv_slots19][0], "ResearchingDangerousTech.tga", PlayerGroupSingle(auto56FEDB8E_var));
                libNtve_gf_SetDialogItemTooltip(gv_bannerItems[lv_slots19][1], StringExternal("Param/Value/B59D0D7A"), PlayerGroupSingle(auto56FEDB8E_var));
                DialogSetVisible(gv_bannerFrame[lv_slots19], PlayerGroupSingle(auto56FEDB8E_var), true);
            }

            if ((gv_bannerQueue[auto56FEDB8E_var][lv_slots19] == 5) && (lv_rapidSwitch == false)) {
                libNtve_gf_SetDialogItemImage(gv_bannerItems[lv_slots19][0], "BankruptcyIncoming.tga", PlayerGroupSingle(auto56FEDB8E_var));
                libNtve_gf_SetDialogItemTooltip(gv_bannerItems[lv_slots19][1], TextWithColor(((StringExternal("Param/Value/091101DA") + IntToText(lv_monthstoBankruptcy)) + StringExternal("Param/Value/F04822BA")), Color(100.00, 0.00, 0.00)), PlayerGroupSingle(auto56FEDB8E_var));
                DialogSetVisible(gv_bannerFrame[lv_slots19], PlayerGroupSingle(auto56FEDB8E_var), true);
            }

            if ((gv_bannerQueue[auto56FEDB8E_var][lv_slots19] == 6) && (lv_rapidSwitch == false)) {
                libNtve_gf_SetDialogItemImage(gv_bannerItems[lv_slots19][0], "Depression.tga", PlayerGroupSingle(auto56FEDB8E_var));
                libNtve_gf_SetDialogItemTooltip(gv_bannerItems[lv_slots19][1], StringExternal("Param/Value/361FAE08"), PlayerGroupSingle(auto56FEDB8E_var));
                DialogSetVisible(gv_bannerFrame[lv_slots19], PlayerGroupSingle(auto56FEDB8E_var), true);
            }

            if ((gv_bannerQueue[auto56FEDB8E_var][lv_slots19] == 7) && (lv_rapidSwitch == false)) {
                libNtve_gf_SetDialogItemImage(gv_bannerItems[lv_slots19][0], "OilShortage.tga", PlayerGroupSingle(auto56FEDB8E_var));
                libNtve_gf_SetDialogItemTooltip(gv_bannerItems[lv_slots19][1], StringExternal("Param/Value/3D0940FC"), PlayerGroupSingle(auto56FEDB8E_var));
                DialogSetVisible(gv_bannerFrame[lv_slots19], PlayerGroupSingle(auto56FEDB8E_var), true);
            }

            if ((gv_bannerQueue[auto56FEDB8E_var][lv_slots19] == 8) && (lv_rapidSwitch == false)) {
                libNtve_gf_SetDialogItemImage(gv_bannerItems[lv_slots19][0], "AtWar.tga", PlayerGroupSingle(auto56FEDB8E_var));
                libNtve_gf_SetDialogItemTooltip(gv_bannerItems[lv_slots19][1], StringExternal("Param/Value/D412040B"), PlayerGroupSingle(auto56FEDB8E_var));
                DialogSetVisible(gv_bannerFrame[lv_slots19], PlayerGroupSingle(auto56FEDB8E_var), true);
            }

            if ((gv_bannerQueue[auto56FEDB8E_var][lv_slots19] == 9) && (lv_rapidSwitch == false)) {
                libNtve_gf_SetDialogItemImage(gv_bannerItems[lv_slots19][0], "NoPower.tga", PlayerGroupSingle(auto56FEDB8E_var));
                libNtve_gf_SetDialogItemTooltip(gv_bannerItems[lv_slots19][1], StringExternal("Param/Value/ACDFA604"), PlayerGroupSingle(auto56FEDB8E_var));
                DialogSetVisible(gv_bannerFrame[lv_slots19], PlayerGroupSingle(auto56FEDB8E_var), true);
            }

            if ((gv_bannerQueue[auto56FEDB8E_var][lv_slots19] == 11) && (lv_rapidSwitch == false)) {
                libNtve_gf_SetDialogItemImage(gv_bannerItems[lv_slots19][0], "BuildFarms.tga", PlayerGroupSingle(auto56FEDB8E_var));
                libNtve_gf_SetDialogItemTooltip(gv_bannerItems[lv_slots19][1], StringExternal("Param/Value/356D7BD7"), PlayerGroupSingle(auto56FEDB8E_var));
                DialogSetVisible(gv_bannerFrame[lv_slots19], PlayerGroupSingle(auto56FEDB8E_var), true);
            }

            if ((gv_bannerQueue[auto56FEDB8E_var][lv_slots19] == 12) && (lv_rapidSwitch == false)) {
                libNtve_gf_SetDialogItemImage(gv_bannerItems[lv_slots19][0], "FarmingBadTerrain.tga", PlayerGroupSingle(auto56FEDB8E_var));
                libNtve_gf_SetDialogItemTooltip(gv_bannerItems[lv_slots19][1], StringExternal("Param/Value/C5089130"), PlayerGroupSingle(auto56FEDB8E_var));
                DialogSetVisible(gv_bannerFrame[lv_slots19], PlayerGroupSingle(auto56FEDB8E_var), true);
            }

            if ((gv_bannerQueue[auto56FEDB8E_var][lv_slots19] == 13) && (lv_rapidSwitch == false)) {
                libNtve_gf_SetDialogItemImage(gv_bannerItems[lv_slots19][0], "EmptyQueue.tga", PlayerGroupSingle(auto56FEDB8E_var));
                libNtve_gf_SetDialogItemTooltip(gv_bannerItems[lv_slots19][1], StringExternal("Param/Value/703F8B8B"), PlayerGroupSingle(auto56FEDB8E_var));
                DialogSetVisible(gv_bannerFrame[lv_slots19], PlayerGroupSingle(auto56FEDB8E_var), true);
            }

            if ((gv_bannerQueue[auto56FEDB8E_var][lv_slots19] == 14) && (lv_rapidSwitch == false)) {
                libNtve_gf_SetDialogItemImage(gv_bannerItems[lv_slots19][0], "NotEnoughMoneyInvestedInScience.tga", PlayerGroupSingle(auto56FEDB8E_var));
                libNtve_gf_SetDialogItemTooltip(gv_bannerItems[lv_slots19][1], StringExternal("Param/Value/DAF387A7"), PlayerGroupSingle(auto56FEDB8E_var));
                DialogSetVisible(gv_bannerFrame[lv_slots19], PlayerGroupSingle(auto56FEDB8E_var), true);
            }

            if ((gv_bannerQueue[auto56FEDB8E_var][lv_slots19] == 15) && (lv_rapidSwitch == false)) {
                libNtve_gf_SetDialogItemImage(gv_bannerItems[lv_slots19][0], "NotEnoughLabs.tga", PlayerGroupSingle(auto56FEDB8E_var));
                libNtve_gf_SetDialogItemTooltip(gv_bannerItems[lv_slots19][1], StringExternal("Param/Value/A3CBB987"), PlayerGroupSingle(auto56FEDB8E_var));
                DialogSetVisible(gv_bannerFrame[lv_slots19], PlayerGroupSingle(auto56FEDB8E_var), true);
            }

            if ((gv_bannerQueue[auto56FEDB8E_var][lv_slots19] == 16) && (lv_rapidSwitch == false)) {
                libNtve_gf_SetDialogItemImage(gv_bannerItems[lv_slots19][0], "MechanizeYourCountry.tga", PlayerGroupSingle(auto56FEDB8E_var));
                libNtve_gf_SetDialogItemTooltip(gv_bannerItems[lv_slots19][1], StringExternal("Param/Value/F11E9DE5"), PlayerGroupSingle(auto56FEDB8E_var));
                DialogSetVisible(gv_bannerFrame[lv_slots19], PlayerGroupSingle(auto56FEDB8E_var), true);
            }

            if ((gv_bannerQueue[auto56FEDB8E_var][lv_slots19] == 17) && (lv_rapidSwitch == false)) {
                libNtve_gf_SetDialogItemImage(gv_bannerItems[lv_slots19][0], "Recession.tga", PlayerGroupSingle(auto56FEDB8E_var));
                libNtve_gf_SetDialogItemTooltip(gv_bannerItems[lv_slots19][1], StringExternal("Param/Value/8C91E73E"), PlayerGroupSingle(auto56FEDB8E_var));
                DialogSetVisible(gv_bannerFrame[lv_slots19], PlayerGroupSingle(auto56FEDB8E_var), true);
            }

            if ((gv_bannerQueue[auto56FEDB8E_var][lv_slots19] == 18) && (lv_rapidSwitch == false)) {
                libNtve_gf_SetDialogItemImage(gv_bannerItems[lv_slots19][0], "LoansTaken.tga", PlayerGroupSingle(auto56FEDB8E_var));
                libNtve_gf_SetDialogItemTooltip(gv_bannerItems[lv_slots19][1], StringExternal("Param/Value/4656B74F"), PlayerGroupSingle(auto56FEDB8E_var));
                DialogSetVisible(gv_bannerFrame[lv_slots19], PlayerGroupSingle(auto56FEDB8E_var), true);
            }

            if ((gv_bannerQueue[auto56FEDB8E_var][lv_slots19] == 19) && (lv_rapidSwitch == false)) {
                libNtve_gf_SetDialogItemImage(gv_bannerItems[lv_slots19][0], "OreShortage.tga", PlayerGroupSingle(auto56FEDB8E_var));
                libNtve_gf_SetDialogItemTooltip(gv_bannerItems[lv_slots19][1], StringExternal("Param/Value/4D616E32"), PlayerGroupSingle(auto56FEDB8E_var));
                DialogSetVisible(gv_bannerFrame[lv_slots19], PlayerGroupSingle(auto56FEDB8E_var), true);
            }

            if ((gv_bannerQueue[auto56FEDB8E_var][lv_slots19] == 20) && (lv_rapidSwitch == false)) {
                libNtve_gf_SetDialogItemImage(gv_bannerItems[lv_slots19][0], "LowCentralization.tga", PlayerGroupSingle(auto56FEDB8E_var));
                libNtve_gf_SetDialogItemTooltip(gv_bannerItems[lv_slots19][1], StringExternal("Param/Value/1F9A9E7E"), PlayerGroupSingle(auto56FEDB8E_var));
                DialogSetVisible(gv_bannerFrame[lv_slots19], PlayerGroupSingle(auto56FEDB8E_var), true);
            }

            if ((gv_bannerQueue[auto56FEDB8E_var][lv_slots19] == 21) && (lv_rapidSwitch == false)) {
                libNtve_gf_SetDialogItemImage(gv_bannerItems[lv_slots19][0], "RaiseWarStatus.tga", PlayerGroupSingle(auto56FEDB8E_var));
                libNtve_gf_SetDialogItemTooltip(gv_bannerItems[lv_slots19][1], StringExternal("Param/Value/F32CCD52"), PlayerGroupSingle(auto56FEDB8E_var));
                DialogSetVisible(gv_bannerFrame[lv_slots19], PlayerGroupSingle(auto56FEDB8E_var), true);
            }

            if ((gv_bannerQueue[auto56FEDB8E_var][lv_slots19] == 22) && (lv_rapidSwitch == false)) {
                libNtve_gf_SetDialogItemImage(gv_bannerItems[lv_slots19][0], "RaiseWarStatus.tga", PlayerGroupSingle(auto56FEDB8E_var));
                libNtve_gf_SetDialogItemTooltip(gv_bannerItems[lv_slots19][1], StringExternal("Param/Value/2E5E3437"), PlayerGroupSingle(auto56FEDB8E_var));
                DialogSetVisible(gv_bannerFrame[lv_slots19], PlayerGroupSingle(auto56FEDB8E_var), true);
            }

            if ((gv_bannerQueue[auto56FEDB8E_var][lv_slots19] == 31) && (lv_rapidSwitch == false)) {
                libNtve_gf_SetDialogItemImage(gv_bannerItems[lv_slots19][0], "BuildHomes.tga", PlayerGroupSingle(auto56FEDB8E_var));
                libNtve_gf_SetDialogItemTooltip(gv_bannerItems[lv_slots19][1], StringExternal("Param/Value/C65F8956"), PlayerGroupSingle(auto56FEDB8E_var));
                DialogSetVisible(gv_bannerFrame[lv_slots19], PlayerGroupSingle(auto56FEDB8E_var), true);
            }

            if ((gv_bannerQueue[auto56FEDB8E_var][lv_slots19] == 32) && (lv_rapidSwitch == false)) {
                libNtve_gf_SetDialogItemImage(gv_bannerItems[lv_slots19][0], "Boom.tga", PlayerGroupSingle(auto56FEDB8E_var));
                libNtve_gf_SetDialogItemTooltip(gv_bannerItems[lv_slots19][1], StringExternal("Param/Value/428670BA"), PlayerGroupSingle(auto56FEDB8E_var));
                DialogSetVisible(gv_bannerFrame[lv_slots19], PlayerGroupSingle(auto56FEDB8E_var), true);
            }

            if ((gv_bannerQueue[auto56FEDB8E_var][lv_slots19] == 33) && (lv_rapidSwitch == false)) {
                libNtve_gf_SetDialogItemImage(gv_bannerItems[lv_slots19][0], "ShouldFoundEU.tga", PlayerGroupSingle(auto56FEDB8E_var));
                libNtve_gf_SetDialogItemTooltip(gv_bannerItems[lv_slots19][1], StringExternal("Param/Value/CF879D4D"), PlayerGroupSingle(auto56FEDB8E_var));
                DialogSetVisible(gv_bannerFrame[lv_slots19], PlayerGroupSingle(auto56FEDB8E_var), true);
            }

            if ((gv_bannerQueue[auto56FEDB8E_var][lv_slots19] == 34) && (lv_rapidSwitch == false)) {
                libNtve_gf_SetDialogItemImage(gv_bannerItems[lv_slots19][0], "CanFoundEU.tga", PlayerGroupSingle(auto56FEDB8E_var));
                libNtve_gf_SetDialogItemTooltip(gv_bannerItems[lv_slots19][1], StringExternal("Param/Value/ED85ADFB"), PlayerGroupSingle(auto56FEDB8E_var));
                DialogSetVisible(gv_bannerFrame[lv_slots19], PlayerGroupSingle(auto56FEDB8E_var), true);
            }

        }
        if ((lv_rapidSwitch == true)) {
            Wait(0.2, c_timeGame);
            TriggerExecute(TriggerGetCurrent(), true, false);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BannerApplication_Init () {
    gt_BannerApplication = TriggerCreate("gt_BannerApplication_Func");
    TriggerAddEventTimePeriodic(gt_BannerApplication, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Banner Creation
//--------------------------------------------------------------------------------------------------
bool gt_BannerCreation_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_letsMake9AtOnce;

    // Automatic Variable Declarations
    const int autoFC972050_ae = 9;
    const int autoFC972050_ai = 1;

    // Variable Initialization
    lv_letsMake9AtOnce = 1;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_letsMake9AtOnce = 1;
    for ( ; ( (autoFC972050_ai >= 0 && lv_letsMake9AtOnce <= autoFC972050_ae) || (autoFC972050_ai < 0 && lv_letsMake9AtOnce >= autoFC972050_ae) ) ; lv_letsMake9AtOnce += autoFC972050_ai ) {
        DialogCreate(75, 111, c_anchorTopRight, ((lv_letsMake9AtOnce * 90) + 150), 45, true);
        gv_bannerFrame[lv_letsMake9AtOnce] = DialogLastCreated();
        DialogSetImage(DialogLastCreated(), "Assets\\Textures\\Progress Bar\\ClearBox.tga");
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 69, 69, c_anchorCenter, 0, 15, StringToText(""), StringToText(""), "");
        gv_bannerItems[lv_letsMake9AtOnce][1] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\Progress Bar\\ClearBox.tga", PlayerGroupAll());
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 10, 65, c_anchorTop, 0, -15, StringToText(""), StringToText(""), "");
        gv_bannerItems[lv_letsMake9AtOnce][2] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\Progress Bar\\ClearBox.tga", PlayerGroupAll());
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 75, 111, c_anchorCenter, 0, 0, StringToText(""), "science.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
        gv_bannerItems[lv_letsMake9AtOnce][0] = DialogControlLastCreated();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BannerCreation_Init () {
    gt_BannerCreation = TriggerCreate("gt_BannerCreation_Func");
    TriggerAddEventMapInit(gt_BannerCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hide Banner
//--------------------------------------------------------------------------------------------------
bool gt_HideBanner_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_bannerItems[1][2]) || (EventDialogControl() == gv_bannerItems[2][2]) || (EventDialogControl() == gv_bannerItems[3][2]) || (EventDialogControl() == gv_bannerItems[4][2]) || (EventDialogControl() == gv_bannerItems[5][2]) || (EventDialogControl() == gv_bannerItems[6][2]) || (EventDialogControl() == gv_bannerItems[7][2]) || (EventDialogControl() == gv_bannerItems[8][2]) || (EventDialogControl() == gv_bannerItems[9][2])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventDialogControl() == gv_bannerItems[1][2])) {
        DialogSetVisible(gv_bannerFrame[1], PlayerGroupSingle(EventPlayer()), false);
        gv_showItAgain[EventPlayer()][gv_bannerQueue[EventPlayer()][1]] = false;
        gv_bannerQueue[EventPlayer()][1] = 0;
    }

    if ((EventDialogControl() == gv_bannerItems[2][2])) {
        DialogSetVisible(gv_bannerFrame[2], PlayerGroupSingle(EventPlayer()), false);
        gv_showItAgain[EventPlayer()][gv_bannerQueue[EventPlayer()][2]] = false;
        gv_bannerQueue[EventPlayer()][2] = 0;
    }

    if ((EventDialogControl() == gv_bannerItems[3][2])) {
        DialogSetVisible(gv_bannerFrame[3], PlayerGroupSingle(EventPlayer()), false);
        gv_showItAgain[EventPlayer()][gv_bannerQueue[EventPlayer()][3]] = false;
        gv_bannerQueue[EventPlayer()][3] = 0;
    }

    if ((EventDialogControl() == gv_bannerItems[4][2])) {
        DialogSetVisible(gv_bannerFrame[4], PlayerGroupSingle(EventPlayer()), false);
        gv_showItAgain[EventPlayer()][gv_bannerQueue[EventPlayer()][4]] = false;
        gv_bannerQueue[EventPlayer()][4] = 0;
    }

    if ((EventDialogControl() == gv_bannerItems[5][2])) {
        DialogSetVisible(gv_bannerFrame[5], PlayerGroupSingle(EventPlayer()), false);
        gv_showItAgain[EventPlayer()][gv_bannerQueue[EventPlayer()][5]] = false;
        gv_bannerQueue[EventPlayer()][5] = 0;
    }

    if ((EventDialogControl() == gv_bannerItems[6][2])) {
        DialogSetVisible(gv_bannerFrame[6], PlayerGroupSingle(EventPlayer()), false);
        gv_showItAgain[EventPlayer()][gv_bannerQueue[EventPlayer()][6]] = false;
        gv_bannerQueue[EventPlayer()][6] = 0;
    }

    if ((EventDialogControl() == gv_bannerItems[7][2])) {
        DialogSetVisible(gv_bannerFrame[7], PlayerGroupSingle(EventPlayer()), false);
        gv_showItAgain[EventPlayer()][gv_bannerQueue[EventPlayer()][7]] = false;
        gv_bannerQueue[EventPlayer()][7] = 0;
    }

    if ((EventDialogControl() == gv_bannerItems[8][2])) {
        DialogSetVisible(gv_bannerFrame[8], PlayerGroupSingle(EventPlayer()), false);
        gv_showItAgain[EventPlayer()][gv_bannerQueue[EventPlayer()][8]] = false;
        gv_bannerQueue[EventPlayer()][8] = 0;
    }

    if ((EventDialogControl() == gv_bannerItems[9][2])) {
        DialogSetVisible(gv_bannerFrame[9], PlayerGroupSingle(EventPlayer()), false);
        gv_showItAgain[EventPlayer()][gv_bannerQueue[EventPlayer()][9]] = false;
        gv_bannerQueue[EventPlayer()][9] = 0;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HideBanner_Init () {
    gt_HideBanner = TriggerCreate("gt_HideBanner_Func");
    TriggerAddEventDialogControl(gt_HideBanner, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: BannerUse
//--------------------------------------------------------------------------------------------------
bool gt_BannerUse_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_usedUnitGroup;
    unit lv_lab;
    int lv_usedBanner;
    int lv_usedBannerID;

    // Automatic Variable Declarations
    const int autoABDAF80C_ae = 9;
    const int autoABDAF80C_ai = 1;
    playergroup autoE99F3CEB_g;
    int autoE99F3CEB_var;
    unitgroup auto202718C3_g;
    int auto202718C3_u;
    unit auto202718C3_var;
    unitgroup auto81D31317_g;
    int auto81D31317_u;
    unit auto81D31317_var;
    unitgroup autoCF9B91DD_g;
    int autoCF9B91DD_u;
    unit autoCF9B91DD_var;
    unitgroup auto7C35F628_g;
    int auto7C35F628_u;
    unit auto7C35F628_var;

    // Variable Initialization
    lv_usedUnitGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_bannerItems[1][1]) || (EventDialogControl() == gv_bannerItems[2][1]) || (EventDialogControl() == gv_bannerItems[3][1]) || (EventDialogControl() == gv_bannerItems[4][1]) || (EventDialogControl() == gv_bannerItems[5][1]) || (EventDialogControl() == gv_bannerItems[6][1]) || (EventDialogControl() == gv_bannerItems[7][1]) || (EventDialogControl() == gv_bannerItems[8][1]) || (EventDialogControl() == gv_bannerItems[9][1])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_usedBanner = 1;
    for ( ; ( (autoABDAF80C_ai >= 0 && lv_usedBanner <= autoABDAF80C_ae) || (autoABDAF80C_ai < 0 && lv_usedBanner >= autoABDAF80C_ae) ) ; lv_usedBanner += autoABDAF80C_ai ) {
        if ((EventDialogControl() == gv_bannerItems[lv_usedBanner][1])) {
            lv_usedBannerID = gv_bannerQueue[EventPlayer()][lv_usedBanner];
            break;
        }

    }
    if ((lv_usedBannerID == 2)) {
        CameraPan(EventPlayer(), UnitGetPosition(UnitGroupRandomUnit(UnitGroup("Founder", EventPlayer(), RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive)), 2.0, -1, 10.0, false);
        UnitSelect(UnitGroupRandomUnit(UnitGroup("Founder", EventPlayer(), RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive), EventPlayer(), true);
    }

    if (((lv_usedBannerID == 3) || (lv_usedBannerID == 11) || (lv_usedBannerID == 21))) {
        CameraPan(EventPlayer(), UnitGetPosition(UnitGroupRandomUnit(UnitGroup("Capital", EventPlayer(), RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive)), 2.0, -1, 10.0, false);
        UnitGroupSelect(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), EventPlayer(), false);
        UnitSelect(UnitGroupRandomUnit(UnitGroup("Capital", EventPlayer(), RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive), EventPlayer(), true);
    }

    if (((lv_usedBannerID == 4) || (lv_usedBannerID == 13) || (lv_usedBannerID == 14) || (lv_usedBannerID == 16) || (lv_usedBannerID == 33))) {
        DialogSetVisible(gv_current, PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_researchMenuSelected, PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_researchMenuFrame, PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_governmentTechTree, PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_economyTechTree, PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_specialTechTree, PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_militaryTechTree, PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_researchFunding, PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_closeButtonResearchMenu, PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_current, PlayerGroupSingle(EventPlayer()), true);
        DialogSetVisible(gv_researchMenuSelected, PlayerGroupSingle(EventPlayer()), true);
        DialogSetVisible(gv_researchMenuFrame, PlayerGroupSingle(EventPlayer()), true);
        DialogSetVisible(gv_governmentTechTree, PlayerGroupSingle(EventPlayer()), true);
        DialogSetVisible(gv_researchFunding, PlayerGroupSingle(EventPlayer()), true);
        DialogSetVisible(gv_closeButtonResearchMenu, PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetEnabled(gv_researchMenuFrameDialogItems[0], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetEnabled(gv_researchMenuFrameDialogItems[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetEnabled(gv_researchMenuFrameDialogItems[2], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetEnabled(gv_researchMenuFrameDialogItems[3], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetEnabled(gv_researchMenuFrameDialogItems[4], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetEnabled(gv_researchMenuFrameDialogItems[0], PlayerGroupSingle(EventPlayer()), false);
    }

    if (((lv_usedBannerID == 5) || (lv_usedBannerID == 6) || (lv_usedBannerID == 17) || (lv_usedBannerID == 18))) {
    }

    if (((lv_usedBannerID == 8))) {
        autoE99F3CEB_g = PlayerGroupAlliance(c_playerGroupEnemy, EventPlayer());
        autoE99F3CEB_var = -1;
        while (true) {
            autoE99F3CEB_var = PlayerGroupNextPlayer(autoE99F3CEB_g, autoE99F3CEB_var);
            if (autoE99F3CEB_var < 0) { break; }
            auto202718C3_g = UnitGroup("Capital", autoE99F3CEB_var, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto202718C3_u = UnitGroupCount(auto202718C3_g, c_unitCountAll);
            for (;; auto202718C3_u -= 1) {
                auto202718C3_var = UnitGroupUnitFromEnd(auto202718C3_g, auto202718C3_u);
                if (auto202718C3_var == null) { break; }
                MinimapPing(PlayerGroupSingle(EventPlayer()), UnitGetPosition(auto202718C3_var), 4.0, Color(100.00, 0.00, 0.00));
            }
        }
    }

    if (((lv_usedBannerID == 12))) {
        auto81D31317_g = UnitGroup(null, EventPlayer(), RegionEntireMap(), UnitFilter((1 << c_targetFilterArmored) | (1 << c_targetFilterMechanical) | (1 << c_targetFilterPsionic) | (1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterMapBoss - 32))), 0);
        auto81D31317_u = UnitGroupCount(auto81D31317_g, c_unitCountAll);
        for (;; auto81D31317_u -= 1) {
            auto81D31317_var = UnitGroupUnitFromEnd(auto81D31317_g, auto81D31317_u);
            if (auto81D31317_var == null) { break; }
            if (((UnitHasBehavior2(auto81D31317_var, "DesertTerrain") == true) || (UnitHasBehavior2(auto81D31317_var, "MountainTerrain") == true) || (UnitHasBehavior2(auto81D31317_var, "SnowTerrain") == true))) {
                MinimapPing(PlayerGroupSingle(EventPlayer()), UnitGetPosition(auto81D31317_var), 4.0, Color(100.00, 0.00, 0.00));
                UnitGroupAdd(lv_usedUnitGroup, auto81D31317_var);
            }

            UnitGroupSelect(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), EventPlayer(), false);
            UnitGroupSelect(lv_usedUnitGroup, EventPlayer(), true);
        }
    }

    if (((lv_usedBannerID == 15))) {
        autoCF9B91DD_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterArmored) | (1 << c_targetFilterMechanical), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoCF9B91DD_u = UnitGroupCount(autoCF9B91DD_g, c_unitCountAll);
        for (;; autoCF9B91DD_u -= 1) {
            autoCF9B91DD_var = UnitGroupUnitFromEnd(autoCF9B91DD_g, autoCF9B91DD_u);
            if (autoCF9B91DD_var == null) { break; }
            if (((UnitGetType(autoCF9B91DD_var) == "LaboratoryI") || (UnitGetType(autoCF9B91DD_var) == "LaboratoryII") || (UnitGetType(autoCF9B91DD_var) == "LaboratoryIII") || (UnitGetType(autoCF9B91DD_var) == "LaboratoryIV") || (UnitGetType(autoCF9B91DD_var) == "LaboratoryV") || (UnitGetType(autoCF9B91DD_var) == "ResearchComplexI") || (UnitGetType(autoCF9B91DD_var) == "ResearchComplexII") || (UnitGetType(autoCF9B91DD_var) == "ResearchComplexIII") || (UnitGetType(autoCF9B91DD_var) == "ResearchComplexIV"))) {
                CameraPan(EventPlayer(), UnitGetPosition(autoCF9B91DD_var), 2.0, -1, 10.0, false);
                UnitGroupSelect(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), EventPlayer(), false);
                UnitSelect(autoCF9B91DD_var, EventPlayer(), true);
            }

        }
    }

    if (((lv_usedBannerID == 20))) {
        auto7C35F628_g = UnitGroup(null, EventPlayer(), RegionEntireMap(), UnitFilter((1 << c_targetFilterArmored) | (1 << c_targetFilterMechanical), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto7C35F628_u = UnitGroupCount(auto7C35F628_g, c_unitCountAll);
        for (;; auto7C35F628_u -= 1) {
            auto7C35F628_var = UnitGroupUnitFromEnd(auto7C35F628_g, auto7C35F628_u);
            if (auto7C35F628_var == null) { break; }
            if ((UnitGetCustomValue(auto7C35F628_var, 0) < 0.4)) {
                UnitGroupAdd(lv_usedUnitGroup, auto7C35F628_var);
                MinimapPing(PlayerGroupSingle(EventPlayer()), UnitGetPosition(auto7C35F628_var), 4.0, Color(100.00, 0.00, 0.00));
            }

            UnitGroupSelect(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), EventPlayer(), false);
            UnitGroupSelect(lv_usedUnitGroup, EventPlayer(), true);
        }
    }

    if (((lv_usedBannerID == 31))) {
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BannerUse_Init () {
    gt_BannerUse = TriggerCreate("gt_BannerUse_Func");
    TriggerAddEventDialogControl(gt_BannerUse, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PvP Victory
//--------------------------------------------------------------------------------------------------
bool gt_PvPVictory_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_totalPopulation;
    int[10] lv_victoryPopulation;
    fixed[10] lv_victoryPercentage;
    int lv_victor;

    // Automatic Variable Declarations
    playergroup auto4A91A9AD_g;
    int auto4A91A9AD_var;
    playergroup autoA84FC849_g;
    int autoA84FC849_var;
    playergroup auto442E9B2E_g;
    int auto442E9B2E_var;
    const int auto5F019974_n = 10;
    int auto5F019974_i;
    playergroup autoC55CDCDD_g;
    int autoC55CDCDD_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(240.0, c_timeGame);
    auto4A91A9AD_g = gv_users;
    auto4A91A9AD_var = -1;
    while (true) {
        auto4A91A9AD_var = PlayerGroupNextPlayer(auto4A91A9AD_g, auto4A91A9AD_var);
        if (auto4A91A9AD_var < 0) { break; }
        lv_victoryPopulation[auto4A91A9AD_var] = 0;
        if ((gv_subjugated[auto4A91A9AD_var] == true)) {
            lv_victoryPopulation[gv_subjugator[auto4A91A9AD_var]] += gv_population[auto4A91A9AD_var];
            lv_totalPopulation += gv_population[auto4A91A9AD_var];
        }
        else {
            lv_victoryPopulation[auto4A91A9AD_var] += gv_population[auto4A91A9AD_var];
            lv_totalPopulation += gv_population[auto4A91A9AD_var];
        }
    }
    autoA84FC849_g = gv_users;
    autoA84FC849_var = -1;
    while (true) {
        autoA84FC849_var = PlayerGroupNextPlayer(autoA84FC849_g, autoA84FC849_var);
        if (autoA84FC849_var < 0) { break; }
        lv_victoryPopulation[autoA84FC849_var] /= 100;
    }
    lv_totalPopulation /= 100;
    auto442E9B2E_g = gv_users;
    auto442E9B2E_var = -1;
    while (true) {
        auto442E9B2E_var = PlayerGroupNextPlayer(auto442E9B2E_g, auto442E9B2E_var);
        if (auto442E9B2E_var < 0) { break; }
        lv_victoryPercentage[auto442E9B2E_var] = ((IntToFixed(lv_victoryPopulation[auto442E9B2E_var]) * 100.0) / IntToFixed(lv_totalPopulation));
        UIDisplayMessage(PlayerGroupSingle(auto442E9B2E_var), c_messageAreaSubtitle, (StringExternal("Param/Value/70D1FF7B") + (FixedToText(lv_victoryPercentage[auto442E9B2E_var], c_fixedPrecisionAny) + StringExternal("Param/Value/E3A1DBC5"))));
        if ((lv_victoryPercentage[auto442E9B2E_var] > 80.0) && (gv_victoryHappened == false)) {
            UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(auto442E9B2E_var), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(auto442E9B2E_var, false))) + (StringExternal("Param/Value/AF450F99") + (TextWithColor(FixedToText(lv_victoryPercentage[auto442E9B2E_var], 2), Color(100.00, 0.00, 0.00)) + StringExternal("Param/Value/0553DF81")))));
            lv_victor = auto442E9B2E_var;
            gv_victoryHappened = true;
            for (auto5F019974_i = 1; auto5F019974_i <= auto5F019974_n; auto5F019974_i += 1) {
                Wait(2.0, c_timeGame);
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(auto442E9B2E_var), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(auto442E9B2E_var, false))) + (StringExternal("Param/Value/48B882E1") + (TextWithColor(FixedToText(lv_victoryPercentage[auto442E9B2E_var], 2), Color(100.00, 0.00, 0.00)) + StringExternal("Param/Value/33C1745E")))));
            }
        }
        else {
            if ((lv_victoryPercentage[auto442E9B2E_var] > 50.0) && (gv_victoryHappened == false)) {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(auto442E9B2E_var), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(auto442E9B2E_var, false))) + (StringExternal("Param/Value/62E376AF") + (TextWithColor(FixedToText(lv_victoryPercentage[auto442E9B2E_var], 2), Color(100.00, 0.00, 0.00)) + StringExternal("Param/Value/C2CE9A7C")))));
            }

        }
    }
    if ((lv_victor > 0)) {
        autoC55CDCDD_g = gv_users;
        autoC55CDCDD_var = -1;
        while (true) {
            autoC55CDCDD_var = PlayerGroupNextPlayer(autoC55CDCDD_g, autoC55CDCDD_var);
            if (autoC55CDCDD_var < 0) { break; }
            if (((autoC55CDCDD_var == lv_victor) || (gv_subjugator[autoC55CDCDD_var] == lv_victor))) {
                DialogSetVisible(gv_endDialogue, PlayerGroupSingle(autoC55CDCDD_var), true);
                SoundtrackStopCurrent(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
                SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Music_TerrLow", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                TriggerEnable(TriggerGetCurrent(), false);
            }

        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PvPVictory_Init () {
    gt_PvPVictory = TriggerCreate("gt_PvPVictory_Func");
    TriggerEnable(gt_PvPVictory, false);
    TriggerAddEventTimePeriodic(gt_PvPVictory, 120.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ReC Victory
//--------------------------------------------------------------------------------------------------
bool gt_ReCVictory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_globalPopulation > (gv_playercount * 1000000))) {
        GameOver(11, c_gameOverDefeat, true, true);
        DialogSetVisible(gv_endDialogue, PlayerGroupAll(), true);
        SoundtrackStopCurrent(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Music_TerrLow", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/5B7A57EA") + (IntToText((1 * gv_playercount)) + StringExternal("Param/Value/2BEBBCBE"))));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReCVictory_Init () {
    gt_ReCVictory = TriggerCreate("gt_ReCVictory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ClassicalVictory
//--------------------------------------------------------------------------------------------------
bool gt_ClassicalVictory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_americansCapitulate == true))) {
            return false;
        }

        if (!((gv_russianCitiesAlive[1] == false))) {
            return false;
        }

        if (!((gv_russianCitiesAlive[2] == false))) {
            return false;
        }

        if (!((gv_russianCitiesAlive[3] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    GameOver(11, c_gameOverDefeat, true, true);
    DialogSetVisible(gv_endDialogue, PlayerGroupAll(), true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ClassicalVictory_Init () {
    gt_ClassicalVictory = TriggerCreate("gt_ClassicalVictory_Func");
    TriggerAddEventTimePeriodic(gt_ClassicalVictory, 10.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Capital die
//--------------------------------------------------------------------------------------------------
bool gt_Capitaldie_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto6059ABCD_g;
    int auto6059ABCD_var;

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "Capital") || (UnitGetType(EventUnit()) == "Politics")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_CentralizationofALLUNITS, true, false);
    gv_capitalsAlive -= 1;
    libNtve_gf_UnitCreateFacingPoint(1, "Settler", c_unitCreateIgnorePlacement, UnitGetOwner(EventUnit()), UnitGetPosition(EventUnit()), RegionGetCenter(RegionEntireMap()));
    gf_ResetModifiers(UnitGetOwner(EventUnit()));
    auto6059ABCD_g = gv_subjugatedPG[EventPlayer()];
    auto6059ABCD_var = -1;
    while (true) {
        auto6059ABCD_var = PlayerGroupNextPlayer(auto6059ABCD_g, auto6059ABCD_var);
        if (auto6059ABCD_var < 0) { break; }
        if ((gv_subjugator[auto6059ABCD_var] == EventPlayer())) {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/05AF06E2") + (gf_NationOfPlayer(EventPlayer()) + (StringExternal("Param/Value/251068F5") + (PlayerName(EventPlayer()) + StringExternal("Param/Value/70A5BBC7"))))));
            libNtve_gf_SetUpgradeLevelForPlayer(auto6059ABCD_var, "Subjugated", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "Subjugator", 0);
            gv_subjugated[auto6059ABCD_var] = false;
            gv_subjugator[auto6059ABCD_var] = 0;
            PlayerSetColorIndex(auto6059ABCD_var, libNtve_gf_ValueFromDataTablePlayerColor(true, libNtve_gf_ConvertColorToString(gv_colorIsImportant[auto6059ABCD_var])), true);
            PlayerGroupRemove(gv_iamasubjectandthisismyui[auto6059ABCD_var], auto6059ABCD_var);
            PlayerGroupRemove(gv_subjugatedPG[gv_subjugator[auto6059ABCD_var]], auto6059ABCD_var);
        }

    }
    UnitGroupSelect(UnitGroupSelected(EventPlayer()), EventPlayer(), false);
    UnitGroupSelect(libNtve_gf_ConvertUnitToUnitGroup(UnitLastCreated()), EventPlayer(), true);
    CameraPan(EventPlayer(), UnitGetPosition(UnitLastCreated()), 2.0, -1, 80.0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Capitaldie_Init () {
    gt_Capitaldie = TriggerCreate("gt_Capitaldie_Func");
    TriggerAddEventUnitDied(gt_Capitaldie, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Settler die
//--------------------------------------------------------------------------------------------------
bool gt_Settlerdie_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Settler"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (PlayerName(EventPlayer()) + TextWithColor(StringExternal("Param/Value/BE373116"), Color(100.00, 0.00, 0.00))));
    gf_KillCorp(EventPlayer());
    PlayerSetAlliance(0, c_allianceIdVision, EventPlayer(), true);
    PlayerSetAlliance(1, c_allianceIdVision, EventPlayer(), true);
    PlayerSetAlliance(2, c_allianceIdVision, EventPlayer(), true);
    PlayerSetAlliance(3, c_allianceIdVision, EventPlayer(), true);
    PlayerSetAlliance(4, c_allianceIdVision, EventPlayer(), true);
    PlayerSetAlliance(5, c_allianceIdVision, EventPlayer(), true);
    PlayerSetAlliance(6, c_allianceIdVision, EventPlayer(), true);
    PlayerSetAlliance(7, c_allianceIdVision, EventPlayer(), true);
    PlayerSetAlliance(8, c_allianceIdVision, EventPlayer(), true);
    PlayerSetAlliance(9, c_allianceIdVision, EventPlayer(), true);
    PlayerSetAlliance(10, c_allianceIdVision, EventPlayer(), true);
    PlayerSetAlliance(11, c_allianceIdVision, EventPlayer(), true);
    PlayerSetAlliance(12, c_allianceIdVision, EventPlayer(), true);
    PlayerSetAlliance(13, c_allianceIdVision, EventPlayer(), true);
    PlayerSetAlliance(14, c_allianceIdVision, EventPlayer(), true);
    PlayerSetAlliance(15, c_allianceIdVision, EventPlayer(), true);
    TriggerExecute(gt_ClassicalVictory, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Settlerdie_Init () {
    gt_Settlerdie = TriggerCreate("gt_Settlerdie_Func");
    TriggerAddEventUnitDied(gt_Settlerdie, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CreateVoteDialogue
//--------------------------------------------------------------------------------------------------
bool gt_CreateVoteDialogue_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto1272B6AF_g;
    int auto1272B6AF_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto1272B6AF_g = PlayerGroupAll();
    auto1272B6AF_var = -1;
    while (true) {
        auto1272B6AF_var = PlayerGroupNextPlayer(auto1272B6AF_g, auto1272B6AF_var);
        if (auto1272B6AF_var < 0) { break; }
        libNtve_gf_SetUpgradeLevelForPlayer(auto1272B6AF_var, "DiplomaticPolicyChange", 0);
        if ((PlayerType(auto1272B6AF_var) == c_playerTypeUser)) {
            gv_playercount += 1;
        }

    }
    DialogCreate(400, 570, c_anchorCenter, 0, -100, true);
    gv_voteDialogue = DialogLastCreated();
    DialogSetTitle(gv_voteDialogue, StringExternal("Param/Value/8B97C866"));
    libNtve_gf_CreateDialogItemButton(gv_voteDialogue, 350, 60, c_anchorTopLeft, 25, 120, StringExternal("Param/Value/6ABDB64E"), TextWithColor(StringExternal("Param/Value/68EB83A8"), Color(21.96, 98.82, 25.88)), "");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_scrollbar_frame.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    gv_voteAI[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_voteDialogue, 350, 60, c_anchorTopLeft, 25, 170, StringExternal("Param/Value/9D02DBB9"), TextWithColor(StringExternal("Param/Value/ED304A20"), Color(94.51, 92.55, 15.29)), "");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_scrollbar_frame.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    gv_voteAI[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_voteDialogue, 350, 60, c_anchorTopLeft, 25, 220, StringExternal("Param/Value/2CAC0647"), TextWithColor(StringExternal("Param/Value/5C19E4D4"), Color(94.51, 68.63, 15.29)), "");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_scrollbar_frame.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    gv_voteAI[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_voteDialogue, 350, 60, c_anchorTopLeft, 25, 270, StringExternal("Param/Value/531C9947"), TextWithColor(StringExternal("Param/Value/52E04B3E"), Color(96.08, 40.39, 13.73)), "");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_scrollbar_frame.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    gv_voteAI[4] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_voteDialogue, 350, 60, c_anchorTopLeft, 25, 320, StringExternal("Param/Value/E925C8B4"), TextWithColor(StringExternal("Param/Value/E0B318B9"), Color(94.90, 0.00, 0.00)), "");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_scrollbar_frame.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    gv_voteAI[5] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_voteDialogue, 350, 60, c_anchorTopLeft, 25, 370, StringExternal("Param/Value/CEA5FB88"), TextWithColor(StringExternal("Param/Value/1C44089E"), Color(59.22, 10.20, 11.37)), "");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_scrollbar_frame.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    gv_voteAI[6] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_voteDialogue, 350, 60, c_anchorTopLeft, 25, 420, StringExternal("Param/Value/345346D9"), TextWithColor(StringExternal("Param/Value/32273012"), Color(58.82, 16.08, 32.16)), "");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_scrollbar_frame.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    gv_voteAI[7] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_voteDialogue, 350, 60, c_anchorTopLeft, 25, 470, StringExternal("Param/Value/6DC3DAF5"), TextWithColor(StringExternal("Param/Value/023BF541"), Color(75.29, 75.29, 75.29)), "");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_scrollbar_frame.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    gv_voteAI[0] = DialogControlLastCreated();
    DialogSetImage(gv_voteDialogue, "Assets\\Textures\\ui_scrollbar_frame.dds");
    DialogSetVisible(gv_voteDialogue, PlayerGroupAll(), true);
    Wait(24.0, c_timeGame);
    DialogSetVisible(gv_voteDialogue, PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateVoteDialogue_Init () {
    gt_CreateVoteDialogue = TriggerCreate("gt_CreateVoteDialogue_Func");
    TriggerAddEventTimeElapsed(gt_CreateVoteDialogue, 3.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CreateVictoryVoteDialogue
//--------------------------------------------------------------------------------------------------
bool gt_CreateVictoryVoteDialogue_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(400, 290, c_anchorCenter, 0, -100, true);
    gv_victoryVote = DialogLastCreated();
    DialogSetTitle(gv_victoryVote, StringExternal("Param/Value/17336F10"));
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 350, 60, c_anchorTopLeft, 25, 100, StringExternal("Param/Value/FA39445F"), StringExternal("Param/Value/756094E7"), "");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_scrollbar_frame.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    gv_victoryVoteItem[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 350, 60, c_anchorTopLeft, 25, 150, (StringExternal("Param/Value/A8FBEB20") + (IntToText((8 * PlayerGroupCount(gv_users))) + StringExternal("Param/Value/37E560CD"))), StringExternal("Param/Value/0A1EA2B9"), "");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_scrollbar_frame.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    gv_victoryVoteItem[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 350, 60, c_anchorTopLeft, 25, 200, StringExternal("Param/Value/7B98060B"), StringExternal("Param/Value/DFB45683"), "");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_scrollbar_frame.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
    gv_victoryVoteItem[3] = DialogControlLastCreated();
    DialogSetImage(gv_victoryVote, "Assets\\Textures\\ui_scrollbar_frame.dds");
    DialogSetVisible(gv_victoryVote, PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateVictoryVoteDialogue_Init () {
    gt_CreateVictoryVoteDialogue = TriggerCreate("gt_CreateVictoryVoteDialogue_Func");
    TriggerAddEventTimeElapsed(gt_CreateVictoryVoteDialogue, 0.2, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: VoteAI
//--------------------------------------------------------------------------------------------------
bool gt_VoteAI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_individualVoting[EventPlayer()] == 0))) {
            return false;
        }

        if (!(((EventDialogControl() == gv_voteAI[0]) || (EventDialogControl() == gv_voteAI[1]) || (EventDialogControl() == gv_voteAI[2]) || (EventDialogControl() == gv_voteAI[3]) || (EventDialogControl() == gv_voteAI[4]) || (EventDialogControl() == gv_voteAI[5]) || (EventDialogControl() == gv_voteAI[6]) || (EventDialogControl() == gv_voteAI[7])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(gv_victoryVote, PlayerGroupSingle(EventPlayer()), true);
    DialogSetVisible(gv_voteDialogue, PlayerGroupSingle(EventPlayer()), false);
    if ((EventDialogControl() == gv_voteAI[1])) {
        gv_individualVoting[EventPlayer()] = 1;
        DialogControlSetEnabled(gv_voteAI[0], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetEnabled(gv_voteAI[1], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetEnabled(gv_voteAI[2], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetEnabled(gv_voteAI[3], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetEnabled(gv_voteAI[4], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetEnabled(gv_voteAI[5], PlayerGroupSingle(EventPlayer()), false);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/49073D08")));
    }
    else {
        if ((EventDialogControl() == gv_voteAI[0])) {
            gv_individualVoting[EventPlayer()] = 0;
            DialogControlSetEnabled(gv_voteAI[0], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetEnabled(gv_voteAI[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetEnabled(gv_voteAI[2], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetEnabled(gv_voteAI[3], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetEnabled(gv_voteAI[4], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetEnabled(gv_voteAI[5], PlayerGroupSingle(EventPlayer()), false);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/07D5CC2F")));
        }
        else {
            if ((EventDialogControl() == gv_voteAI[2])) {
                gv_individualVoting[EventPlayer()] = 3;
                DialogControlSetEnabled(gv_voteAI[0], PlayerGroupSingle(EventPlayer()), false);
                DialogControlSetEnabled(gv_voteAI[1], PlayerGroupSingle(EventPlayer()), false);
                DialogControlSetEnabled(gv_voteAI[2], PlayerGroupSingle(EventPlayer()), false);
                DialogControlSetEnabled(gv_voteAI[3], PlayerGroupSingle(EventPlayer()), false);
                DialogControlSetEnabled(gv_voteAI[4], PlayerGroupSingle(EventPlayer()), false);
                DialogControlSetEnabled(gv_voteAI[5], PlayerGroupSingle(EventPlayer()), false);
                DialogControlSetEnabled(gv_voteAI[6], PlayerGroupSingle(EventPlayer()), false);
                DialogControlSetEnabled(gv_voteAI[7], PlayerGroupSingle(EventPlayer()), false);
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/157E16FA")));
            }

            if ((EventDialogControl() == gv_voteAI[3])) {
                gv_aIYes += 1;
                gv_individualVoting[EventPlayer()] = 5;
                DialogControlSetEnabled(gv_voteAI[0], PlayerGroupSingle(EventPlayer()), false);
                DialogControlSetEnabled(gv_voteAI[1], PlayerGroupSingle(EventPlayer()), false);
                DialogControlSetEnabled(gv_voteAI[2], PlayerGroupSingle(EventPlayer()), false);
                DialogControlSetEnabled(gv_voteAI[3], PlayerGroupSingle(EventPlayer()), false);
                DialogControlSetEnabled(gv_voteAI[4], PlayerGroupSingle(EventPlayer()), false);
                DialogControlSetEnabled(gv_voteAI[5], PlayerGroupSingle(EventPlayer()), false);
                DialogControlSetEnabled(gv_voteAI[6], PlayerGroupSingle(EventPlayer()), false);
                DialogControlSetEnabled(gv_voteAI[7], PlayerGroupSingle(EventPlayer()), false);
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/C862FB5F")));
            }

            if ((EventDialogControl() == gv_voteAI[4])) {
                gv_aIYes += 1;
                gv_individualVoting[EventPlayer()] = 7;
                DialogControlSetEnabled(gv_voteAI[0], PlayerGroupSingle(EventPlayer()), false);
                DialogControlSetEnabled(gv_voteAI[1], PlayerGroupSingle(EventPlayer()), false);
                DialogControlSetEnabled(gv_voteAI[2], PlayerGroupSingle(EventPlayer()), false);
                DialogControlSetEnabled(gv_voteAI[3], PlayerGroupSingle(EventPlayer()), false);
                DialogControlSetEnabled(gv_voteAI[4], PlayerGroupSingle(EventPlayer()), false);
                DialogControlSetEnabled(gv_voteAI[5], PlayerGroupSingle(EventPlayer()), false);
                DialogControlSetEnabled(gv_voteAI[6], PlayerGroupSingle(EventPlayer()), false);
                DialogControlSetEnabled(gv_voteAI[7], PlayerGroupSingle(EventPlayer()), false);
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/5CB9B5D8")));
            }

            if ((EventDialogControl() == gv_voteAI[5])) {
                gv_aIYes += 1;
                gv_individualVoting[EventPlayer()] = 9;
                DialogControlSetEnabled(gv_voteAI[0], PlayerGroupSingle(EventPlayer()), false);
                DialogControlSetEnabled(gv_voteAI[1], PlayerGroupSingle(EventPlayer()), false);
                DialogControlSetEnabled(gv_voteAI[2], PlayerGroupSingle(EventPlayer()), false);
                DialogControlSetEnabled(gv_voteAI[3], PlayerGroupSingle(EventPlayer()), false);
                DialogControlSetEnabled(gv_voteAI[4], PlayerGroupSingle(EventPlayer()), false);
                DialogControlSetEnabled(gv_voteAI[5], PlayerGroupSingle(EventPlayer()), false);
                DialogControlSetEnabled(gv_voteAI[6], PlayerGroupSingle(EventPlayer()), false);
                DialogControlSetEnabled(gv_voteAI[7], PlayerGroupSingle(EventPlayer()), false);
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/EA7E84CB")));
            }

            if ((EventDialogControl() == gv_voteAI[6])) {
                gv_aIYes += 1;
                gv_individualVoting[EventPlayer()] = 11;
                DialogControlSetEnabled(gv_voteAI[0], PlayerGroupSingle(EventPlayer()), false);
                DialogControlSetEnabled(gv_voteAI[1], PlayerGroupSingle(EventPlayer()), false);
                DialogControlSetEnabled(gv_voteAI[2], PlayerGroupSingle(EventPlayer()), false);
                DialogControlSetEnabled(gv_voteAI[3], PlayerGroupSingle(EventPlayer()), false);
                DialogControlSetEnabled(gv_voteAI[4], PlayerGroupSingle(EventPlayer()), false);
                DialogControlSetEnabled(gv_voteAI[5], PlayerGroupSingle(EventPlayer()), false);
                DialogControlSetEnabled(gv_voteAI[6], PlayerGroupSingle(EventPlayer()), false);
                DialogControlSetEnabled(gv_voteAI[7], PlayerGroupSingle(EventPlayer()), false);
                DialogSetVisible(gv_voteDialogue, PlayerGroupSingle(EventPlayer()), false);
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/F7849BB0")));
            }

            if ((EventDialogControl() == gv_voteAI[7])) {
                gv_aIYes += 1;
                gv_individualVoting[EventPlayer()] = 13;
                DialogControlSetEnabled(gv_voteAI[0], PlayerGroupSingle(EventPlayer()), false);
                DialogControlSetEnabled(gv_voteAI[1], PlayerGroupSingle(EventPlayer()), false);
                DialogControlSetEnabled(gv_voteAI[2], PlayerGroupSingle(EventPlayer()), false);
                DialogControlSetEnabled(gv_voteAI[3], PlayerGroupSingle(EventPlayer()), false);
                DialogControlSetEnabled(gv_voteAI[4], PlayerGroupSingle(EventPlayer()), false);
                DialogControlSetEnabled(gv_voteAI[5], PlayerGroupSingle(EventPlayer()), false);
                DialogControlSetEnabled(gv_voteAI[6], PlayerGroupSingle(EventPlayer()), false);
                DialogControlSetEnabled(gv_voteAI[7], PlayerGroupSingle(EventPlayer()), false);
                DialogSetVisible(gv_voteDialogue, PlayerGroupSingle(EventPlayer()), false);
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/61B7E339")));
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoteAI_Init () {
    gt_VoteAI = TriggerCreate("gt_VoteAI_Func");
    TriggerAddEventDialogControl(gt_VoteAI, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: VoteVictory
//--------------------------------------------------------------------------------------------------
bool gt_VoteVictory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_victoryVoting[EventPlayer()] == 0))) {
            return false;
        }

        if (!(((EventDialogControl() == gv_victoryVoteItem[1]) || (EventDialogControl() == gv_victoryVoteItem[2]) || (EventDialogControl() == gv_victoryVoteItem[3])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(gv_victoryVote, PlayerGroupSingle(EventPlayer()), false);
    if ((EventDialogControl() == gv_victoryVoteItem[1])) {
        gv_victoryVoting[EventPlayer()] = 1;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/9D072E67")));
    }

    if ((EventDialogControl() == gv_victoryVoteItem[2])) {
        gv_victoryVoting[EventPlayer()] = 2;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/00B98E9F")));
    }

    if ((EventDialogControl() == gv_victoryVoteItem[3])) {
        gv_victoryVoting[EventPlayer()] = 3;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/A46FC38B")));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoteVictory_Init () {
    gt_VoteVictory = TriggerCreate("gt_VoteVictory_Func");
    TriggerAddEventDialogControl(gt_VoteVictory, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: EndVote
//--------------------------------------------------------------------------------------------------
bool gt_EndVote_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto94703219_g;
    int auto94703219_var;
    playergroup auto51658086_g;
    int auto51658086_var;
    playergroup auto59875129_g;
    int auto59875129_var;
    const int auto4D6731DF_n = 15;
    int auto4D6731DF_i;
    playergroup auto8FE48500_g;
    int auto8FE48500_var;
    const int autoF8AA87B7_n = 7;
    int autoF8AA87B7_i;
    playergroup autoE6B9FEF0_g;
    int autoE6B9FEF0_var;
    const int autoEEA30465_n = 23;
    int autoEEA30465_i;
    playergroup autoC36A59A5_g;
    int autoC36A59A5_var;
    const int autoEAE3DA37_n = 30;
    int autoEAE3DA37_i;
    playergroup autoB5D22E81_g;
    int autoB5D22E81_var;
    const int autoD0484BC4_n = 40;
    int autoD0484BC4_i;
    unitgroup auto46032DD2_g;
    int auto46032DD2_u;
    unit auto46032DD2_var;
    playergroup auto30763520_g;
    int auto30763520_var;
    const int autoF40BC21A_n = 50;
    int autoF40BC21A_i;
    unitgroup autoE31F7357_g;
    int autoE31F7357_u;
    unit autoE31F7357_var;
    unitgroup autoE2D6D9CE_g;
    int autoE2D6D9CE_u;
    unit autoE2D6D9CE_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto94703219_g = gv_users;
    auto94703219_var = -1;
    while (true) {
        auto94703219_var = PlayerGroupNextPlayer(auto94703219_g, auto94703219_var);
        if (auto94703219_var < 0) { break; }
        gv_aIDifficulty += gv_individualVoting[auto94703219_var];
    }
    auto51658086_g = gv_users;
    auto51658086_var = -1;
    while (true) {
        auto51658086_var = PlayerGroupNextPlayer(auto51658086_g, auto51658086_var);
        if (auto51658086_var < 0) { break; }
        if ((gv_individualVoting[auto51658086_var] == 0)) {
            gv_aINo += 1;
        }

    }
    if ((gv_aINo > (PlayerGroupCount(gv_users) / 2))) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/032803BA"));
        autoE31F7357_g = UnitGroup(null, 11, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoE31F7357_u = UnitGroupCount(autoE31F7357_g, c_unitCountAll);
        for (;; autoE31F7357_u -= 1) {
            autoE31F7357_var = UnitGroupUnitFromEnd(autoE31F7357_g, autoE31F7357_u);
            if (autoE31F7357_var == null) { break; }
            UnitRemove(autoE31F7357_var);
        }
        autoE2D6D9CE_g = UnitGroup(null, 10, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoE2D6D9CE_u = UnitGroupCount(autoE2D6D9CE_g, c_unitCountAll);
        for (;; autoE2D6D9CE_u -= 1) {
            autoE2D6D9CE_var = UnitGroupUnitFromEnd(autoE2D6D9CE_g, autoE2D6D9CE_u);
            if (autoE2D6D9CE_var == null) { break; }
            UnitRemove(autoE2D6D9CE_var);
        }
        TriggerEnable(gt_AmericanScript, false);
        TriggerEnable(gt_AmericanWar, false);
        TriggerEnable(gt_StartRussia, false);
        TriggerEnable(gt_RussianEconomy, false);
        libNtve_gf_SetPlayerGroupAlliance(gv_users, libNtve_ge_AllianceSetting_Neutral);
        gv_aIDifficulty = 0;
        DialogControlSetEnabled(gv_victoryVoteItem[3], PlayerGroupAll(), false);
        DialogControlSetEnabled(gv_victoryVoteItem[1], PlayerGroupAll(), true);
        DialogControlSetEnabled(gv_victoryVoteItem[2], PlayerGroupAll(), true);
    }
    else {
        TriggerEnable(gt_CheckExsistnceOfRussianCitiesCheckExsistenceOfAmericanCities, true);
        if ((gv_aIDifficulty > (gv_playercount * 6))) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ShieldBatteryNerazim2", 0, 11, Point(249.0, 187.0));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ShieldBatteryNerazim2", 0, 11, Point(253.0, 173.0));
            libNtve_gf_SetUpgradeLevelForPlayer(1, "LaserInterception", 1);
            gv_aIDifficulty = 6;
            TechTreeUpgradeAddLevel(11, "RussianSkyscraperDifficulty", 10);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/9C4FF2C6"));
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/F8F386C6"));
            auto46032DD2_g = UnitGroup(null, 12, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto46032DD2_u = UnitGroupCount(auto46032DD2_g, c_unitCountAll);
            for (;; auto46032DD2_u -= 1) {
                auto46032DD2_var = UnitGroupUnitFromEnd(auto46032DD2_g, auto46032DD2_u);
                if (auto46032DD2_var == null) { break; }
                UnitRemove(auto46032DD2_var);
            }
            libNtve_gf_SetAlliance(10, 11, libNtve_ge_AllianceSetting_AllyWithSharedVision);
            libNtve_gf_SetAlliance(1, 12, libNtve_ge_AllianceSetting_Enemy);
            libNtve_gf_SetAlliance(2, 12, libNtve_ge_AllianceSetting_Enemy);
            libNtve_gf_SetAlliance(3, 12, libNtve_ge_AllianceSetting_Enemy);
            libNtve_gf_SetAlliance(4, 12, libNtve_ge_AllianceSetting_Enemy);
            libNtve_gf_SetUpgradeLevelForPlayer(11, "InfantryArmourUP", 6);
            libNtve_gf_SetUpgradeLevelForPlayer(11, "InfantryDamageUP", 6);
            libNtve_gf_SetAlliance(5, 12, libNtve_ge_AllianceSetting_Enemy);
            libNtve_gf_SetAlliance(6, 12, libNtve_ge_AllianceSetting_Enemy);
            libNtve_gf_SetAlliance(7, 12, libNtve_ge_AllianceSetting_Enemy);
            libNtve_gf_SetAlliance(8, 12, libNtve_ge_AllianceSetting_Enemy);
            libNtve_gf_SetAlliance(9, 12, libNtve_ge_AllianceSetting_Enemy);
            libNtve_gf_SetAlliance(10, 12, libNtve_ge_AllianceSetting_AllyWithSharedVision);
            libNtve_gf_SetAlliance(11, 12, libNtve_ge_AllianceSetting_AllyWithSharedVision);
            SoundPlay(SoundLink("BridgeHornerHorner00015", -1), PlayerGroupAll(), 100.0, 0.0);
            auto30763520_g = PlayerGroupAll();
            auto30763520_var = -1;
            while (true) {
                auto30763520_var = PlayerGroupNextPlayer(auto30763520_g, auto30763520_var);
                if (auto30763520_var < 0) { break; }
                if ((PlayerType(auto30763520_var) == c_playerTypeComputer)) {
                    for (autoF40BC21A_i = 1; autoF40BC21A_i <= autoF40BC21A_n; autoF40BC21A_i += 1) {
                        TechTreeUpgradeAddLevel(auto30763520_var, "BOSSUPGRADE", 1);
                    }
                }

            }
        }
        else {
            if ((gv_aIDifficulty > (gv_playercount * 5))) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "ShieldBatteryNerazim2", 0, 11, Point(249.0, 187.0));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "ShieldBatteryNerazim2", 0, 11, Point(253.0, 173.0));
                libNtve_gf_SetUpgradeLevelForPlayer(1, "LaserInterception", 1);
                gv_aIDifficulty = 5;
                TechTreeUpgradeAddLevel(11, "RussianSkyscraperDifficulty", 8);
                SoundPlay(SoundLink("BridgeFidgetsCadeCade00003", -1), PlayerGroupAll(), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/7D7214BF"));
                libNtve_gf_SetUpgradeLevelForPlayer(11, "InfantryArmourUP", 5);
                libNtve_gf_SetUpgradeLevelForPlayer(11, "InfantryDamageUP", 5);
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/F9F6755B"));
                libNtve_gf_SetAlliance(10, 11, libNtve_ge_AllianceSetting_AllyWithSharedVision);
                autoB5D22E81_g = PlayerGroupAll();
                autoB5D22E81_var = -1;
                while (true) {
                    autoB5D22E81_var = PlayerGroupNextPlayer(autoB5D22E81_g, autoB5D22E81_var);
                    if (autoB5D22E81_var < 0) { break; }
                    if ((PlayerType(autoB5D22E81_var) == c_playerTypeComputer)) {
                        for (autoD0484BC4_i = 1; autoD0484BC4_i <= autoD0484BC4_n; autoD0484BC4_i += 1) {
                            TechTreeUpgradeAddLevel(autoB5D22E81_var, "BOSSUPGRADE", 1);
                        }
                    }

                }
            }
            else {
                if ((gv_aIDifficulty > (gv_playercount * 4))) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ShieldBatteryNerazim2", 0, 11, Point(249.0, 187.0));
                    libNtve_gf_SetUpgradeLevelForPlayer(1, "LaserInterception", 1);
                    TechTreeUpgradeAddLevel(11, "RussianSkyscraperDifficulty", 6);
                    gv_aIDifficulty = 4;
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/72BA7172"));
                    libNtve_gf_SetUpgradeLevelForPlayer(11, "InfantryArmourUP", 4);
                    libNtve_gf_SetUpgradeLevelForPlayer(11, "InfantryDamageUP", 4);
                    libNtve_gf_SetAlliance(10, 11, libNtve_ge_AllianceSetting_AllyWithSharedVision);
                    autoC36A59A5_g = PlayerGroupAll();
                    autoC36A59A5_var = -1;
                    while (true) {
                        autoC36A59A5_var = PlayerGroupNextPlayer(autoC36A59A5_g, autoC36A59A5_var);
                        if (autoC36A59A5_var < 0) { break; }
                        if ((PlayerType(autoC36A59A5_var) == c_playerTypeComputer)) {
                            for (autoEAE3DA37_i = 1; autoEAE3DA37_i <= autoEAE3DA37_n; autoEAE3DA37_i += 1) {
                                TechTreeUpgradeAddLevel(autoC36A59A5_var, "BOSSUPGRADE", 1);
                            }
                        }

                    }
                }
                else {
                    if ((gv_aIDifficulty > (gv_playercount * 3))) {
                        libNtve_gf_SetUpgradeLevelForPlayer(1, "LaserInterception", 1);
                        TechTreeUpgradeAddLevel(11, "RussianSkyscraperDifficulty", 4);
                        gv_aIDifficulty = 3;
                        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/9768021E"));
                        libNtve_gf_SetUpgradeLevelForPlayer(11, "InfantryArmourUP", 3);
                        libNtve_gf_SetUpgradeLevelForPlayer(11, "InfantryDamageUP", 3);
                        autoE6B9FEF0_g = PlayerGroupAll();
                        autoE6B9FEF0_var = -1;
                        while (true) {
                            autoE6B9FEF0_var = PlayerGroupNextPlayer(autoE6B9FEF0_g, autoE6B9FEF0_var);
                            if (autoE6B9FEF0_var < 0) { break; }
                            if ((PlayerType(autoE6B9FEF0_var) == c_playerTypeComputer)) {
                                for (autoEEA30465_i = 1; autoEEA30465_i <= autoEEA30465_n; autoEEA30465_i += 1) {
                                    TechTreeUpgradeAddLevel(autoE6B9FEF0_var, "BOSSUPGRADE", 1);
                                }
                            }

                        }
                    }
                    else {
                        if ((gv_aIDifficulty > (gv_playercount * 2))) {
                            libNtve_gf_SetUpgradeLevelForPlayer(1, "LaserInterception", 1);
                            TechTreeUpgradeAddLevel(11, "RussianSkyscraperDifficulty", 3);
                            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/B448800B"));
                            gv_aIDifficulty = 2;
                            libNtve_gf_SetUpgradeLevelForPlayer(11, "InfantryArmourUP", 2);
                            libNtve_gf_SetUpgradeLevelForPlayer(11, "InfantryDamageUP", 2);
                            auto59875129_g = PlayerGroupAll();
                            auto59875129_var = -1;
                            while (true) {
                                auto59875129_var = PlayerGroupNextPlayer(auto59875129_g, auto59875129_var);
                                if (auto59875129_var < 0) { break; }
                                if ((PlayerType(auto59875129_var) == c_playerTypeComputer)) {
                                    for (auto4D6731DF_i = 1; auto4D6731DF_i <= auto4D6731DF_n; auto4D6731DF_i += 1) {
                                        TechTreeUpgradeAddLevel(auto59875129_var, "BOSSUPGRADE", 1);
                                    }
                                }

                            }
                            TriggerStop(gt_EndVote);
                        }
                        else {
                            if ((gv_aIDifficulty > (gv_playercount * 1))) {
                                auto8FE48500_g = PlayerGroupAll();
                                auto8FE48500_var = -1;
                                while (true) {
                                    auto8FE48500_var = PlayerGroupNextPlayer(auto8FE48500_g, auto8FE48500_var);
                                    if (auto8FE48500_var < 0) { break; }
                                    if ((PlayerType(auto8FE48500_var) == c_playerTypeComputer)) {
                                        for (autoF8AA87B7_i = 1; autoF8AA87B7_i <= autoF8AA87B7_n; autoF8AA87B7_i += 1) {
                                            TechTreeUpgradeAddLevel(auto8FE48500_var, "BOSSUPGRADE", 1);
                                        }
                                    }

                                }
                                TechTreeUpgradeAddLevel(11, "RussianSkyscraperDifficulty", 2);
                                gv_aIDifficulty = 1;
                                libNtve_gf_SetUpgradeLevelForPlayer(11, "InfantryArmourUP", 1);
                                libNtve_gf_SetUpgradeLevelForPlayer(11, "InfantryDamageUP", 1);
                                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/D11527D5"));
                                TriggerStop(gt_EndVote);
                            }
                            else {
                                if ((gv_aIDifficulty <= (gv_playercount * 1))) {
                                    TechTreeUpgradeAddLevel(11, "RussianSkyscraperDifficulty", 1);
                                    libNtve_gf_SetUpgradeLevelForPlayer(11, "InfantryArmourUP", 0);
                                    libNtve_gf_SetUpgradeLevelForPlayer(11, "InfantryDamageUP", 0);
                                    gv_aIDifficulty = 0;
                                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/65A21755"));
                                }

                            }
                        }
                    }
                }
            }
        }
    }
    if ((gv_aIDifficulty != 0)) {
        gv_aIDifficulty += 1;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EndVote_Init () {
    gt_EndVote = TriggerCreate("gt_EndVote_Func");
    TriggerAddEventTimeElapsed(gt_EndVote, 20.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: EndEndVote
//--------------------------------------------------------------------------------------------------
bool gt_EndEndVote_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_bannerLoop;
    int lv_possibleLefttovote;
    int lv_loser;
    int lv_eliminated;
    int lv_lowestBidder;
    int[4] lv_theVoteForDif;

    // Automatic Variable Declarations
    playergroup auto9F67C2AD_g;
    int auto9F67C2AD_var;
    playergroup auto29969F0E_g;
    int auto29969F0E_var;
    playergroup autoD5EEFAA6_g;
    int autoD5EEFAA6_var;
    playergroup auto6A75688D_g;
    int auto6A75688D_var;

    // Variable Initialization
    lv_possibleLefttovote = 3;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_theVoteForDif[3] = 0;
    lv_theVoteForDif[2] = 0;
    lv_theVoteForDif[1] = 0;
    auto9F67C2AD_g = gv_users;
    auto9F67C2AD_var = -1;
    while (true) {
        auto9F67C2AD_var = PlayerGroupNextPlayer(auto9F67C2AD_g, auto9F67C2AD_var);
        if (auto9F67C2AD_var < 0) { break; }
        if ((gv_victoryVoting[auto9F67C2AD_var] == 1)) {
            lv_theVoteForDif[1] += 1;
        }

        if ((gv_victoryVoting[auto9F67C2AD_var] == 2)) {
            lv_theVoteForDif[2] += 1;
        }

        if ((gv_victoryVoting[auto9F67C2AD_var] == 3)) {
            lv_theVoteForDif[3] += 1;
        }

    }
    auto29969F0E_g = gv_users;
    auto29969F0E_var = -1;
    while (true) {
        auto29969F0E_var = PlayerGroupNextPlayer(auto29969F0E_g, auto29969F0E_var);
        if (auto29969F0E_var < 0) { break; }
        gv_victoryVoting[auto29969F0E_var] = 0;
    }
    lv_lowestBidder = 100;
    if ((lv_theVoteForDif[1] < lv_lowestBidder)) {
        lv_lowestBidder = lv_theVoteForDif[1];
        lv_loser = 1;
    }

    if ((lv_theVoteForDif[2] < lv_lowestBidder)) {
        lv_lowestBidder = lv_theVoteForDif[2];
        lv_loser = 2;
    }

    if ((lv_theVoteForDif[3] < lv_lowestBidder)) {
        lv_lowestBidder = lv_theVoteForDif[3];
        lv_loser = 3;
    }

    lv_eliminated = lv_loser;
    DialogControlSetEnabled(gv_victoryVoteItem[lv_eliminated], PlayerGroupAll(), false);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/A1AA1005"));
    DialogSetVisible(gv_victoryVote, PlayerGroupAll(), true);
    lv_theVoteForDif[3] = 0;
    lv_theVoteForDif[2] = 0;
    lv_theVoteForDif[1] = 0;
    Wait(12.0, c_timeGame);
    autoD5EEFAA6_g = gv_users;
    autoD5EEFAA6_var = -1;
    while (true) {
        autoD5EEFAA6_var = PlayerGroupNextPlayer(autoD5EEFAA6_g, autoD5EEFAA6_var);
        if (autoD5EEFAA6_var < 0) { break; }
        if ((gv_victoryVoting[autoD5EEFAA6_var] == 1)) {
            lv_theVoteForDif[1] += 1;
        }

        if ((gv_victoryVoting[autoD5EEFAA6_var] == 2)) {
            lv_theVoteForDif[2] += 1;
        }

        if ((gv_victoryVoting[autoD5EEFAA6_var] == 3)) {
            lv_theVoteForDif[3] += 1;
        }

    }
    lv_lowestBidder = 0;
    lv_loser = 3;
    if ((lv_theVoteForDif[1] > lv_lowestBidder)) {
        lv_lowestBidder = lv_theVoteForDif[1];
        lv_loser = 1;
    }

    if ((lv_theVoteForDif[2] > lv_lowestBidder)) {
        lv_lowestBidder = lv_theVoteForDif[2];
        lv_loser = 2;
    }

    if ((lv_theVoteForDif[3] > lv_lowestBidder)) {
        lv_lowestBidder = lv_theVoteForDif[3];
        lv_loser = 3;
    }

    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    if ((lv_loser == 1)) {
        gv_victoryType = 1;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/0A1B54C9"));
        TriggerEnable(gt_PvPVictory, true);
        gv_aIDifficulty -= 1;
        if ((gv_aIDifficulty < 1)) {
            gv_aIDifficulty = 1;
        }

    }

    if ((lv_loser == 2)) {
        gv_victoryType = 2;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/7EEBA6D1") + (IntToText((PlayerGroupCount(gv_users) * 2)) + StringExternal("Param/Value/C1E969E7"))));
    }

    if ((lv_loser == 3)) {
        gv_victoryType = 3;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/F0E9B0BD"));
    }

    libNtve_gf_SetPlayerGroupAlliance(gv_users, libNtve_ge_AllianceSetting_Neutral);
    auto6A75688D_g = gv_users;
    auto6A75688D_var = -1;
    while (true) {
        auto6A75688D_var = PlayerGroupNextPlayer(auto6A75688D_g, auto6A75688D_var);
        if (auto6A75688D_var < 0) { break; }
        gv_food[auto6A75688D_var] = 500;
        libNtve_gf_SetUpgradeLevelForPlayer(auto6A75688D_var, "CanBuildScoutbots", 1);
        gf_CreateBanner(auto6A75688D_var, 31);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Settler", c_unitCreateIgnorePlacement, auto6A75688D_var, RegionRandomPoint(RegionFromId(1)));
        CameraPan(auto6A75688D_var, RegionGetCenter(RegionFromId(1)), 0.0, -1, 10.0, false);
        DialogSetVisible(gv_dialog, PlayerGroupSingle(auto6A75688D_var), false);
        DialogSetVisible(gv_voteDialogue, PlayerGroupAll(), false);
        DialogSetVisible(gv_victoryVote, PlayerGroupAll(), false);
    }
    Wait(5.0, c_timeGame);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/1A9E2A95"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EndEndVote_Init () {
    gt_EndEndVote = TriggerCreate("gt_EndEndVote_Func");
    TriggerAddEventTimeElapsed(gt_EndEndVote, 28.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: InitialAIDifficulty
//--------------------------------------------------------------------------------------------------
bool gt_InitialAIDifficulty_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerValue;
    int lv_victoryTypeForWin;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_playerValue = PlayerGroupCount(gv_users);
    if ((gv_victoryType == 3)) {
        lv_victoryTypeForWin = 10;
    }

    if ((gv_victoryType == 2)) {
        lv_victoryTypeForWin = 9;
    }

    if ((gv_victoryType == 1)) {
        lv_victoryTypeForWin = 7;
    }

    gv_modifiedAIDifficulty = FixedToInt((lv_victoryTypeForWin * (((lv_playerValue * gv_aIDifficulty) * 0.09) + (gv_aIDifficulty * 2.0))));
    gv_arisAIDifficulty = gv_modifiedAIDifficulty;
    if ((gv_aIDifficulty == 0)) {
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/557951C7") + IntToText(gv_arisAIDifficulty)));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitialAIDifficulty_Init () {
    gt_InitialAIDifficulty = TriggerCreate("gt_InitialAIDifficulty_Func");
    TriggerAddEventTimeElapsed(gt_InitialAIDifficulty, 60.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ModifyAIDifficultyOverTime
//--------------------------------------------------------------------------------------------------
bool gt_ModifyAIDifficultyOverTime_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_mMax;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_arisAIDifficulty = (gv_modifiedAIDifficulty + (gv_globalPopulation / 100000));
    lv_mMax = FixedToInt((IntToFixed(gv_modifiedAIDifficulty) * 1.5));
    gv_arisAIDifficulty = libNtve_gf_ArithmeticIntClamp(gv_arisAIDifficulty, 1, lv_mMax);
    if ((RandomInt(0, 100) < 20) && (gv_aIDifficulty > 0)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/AC3197A4") + IntToText(gv_arisAIDifficulty)));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ModifyAIDifficultyOverTime_Init () {
    gt_ModifyAIDifficultyOverTime = TriggerCreate("gt_ModifyAIDifficultyOverTime_Func");
    TriggerAddEventTimePeriodic(gt_ModifyAIDifficultyOverTime, 180.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_MeleeInitialization_Init();
    gt_MoveChat_Init();
    gt_FixHealthBug_Init();
    gt_UnitSelected_Init();
    gt_SettlerWarnings_Init();
    gt_MonthlyTick_Init();
    gt_ShowTimeUI_Init();
    gt_TimeUI_Init();
    gt_ManageUnitLimit_Init();
    gt_ManageUnitLimit2_Init();
    gt_CollectDataYearly_Init();
    gt_CollectDataMonthly_Init();
    gt_DeselectData_Init();
    gt_SelectData_Init();
    gt_SelectDataType_Init();
    gt_SubmitSelection_Init();
    gt_GraphBaseInitUI_Init();
    gt_UnitDies_Init();
    gt_MainUI_Init();
    gt_ResearchButton_Init();
    gt_EconomicButton_Init();
    gt_EUButton_Init();
    gt_GraphButton_Init();
    gt_PlaugeGiver_Init();
    gt_AIandRebellion_Init();
    gt_Player9AIRebellionAI_Init();
    gt_ZombieConvertandPlauge_Init();
    gt_RandomPlaugeFromArmies_Init();
    gt_AutonomousZombies_Init();
    gt_MissileDefenseChangeOwnerNeutral_Init();
    gt_MissileInShield_Init();
    gt_SetTarget_Init();
    gt_ClearTargets_Init();
    gt_PingTargets_Init();
    gt_EnableDeadManHand_Init();
    gt_DisableDeadManHand_Init();
    gt_DeadHandCoolDown_Init();
    gt_AnyNukeLaunch_Init();
    gt_NukeDetonate_Init();
    gt_HydrogenBombDetonate_Init();
    gt_HalcyonBombDetonate_Init();
    gt_KillUnitsOnCreep_Init();
    gt_WorldeaterNotification_Init();
    gt_ReformGovernment_Init();
    gt_AssignNationalName_Init();
    gt_First3MinutesNameofCounties_Init();
    gt_AssignCountryIDGroup_Init();
    gt_IdTextTagSoverignty_Init();
    gt_AssignCountVariables_Init();
    gt_CultureGroupNations_Init();
    gt_AutobuildLD_Init();
    gt_AutobuildHD_Init();
    gt_AutobuildMD_Init();
    gt_AutobuildFarms_Init();
    gt_AutobuildHydrofarms_Init();
    gt_AutobuildWindmills_Init();
    gt_AutobuildFission_Init();
    gt_AutobuildFusion_Init();
    gt_AutobuildCPG_Init();
    gt_ParlimentConquered_Init();
    gt_UnitAttacked_Init();
    gt_BuildingAttacked_Init();
    gt_DOMTRAIN_Init();
    gt_Surrender_Init();
    gt_ResetAlliances_Init();
    gt_PLAYALEAVES_Init();
    gt_PLAYALEAVESSUBJECT_Init();
    gt_PLAYALEAVESDESTRUCTION_Init();
    gt_Scout_Init();
    gt_Scout2_Init();
    gt_ImTakingAwayyourScoutbots_Init();
    gt_ATEMPTINGALLIANCEOFFERFORALLY_Init();
    gt_IDO_Init();
    gt_None_Init();
    gt_CallToArmsUI_Init();
    gt_YES_Init();
    gt_Non_Init();
    gt_CeasefireUI_Init();
    gt_FINNNEEEEee_Init();
    gt_No_Init();
    gt_EmbargoPeople_Init();
    gt_DisarmPeople_Init();
    gt_YesOrNoUI_Init();
    gt_AcceptPeaceDeal_Init();
    gt_CounterPeaceDeal_Init();
    gt_PeaceConferenceUI_Init();
    gt_SendDeal_Init();
    gt_WhitePeace_Init();
    gt_ClearPeaceDeals_Init();
    gt_IfBuildingSelectedHighlightProvince_Init();
    gt_RequestSubjugate_Init();
    gt_RequestReparations_Init();
    gt_RequestChangeGovernment_Init();
    gt_RequestEmbargo_Init();
    gt_RequestDisarm_Init();
    gt_RequestReleaseVassal_Init();
    gt_RequestFullAnnex_Init();
    gt_RequestAnnex_Init();
    gt_RequestAnnexRemove_Init();
    gt_RequestCancel_Init();
    gt_UpdateTotalPeaceDeal_Init();
    gt_DeclareWarButtonPressed_Init();
    gt_CutRelationsButtonPressed_Init();
    gt_SendAllyRequestButtonPressed_Init();
    gt_SendCeasefireButtonPRessed_Init();
    gt_GoThroughDiplomaticQueue_Init();
    gt_CreditTransferanceShowUI_Init();
    gt_GibCredits_Init();
    gt_CreditTransferUI_Init();
    gt_Donate_Init();
    gt_LocalMilitia_Init();
    gt_PeacekeeperSquad_Init();
    gt_PeacekeeperHeli_Init();
    gt_PeacekeeperTruck_Init();
    gt_PresidentalVote_Init();
    gt_BeginTheElection_Init();
    gt_EUScreen_Init();
    gt_LetsRefreshVotes_Init();
    gt_TriggerVote_Init();
    gt_CountVotes_Init();
    gt_TrackVotes_Init();
    gt_TrackVotesFederation_Init();
    gt_EUInOrder_Init();
    gt_EUCooldown_Init();
    gt_EUUI_Init();
    gt_YesNo_Init();
    gt_LeaveEU_Init();
    gt_TheBirthofanEmpire_Init();
    gt_ParlimentDed_Init();
    gt_KickPlayerFromEU_Init();
    gt_InvitetoEU_Init();
    gt_DeclareIndependence_Init();
    gt_CustomLedgerForGame_Init();
    gt_Ledger_Init();
    gt_ShowLedgerandEUDialogRefreseh_Init();
    gt_HideShowLedgerUI_Init();
    gt_ShowDialog_Init();
    gt_CloseDialog_Init();
    gt_ApplyBehaviors_Init();
    gt_ChangeWarPolicy_Init();
    gt_Policies_Init();
    gt_EmperorDies_Init();
    gt_SpawnEmperor_Init();
    gt_ResetReachedCorporationEnd_Init();
    gt_ADDDEBUGPLAYERGROUPTEST_Init();
    gt_CHECKFOODREQURIED_Init();
    gt_GreatDepression_Init();
    gt_Recession_Init();
    gt_Booming_Init();
    gt_UpgradeColonies_Init();
    gt_EconomyHealth_Init();
    gt_CreditRatingSystem_Init();
    gt_OpenupPrivateLoan_Init();
    gt_OpenupRepayLoan_Init();
    gt_TakePrivateLoan_Init();
    gt_RepayLoan_Init();
    gt_RepayLoanUI_Init();
    gt_PrivateLoanUI_Init();
    gt_MasterTradeScript_Init();
    gt_BuySell_Init();
    gt_SendBuySellToVariables_Init();
    gt_ExecuteBuySell_Init();
    gt_RealTimeSliders_Init();
    gt_TradeModes_Init();
    gt_Tabs_Init();
    gt_EmbargoButton_Init();
    gt_TradeUI_Init();
    gt_BuySellUI_Init();
    gt_SetResourceHarvestorPrices_Init();
    gt_SelectCorporation_Init();
    gt_UpdateCorporationLedger_Init();
    gt_CorpTicksv10_Init();
    gt_GuardDies_Init();
    gt_ExpeditionGuardIdle_Init();
    gt_NationalizeBuyoutFunctionality_Init();
    gt_SetMiddleEastOilPrice_Init();
    gt_Desert_Init();
    gt_Snow_Init();
    gt_HarshSnow_Init();
    gt_Mountains_Init();
    gt_RDesert_Init();
    gt_RSnow_Init();
    gt_RHarshSnow_Init();
    gt_RMountains_Init();
    gt_DeclareBankruptcy_Init();
    gt_Incomev20_Init();
    gt_NationalizeResource_Init();
    gt_SELL_RESROUCES_DEBUG_Init();
    gt_HercDespawn_Init();
    gt_Dialolg_Init();
    gt_NoWanderingTags_Init();
    gt_RunHighwayCentralization_Init();
    gt_CentralizationofALLUNITS_Init();
    gt_UnitBuilt_Init();
    gt_ShowMeTheCentralization_Init();
    gt_Research_Init();
    gt_DisbandDemolish_Init();
    gt_PlaceCapital_Init();
    gt_UpgradetoMD_Init();
    gt_CreateCores_Init();
    gt_EndDialogue_Init();
    gt_EndDialogueButtinz_Init();
    gt_SelectLowDensity_Init();
    gt_SelectMediumDensity_Init();
    gt_SelectHighDensity_Init();
    gt_SelectVeryHighDensity_Init();
    gt_SelectAllHomes_Init();
    gt_SelectFarm_Init();
    gt_SelectHydrofarm_Init();
    gt_SelectAllFarms_Init();
    gt_SelectCoal_Init();
    gt_SelectMetal_Init();
    gt_SelectMine_Init();
    gt_SelectBore_Init();
    gt_SelectAllMetal_Init();
    gt_SelectOil_Init();
    gt_SelectGeo_Init();
    gt_HowFarAwayAreEmpiresFromEachOther_Init();
    gt_ResearchDiffusion_Init();
    gt_ResearchCompleted_Init();
    gt_DoTheResearch_Init();
    gt_ResearchCalculation_Init();
    gt_ResearchMenuFrame_Init();
    gt_TabFunctionality_Init();
    gt_SelectedIcon_Init();
    gt_RefresehSelectedIcon_Init();
    gt_CommittoResearch_Init();
    gt_SetResearchCostsResearchList_Init();
    gt_UpdateCurrentResearchinMenu_Init();
    gt_CancelORGivePriorityToResearch_Init();
    gt_RussiaRazeResist_Init();
    gt_StartRussia_Init();
    gt_Rusinfo_Init();
    gt_RussianEconomy_Init();
    gt_UpdateGuerillaTargets_Init();
    gt_HuntTargets_Init();
    gt_VolgogradBuff_Init();
    gt_MoscowBuff_Init();
    gt_NizhnevartovskBuff_Init();
    gt_SetRussianBaseStats_Init();
    gt_RussianCityCapture_Init();
    gt_CheckExsistnceOfRussianCitiesCheckExsistenceOfAmericanCities_Init();
    gt_RussianCreateGarrison_Init();
    gt_HostileRunAround_Init();
    gt_MiddleEastConfederationLeave_Init();
    gt_KillMiddleEastTroops_Init();
    gt_AmericanWar_Init();
    gt_InitAmerica_Init();
    gt_CaptureNewYork_Init();
    gt_AmericanScript_Init();
    gt_KenedysLife_Init();
    gt_KenedyShot_Init();
    gt_CarrierEscorts_Init();
    gt_StartAI_Init();
    gt_Players_Init();
    gt_UnitCreated_Init();
    gt_SetHostiles_Init();
    gt_Donotstandstillrussiaoramerica_Init();
    gt_AttacktheEuropeRussia_Init();
    gt_AttacktheEuropeAmerica_Init();
    gt_SendShit_Init();
    gt_Send_Init();
    gt_SendEvil_Init();
    gt_Stopthelaggyearlygametutorialbanners_Init();
    gt_DontSettleOnSnowDesertMountains_Init();
    gt_BuildHomes_Init();
    gt_BuildFarmsifcapitalnotinsnowdesertmountains_Init();
    gt_YouHaveFarmsinBadTerrain_Init();
    gt_EmptyResearchQueue_Init();
    gt_LaboratoryUpgradesNotHighEnough_Init();
    gt_ResearchingDangerousTech_Init();
    gt_YouShouldMechanizeyourCountry_Init();
    gt_Youhavetakenoutloans_Init();
    gt_LowCentralization_Init();
    gt_YouareatwarFoundEUIncreaseWarStatusDecreaseWarStatus_Init();
    gt_BannerApplication_Init();
    gt_BannerCreation_Init();
    gt_HideBanner_Init();
    gt_BannerUse_Init();
    gt_PvPVictory_Init();
    gt_ReCVictory_Init();
    gt_ClassicalVictory_Init();
    gt_Capitaldie_Init();
    gt_Settlerdie_Init();
    gt_CreateVoteDialogue_Init();
    gt_CreateVictoryVoteDialogue_Init();
    gt_VoteAI_Init();
    gt_VoteVictory_Init();
    gt_EndVote_Init();
    gt_EndEndVote_Init();
    gt_InitialAIDifficulty_Init();
    gt_ModifyAIDifficultyOverTime_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
